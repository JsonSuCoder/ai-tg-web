{"version":3,"file":"7768.23a17a57abe66cacb5be.js","mappings":"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","sources":["webpack://TeleGPT/./src/global/actions/ui/calls.ts","webpack://TeleGPT/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://TeleGPT/./src/global/reducers/reactions.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/messages.ts","webpack://TeleGPT/./src/global/actions/api/messages.ts","webpack://TeleGPT/./src/global/actions/api/symbols.ts","webpack://TeleGPT/./src/global/actions/api/globalSearch.ts","webpack://TeleGPT/./src/global/actions/api/middleSearch.ts","webpack://TeleGPT/./src/global/actions/api/management.ts","webpack://TeleGPT/./src/global/actions/api/sync.ts","webpack://TeleGPT/./src/global/actions/api/accounts.ts","webpack://TeleGPT/./src/global/actions/api/users.ts","webpack://TeleGPT/./src/util/PopupManager.ts","webpack://TeleGPT/./src/global/reducers/bots.ts","webpack://TeleGPT/./src/global/actions/api/bots.ts","webpack://TeleGPT/./src/global/actions/api/twoFaSettings.ts","webpack://TeleGPT/./src/util/payments/stripe.ts","webpack://TeleGPT/./src/global/actions/api/payments.ts","webpack://TeleGPT/./src/util/requestQuery.ts","webpack://TeleGPT/./src/global/actions/api/stars.ts","webpack://TeleGPT/./src/global/actions/api/reactions.ts","webpack://TeleGPT/./src/global/actions/api/statistics.ts","webpack://TeleGPT/./src/global/actions/api/stories.ts","webpack://TeleGPT/./src/global/actions/ui/chats.ts","webpack://TeleGPT/./src/global/actions/ui/bots.ts","webpack://TeleGPT/./src/global/helpers/meta.ts","webpack://TeleGPT/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://TeleGPT/./src/global/actions/ui/messages.ts","webpack://TeleGPT/./src/global/actions/ui/globalSearch.ts","webpack://TeleGPT/./src/global/actions/ui/middleSearch.ts","webpack://TeleGPT/./src/global/actions/ui/stickerSearch.ts","webpack://TeleGPT/./src/global/actions/ui/account.ts","webpack://TeleGPT/./src/global/actions/ui/users.ts","webpack://TeleGPT/./src/util/getIsAppUpdateNeeded.ts","webpack://TeleGPT/./src/util/updateIcon.ts","webpack://TeleGPT/./src/util/updatePageTitle.ts","webpack://TeleGPT/./src/global/actions/ui/misc.ts","webpack://TeleGPT/./src/global/actions/ui/payments.ts","webpack://TeleGPT/./src/global/actions/ui/mediaViewer.ts","webpack://TeleGPT/./src/global/actions/ui/passcode.ts","webpack://TeleGPT/./src/global/actions/ui/stars.ts","webpack://TeleGPT/./src/global/actions/ui/reactions.ts","webpack://TeleGPT/./src/global/actions/ui/stories.ts","webpack://TeleGPT/./src/global/actions/ui/statistics.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/chats.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/users.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/symbols.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/misc.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/settings.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/calls.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/payments.ts","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-carousel.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-wrapper.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-modal.tsx","webpack://TeleGPT/./src/hooks/useCacheBuster.ts","webpack://TeleGPT/./src/components/right/hooks/useTransitionFixes.ts","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-attachments-modal.tsx","webpack://TeleGPT/./src/hooks/usePreventPinchZoomGesture.ts","webpack://TeleGPT/./src/components/calls/ActiveCallHeader.async.tsx","webpack://TeleGPT/./src/components/calls/group/GroupCall.async.tsx","webpack://TeleGPT/./src/components/calls/phone/PhoneCall.async.tsx","webpack://TeleGPT/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://TeleGPT/./src/components/common/DeleteMessageModal.async.tsx","webpack://TeleGPT/./src/components/common/StickerSetModal.async.tsx","webpack://TeleGPT/./src/components/common/UnreadCounter.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://TeleGPT/./src/components/left/ArchivedChats.async.tsx","webpack://TeleGPT/./src/components/left/NewChatButton.tsx","webpack://TeleGPT/./src/components/left/search/LeftSearch.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://TeleGPT/./src/components/left/main/ChatFolders.tsx","webpack://TeleGPT/./src/components/left/main/ContactList.async.tsx","webpack://TeleGPT/./src/hooks/useConnectionStatus.ts","webpack://TeleGPT/./src/hooks/window/useBrowserOnline.ts","webpack://TeleGPT/./src/components/left/ConnectionStatusOverlay.tsx","webpack://TeleGPT/./src/components/left/main/AccountMenuItems.tsx","webpack://TeleGPT/./src/components/left/main/LeftSideMenuItems.tsx","webpack://TeleGPT/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://TeleGPT/./src/components/left/main/StatusButton.tsx","webpack://TeleGPT/./src/components/left/main/LeftMainHeader.tsx","webpack://TeleGPT/./src/components/left/main/LeftMain.tsx","webpack://TeleGPT/./src/components/left/newChat/NewChat.async.tsx","webpack://TeleGPT/./src/components/left/settings/Settings.async.tsx","webpack://TeleGPT/./src/components/left/LeftColumn.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://TeleGPT/./src/components/middle/MessageListHistoryHandler.tsx","webpack://TeleGPT/./src/components/chatAssistant/assets/lottieData/index.ts","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-button.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-wrapper.tsx","webpack://TeleGPT/./src/components/middle/hooks/usePinnedMessage.ts","webpack://TeleGPT/./src/components/chatAssistant/multi-input.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/FloatingActionButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/InputText.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/Spinner.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/TextArea.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/prompt.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/rooms-tab.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/summary-header-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/urgent-notification.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.module.scss?0db0","webpack://TeleGPT/./src/components/chatAssistant/global-summary/GlobalSummaryWrapper.tsx","webpack://TeleGPT/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://TeleGPT/./src/components/common/SeenByModal.async.tsx","webpack://TeleGPT/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://TeleGPT/./src/components/middle/ChatLanguageModal.async.tsx","webpack://TeleGPT/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://TeleGPT/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://TeleGPT/./src/components/middle/ScrollDownButton.tsx","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://TeleGPT/./src/components/middle/helpers/groupMessages.ts","webpack://TeleGPT/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://TeleGPT/./src/components/middle/ContactGreeting.tsx","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.tsx","webpack://TeleGPT/./src/components/middle/hooks/useMessageObservers.ts","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCard.tsx","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCardMenu.tsx","webpack://TeleGPT/./src/components/middle/message/SenderGroupAvatar.tsx","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredMessage.tsx","webpack://TeleGPT/./src/components/middle/MessageListContent.tsx","webpack://TeleGPT/./src/components/middle/hooks/useScrollHooks.ts","webpack://TeleGPT/./src/components/middle/NoMessages.tsx","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.tsx","webpack://TeleGPT/./src/components/middle/MessageList.tsx","webpack://TeleGPT/./src/hooks/useNativeCopySelectedMessages.ts","webpack://TeleGPT/./src/components/middle/hooks/useStickyDates.ts","webpack://TeleGPT/./src/components/middle/hooks/useContainerHeight.ts","webpack://TeleGPT/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://TeleGPT/./src/hooks/useMessageMediaMetadata.ts","webpack://TeleGPT/./src/components/middle/panes/AudioPlayer.tsx","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.tsx","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeader.tsx","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.tsx","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.tsx","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://TeleGPT/./src/components/middle/panes/ChatReportPane.tsx","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://TeleGPT/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/ReactorListModal.async.tsx","webpack://TeleGPT/./src/components/middle/search/MiddleSearch.async.tsx","webpack://TeleGPT/./src/components/middle/MiddleColumn.tsx","webpack://TeleGPT/./src/hooks/useResize.ts","webpack://TeleGPT/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://TeleGPT/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://TeleGPT/./src/components/modals/ModalContainer.tsx","webpack://TeleGPT/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://TeleGPT/./src/components/modals/boost/BoostModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://TeleGPT/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://TeleGPT/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://TeleGPT/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://TeleGPT/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://TeleGPT/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/map/MapModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://TeleGPT/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://TeleGPT/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://TeleGPT/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://TeleGPT/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://TeleGPT/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://TeleGPT/./src/components/payment/PaymentModal.async.tsx","webpack://TeleGPT/./src/components/payment/ReceiptModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://TeleGPT/./src/components/right/AddChatMembers.tsx","webpack://TeleGPT/./src/components/right/CreateTopic.async.tsx","webpack://TeleGPT/./src/components/right/EditTopic.async.tsx","webpack://TeleGPT/./src/components/right/GifSearch.async.tsx","webpack://TeleGPT/./src/components/right/management/Management.async.tsx","webpack://TeleGPT/./src/components/right/PollResults.async.tsx","webpack://TeleGPT/./src/components/right/hooks/useProfileState.ts","webpack://TeleGPT/./src/components/right/hooks/useProfileViewportIds.ts","webpack://TeleGPT/./src/components/common/gift/SavedGift.module.scss?4193","webpack://TeleGPT/./src/components/common/gift/SavedGift.tsx","webpack://TeleGPT/./src/components/common/PreviewMedia.tsx","webpack://TeleGPT/./src/components/right/Profile.tsx","webpack://TeleGPT/./src/components/right/RightHeader.tsx","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.tsx","webpack://TeleGPT/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://TeleGPT/./src/components/common/AboutMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://TeleGPT/./src/components/right/statistics/Statistics.async.tsx","webpack://TeleGPT/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://TeleGPT/./src/components/right/StickerSearch.async.tsx","webpack://TeleGPT/./src/components/right/RightColumn.tsx","webpack://TeleGPT/./src/components/story/StoryViewer.async.tsx","webpack://TeleGPT/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/BotTrustModal.async.tsx","webpack://TeleGPT/./src/components/main/DeleteFolderDialog.async.tsx","webpack://TeleGPT/./src/components/main/Dialogs.async.tsx","webpack://TeleGPT/./src/components/main/DownloadManager.tsx","webpack://TeleGPT/./src/components/main/DraftRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/GameModal.tsx","webpack://TeleGPT/./src/components/main/HistoryCalendar.async.tsx","webpack://TeleGPT/./src/components/main/NewContactModal.async.tsx","webpack://TeleGPT/./src/components/main/Notifications.async.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayModal.async.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://TeleGPT/./src/components/main/SafeLinkModal.async.tsx","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.tsx","webpack://TeleGPT/./src/components/main/Main.tsx","webpack://TeleGPT/./src/components/main/LockScreen.tsx","webpack://TeleGPT/./src/components/main/LockScreen.module.scss?8252","webpack://TeleGPT/./src/bundles/main.ts"],"sourcesContent":["import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line @stylistic/max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: 'Sorry, your browser doesn\\'t support group calls',\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload;\n\n  if (!sounds?.[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    return message?.content.text!;\n  });\n  const { currentUserId } = global;\n  const userName = getUserFullName(selectUser(global, currentUserId!));\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n    userId: currentUserId!,\n    userName: userName!,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency: isTon ? 'TON' : 'XTR', tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency: isTon ? 'TON' : 'XTR',\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  RESALE_GIFTS_LIMIT,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n    isUserPortraitShown: false,\n    isChatInfoShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), userId, chatId } = payload || {};\n  const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n  if (chatId && chatId !== currentChatId) {\n    actions.openChat({ id: chatId, tabId });\n  }\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isUserPortraitShown: true,\n    userPortraitUserId: userId,\n  }, tabId);\n  global = { ...global };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('toggleUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isUserPortraitShown = force !== undefined ? force : !selectTabState(global, tabId).isUserPortraitShown;\n\n  global = updateTabState(global, { isUserPortraitShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useRef } from 'react';\nimport { Carousel } from 'antd';\nimport type { CarouselRef } from 'antd/es/carousel';\nimport cx from 'classnames';\n\nimport { CloseIcon } from '../../icons';\n\nimport './guidance.scss';\n\nconst CarouselItem = ({ className, children }:{ className:string;children?:React.ReactNode }) => {\n  return (\n    <div className={cx('guidance-carousel-item', className)}>\n      <div className=\"w-[42%] pl-[50px] pt-[5%] pb-[12%] h-full flex flex-col justify-center\">\n        {children}\n      </div>\n    </div>\n  );\n};\nconst GuidanceCarousel = ({ handleClose }:{ handleClose:()=>void }) => {\n  const carouselRef = useRef<CarouselRef>(null);\n  const handleNextClick = (step:number) => {\n    carouselRef.current?.goTo(step);\n    if (step === 4) {\n      handleClose();\n    }\n  };\n  return (\n    <div>\n      <div className=\"guidance-bubble\" />\n      <div className=\"absolute top-[10px] right-[10px] cursor-pointer text-[#A89E9E] z-10\" onClick={handleClose}>\n        <CloseIcon size={24} />\n      </div>\n      <Carousel className=\"guidance-carousel\" ref={carouselRef}>\n        <CarouselItem className=\"guidance-summary\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Chat Summary</div>\n          <div className=\"text-[14px]\">\n            Message Summarization uses AI to extract key points from IM chats and provide regular summaries, helping users stay updated.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(1)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-translation\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Translation & Grammar Check</div>\n          <div className=\"text-[14px]\">\n            Instant Translation: Real-time translation with auto language detection.\n            Error Detection: Spots spelling, grammar, and structure issues.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(2)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-meeting\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Meeting Scheduler</div>\n          <div className=\"text-[14px]\">\n            Automatically detects meeting chats, gathers details, and sends calendar invites—all within the conversation.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(3)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-actions\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Action Items</div>\n          <div className=\"text-[14px]\">\n            AI picks out tasks and follow-ups from chats in real time—no manual notes needed.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(4)}>Next</div>\n        </CarouselItem>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default GuidanceCarousel;\n","import React from '../../../../lib/teact/teact';\n\nimport { injectComponent } from '../../injectComponent';\nimport GuidanceCarousel from './guidance-carousel';\n\nconst GuidanceWrapper = ({ handleClose }: { handleClose: () => void }) => {\n  const containerRef = injectComponent({\n    component: GuidanceCarousel,\n    props: {\n      handleClose,\n    },\n  });\n  return (\n    <div ref={containerRef} />\n  );\n};\n\nexport default GuidanceWrapper;\n","import React, { useState } from '../../../../lib/teact/teact';\n\nimport GuidanceWrapper from './guidance-wrapper';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Modal from '../../../ui/Modal';\n\nimport './guidance.scss';\n\nconst GuidanceModal = () => {\n  const telegptGuidance = localStorage.getItem('telegpt-guidance') === 'true';\n  const [isFirstIn, setIsFirstIn] = useState<Boolean>(!telegptGuidance);\n  const handleClose = useLastCallback(() => {\n    localStorage.setItem('telegpt-guidance', 'true');\n    setIsFirstIn(false);\n  });\n  if (!isFirstIn) {\n    return undefined;\n  }\n  return (\n    <Modal\n      isOpen\n      noBackdropClose\n      onClose={handleClose}\n      className=\"guidance-modal\"\n    >\n      <GuidanceWrapper handleClose={handleClose} />\n    </Modal>\n  );\n};\n\nexport default GuidanceModal;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type {\n  ProfileTabType, SharedMediaType,\n} from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport {\n  getMessageDocument,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport {\n  checkIsUrl,\n  documentSummary, photoSummary, videoSummary, webPageSummary,\n} from '../utils/ai-analyse-message';\n\nimport useCacheBuster from '../../../hooks/useCacheBuster';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useTransitionFixes from '../../right/hooks/useTransitionFixes';\n\nimport Document from '../../common/Document';\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\n\nimport './room-attachments-modal.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chatId: string;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  isSavedDialog?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n];\n\nconst RoomAttachmentsModal: FC<OwnProps & StateProps> = ({\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  isChatProtected,\n  nextProfileTab,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    searchSharedMediaMessages,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    arr.push(...TABS);\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [lang]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  // 简化版的viewport管理，只处理media、documents、links\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  // 直接使用foundIds作为viewportIds\n  const viewportIds = foundIds;\n  const getMore = useLastCallback(() => {\n    if (searchSharedMediaMessages) {\n      searchSharedMediaMessages();\n    }\n  });\n  const isFirstTab = resultType === 'media';\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    const message = messagesById?.[messageId];\n    if (message) {\n      const {\n        photo, document, webPage, text, video,\n      } = message.content;\n      const isUrl = checkIsUrl(text?.text);\n      if (photo) {\n        photoSummary(message);\n      } else if (webPage || isUrl) {\n        webPageSummary(message);\n      } else if (document) {\n        documentSummary(message);\n      } else if (video) {\n        videoSummary(message);\n      }\n      onClose();\n    }\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  function renderContent() {\n    if (!viewportIds || !messagesById) {\n      const noSpinner = isFirstTab;\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              message={messagesById[id]}\n              observeIntersection={observeIntersectionForMedia}\n              canAutoLoad\n              autoLoadFileMaxSizeMb={SHARED_MEDIA_SLICE}\n              // eslint-disable-next-line react/jsx-no-bind\n              onSelect={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              onlyWebPage\n              observeIntersection={observeIntersectionForMedia}\n              // eslint-disable-next-line react/jsx-no-bind\n              onMessageClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  // 弹窗未打开时不渲染组件内容，避免执行内部逻辑\n  if (!isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"room-attachments-modal\"\n      title=\"Select a file\"\n      hasCloseButton\n    >\n      <div\n        ref={containerRef}\n        className=\"profile-container\"\n      >\n        <div className=\"shared-media\">\n          <div\n            className={buildClassName(\n              'profile-content-wrapper',\n              'no-selection',\n            )}\n          >\n            <div className=\"shared-media-wrapper\">\n              <div className=\"shared-media-header\">\n                {tabs.length > 1 && (\n                  <TabList\n                    tabs={tabs}\n                    activeTab={activeKey}\n                    onSwitchTab={handleSwitchTab}\n                  />\n                )}\n\n              </div>\n              <Transition\n                ref={transitionRef}\n                name=\"slide\"\n                activeKey={activeKey}\n                renderCount={tabs.length}\n                className=\"shared-media-transition\"\n                onStart={applyTransitionFix}\n                onStop={handleTransitionStop}\n              >\n                <InfiniteScroll\n                  className=\"shared-media-list\"\n                  items={viewportIds}\n                  onLoadMore={getMore}\n                  cacheBuster={cacheBuster}\n                  noScrollRestore={activeTab !== activeKey}\n                  noFastList\n                >\n                  {renderContent()}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = selectChat(global, chatId!);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messagesById = selectChatMessages(global, chatId!);\n    const { nextProfileTab } = selectTabState(global);\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    return {\n      chatId: chatId!,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      chatsById: global.chats.byId,\n      usersById: global.users.byId,\n      userStatusesById: global.users.statusesById,\n      isRightColumnShown,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab,\n    };\n  },\n)(RoomAttachmentsModal));\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef ,useState ,useCallback} from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen\n  } = getActions();\n   // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>();\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  \n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n    } else {\n      setAiChatFoldersStep(AIChatFolderStep.classify);\n    }\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n      if (res === undefined || (res === true && aiChatFolders)) {\n        openRenderAiChatFoldersTip();\n      } else {\n        closeRenderAiChatFoldersTip();\n      }\n    });\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(async (\n    { loading, isShowTip } : { loading: boolean; isShowTip?: boolean },\n  ) => {\n    setAiChatFoldersLoading(loading);\n    const tipShowRes = await ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW);\n    if ((aiChatFolders || tipShowRes === undefined) && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n    function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs![activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n    };\n  },\n)(ChatFolders));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import React from '@teact';\nimport { Modal } from 'antd';\nimport { memo, useMemo ,useCallback ,useState ,useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal, getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFoldersFromUser, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from '../../chatAssistant/store';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFoldersFromUser();\n          hideTip(AIChatFolderStep.classify);\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      eventEmitter.emit(Actions.UpdateAIChatFoldersApplying, {\n        loading: false,\n      });\n      ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading, isApply }: { loading: boolean; isApply: boolean }) => {\n    if (isApply) {\n      setAiChatFoldersLoading(loading);\n    } else {\n      const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n      if (isNext) {\n        setAiChatFoldersLoading(false);\n      } else {\n        setAiChatFoldersLoading(loading);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('Quick Replies')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\nimport { UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent: GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          // footer={`${APP_NAME} ${versionString}`}\n          footer={`TeleGPT ${version || ''}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n            onEnter={handleSearchEnter}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { fireBaseAnalytics, UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\nimport { compareVersion } from '../../chatAssistant/utils/util';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n// import useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  // const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n  const [shouldRenderUpdateButton, setShouldRenderUpdateButton] = useState(false);\n  const [webFireBase, setWebFireBase] = useState<{\n    force_update_required: boolean;\n    force_update_current_version: string;\n    force_update_store_url: string;\n  }>();\n\n  const handleFireBaseUpdate = (payload: any) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { webFireBase } = payload;\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { force_update_current_version } = webFireBase;\n      const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n      const compareRes = compareVersion(version, force_update_current_version);\n      if (compareRes === -1) {\n        setShouldRenderUpdateButton(true);\n        setWebFireBase(webFireBase);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n    eventEmitter.on(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    return () => {\n      eventEmitter.off(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    };\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  // const {\n  //   shouldRender: shouldRenderUpdateButton,\n  //   transitionClassNames: updateButtonClassNames,\n  // } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AIKonwledge });\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AITranslate });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    fireBaseAnalytics.deferUpdate(webFireBase?.force_update_current_version!);\n    // window.location.reload();\n    if (webFireBase?.force_update_store_url!) {\n      window.location.href = webFireBase?.force_update_store_url!;\n    } else {\n      window.location.reload();\n    }\n\n    // if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n    //   window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    // } else if (isElectronUpdateAvailable) {\n    //   window.electron?.installUpdate();\n    // } else {\n    //   window.location.reload();\n    // }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className=\"btn-update\"\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegpt')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import React from '@teact';\nimport type {\n  ElementRef\n} from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { debounce } from '../../util/schedulers';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  Settings,\n  Archived,\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  const debouncedSetGlobalSearchQuery = useMemo(() => debounce((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, 200, false, true), [setGlobalSearchQuery]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      debouncedSetGlobalSearchQuery(query);\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            // isAppUpdateAvailable={isAppUpdateAvailable}\n            // isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import serenaWaiting from './serena-waiting.json';\nimport serenaWorking from './serena-working.json';\n\nconst waitBlob = new Blob([JSON.stringify(serenaWaiting)], { type: 'application/json' });\nconst serenaWaitUrl = URL.createObjectURL(waitBlob);\n\nconst workBlob = new Blob([JSON.stringify(serenaWorking)], { type: 'application/json' });\nconst serenaWorkUrl = URL.createObjectURL(workBlob);\n\nexport {\n  serenaWaitUrl,\n  serenaWorkUrl,\n};\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { DotLottie } from '@lottiefiles/dotlottie-react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomStorage from '../room-storage';\n\n// import Button from '../../ui/Button';\nimport './room-ai.scss';\n\nimport { serenaWaitUrl, serenaWorkUrl } from '../assets/lottieData/index';\n// import SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIEntryButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  // eslint-disable-next-line no-null/no-null\n  const [dotLottie, setDotLottie] = useState<DotLottie | null>(null);\n  const [isSummary, setIsSummary] = useState<boolean>(false);\n  const containerRef = useRef<HTMLDivElement>(undefined);\n  const onClick = useCallback((e: React.MouseEvent) => {\n    // 检查是否正在拖拽，如果是则阻止点击\n    const wrapper = e.currentTarget.closest('.room-ai-entry-wrapper');\n    if (wrapper && wrapper.getAttribute('data-dragging') === 'true') {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  }, [chatId, openChatAIWithInfo]);\n  const updateUnreadCount = useCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  }, [chatId]);\n  const updateSummaryState = useCallback((param:{ chatId:string; state:boolean }) => {\n    if (param.chatId === chatId) {\n      setIsSummary(param.state);\n    }\n  }, [chatId]);\n  const intervalAnimate = useCallback(() => {\n    if (dotLottie && !isSummary) {\n      dotLottie.play();\n    }\n  }, [dotLottie, isSummary]);\n\n  useEffect(() => {\n    const interval = setInterval(intervalAnimate, 10000);\n    return () => clearInterval(interval);\n  }, [chatId, intervalAnimate]); useEffect(() => {\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    eventEmitter.on(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    const summaryState = RoomStorage.getRoomAISummaryState(chatId);\n    setUnreadCount(count);\n    setIsSummary(summaryState);\n    RoomStorage.summary(chatId);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n      eventEmitter.off(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    };\n  }, [chatId, updateSummaryState, updateUnreadCount]);\n\n  const dotLottieRefCallback = useCallback((dotLottie:DotLottie) => {\n    setDotLottie(dotLottie);\n  }, []);\n\n  const handleMouseEnter = useCallback(() => {\n    if (dotLottie) {\n      dotLottie?.play();\n    }\n  }, [dotLottie]);\n  // 确保当 isSummary 为 true 时动画播放\n  useEffect(() => {\n    if (isSummary && dotLottie) {\n      dotLottie.play();\n    }\n  }, [isSummary, dotLottie]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"room-ai-entry-button\"\n\n    >\n      {isSummary ? (\n        <DotLottieReact\n          key=\"serenaWork\"\n          className=\"w-[62px] h-[62px]\"\n          src={serenaWorkUrl}\n          loop\n          autoplay\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n        />\n      ) : (\n        <DotLottieReact\n          key=\"serenaWait\"\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWaitUrl}\n          loop={false}\n          autoplay={false}\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n          onMouseEnter={handleMouseEnter}\n        />\n      )}\n      {unreadCount > 0 && (\n        <div className=\"room-ai-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIEntryButton;\n","/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\nimport React from '@teact'\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport buildStyle from '../../../util/buildStyle';\nimport RoomAIEntryButton from './room-ai-entry-button';\n\nimport './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string;\n}\n\n// const injectMessageAI = injectComponent(RoomAIEntryButton);\n\nconst RoomAIEntryWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  // const containerRef = useRef<HTMLDivElement>();\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 224, // 14rem = 224px (14 * 16)\n  });\n  const dragStartRef = useRef({\n    x: 0,\n    y: 0,\n    startX: 0,\n    startY: 0,\n  });\n  const hasDraggedRef = useRef(false);\n  const isDraggingRef = useRef(false);\n  const positionRef = useRef(position);\n\n  // 同步position到ref\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n\n  // 同步isDragging到ref\n  useEffect(() => {\n    isDraggingRef.current = isDragging;\n  }, [isDragging]);\n\n  // 从localStorage加载位置\n  const loadPosition = useCallback(() => {\n    const savedPosition = localStorage.getItem('room-ai-position');\n    if (savedPosition) {\n      const pos = JSON.parse(savedPosition);\n      setPosition(pos);\n    } else {\n      // 设置默认位置：右侧16px，底部224px\n      const defaultX = -16; // max(1rem, env(safe-area-inset-right)) ≈ 16px\n      setPosition({ x: defaultX, y: 224 });\n    }\n  }, []);\n\n  // 保存位置到localStorage\n  const savePosition = useCallback((pos: { x: number; y: number }) => {\n    localStorage.setItem('room-ai-position', JSON.stringify(pos));\n  }, []);\n\n  const longPressTimerRef = useRef<number | null>(null);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging) return;\n\n    hasDraggedRef.current = true;\n    const deltaX = e.clientX - dragStartRef.current.x;\n    const deltaY = e.clientY - dragStartRef.current.y;\n\n    const newPosition = {\n      x: dragStartRef.current.startX + deltaX,\n      y: dragStartRef.current.startY - deltaY, // 修正Y轴方向：鼠标向下移动时减少Y值\n    };\n\n    // 边界限制\n    const containerWidth = 62;\n    const containerHeight = 62;\n    const minX = -window.innerWidth + containerWidth; // 左边界\n    const maxX = 0; // 右边界\n    const minY = 0; // 距离底部最小距离（贴底）\n    const maxY = window.innerHeight - containerHeight; // 距离底部最大距离（贴顶）\n\n    newPosition.x = Math.max(minX, Math.min(maxX, newPosition.x));\n    newPosition.y = Math.max(minY, Math.min(maxY, newPosition.y));\n\n    setPosition(newPosition);\n  }, [isDragging]);\n\n  const handleMouseUp = useCallback(() => {\n    // 清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n\n    // 只有在真正拖拽时才保存位置\n    if (isDragging) {\n      if (hasDraggedRef.current) {\n        savePosition(positionRef.current);\n      }\n    }\n    setIsDragging(false);\n\n    // 延迟重置拖拽标记，防止立即触发点击事件\n    setTimeout(() => {\n      hasDraggedRef.current = false;\n    }, 100);\n  }, [isDragging, savePosition]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    hasDraggedRef.current = false;\n    dragStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startX: position.x,\n      startY: position.y,\n    };\n\n    // 设置长按定时器，150ms后开始拖拽\n    longPressTimerRef.current = window.setTimeout(() => {\n      setIsDragging(true);\n    }, 150);\n  }, [position]);\n\n  const handleMouseLeave = useCallback(() => {\n    // 鼠标离开时清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    // 如果刚刚完成拖拽，阻止点击事件\n    if (hasDraggedRef.current || isDragging) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, [isDragging]);\n\n  // 添加全局鼠标事件监听\n  useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  useEffect(() => {\n    loadPosition();\n  }, [loadPosition]);\n\n  // useEffect(() => {\n  //   if (containerRef.current && chatId) {\n  //     injectMessageAI(containerRef.current, { chatId });\n  //   }\n  // }, [chatId]);\n  const containerRef = injectComponent({\n    component: RoomAIEntryButton,\n  });\n\n  return (\n    <div\n      className=\"room-ai-entry-wrapper\"\n      ref={containerRef}\n      data-dragging={isDragging}\n      style={buildStyle(`right: ${-position.x}px; bottom: ${position.y}px; cursor: ${isDragging ? 'grabbing' : 'grab'}; userSelect: none`)}\n      onMouseDown={handleMouseDown}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIEntryWrapper));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","\n/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import type { FC } from 'react';\nimport React from 'react';\nimport { debounce } from 'lodash';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const handleClick = debounce(onClick, 500);\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    'w-[3.5rem] bg-[var(--color-primary)] h-[3.5rem] rounded-full flex items-center justify-center',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <button\n      className={buttonClassName}\n      disabled={disabled}\n      onClick={isShown && !disabled ? handleClick : undefined}\n      tabIndex={-1}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FloatingActionButton;\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './InputText.scss';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  type?: 'text' | 'number';\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  type = 'text',\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        type={type}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","import type { FC } from 'react';\nimport React from 'react';\nimport cx from 'classnames';\n\nimport './Spinner.scss';\n\nconst Spinner: FC<{\n  color?: 'blue' | 'white' | 'black' | 'green' | 'gray' | 'yellow';\n  backgroundColor?: 'light' | 'dark';\n  className?: string;\n}> = ({\n  color = 'blue',\n  backgroundColor,\n  className,\n}) => {\n  return (\n    <div className={cx(\n      'Spinner-GPT', className, color, backgroundColor && 'with-background', backgroundColor && `bg-${backgroundColor}`,\n    )}\n    >\n      <div className=\"Spinner__inner\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, [resizeHeight]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange, resizeHeight]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage, Switch } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { phone } = telegptSettings.telegptSettings;\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(phone);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:IUrgentTopic = drawerParams || {\n    topic: '',\n    prompt: '',\n    is_call: false,\n    is_open: false,\n  };\n  const [form, setForm] = useState<IUrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev:IUrgentTopic) => {\n      prev.is_call = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.topic = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.prompt = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const number = e.currentTarget.value.trim();\n    setPhoneNumber(number);\n    if (number.trim().length === 0) {\n      setPhoneNumberError(false);\n    }\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.is_call && phoneNumber.length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateUrgentTopic(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n        if (form.is_call && phoneNumber.length > 0) {\n          telegptSettings.setSettingOption({\n            phone: phoneNumber,\n          });\n        }\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n      setIsLoading(false);\n    });\n  }, [form, openDrawer, phoneNumber]);\n\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and descriptions for which you want alerts. When a message contains these keywords, you’ll be notified.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topic}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <div className=\"mb-[24px]\">\n          <TextArea\n            className=\"!mb-[12px]\"\n            label=\"Topic Description\"\n            value={form.prompt}\n            noReplaceNewlines\n            error={descriptionError ? 'Please enter the topic description' : undefined}\n            onChange={handleTopicDescriptionChange}\n          />\n          <div className=\"text-[14px] text-[#767676]\">\n            Please describe the specific content or keywords that should trigger an alert. For example, if ‘Vitalik’ + ‘ETH’ + ‘sell’ appear, please notify me.\n          </div>\n        </div>\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch value={form.is_call} onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        {form.is_call && (\n          <InputText\n            label=\"Phone Number\"\n            type=\"number\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            error={phoneNumberError ? 'Please enter a valid phone number' : undefined}\n          />\n        )}\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport type { CheckboxChangeEvent } from 'antd';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './chat-picker-panel.scss';\n\nconst PickerChatItem = ({ id, isChecked, onChange }:{\n  id: string;\n  isChecked:boolean;\n  onChange:(e:CheckboxChangeEvent) => void;\n}) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const {\n    currentUserId,\n  } = global;\n  const peer:ApiPeer | undefined = selectPeer(global, id);\n  if (!peer) {\n    return undefined;\n  }\n\n  const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n  const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n  const realPeer = 'id' in peer ? peer : undefined;\n  const isUser = realPeer && isApiPeerUser(realPeer);\n  const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n  function getSubtitle() {\n    if (!peer) return undefined;\n    if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n    if (isApiPeerChat(peer)) {\n      return [getGroupStatus(lang, peer)];\n    }\n\n    const userStatus = selectUserStatus(global, peer.id);\n    return getUserStatus(lang, peer, userStatus);\n  }\n\n  function getTitle() {\n    if (customPeer) {\n      return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n    }\n\n    if (isSelf) {\n      return lang('SavedMessages');\n    }\n\n    return title;\n  }\n\n  const subtitle = getSubtitle() || '';\n  const specialTitle = getTitle();\n  return (\n    <Checkbox\n      value={id}\n      className=\"chat-picker-item rounded-[12px]\"\n      checked={isChecked}\n      onChange={onChange}\n    >\n      <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          clickOpenRoom={false}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)] flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group className=\"w-full\" value={selected}>\n          <div className=\"flex flex-col gap-[12px] w-full overflow-hidden\">\n            {ids.map((id) => {\n              const isChecked = selected.includes(id);\n              return (\n                <PickerChatItem\n                  id={id}\n                  isChecked={isChecked}\n                  onChange={(e:CheckboxChangeEvent) => {\n                    const checked = e.target.checked;\n                    setSelected((prev) => {\n                      if (checked) {\n                        return [...prev, id];\n                      } else {\n                        return prev.filter((item) => item !== id);\n                      }\n                    });\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:ISummaryTemplate = drawerParams || {\n    topic: '',\n    prompt: '',\n  };\n  const [form, setForm] = useState(initialValues);\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateSummarizeTemplate(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n  }, [form, openDrawer]);\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topic = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topic = topic;\n      return { ...prev };\n    });\n    if (topic.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">\n        Enter a topic you want AI to track and summarize. Add details so summaries are more accurate and relevant.\n      </p>\n      <InputText\n        label=\"Topic name\"\n        value={form.topic}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { SERVER_API_URL } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport useOldLang from '../hook/useOldLang';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate, getCurrentUserInfo } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { knowledgeEmbeddingStore } from '../vector-store';\n\nimport Avatar from '../component/Avatar';\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const { userId, userName } = getCurrentUserInfo();\n  const lang = useOldLang();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { messages, append } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const vectorSearchResults = await knowledgeEmbeddingStore.similaritySearch({\n        query: message.content.text?.text,\n      });\n      type Metadata = { answer: string }; // Define the type for metadata\n      const similarResult = vectorSearchResults.similarItems[0] as { metadata: Metadata; score: number } | undefined;\n      if (similarResult && similarResult.score > 0.8) {\n        setReplyResponse(similarResult.metadata.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const isUser = peer && isApiPeerUser(peer);\n    const chat = selectChat(global, chatId);\n    const title = peer && isUser ? getUserFullName(peer) : getChatTitle(lang, chat!);\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          {isUser ? (\n            <Avatar peer={peer} size={34} />\n          ) : (\n            <ChatAvatar chatId={chatId} size={34} />\n          )}\n\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {title}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Tely AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\nexport const languagePrompt = `\n    [实时语言雷达]\n        1. 语言指纹扫描：自动检测输入文本的\n            - 主要语种(支持92种语言置信度识别)\n            - 方言特征(如粤语/川普/美式英语)\n            - 混合语言比例(中英混杂度>30%触发混合模式)\n    [语境翻译官]\n        2. 根据语言特征自动匹配：\n            - 正式场合 → 学术英语/商务日语\n            - 社交场景 → 网络韩语/缩略中文\n            - 创意表达 → 方言梗/谐音梗\n            - 情感交流 → 方言安慰语/俚语拥抱\n    [文化调色盘]\n        3. 语言风格增强模块：\n            - 中文：加入\"绝绝子\"/\"破防了\"等年度热词\n            - 日语：自动转换敬体/简体(根据用户资料)\n            - 英语：切换正式/俚语模式(识别slang词汇)\n            - 方言：加载地域特色表达库(如东北话\"忽悠\"→上海话\"捣糨糊\")\n    [混合语处理器]\n        4. 跨语言对话解决方案：\n            - 中英夹杂 → 智能补全(\"这个idea超酷\"→\"这个idea真的超有创意\")\n            - 方言转译 → 标准语+注释(\"侬晓得伐？→ 你知道吗？(上海话)\")\n            - 代码切换 → 无缝过渡(\"今天meeting讨论了KPI→今天开会讨论了KPI\")\n`;\n\nexport const UrgentMessageCheckPrompt = `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n    ## 总结重要或紧急消息的内容摘要(可包含发送者名称),非重要或者紧急消息直接过滤掉\n    ## 消息字段解释\n        - chatId: 房间ID\n        - messageId: 消息ID\n        - content: 消息内容\n        - senderName: 发送者名称\n    ## 输出格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式\n         \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            content: 内容摘要\"             \n                        }\n                    ]\n                <!-- json-end -->\n        \\`\\`\\`\n`;\n\nexport const DefaultUrgentTopic = {\n  id: 'default',\n  topicName: '默认紧急主题',\n  topicDescription: `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n  `,\n  strongAlert: false,\n};\n\nexport const getIntelligentReplyByKnowledgePrompt = (knowledge:string) => {\n  return `\n    ## 角色设定\n        你是一个专业的智能知识管家，负责基于知识库内容进行检索回答。请严格遵守以下规则：\n    ## 知识库内容\n        ${knowledge}\n    ## 知识检索\n        - 使用精确匹配模式(无模糊扩展)\n        - 当相似度>95%时才返回知识库内容,否则回复的内容为空\n    ## 格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            replyContent: \"回复的内容\"              \n                        }\n                    ]\n                <!-- json-end -->\n            \\`\\`\\`\n    ## 示例输出\n        \\`\\`\\`json\n            <!-- json-start -->\n                [\n                    {\n                        chatId: \"房间ID\",\n                        messageId: \"消息ID\",\n                        senderId: \"用户ID\",\n                        replyContent: \"Think of SendingNetwork as the swiss-army knife for decentralized and encrypted communications infrastructure. \"              \n                    }\n                ]\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n};\n\nexport const UserPortraitPrompt = `\n    你是一位金融行为分析师，擅长通过对话文本解析用户多维特征。请根据以下框架分析输入数据，输出包含基础信息、关系定位、资产行为及兴趣特征的结构化画像：\n    # 基础信息推断\n        ## 年龄定位\n            - 使用\"学生党/刚毕业\"→18-24岁\n            - 提及\"子女教育/房贷\"→35-50岁\n        ## 性别识别：\n            - 讨论\"母婴产品\"→女性\n            - 引用\"电竞/硬件参数\"→男性\n        ## 地域判断：\n            - 提到\"沪牌政策\"→上海用户\n            - 使用\"支付宝/微信支付\"→中国大陆用户\n    # 关系定位模型\n        ## 合作伙伴：\n            - 包含\"对赌协议/股权分配\"等关键词\n            - 对话中出现\"王总/李董\"等职称\n        ## 投资人：\n            - 讨论\"IRR/ROI\"等财务指标\n            - 提及\"LP/GP\"关系\n        ## 同事：\n            - 使用\"周报/OKR\"等业务术语\n            - 非正式称呼(\"老张/小李\")\n    # 资产行为分析\n        ## 加密货币特征\n            - 持有资产:识别BTC/ETH等代币提及次数\n            - 操作风格:\"短线操作\"→交易型,\"三年以上未动\"→囤积型\n        ## 风险偏好分级\n            - \"愿意承担波动\"→激进型(风险评分7-10)\n            - \"只要保本\"→保守型(风险评分1-3)\n    # 示例输出 \n         \\`\\`\\`json\n            <!-- json-start -->\n                 {\n                    \"basic_info\": {\n                      \"age_group\": \"25-34岁\",\n                      \"gender\": \"男\",\n                      \"region\": \"北美地区\",\n                      \"language\": \"中英双语\"\n                    },\n                    \"relationship\": {\n                      \"type\": \"战略合作伙伴\",\n                      \"engagement_level\": \"高价值(年合作超500万)\"\n                    },\n                    \"financial_behavior\": {\n                      \"assets\": {\n                        \"crypto_holdings\": [\"BTC\", \"LINK\"],\n                        \"investment_style\": \"波段交易(持仓周期7-30天)\",\n                        \"risk_profile\": \"进取型(历史最大回撤承受力25%)\"\n                      },\n                    },\n                  }\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle,\n  getGroupStatus,\n  getUserFullName,\n  getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport useOldLang from '../hook/useOldLang';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './rooms-tab.scss';\nimport './selected-chats.scss';\n\ninterface Props {\n  title: string;\n  ignoredIds: string[];\n  onIgnored: (id: string) => void;\n  onUnIgnored: (id: string) => void;\n}\n\nexport const RoomsTab = (props: Props) => {\n  const {\n    title,\n    ignoredIds,\n    onIgnored,\n    onUnIgnored,\n  } = props;\n  const orderedIds = React.useMemo(() => {\n    const ids = getOrderedIds(ALL_FOLDER_ID) || [];\n    return ids.filter((id) => id !== GLOBAL_SUMMARY_CHATID);\n  }, []);\n  const unIgnoreIds = orderedIds.filter((id) => !ignoredIds.includes(id));\n  const [activeTab, setActiveTab] = useState<'summary' | 'ignored'>('summary');\n  const lang = useOldLang();\n  const global = getGlobal();\n\n  const renderRoomItem = (\n    id: string,\n    isIgnored: boolean,\n  ) => {\n    const peer: ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap font-medium\">{specialTitle}</div>\n          <div className=\"text-[var(--color-text-secondary)] text-sm\">{subtitle}</div>\n        </div>\n        {isIgnored ? (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#5493F2] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onUnIgnored(id)}\n          >\n            Stop Ignoring\n          </div>\n        ) : (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#FF5757] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onIgnored(id)}\n          >\n            <Icon name=\"eye-crossed\" />\n            Ignore\n          </div>\n        )}\n\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"summary-rooms-tab mt-[20px]\">\n      <div className=\"tabs-container\">\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'summary'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('summary')}\n        >\n          {title}\n        </button>\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'ignored'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('ignored')}\n        >\n          Ignored Chats\n        </button>\n      </div>\n\n      {activeTab === 'summary' ? (\n        <div>\n          {unIgnoreIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {unIgnoreIds.map((id) => renderRoomItem(id, false))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          {ignoredIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {ignoredIds.map((id) => renderRoomItem(id, true))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { message as showMessage } from 'antd';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { getGlobal } from '../../../global';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport Spinner from '../component/Spinner';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst SummaryItem = ({\n  template, selectedTemp, handleSelect, onDelete,\n}: {\n  template: ISummaryTemplate;\n  selectedTemp:string[];\n  onDelete: (id: string) => void;\n  handleSelect:(id: string) => void;\n}) => {\n  const { openDrawer } = useDrawerStore();\n  const global = getGlobal();\n  const { currentUserId } = global;\n  const handeleDeleteTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(template.id!);\n  };\n  const handleEditTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openDrawer(DrawerKey.CustomizationPrompt, template);\n  };\n  return (\n    <div\n      className={cx('urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]', {\n        '!bg-[var(--color-chat-active)] text-white': selectedTemp.includes(template.id!),\n      })}\n      onClick={() => handleSelect(template.id!)}\n    >\n      <div>{template.topic}</div>\n      {selectedTemp.includes(template.id!) && (\n        <Icon className=\"urgent-topic-item-check\" name=\"check\" />\n      )}\n      {template.user_id === currentUserId && (\n        <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n          <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n          <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AddSummaryTemplate = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAdd = () => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAdd}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst SummarizeTab = () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { curious_info, ignored_summary_chat_ids, curious_id } = telegptSettings.telegptSettings;\n  const ignoredChatIds = getIdsFromEntityTypes(ignored_summary_chat_ids);\n  const [summaryTemplate, setSummaryTemplate] = useState<ISummaryTemplate[]>(curious_info);\n  const [originSelectedTemp, setOriginSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedTemp, setSelectedTemp] = useState<string[]>(curious_id);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(ignoredChatIds);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const actionsVisable = useMemo(() => {\n    return !isEqual(selectedTemp, originSelectedTemp);\n  }, [originSelectedTemp, selectedTemp]);\n\n  const handleTemplateSelect = useCallback((selectedId: string) => {\n    let newSelected: string[] = [];\n    if (selectedTemp.includes(selectedId)) {\n      newSelected = selectedTemp.filter((id) => id !== selectedId);\n    } else {\n      if (selectedTemp.length >= 3) {\n        showMessage.info('You can only select up to three topics.');\n        return;\n      }\n      newSelected = [...selectedTemp, selectedId];\n    }\n    setSelectedTemp(newSelected);\n  }, [selectedTemp]);\n\n  const handleSave = useCallback(() => {\n    setIsLoading(true);\n    telegptSettings.setSettingOption({\n      curious_id: selectedTemp,\n    }, () => {\n      setIsLoading(false);\n      setOriginSelectedTemp(selectedTemp);\n    });\n  }, [selectedTemp]);\n\n  const handleDelete = useCallback((id: string) => {\n    if (selectedTemp.includes(id)) {\n      const newSelectedTemp = selectedTemp.filter((item) => item !== id);\n      setSelectedTemp(newSelectedTemp);\n      setOriginSelectedTemp(newSelectedTemp);\n      telegptSettings.setSettingOption({\n        curious_id: newSelectedTemp,\n      });\n    }\n    // TODO: delete summary template\n    telegptSettings.deleteSummarizeTemplate(id).then((res:any) => {\n      if (res.code === 0) {\n        const newSummaryTemplate = summaryTemplate.filter((item) => item.id !== id);\n        setSummaryTemplate(newSummaryTemplate);\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  }, [selectedTemp, summaryTemplate]);\n\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...new Set([...ignoredIds, id])];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text) mb-[24px]\">Topic Preferences</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {summaryTemplate.map((item) => {\n            return (\n              <SummaryItem template={item} onDelete={handleDelete} selectedTemp={selectedTemp} handleSelect={handleTemplateSelect} />\n            );\n          })}\n          {summaryTemplate.length < 10 && (\n            <AddSummaryTemplate />\n          )}\n        </div>\n        <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Summary\" />\n      </div>\n      <FloatingActionButton\n        isShown={actionsVisable}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n\n      </FloatingActionButton>\n    </div>\n  );\n};\nexport default SummarizeTab;\n","/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: IUrgentTopic;onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id!);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topic}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const { urgent_info, ignored_urgent_chat_ids } = telegptSettings.telegptSettings;\n  const selectUrgentChatIds = getIdsFromEntityTypes(ignored_urgent_chat_ids);\n  const [topics, setTopics] = useState<IUrgentTopic[]>(urgent_info);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(selectUrgentChatIds);\n\n  const handeleDeleteTopic = (id:string) => {\n    telegptSettings.deleteUrgentTopic(id).then((res:any) => {\n      if (res.code === 0) {\n        setTopics(topics.filter((t) => t.id !== id));\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  };\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...ignoredIds, id];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold mb-[24px]\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          {topics.length < 10 && <AddTopic />}\n        </div>\n      </div>\n      <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Urgent\" />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Chat Summary',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1 overflow-y-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[2.75rem] h-[2.75rem] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Add Topics');\n        break;\n      case DrawerKey.ChatPicker:\n        setTitle('Select chat');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem] w-[var(--right-column-width)]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<Icon name=\"arrow-left\" className=\"text-[26px]\" />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<Icon name=\"close\" className=\"text-[26px]\" />} onClick={onClose} />\n      )}\n      <div className=\"text-[1.25rem] font-[var(--font-weight-medium)] pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden w-[var(--right-column-width)]\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","\n/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { telegptSettings } from '../api/user-settings';\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n    telegptSettings.getGptSettings();\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","\n/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { orderBy } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport {\n  parseMessage2SummaryStoreMessage,\n  parseSummaryStoreMessage2Message,\n  type SummaryStoreMessage,\n} from '../store/summary-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\nimport { useDrawerStore } from './DrawerContext';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = () => {\n  const { isOpen } = useDrawerStore();\n  const { userId, userName } = getCurrentUserInfo();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [summaryMessages, setSummaryMessages] = useState<Message[]>([]);\n  const [viewMessages, setViewMessages] = useState<Message[]>([]);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({\n    lastTime: undefined,\n    hasMore: true,\n  });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    const sorted = orderBy(\n      [...messages, ...summaryMessages],\n      [(item: Message) => new Date(item.createdAt as Date).getTime()],\n      ['asc'],\n    );\n    setViewMessages(sorted);\n  }, [messages, summaryMessages]);\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, viewMessages, scrollToBottom]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setSummaryMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n  }, [setSummaryMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setSummaryMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 30)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setSummaryMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setSummaryMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setViewMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  useEffect(() => {\n    const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n    // 再次聚焦间隔6小时触发一次总结\n    if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 60 * 6) {\n      globalSummaryTask.initSummaryChats(false);\n    }\n    RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    scrollLocked();\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      // setMessages((prev) => prev.filter((message) => message.id !== messageId));\n      // setSummaryMessages((prev) => prev.filter((message) => message.id !== messageId));\n      setViewMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [scrollLocked]);\n\n  const handleInputSubmit = useCallback((value: string) => {\n    scrollToBottom();\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n  }, [append, scrollToBottom]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n  const className = buildClassName(\n    styles.globaSummaryBg,\n    'flex flex-col w-full h-full',\n    'global-summary-inner',\n    isOpen && 'right-panel-open',\n  );\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={className}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Tely AI\" />\n            <span className=\"text-[15px] font-semibold\">Tely AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={viewMessages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n};\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mykZ1IJ0\"};","import React from '@teact';\nimport { injectComponent } from '../injectComponent';\nimport GlobalSummary from './global-summary';\nconst GlobalSummaryWrapper = () => {\n  const containerRef = injectComponent({\n    component: GlobalSummary,\n  });\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default GlobalSummaryWrapper;\n\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { UserPortraitInfo } from '../../chatAssistant/store/user-portrait-store';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './UserPortrait.scss';\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  userId: string;\n  onClose: () => void;\n};\n\nexport const PortraitTagColors = [\n  '#E5D9FF',\n  '#CCD6FF',\n  '#B6FFCE',\n  '#FFD9D9',\n  '#FFD9FF',\n];\n\nconst UserPortraitBaseCard: FC<StateProps & OwnProps> = ({ userId, user, onClose }) => {\n//   const { loading, userPortraitInfo } = usePortrait({ userId });\n  const [portraitInfo, setPortraitInfo] = useState<UserPortraitInfo | undefined>(undefined);\n\n  const getPortraitInfo = useLastCallback(async () => {\n    const info = await ChataiStores.userPortrait?.getUserPortrait(\n      userId,\n    );\n    setPortraitInfo(info);\n  });\n\n  useEffect(() => {\n    getPortraitInfo();\n  }, [userId]);\n\n  const handlePortraitClick = useLastCallback(() => {\n    getActions().openUserPortrait({ userId });\n    onClose();\n  });\n\n  function renderBasicInfo() {\n    return (\n      <div className=\"border-b-[1px] border-[#F3F3F3] px-[12px] pb-[12px]\">\n        <div className=\"text-[20px] font-[700] mb-2\">Portrait</div>\n        <div className=\"text-[16px] font-[700] mb-2\">Basic Description</div>\n        <div className=\"flex flex-col gap-1\">\n          {user?.usernames?.[0]?.username && (\n            <div>\n              <span className=\"font-[600]\">Username: </span>\n              {user?.usernames?.[0]?.username}\n            </div>\n          )}\n          <div>\n            <span className=\"font-[600]\">Alias/Nickname: </span>\n            {user?.firstName} {user?.lastName}\n          </div>\n          {portraitInfo && (\n            <>\n              {portraitInfo.langs && (\n                <div>\n                  <span className=\"font-[600]\">Language: </span>\n                  {`${\n                    portraitInfo.langs?.[0]\n                      ? `${portraitInfo.langs?.[0]}(Primary)`\n                      : ''\n                  } ${\n                    portraitInfo.langs?.[1]\n                      ? `, ${portraitInfo.langs?.[1]}(Secondary)`\n                      : ''\n                  }`}\n                </div>\n              )}\n              {portraitInfo?.tags && portraitInfo?.tags?.length > 0 && (\n                <>\n                  <div>\n                    <span className=\"font-[600]\">Tags: </span>\n                  </div>\n                  <div className=\"flex flex-row flex-wrap items-center gap-2\">\n                    {portraitInfo?.tags?.map((tag, index) => (\n                      <div\n                        className=\"flex items-center justify-center px-2 rounded-[4px] h-[28px] text-[12px] font-[500] text-black\"\n                        style={`background: ${PortraitTagColors[index]}`}\n                      >\n                        {tag}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-[24rem]\">\n      {renderBasicInfo()}\n      <div\n        className=\"h-[42px] flex items-center justify-center text-[var(--color-primary)] text-[14px] font-semibold pt-[0.5rem] cursor-pointer\"\n        onClick={handlePortraitClick}\n      >\n        View details\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal((global, { userId }): StateProps => {\n    const user = userId\n      ? selectUser(global, userId)\n      : undefined;\n\n    return {\n      user,\n    };\n  })(UserPortraitBaseCard),\n);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport UserPortraitBasicCard from './UserPortraitBasicCard';\n\ntype OwnProps = {\n  menuRef?: React.RefObject<HTMLDivElement|undefined>;\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n};\nexport const UserPortraitBasicCardMenu:FC< OwnProps & MenuPositionOptions> = ({\n  menuRef,\n  isOpen,\n  userId,\n  onClose,\n  ...menuPositionOptions\n}) => {\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose);\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClose={onClose}\n      onCloseAnimationEnd={onClose}\n      className=\"PortraitMenu\"\n      withPortal\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      noCompact\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...menuPositionOptions}\n    >\n      {isOpen && <UserPortraitBasicCard userId={userId} onClose={onClose} />}\n    </Menu>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  useCallback,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport { UserPortraitBasicCardMenu } from '../../right/userPortrait/UserPortraitBasicCardMenu';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps = {\n  avatarPeer?: ApiPeer;\n  forwardInfo?: {\n    hiddenUserName?: string;\n  };\n  handleAvatarClick: () => void;\n};\n\nconst SenderGroupAvatar: FC<OwnProps> = ({\n  avatarPeer,\n  forwardInfo,\n  handleAvatarClick,\n}) => {\n  const { openUserPortrait } = getActions();\n  const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n  const triggerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getMenuElement = useCallback(() => menuRef.current!, []);\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  return (\n    <div className=\"inline-block\" ref={ref}>\n      <ResponsiveHoverButton\n        round\n        className={buildClassName('!p-0 !w-auto !h-auto')}\n        color=\"translucent\"\n        onActivate={handleActivateSymbolMenu}\n      >\n        <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n        <Avatar\n          size=\"small\"\n          className={styles.senderAvatar}\n          peer={avatarPeer}\n          text={hiddenName}\n          onClick={avatarPeer ? handleAvatarClick : undefined}\n        />\n      </ResponsiveHoverButton>\n      <UserPortraitBasicCardMenu\n        isOpen={isSymbolMenuOpen}\n        onClose={closeSymbolMenu}\n        userId={avatarPeer?.id!}\n        anchor={contextMenuAnchor}\n        menuRef={menuRef}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n      />\n    </div>\n  )\n};\n\nexport default SenderGroupAvatar;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\nimport SenderGroupAvatar from './SenderGroupAvatar';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {/* {renderAvatar()} */}\n           <SenderGroupAvatar handleAvatarClick={handleAvatarClick} avatarPeer={avatarPeer} forwardInfo={forwardInfo} />\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom.ts';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  autoTranslate?:boolean;\n  autoTranslateLanguage?:string;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  ContactGreeting,\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  autoTranslate,\n  autoTranslateLanguage,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  // canTranslate,\n  // translationLanguage,\n  // shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestMessageTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  // useEffect(() => {\n  //   if (!shouldAutoTranslate || !canTranslate) return;\n  //   requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  // }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useEffect(() => {\n    if (!autoTranslate) return;\n    messageIds?.forEach((messageId) => {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: autoTranslateLanguage });\n    });\n  }, [autoTranslate, autoTranslateLanguage, chatId, messageIds]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const { autoTranslate, autoTranslateLanguage } = global.settings.byKey;\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      autoTranslate,\n      autoTranslateLanguage,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React from '@teact';\nimport { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic, ApiMessage } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_SAFARI,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIEntryWrapper from '../chatAssistant/room-ai/room-ai-entry-wrapper';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting, {\n  ASK_MEETING_EMAIL, ASK_MEETING_TIME, ASK_MEETING_TIME_AND_EMAIL, MEETING_INVITATION_TIP,\n} from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/global-summary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }: { message: ApiMessage }) => {\n    const isMeetingInitiator = message.isOutgoing;\n    const messageText = message.content.text?.text;\n    if (\n      messageText === ASK_MEETING_TIME_AND_EMAIL\n      || messageText === ASK_MEETING_TIME\n      || messageText === ASK_MEETING_EMAIL\n      || messageText === MEETING_INVITATION_TIP\n    ) {\n      return;\n    }\n    // 会议发起成功，清除会议事务\n    if (messageText?.includes('Event details') && messageText.includes('Meeting Invitation')) {\n      const existingMeetTask = ScheduleMeeting.get(chatId!);\n      if (existingMeetTask) {\n        existingMeetTask.cleanup();\n      }\n      return;\n    }\n    const scheduleMeeting = ScheduleMeeting.create({ chatId: message.chatId, isMeetingInitiator });\n    if (scheduleMeeting.timeout || message.isOutgoing || scheduleMeeting.isMeetingInitiator) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(message.chatId, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === message.chatId) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: message.chatId });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {\n        Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n          <>\n            <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n              <MiddleHeaderPanes\n                key={renderingChatId}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <MiddleHeader\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                isComments={isComments}\n                isMobile={isMobile}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <Transition\n                name={resolveTransitionName(\n                  'slide',\n                  animationLevel,\n                  shouldSkipHistoryAnimations || !withInterfaceAnimations,\n                )}\n                activeKey={currentTransitionKey}\n                shouldCleanup\n                cleanupExceptionKey={cleanupExceptionKey}\n                isBlockingAnimation\n                onStop={handleSlideTransitionStop}\n              >\n                <MessageList\n                  key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                  chatId={renderingChatId!}\n                  threadId={renderingThreadId!}\n                  type={renderingMessageListType!}\n                  isComments={isComments}\n                  canPost={renderingCanPost!}\n                  onScrollDownToggle={setIsScrollDownShown}\n                  onNotchToggle={setIsNotchShown}\n                  isReady={isReady}\n                  isContactRequirePremium={isContactRequirePremium}\n                  paidMessagesStars={paidMessagesStars}\n                  withBottomShift={withMessageListBottomShift}\n                  withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                  onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n                />\n                <div className={footerClassName}>\n                  {renderingCanPost && (\n                    <Composer\n                      type=\"messageList\"\n                      chatId={renderingChatId!}\n                      threadId={renderingThreadId!}\n                      messageListType={renderingMessageListType!}\n                      dropAreaState={dropAreaState}\n                      onDropHide={handleHideDropArea}\n                      isReady={isReady}\n                      isMobile={isMobile}\n                      editableInputId={EDITABLE_INPUT_ID}\n                      editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                      inputId=\"message-input-text\"\n                    />\n                  )}\n                  {isPinnedMessageList && canUnpin && (\n                    <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        color=\"secondary\"\n                        className=\"composer-button unpin-all-button\"\n                        onClick={handleOpenUnpinModal}\n                      >\n                        <Icon name=\"unpin\" />\n                        <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                      </Button >\n                    </div >\n                  )\n                  }\n                  {\n                    canShowOpenChatButton && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"composer-button open-chat-button\"\n                          onClick={handleOpenChatFromSaved}\n                        >\n                          <span>{oldLang('SavedOpenChat')}</span>\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {composerRestrictionMessage}\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  }\n                  {\n                    (\n                      isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                    ) && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingShouldSendJoinRequest && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang('ChannelJoinRequest')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {oldLang('BotStart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {oldLang('BotRestart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanUnblock && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleUnblock}\n                        >\n                          {oldLang('Unblock')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  <MessageSelectToolbar\n                    messageListType={renderingMessageListType}\n                    isActive={isSelectModeActive}\n                    canPost={renderingCanPost}\n                  />\n                  <SeenByModal isOpen={isSeenByModalOpen} />\n                  <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                  <ReactorListModal isOpen={isReactorListModalOpen} />\n                  {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n                </div >\n              </Transition >\n              <RoomAIEntryWrapper chatId={chatId} />\n              <FloatingActionButtons\n                withScrollDown={renderingIsScrollDownShown}\n                canPost={renderingCanPost}\n                withExtraShift={withExtraShift}\n              />\n            </div >\n            <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n          </>\n        )\n      }\n      {\n        chatId && (\n          <UnpinAllMessagesModal\n            isOpen={isUnpinModalOpen}\n            chatId={chatId}\n            pinnedMessagesCount={pinnedMessagesCount}\n            onClose={closeUnpinModal}\n            onUnpin={handleUnpinAllMessages}\n          />\n        )\n      }\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div >\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { Popover } from 'antd';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport {\n  createNewFeatureReminderMessage, generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const { scrollToBottom } = useScrollToBottom();\n\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n    scrollToBottom();\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleMediaSummarize = () => {\n    const { openRoomAttachmentsModal } = getActions();\n    openRoomAttachmentsModal();\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleNewFeature = () => {\n    const newFeatureMessage: Message = createNewFeatureReminderMessage();\n    insertMessage(newFeatureMessage);\n  };\n\n  const handleActions = (payload:any) => {\n    const { action } = payload;\n    if (payload.chatId === chatId) {\n      switch (action) {\n        case 'summary':\n          handleSummarize();\n          break;\n        case 'schedule-meet':\n          handleScheduleMeeting();\n          break;\n        case 'todo':\n          handleActionItems();\n          break;\n        case 'new-feature':\n          handleNewFeature();\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    eventEmitter.on(Actions.RoomAIActions, handleActions);\n    return () => {\n      eventEmitter.off(Actions.RoomAIActions, handleActions);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n\n  const popoverContent = (\n    <div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleSummarize}\n      >\n        🧠 Chat Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleMediaSummarize}\n      >\n        📁 Media/File Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleScheduleMeeting}\n      >\n        📅 Schedule meeting\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleActionItems}\n      >\n        ✅ Action Items\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summary\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Meeting\n      </div>\n      <Popover\n        content={popoverContent}\n        trigger=\"click\"\n        placement=\"bottomLeft\"\n        overlayClassName=\"room-actions-popover\"\n      >\n        <div className={actionItemClassName}>\n          🚀 All\n        </div>\n      </Popover>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Ask me about your chats...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-row items-center justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { searchPortrait } from '../../../util/userPortrait';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { sendGAEvent } from '../utils/analytics';\nimport { getCurrentUserInfo, getHitTools } from '../utils/chat-api';\nimport { getAuthState, isTokenValid } from '../utils/google-auth';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport {\n  createGoogleLoginMessage, createGoogleMeetingMessage,\n  createRoomDescriptionMessage, createUserPortraitMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const { userId, userName } = getCurrentUserInfo();\n  const [pageInfo, setPageInfo] = useState<{\n    lastTime: number | undefined;\n    hasMore: boolean;\n  }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: chatId,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message: Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify(response),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n    }\n  }, [insertMessage, messages, setMessages]);\n\n  const updateToken = useCallback((payload: { message: Message; token: string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  const toolsHitCheck = (formMessage: Message) => {\n    getHitTools(formMessage.content).then((toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach((toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const auth = getAuthState();\n            if (!auth || !isTokenValid(auth)) {\n              insertMessage(createGoogleLoginMessage());\n            } else {\n              insertMessage(createGoogleMeetingMessage());\n            }\n            sendGAEvent('google_meet');\n          } else if (toolCall.toolName === 'checkIsUserPortrait') {\n            const userName = toolCall.result?.keyword;\n            insertMessage(createUserPortraitMessage(userName));\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    scrollToBottom();\n    const newMessage: Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item: any) => item.score > 0.8);\n    if (matchs.length > 0 || searchPortrait(value)) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\n// const injectMessageAI = injectComponent(RoomAI);\nconst RoomAIWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  // const containerRef = useRef<HTMLDivElement | null>(null);\n  const containerRef = injectComponent({\n    component: RoomAI,\n    props,\n  });\n  // useEffect(() => {\n  //   let injected: { unmount: () => void } | undefined;\n  //   const timer = setTimeout(() => {\n  //     if (containerRef.current && chatId && chatId !== GLOBAL_SUMMARY_CHATID) {\n  //       injected = injectMessageAI(containerRef.current, { ...props });\n  //     }\n  //   }, 500); // 等动画走完再注入\n\n  //   return () => {\n  //     clearTimeout(timer);\n  //     injected?.unmount();\n  //   };\n  // // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  // }, [chatId]);\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n    const isSpinner = noContent && !noSpinner;\n\n    return (\n      <Transition activeKey={isSpinner ? 0 : 1} name=\"fade\">\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </Transition>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isUserPortrait?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n  UserPortrait,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  isUserPortrait,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return true;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI  : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isUserPortrait ? (\n    HeaderContent.UserPortrait\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Tely AI\" />\n              <h3 className=\"title\">{oldLang('Tely AI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time Assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      case HeaderContent.UserPortrait:\n        return <h3 className=\"title\">{oldLang('Portrait')}</h3>;\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import React from '@teact';\nimport { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport UserPortrait from './userPortrait/UserPortrait';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  userPortraitUserId?: string;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  userPortraitUserId,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n    toggleUserPortrait,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isUserPortrait = contentKey === RightColumnContent.UserPortrait;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserPortrait:\n        toggleUserPortrait({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n      case RightColumnContent.UserPortrait:\n        return userPortraitUserId && <UserPortrait userId={userPortraitUserId} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isUserPortrait={isUserPortrait}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const { userPortraitUserId } = selectTabState(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      userPortraitUserId,\n    };\n  },\n)(RightColumn));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React from '@teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React from '@teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import React from '@teact';\nimport '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport GuidanceModal from '../chatAssistant/component/guidance/guidance-modal';\nimport RoomAttachmentsModal from '../chatAssistant/room-ai/room-attachments-modal';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  isRoomAttachmentsModalOpen?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  isRoomAttachmentsModalOpen,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    closeRoomAttachmentsModal,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  const handleRoomAttachmentsModalClose = useLastCallback(() => {\n    closeRoomAttachmentsModal();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      {isRoomAttachmentsModalOpen && (\n        <RoomAttachmentsModal isOpen={Boolean(isRoomAttachmentsModalOpen)} onClose={handleRoomAttachmentsModalClose} />\n      )}\n      <GuidanceModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      isRoomAttachmentsModalOpen: selectTabState(global).isRoomAttachmentsModalOpen,\n    };\n  },\n)(Main));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","Promise","all","Object","values","map","sound","prevSrc","src","muted","volume","play","then","pause","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","addActionHandler","global","actions","payload","force","tabId","getCurrentTabId","updateTabState","isCallPanelVisible","selectTabState","async","chatId","chat","selectChat","result","callApi","peer","getGlobal","updateGroupCall","id","setGlobal","requestMasterAndJoinGroupCall","accessHash","groupCall","selectActiveGroupCall","hasPublicUsername","Boolean","getMainUsername","inviteLink","selectChatFullInfo","call","canSelfUnmute","copyTextToClipboard","showNotification","message","key","username","inviteHash","fetchChatByUsername","langProvider","full","loadFullChat","requestMasterAndCallAction","action","undefined","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectGroupCall","selectChatGroupCall","leaveGroupCall","rejoin","selectIsCurrentUserFrozen","existingGroupCall","omit","isLoaded","participantsCount","fetchGroupCall","nextOffset","offset","requestGroupCallParticipants","userId","isVideo","selectUser","state","participantId","adminId","currentUserId","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","length","getTracks","forEach","track","stop","checkMicrophonePermission","catch","audio","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","filter","isOwn","peerId","reaction","type","unshift","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","userFullNames","userFullName","getUserFullName","oldTranslate","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","shouldResetVoters","pollResults","voters","votes","vote","offsets","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","autoTranslateLanguage","settings","byKey","voice","mediaHash","getMediaHash","mediaLoader","fetch","blob","formData","FormData","append","audioToText","transcriptionText","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","userName","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchFlood","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","ChataiStores","contact","addContact","name","phoneNumber","addUser","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","openPriceConfirmModal","originalAmount","newAmount","directInfo","formId","sendStarPaymentForm","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","isChatAIShown","nextProfileTab","lastIsChatInfoShown","isUserPortraitShown","userPortraitUserId","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","renderMessageSummaryHtml","lang","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","statefulContent","getMessageStatefulContent","getMessageSummaryDescription","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","isRoomAttachmentsModalOpen","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","shouldRemove","removeGroupCall","isCallNotEmpty","participants","groupCallId","participant","updateGroupCallParticipant","playGroupCallSound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","CarouselItem","children","React","cx","GuidanceCarousel","handleClose","carouselRef","useRef","handleNextClick","goTo","onClick","CloseIcon","Carousel","ref","GuidanceWrapper","containerRef","injectComponent","component","props","GuidanceModal","telegptGuidance","getItem","isFirstIn","setIsFirstIn","useState","useLastCallback","setItem","Modal","noBackdropClose","onClose","useCacheBuster","cacheBuster","setCacheBuster","useCallback","useTransitionFixes","transitionElSelector","useEffect","setMinHeight","container","transitionEl","querySelector","tabsEl","newHeight","clientHeight","offsetHeight","requestMutation","style","minHeight","addEventListener","removeEventListener","applyTransitionFix","requestMeasure","overflowY","scrollBarWidth","offsetWidth","clientWidth","paddingRight","releaseTransitionFix","TABS","memo","withGlobal","mediaSearchType","isRightColumnShown","chatsById","usersById","isChatProtected","isProtected","RoomAttachmentsModal","setSharedMediaSearchType","searchSharedMediaMessages","transitionRef","oldLang","useOldLang","useLang","tabs","useMemo","tab","initialTab","activeTab","setActiveTab","handleSwitchTab","renderingActiveTab","tabType","resultType","getMore","isFirstTab","activeKey","resetCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","handleTransitionStop","handleSelectMedia","isUrl","checkIsUrl","photoSummary","webPageSummary","documentSummary","videoSummary","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","hasCloseButton","buildClassName","TabList","onSwitchTab","Transition","renderCount","onStart","onStop","InfiniteScroll","onLoadMore","noScrollRestore","noFastList","noSpinner","Spinner","NothingFound","dir","isRtl","teactFastList","Media","observeIntersection","Document","getMessageDocument","withDate","smaller","canAutoLoad","autoLoadFileMaxSizeMb","onSelect","WebLink","onlyWebPage","onMessageClick","renderContent","metaViewport","defaultViewportContent","getAttribute","preventEvent","preventDefault","ActiveCallHeader","useModuleLoader","Bundles","Calls","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","menuItems","MenuItem","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","LeftSearch","ActiveTag","folderType","setActiveTag","item","currentTag","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onDelete","xmlns","height","fill","d","PRESET_TAGS","PresetTagModal","activeTag","tagList","PRESET_FOLDER_ID","getAITags","dialogStyle","onClickTag","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","animationLevel","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","res","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","loading","isShowTip","tipShowRes","eventEmitter","on","Actions","UpdateAIChatFoldersApplying","off","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","isMainList","canDisplayArchive","shouldRenderFolders","StoryRibbon","contextRootElementSelector","AIChatFoldersTip","resolveTransitionName","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","aiChatFoldersLoading","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","emit","confirm","onOk","deleteAiChatFoldersFromUser","hideTip","onCancel","updateAIChatFoldersLoading","isApply","UpdateSettingAIChatFoldersLoading","IS_MULTIACCOUNT_SUPPORTED","AIKnowledgeIcon","alt","buildStyle","AITranslateIcon","AIChatFolderIcon","checked","disabled","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","UPDATE_DEFER_KEY","DropdownMenu","trigger","footer","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","setShouldRenderUpdateButton","webFireBase","setWebFireBase","handleFireBaseUpdate","force_update_current_version","compareVersion","UpdateFirebaseConfig","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","fireBaseAnalytics","deferUpdate","force_update_store_url","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","debouncedSetGlobalSearchQuery","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","currentScreen","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","waitBlob","Blob","serenaWaiting","serenaWaitUrl","createObjectURL","workBlob","serenaWorking","serenaWorkUrl","openChatAIWithInfo","setUnreadCount","dotLottie","setDotLottie","isSummary","setIsSummary","wrapper","currentTarget","closest","RoomStorage","updateRoomAIData","updateUnreadCount","updateSummaryState","intervalAnimate","interval","UpdateRoomAIUnreadCount","UpdateRoomAISummaryState","getRoomAIUnreadCount","summaryState","getRoomAISummaryState","summary","dotLottieRefCallback","DotLottieReact","autoplay","isDragging","setIsDragging","setPosition","dragStartRef","hasDraggedRef","isDraggingRef","positionRef","loadPosition","savedPosition","pos","savePosition","longPressTimerRef","handleMouseMove","deltaX","clientX","deltaY","clientY","newPosition","minX","innerWidth","maxY","innerHeight","handleMouseUp","handleMouseDown","handleClick","RoomAIEntryButton","onMouseDown","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","AITextarea","target","rows","autoFocus","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","FloatingActionButton","buttonClassName","InputText","success","readOnly","inputMode","maxLength","teactExperimentControlled","onInput","onKeyPress","onBlur","onPaste","labelText","fullClassName","htmlFor","backgroundColor","TextArea","maxLengthIndicator","noReplaceNewlines","resizeHeight","element","requestForcedReflow","useLayoutEffect","textarea","previousSelectionEnd","selectionEnd","AddTopicPanel","telegptSettings","openDrawer","drawerParams","useDrawerStore","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","setPhoneNumber","setIsLoading","initialValues","prompt","is_call","is_open","setForm","handleTopicNameChange","topicName","prev","handleTopicDescriptionChange","topicDescription","handlePhoneNumberChange","handleSave","updateUrgentTopic","DrawerKey","PersonalizeSettings","setSettingOption","showMessage","Switch","PickerChatItem","isChecked","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","Checkbox","clickOpenRoom","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","onSave","Input","Group","CustomizationPromptPanel","titleError","setTitleError","promptError","setPromptError","updateSummarizeTemplate","Message","getCurrentUserInfo","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","useChat","api","SERVER_API_URL","sendExtraMessageFields","initialMessages","role","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","similarResult","knowledgeEmbeddingStore","similaritySearch","similarItems","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","RoomsTab","ignoredIds","onIgnored","onUnIgnored","unIgnoreIds","GLOBAL_SUMMARY_CHATID","renderRoomItem","isIgnored","SummaryItem","template","selectedTemp","handleSelect","user_id","CustomizationPrompt","AddSummaryTemplate","handleAdd","SummarizeTab","curious_info","ignored_summary_chat_ids","curious_id","ignoredChatIds","getIdsFromEntityTypes","summaryTemplate","setSummaryTemplate","originSelectedTemp","setOriginSelectedTemp","setSelectedTemp","setIgnoredIds","actionsVisable","isEqual","handleTemplateSelect","selectedId","newSelected","handleDelete","newSelectedTemp","deleteSummarizeTemplate","newSummaryTemplate","handleIgnored","entityTypes","buildEntityTypeFromIds","handleUnIgnored","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","urgent_info","ignored_urgent_chat_ids","selectUrgentChatIds","setTopics","deleteUrgentTopic","t","urgentCheckTask","updateUrgentChats","selectedTabIndex","setSelectedTabIndex","hasBackDrawer","ChatPicker","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","SummaryHeaderActions","handleShowRightPanel","getGptSettings","SettingIcon","UrgentNotification","contextHolder","useNotification","msg","parsedMessage","padding","SerenaLogoPath","DangerIcon","notificationUrgentMessage","GlobalSummary","notificationMessage","setNotificationMessage","summaryMessages","setSummaryMessages","viewMessages","setViewMessages","pageInfo","setPageInfo","lastTime","scrollToBottom","scrollLocked","isScrollLock","useScrollToBottom","orderBy","createdAt","getTime","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","lastFocusTime","getRoomLastFocusTime","globalSummaryTask","initSummaryChats","deleteMessage","delMessage","uuidv4","msgs","parseMessage2SummaryStoreMessage","storeMessages","SerenaPath","Messages","loadMore","GlobalSummaryWrapper","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","disablePictureInPicture","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","PortraitTagColors","UserPortraitBaseCard","portraitInfo","setPortraitInfo","getPortraitInfo","userPortrait","getUserPortrait","handlePortraitClick","openUserPortrait","usernames","langs","UserPortraitBasicCardMenu","menuRef","menuPositionOptions","markMouseInside","useMouseInside","withPortal","noCompact","UserPortraitBasicCard","SenderGroupAvatar","avatarPeer","handleAvatarClick","hiddenName","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","contextMenuAnchor","setContextMenuAnchor","triggerRef","getTriggerElement","getMenuElement","getRootElement","getLayout","shouldAvoidNegativePosition","handleActivateSymbolMenu","triggerEl","getBoundingClientRect","ResponsiveHoverButton","onActivate","anchor","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","avatarRef","canMention","shouldRenderContextMenu","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","debounceMs","threshold","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","Content","runDebouncedForScroll","autoTranslate","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","translationLanguage","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadFactChecks","requestMessageTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","rememberScrollPositionRef","preservedItemElements","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","AccountInfo","StarsRequired","onScroll","RequirementToContactMessage","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","handleAnalyticsMessage","isMeetingInitiator","messageText","ASK_MEETING_TIME_AND_EMAIL","ASK_MEETING_TIME","ASK_MEETING_EMAIL","MEETING_INVITATION_TIP","existingMeetTask","ScheduleMeeting","cleanup","scheduleMeeting","create","timeout","meetingMentionMessage","createMeetingMentionMessage","storeMessage","parseMessage2StoreMessage","AddRoomAIMessage","IntentionToScheduleMeeting","initResize","resetResize","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","newWidth","stopDrag","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIEntryWrapper","onUnpin","teactOrderKey","AgeVerificationModalAsync","modal","AgeVerificationModal","MODALS","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","actionItemClassName","RoomActions","insertMessage","handleScheduleMeeting","scheduleGoogleMeeting","handleSummarize","summaryRoomMessage","handleActionItems","generateRoomActionItems","handleActions","handleNewFeature","newFeatureMessage","createNewFeatureReminderMessage","RoomAIActions","popoverContent","handleMediaSummarize","openRoomAttachmentsModal","Popover","placement","overlayClassName","domValue","RoomAIInput","RoomAIInner","tokenRef","CHATAI_IDB_STORE","newMessages","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","createGoogleLoginMessage","mergeMesssage","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","rightPanelBg","formMessage","toolsEmbeddingStore","searchPortrait","getHitTools","toolResults","toolCall","toolName","auth","getAuthState","isTokenValid","sendGAEvent","keyword","createUserPortraitMessage","RoomAI","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","allowMultiple","withStatus","itemInputType","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","nonInteractive","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","useIsIntersecting","transitionClassNames","useMediaTransitionDeprecated","decoding","formatMediaDuration","shouldWarnAboutSvg","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","loadMoreMembers","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","handleNewMemberDialogOpen","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noContent","isSpinner","forceRenderHiddenMembers","isViewportIdsEmpty","SearchingDuck","noLoop","MediaStory","onDateClick","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","renderSpinnerOrContent","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","realTimeAssistants","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","isUserPortrait","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","chatType","handleSwitchRealTimeAssistant","setShouldSkipTransition","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","UserPortrait","renderingContentKey","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","toggleUserPortrait","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","closeRoomAttachmentsModal","loadContentSettings","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","handleRoomAttachmentsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","useShowTransitionDeprecated","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}