{"version":3,"file":"9451.0fbc4a33255830ddd8c5.js","mappings":"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","sources":["webpack://TelyAI/./src/components/common/PasswordMonkey.tsx","webpack://TelyAI/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://TelyAI/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://TelyAI/./src/hooks/usePictureInPicture.ts","webpack://TelyAI/./src/hooks/useBlur.ts","webpack://TelyAI/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://TelyAI/./src/hooks/useBlurSync.ts","webpack://TelyAI/./src/components/common/ReportAvatarModal.tsx","webpack://TelyAI/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://TelyAI/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://TelyAI/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://TelyAI/./src/hooks/useSignalRef.ts","webpack://TelyAI/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://TelyAI/./src/hooks/useCurrentTimeSignal.ts","webpack://TelyAI/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://TelyAI/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://TelyAI/./src/lib/video-preview/VideoPreview.ts","webpack://TelyAI/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://TelyAI/./src/components/mediaViewer/SeekLine.tsx","webpack://TelyAI/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://TelyAI/./src/components/mediaViewer/VideoPlayer.tsx","webpack://TelyAI/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://TelyAI/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://TelyAI/./src/components/mediaViewer/SenderInfo.tsx","webpack://TelyAI/./src/components/mediaViewer/MediaViewer.tsx","webpack://TelyAI/./src/components/story/StoryViewer.module.scss?5f32","webpack://TelyAI/./src/components/story/helpers/ghostAnimation.ts","webpack://TelyAI/./src/components/story/helpers/dimensions.ts","webpack://TelyAI/./src/components/story/hooks/useSlideSizes.ts","webpack://TelyAI/./src/components/story/hooks/useStoryProps.ts","webpack://TelyAI/./src/components/story/StealthModeModal.module.scss?40cf","webpack://TelyAI/./src/components/story/StealthModeModal.tsx","webpack://TelyAI/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://TelyAI/./src/components/story/privacy/AllowDenyList.tsx","webpack://TelyAI/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://TelyAI/./src/components/story/privacy/CloseFriends.tsx","webpack://TelyAI/./src/components/story/StorySettings.module.scss?b887","webpack://TelyAI/./src/components/story/StorySettings.tsx","webpack://TelyAI/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://TelyAI/./src/components/story/StoryCaption.tsx","webpack://TelyAI/./src/components/story/StoryFooter.module.scss?19b1","webpack://TelyAI/./src/components/story/StoryFooter.tsx","webpack://TelyAI/./src/components/story/StoryProgress.tsx","webpack://TelyAI/./src/components/story/StoryProgress.module.scss?59b4","webpack://TelyAI/./src/components/story/Story.tsx","webpack://TelyAI/./src/components/story/StoryPreview.tsx","webpack://TelyAI/./src/components/story/StorySlides.tsx","webpack://TelyAI/./src/hooks/useScrolledState.ts","webpack://TelyAI/./src/components/story/StoryViewModal.module.scss?06b1","webpack://TelyAI/./src/components/story/StoryView.tsx","webpack://TelyAI/./src/components/story/StoryViewModal.tsx","webpack://TelyAI/./src/components/story/StoryViewer.tsx","webpack://TelyAI/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://TelyAI/./src/components/common/RecipientPicker.tsx","webpack://TelyAI/./src/components/main/ForwardRecipientPicker.tsx","webpack://TelyAI/./src/components/main/DraftRecipientPicker.tsx","webpack://TelyAI/./src/components/main/AttachBotRecipientPicker.tsx","webpack://TelyAI/./src/components/main/Dialogs.tsx","webpack://TelyAI/./src/components/main/Notifications.tsx","webpack://TelyAI/./src/components/main/SafeLinkModal.tsx","webpack://TelyAI/./src/components/modals/map/MapModal.module.scss?0842","webpack://TelyAI/./src/components/modals/map/MapModal.tsx","webpack://TelyAI/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://TelyAI/./src/components/common/CalendarModal.tsx","webpack://TelyAI/./src/components/main/HistoryCalendar.tsx","webpack://TelyAI/./src/components/main/NewContactModal.tsx","webpack://TelyAI/./src/hooks/useDraggable.ts","webpack://TelyAI/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://TelyAI/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://TelyAI/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://TelyAI/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://TelyAI/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://TelyAI/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://TelyAI/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://TelyAI/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://TelyAI/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://TelyAI/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://TelyAI/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://TelyAI/./src/components/modals/webApp/WebAppModal.tsx","webpack://TelyAI/./src/components/main/BotTrustModal.tsx","webpack://TelyAI/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://TelyAI/./src/components/main/DeleteFolderDialog.tsx","webpack://TelyAI/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://TelyAI/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://TelyAI/./src/components/common/SliderDots.module.scss?afdd","webpack://TelyAI/./src/components/common/SliderDots.tsx","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://TelyAI/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://TelyAI/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://TelyAI/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://TelyAI/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://TelyAI/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://TelyAI/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://TelyAI/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://TelyAI/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://TelyAI/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://TelyAI/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://TelyAI/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://TelyAI/./src/components/main/premium/PremiumMainModal.tsx","webpack://TelyAI/./src/components/common/pickers/ItemPicker.tsx","webpack://TelyAI/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://TelyAI/./src/components/common/CountryPickerModal.tsx","webpack://TelyAI/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://TelyAI/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://TelyAI/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://TelyAI/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://TelyAI/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://TelyAI/./src/components/main/premium/GiveawayModal.tsx","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://TelyAI/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://TelyAI/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://TelyAI/./src/components/middle/composer/StickerSetCover.tsx","webpack://TelyAI/./src/components/common/StickerButton.tsx","webpack://TelyAI/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://TelyAI/./src/components/common/reactions/ReactionEmoji.tsx","webpack://TelyAI/./src/components/common/StickerSet.tsx","webpack://TelyAI/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://TelyAI/./src/components/common/CustomEmojiPicker.tsx","webpack://TelyAI/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://TelyAI/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://TelyAI/./src/components/left/main/StatusPickerMenu.tsx","webpack://TelyAI/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://TelyAI/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://TelyAI/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://TelyAI/./src/components/modals/boost/BoostModal.tsx","webpack://TelyAI/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://TelyAI/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://TelyAI/./src/util/getClosestEntry.ts","webpack://TelyAI/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://TelyAI/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://TelyAI/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://TelyAI/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://TelyAI/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://TelyAI/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://TelyAI/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://TelyAI/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://TelyAI/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://TelyAI/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://TelyAI/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://TelyAI/./src/components/modals/credits/CreditHistory.tsx","webpack://TelyAI/./src/components/modals/credits/CreditsModal.tsx","webpack://TelyAI/./src/components/modals/credits/CreditsModal.module.scss?9595","webpack://TelyAI/./src/components/modals/inviteFriends/InviteCode.tsx","webpack://TelyAI/./src/components/modals/inviteFriends/InviteFriendsModal.tsx","webpack://TelyAI/./src/components/modals/inviteFriends/InviteFriendsModal.module.scss?ed70","webpack://TelyAI/./src/components/modals/inviteCode/InviteCodeModal.module.scss?8848","webpack://TelyAI/./src/components/modals/inviteCode/InviteCodeModal.tsx","webpack://TelyAI/./src/components/modals/membership/PayPackageModal.module.scss?4847","webpack://TelyAI/./src/components/modals/membership/PayPackageModal.tsx","webpack://TelyAI/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://TelyAI/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://TelyAI/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://TelyAI/./src/components/common/AboutMonetizationModal.tsx","webpack://TelyAI/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://TelyAI/./src/components/common/VerificationMonetizationModal.tsx","webpack://TelyAI/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://TelyAI/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://TelyAI/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://TelyAI/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://TelyAI/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://TelyAI/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://TelyAI/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://TelyAI/./src/components/modals/reportModal/ReportModal.tsx","webpack://TelyAI/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://TelyAI/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://TelyAI/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://TelyAI/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://TelyAI/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://TelyAI/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://TelyAI/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://TelyAI/./src/components/right/hooks/useManagePermissions.ts","webpack://TelyAI/./src/components/main/PermissionCheckboxList.tsx","webpack://TelyAI/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://TelyAI/./src/components/common/DeleteMessageModal.tsx","webpack://TelyAI/./src/components/common/PinMessageModal.tsx","webpack://TelyAI/./src/components/common/UnpinAllMessagesModal.tsx","webpack://TelyAI/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://TelyAI/./src/components/middle/MessageSelectToolbar.tsx","webpack://TelyAI/./src/components/common/SeenByModal.tsx","webpack://TelyAI/./src/components/common/SeenByModal.module.scss?1d45","webpack://TelyAI/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://TelyAI/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://TelyAI/./src/components/middle/ReactorListModal.tsx","webpack://TelyAI/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://TelyAI/./src/components/middle/ChatLanguageModal.tsx","webpack://TelyAI/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://TelyAI/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://TelyAI/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://TelyAI/./src/components/chatAssistant/vector-storage/common/helpers.ts","webpack://TelyAI/./src/components/chatAssistant/vector-storage/VectorStorage.ts","webpack://TelyAI/./src/components/chatAssistant/vector-storage/common/constants.ts","webpack://TelyAI/./src/components/chatAssistant/vector-store.ts","webpack://TelyAI/./src/components/chatAssistant/ai-search/AISearchInput.tsx","webpack://TelyAI/./src/components/chatAssistant/ai-search/AISearch.tsx","webpack://TelyAI/./src/components/left/search/AISearchWrapper.tsx","webpack://TelyAI/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://TelyAI/./src/components/left/search/AudioResults.tsx","webpack://TelyAI/./src/hooks/useSelectWithEnter.ts","webpack://TelyAI/./src/components/left/search/LeftSearchResultChat.tsx","webpack://TelyAI/./src/components/left/search/BotAppResults.tsx","webpack://TelyAI/./src/components/left/search/ChatMessage.tsx","webpack://TelyAI/./src/components/left/search/DateSuggest.tsx","webpack://TelyAI/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://TelyAI/./src/components/left/search/ChatMessageResults.tsx","webpack://TelyAI/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://TelyAI/./src/components/left/search/RecentContacts.tsx","webpack://TelyAI/./src/components/left/search/ChatResults.tsx","webpack://TelyAI/./src/components/left/search/FileResults.tsx","webpack://TelyAI/./src/components/left/search/LinkResults.tsx","webpack://TelyAI/./src/components/left/search/MediaResults.tsx","webpack://TelyAI/./src/components/left/search/PublicPostsSearchLauncher.module.scss?4ff7","webpack://TelyAI/./src/components/left/search/PublicPostsSearchLauncher.tsx","webpack://TelyAI/./src/components/left/search/PublicPostsResults.tsx","webpack://TelyAI/./src/components/left/search/LeftSearch.tsx","webpack://TelyAI/./src/hooks/reducers/useTwoFaReducer.ts","webpack://TelyAI/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://TelyAI/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://TelyAI/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://TelyAI/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://TelyAI/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://TelyAI/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://TelyAI/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://TelyAI/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://TelyAI/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://TelyAI/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://TelyAI/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://TelyAI/./src/components/left/settings/PremiumStatusItem.tsx","webpack://TelyAI/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://TelyAI/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://TelyAI/./src/components/left/settings/PrivacyMessages.tsx","webpack://TelyAI/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://TelyAI/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://TelyAI/./src/components/left/settings/SettingsActiveSession.tsx","webpack://TelyAI/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://TelyAI/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://TelyAI/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://TelyAI/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://TelyAI/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://TelyAI/./src/components/common/StickerSetCard.tsx","webpack://TelyAI/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://TelyAI/./src/components/left/settings/SettingsDataStorage.tsx","webpack://TelyAI/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://TelyAI/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://TelyAI/./src/components/common/ManageUsernames.tsx","webpack://TelyAI/./src/components/common/ManageUsernames.module.scss?3086","webpack://TelyAI/./src/components/common/UsernameInput.tsx","webpack://TelyAI/./src/components/left/settings/SettingsEditProfile.tsx","webpack://TelyAI/./src/components/left/settings/SettingsExperimental.tsx","webpack://TelyAI/./src/components/left/settings/SettingsGeneral.tsx","webpack://TelyAI/./src/components/left/settings/WallpaperTile.tsx","webpack://TelyAI/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://TelyAI/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://TelyAI/./src/components/left/settings/SettingsHeader.tsx","webpack://TelyAI/./src/hooks/useMultiClick.ts","webpack://TelyAI/./src/components/left/settings/SettingsLanguage.tsx","webpack://TelyAI/./src/components/left/settings/SettingsMain.tsx","webpack://TelyAI/./src/components/left/settings/SettingsNotifications.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPerformance.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPrivacy.tsx","webpack://TelyAI/./src/components/left/settings/BlockUserModal.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://TelyAI/./src/components/left/settings/helpers/privacy.ts","webpack://TelyAI/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://TelyAI/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://TelyAI/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://TelyAI/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://TelyAI/./src/components/left/settings/SettingsStickers.tsx","webpack://TelyAI/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://TelyAI/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://TelyAI/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://TelyAI/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://TelyAI/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://TelyAI/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://TelyAI/./src/components/left/settings/Settings.tsx","webpack://TelyAI/./src/components/left/aiKnowledge/AIKnowledgeEditor.tsx","webpack://TelyAI/./src/components/left/aiKnowledge/AddKnowledgeModal.tsx","webpack://TelyAI/./src/components/left/aiKnowledge/AIKnowledgeContent.tsx","webpack://TelyAI/./src/components/left/aiKnowledge/AIKnowledgeHeader.tsx","webpack://TelyAI/./src/components/left/aiKnowledge/AIKnowledge.tsx","webpack://TelyAI/./src/components/left/aiTranslate/AutoTranslateLanguage.module.scss?c18f","webpack://TelyAI/./src/components/left/aiTranslate/AutoTranslateLanguage.tsx","webpack://TelyAI/./src/components/left/aiTranslate/AITranslateContent.tsx","webpack://TelyAI/./src/components/left/aiTranslate/AITranslateHeader.tsx","webpack://TelyAI/./src/components/left/aiTranslate/AITranslate.tsx","webpack://TelyAI/./src/components/left/main/ContactList.tsx","webpack://TelyAI/./src/components/left/newChat/NewChatStep1.tsx","webpack://TelyAI/./src/components/left/newChat/NewChatStep2.tsx","webpack://TelyAI/./src/components/left/newChat/NewChat.tsx","webpack://TelyAI/./src/components/left/ArchivedChats.tsx","webpack://TelyAI/./src/components/left/ChatFolderModal.tsx","webpack://TelyAI/./src/components/left/ChatFolderModal.module.scss?6993","webpack://TelyAI/./src/components/left/MuteChatModal.tsx","webpack://TelyAI/./src/components/common/StickerSetModal.tsx","webpack://TelyAI/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://TelyAI/./src/components/common/CustomEmojiSetsModal.tsx","webpack://TelyAI/./src/components/middle/HeaderMenuContainer.tsx","webpack://TelyAI/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://TelyAI/./src/components/middle/search/MiddleSearchResult.tsx","webpack://TelyAI/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://TelyAI/./src/components/middle/search/MiddleSearch.tsx","webpack://TelyAI/./src/hooks/events/useOutsideClick.ts","webpack://TelyAI/./src/components/middle/composer/StickerPicker.tsx","webpack://TelyAI/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://TelyAI/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://TelyAI/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://TelyAI/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://TelyAI/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://TelyAI/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://TelyAI/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://TelyAI/./src/util/visibility/isFullyVisible.ts","webpack://TelyAI/./src/util/findInViewport.ts","webpack://TelyAI/./src/util/setTooltipItemVisible.ts","webpack://TelyAI/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://TelyAI/./src/components/middle/composer/MentionTooltip.tsx","webpack://TelyAI/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://TelyAI/./src/components/middle/composer/AttachmentModal.tsx","webpack://TelyAI/./src/components/middle/composer/PollModal.tsx","webpack://TelyAI/./src/components/middle/composer/ToDoListModal.tsx","webpack://TelyAI/./src/components/middle/composer/EmojiButton.tsx","webpack://TelyAI/./src/components/middle/composer/EmojiCategory.tsx","webpack://TelyAI/./src/components/middle/composer/EmojiPicker.tsx","webpack://TelyAI/./src/components/common/GifButton.tsx","webpack://TelyAI/./src/components/middle/composer/GifPicker.tsx","webpack://TelyAI/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://TelyAI/./src/components/middle/composer/SymbolMenu.tsx","webpack://TelyAI/./src/components/middle/composer/ChatCommand.tsx","webpack://TelyAI/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://TelyAI/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://TelyAI/./src/components/middle/composer/BotCommandMenu.tsx","webpack://TelyAI/./src/components/middle/composer/StickerTooltip.tsx","webpack://TelyAI/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://TelyAI/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://TelyAI/./src/components/middle/composer/CustomSendMenu.tsx","webpack://TelyAI/./src/components/middle/composer/TextFormatter.tsx","webpack://TelyAI/./src/util/getKeyFromEvent.ts","webpack://TelyAI/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://TelyAI/./src/components/middle/composer/EmojiTooltip.tsx","webpack://TelyAI/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://TelyAI/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://TelyAI/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://TelyAI/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://TelyAI/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://TelyAI/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://TelyAI/./src/components/middle/composer/SendAsMenu.tsx","webpack://TelyAI/./src/components/right/StickerSetResult.tsx","webpack://TelyAI/./src/components/right/StickerSearch.tsx","webpack://TelyAI/./src/components/right/GifSearch.tsx","webpack://TelyAI/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://TelyAI/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://TelyAI/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://TelyAI/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://TelyAI/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://TelyAI/./src/components/right/statistics/Statistics.tsx","webpack://TelyAI/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://TelyAI/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://TelyAI/./src/components/right/statistics/MessageStatistics.tsx","webpack://TelyAI/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://TelyAI/./src/components/right/statistics/StoryStatistics.tsx","webpack://TelyAI/./src/components/right/PollAnswerResults.tsx","webpack://TelyAI/./src/components/right/PollResults.tsx","webpack://TelyAI/./src/components/right/ManageTopic.module.scss?04dd","webpack://TelyAI/./src/components/right/CreateTopic.tsx","webpack://TelyAI/./src/components/right/EditTopic.tsx","webpack://TelyAI/./src/components/right/management/ManageBot.tsx","webpack://TelyAI/./src/components/right/management/ManageChannel.tsx","webpack://TelyAI/./src/components/right/management/ManageChatAdministrators.tsx","webpack://TelyAI/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://TelyAI/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://TelyAI/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://TelyAI/./src/components/right/management/ManageDiscussion.tsx","webpack://TelyAI/./src/components/right/management/ManageGroup.tsx","webpack://TelyAI/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://TelyAI/./src/components/right/management/ManageGroupMembers.tsx","webpack://TelyAI/./src/components/right/management/ManageGroupPermissions.tsx","webpack://TelyAI/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://TelyAI/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://TelyAI/./src/components/right/management/ManageInvite.tsx","webpack://TelyAI/./src/components/right/management/ManageInviteInfo.tsx","webpack://TelyAI/./src/components/right/management/ManageInvites.tsx","webpack://TelyAI/./src/components/right/management/JoinRequest.tsx","webpack://TelyAI/./src/components/right/management/ManageJoinRequests.tsx","webpack://TelyAI/./src/components/right/management/ManageReactions.tsx","webpack://TelyAI/./src/components/right/management/ManageUser.tsx","webpack://TelyAI/./src/components/right/management/NewDiscussionGroup.tsx","webpack://TelyAI/./src/components/right/management/Management.tsx","webpack://TelyAI/./src/components/common/helpers/detectCardType.ts","webpack://TelyAI/./src/hooks/reducers/usePaymentReducer.ts","webpack://TelyAI/./src/components/payment/Checkout.module.scss?4e47","webpack://TelyAI/./src/components/payment/Checkout.tsx","webpack://TelyAI/./src/components/payment/ConfirmPayment.tsx","webpack://TelyAI/./src/components/payment/PasswordConfirm.tsx","webpack://TelyAI/./src/hooks/useFocusAfterAnimation.ts","webpack://TelyAI/./src/components/payment/CardInput.tsx","webpack://TelyAI/./src/components/middle/helpers/inputFormatters.ts","webpack://TelyAI/./src/components/payment/ExpiryInput.tsx","webpack://TelyAI/./src/components/payment/PaymentInfo.tsx","webpack://TelyAI/./src/components/payment/SavedPaymentCredentials.tsx","webpack://TelyAI/./src/components/payment/Shipping.tsx","webpack://TelyAI/./src/components/payment/ShippingInfo.tsx","webpack://TelyAI/./src/components/payment/PaymentModal.tsx","webpack://TelyAI/./src/components/payment/ReceiptModal.tsx","webpack://TelyAI/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://TelyAI/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://TelyAI/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://TelyAI/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://TelyAI/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://TelyAI/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://TelyAI/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3"],"sourcesContent":["import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\nimport { selectWebPageFromMessage } from '../../../global/selectors';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\nexport type ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function selectViewableMedia(global: GlobalState, params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  const webPage = selectWebPageFromMessage(global, params.message);\n  if (webPage?.webpageType === 'full') {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n  viewableMedia?: ViewableMedia;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  viewableMedia,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = viewableMedia || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n      viewableMedia,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem, ViewableMedia } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectTabState,\n} from '../../global/selectors';\nimport { selectMessageTimestampableDuration } from '../../global/selectors/media';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport selectViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  viewableMedia?: ViewableMedia;\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  viewableMedia,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = viewableMedia || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n    const viewableMedia = selectViewableMedia(global, item);\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n      viewableMedia,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import React from '@teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { getMediaViewerItem, type MediaViewerItem, type ViewableMedia } from './helpers/getViewableMedia';\nimport selectViewableMedia from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  currentItem?: MediaViewerItem;\n  viewableMedia?: ViewableMedia;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n  currentItem,\n  viewableMedia,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  const { media, isSingle } = viewableMedia || {};\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const avatarOwner = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (avatarOwner) {\n        canUpdateMedia = isUserId(avatarOwner.id)\n          ? avatarOwner.id === currentUserId : isChatAdmin(avatarOwner as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      const currentItem = getMediaViewerItem({\n        avatarOwner, standaloneMedia, profilePhotos, mediaIndex,\n      });\n      const viewableMedia = selectViewableMedia(global, currentItem);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n        currentItem,\n        viewableMedia,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    const currentItem = getMediaViewerItem({\n      message, standaloneMedia, mediaIndex, sponsoredMessage,\n    });\n    const viewableMedia = selectViewableMedia(global, currentItem);\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n      currentItem,\n      viewableMedia,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import React from '@teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import React from '@teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import React from '@teact';\nimport { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import React from '@teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import React from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import React from '@teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import React from '@teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import React from '@teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import React from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import React from '@teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import React from '@teact';\nimport {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import React from '@teact';\nimport {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../../config';\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n        const minAge = getGlobal().appConfig?.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n        const ageFromParam = eventData.age || 0;\n\n        if (passed && ageFromParam >= minAge) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import React from '@teact';\nimport { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import React from '@teact';\nimport { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"sticker-wrapper\":\"sNJHQkwe\",\"stickerWrapper\":\"sNJHQkwe\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\",\"starParticlesHeader\":\"z0zfJObh\",\"giftParticlesHeader\":\"lzalivui\"};","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiStarGift,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { getStickerFromGift } from '../../common/helpers/gifts';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  gift?: ApiStarGift;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n  gift,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (gift) {\n      return lang('PremiumGiftHeader');\n    }\n\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (gift) {\n      const perUserTotal = gift.type !== 'starGiftUnique' ? gift.perUserTotal : 0;\n      return lang('DescriptionGiftPremiumRequired', { count: perUserTotal });\n    }\n\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderHeader() {\n    if (gift) {\n      const giftSticker = getStickerFromGift(gift);\n      return (\n        <ParticlesHeader\n          model=\"sticker\"\n          sticker={giftSticker}\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.giftParticlesHeader}\n        />\n      );\n    }\n\n    if (!fromUserStatusEmoji) {\n      return (\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"purple\"\n          title={getHeaderText()}\n          description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n          className={styles.starParticlesHeader}\n        />\n      );\n    }\n\n    return (\n      <>\n        <CustomEmoji\n          className={styles.statusEmoji}\n          onClick={handleOpenStatusSet}\n          documentId={fromUserStatusEmoji.id}\n          isBig\n          size={STATUS_EMOJI_SIZE}\n        />\n        <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n          {getHeaderText()}\n        </h2>\n        <div className={styles.description}>\n          {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n        </div>\n      </>\n    );\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {renderHeader()}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    gift: premiumModal?.gift,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import React from '@teact';\nimport type { TeactNode } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import React from '@teact';\nimport type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '@teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  const isLoading = !shouldRenderContent && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} name=\"fade\" activeKey={isLoading ? 0 : 1} shouldCleanup>\n      {!shouldRenderContent && !noPopulatedSets ? (\n        <Loading />\n      ) : !shouldRenderContent && noPopulatedSets ? (\n        <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n          >\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n              {allSets.map(renderCover)}\n            </div>\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={listClassName}\n          >\n            {allSets.map((stickerSet, i) => {\n              const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n                || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n              const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n              return (\n                <StickerSet\n                  key={stickerSet.id}\n                  stickerSet={stickerSet}\n                  loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n                  index={i}\n                  idPrefix={prefix}\n                  observeIntersection={observeIntersectionForSet}\n                  observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                  observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                  isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                  isSavedMessages={isSavedMessages}\n                  isStatusPicker={isStatusPicker}\n                  isReactionPicker={isReactionPicker}\n                  shouldHideHeader={shouldHideHeader}\n                  withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n                  isChatEmojiSet={isChatEmojiSet}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  selectedReactionIds={selectedReactionIds}\n                  availableReactions={availableReactions}\n                  isTranslucent={isTranslucent}\n                  onReactionSelect={onReactionSelect}\n                  onReactionContext={onReactionContext}\n                  onStickerSelect={handleEmojiSelect}\n                  onContextMenuOpen={onContextMenuOpen}\n                  onContextMenuClose={onContextMenuClose}\n                  onContextMenuClick={onContextMenuClick}\n                  forcePlayback\n                />\n              );\n            })}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import React from '@teact';\nimport { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import React from '@teact';\nimport { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { VERIFY_AGE_MIN_DEFAULT } from '../../../config';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n  verifyAgeMin: number;\n};\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n  verifyAgeMin,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: verifyAgeMin }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: verifyAgeMin,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig?.verifyAgeBotUsername;\n  const verifyAgeMin = appConfig?.verifyAgeMin || VERIFY_AGE_MIN_DEFAULT;\n\n  return {\n    verifyAgeBotUsername,\n    verifyAgeMin,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import React from '@teact';\nimport type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","import React, { useEffect, useState } from 'react';\nimport type { TableColumnsType } from 'antd';\nimport { ConfigProvider, Table, theme } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport { selectTheme } from '../../../global/selectors';\nimport { getCreditHistory } from '../../chatAssistant/utils/telegpt-api';\nimport { formatPostgresTimestamp } from '../../chatAssistant/utils/util';\n\ninterface DataType {\n  key: React.Key;\n  id: string;\n  userId: string;\n  amount: number;\n  source: number;\n  description: string;\n  type: string;\n  createdAt: string;\n}\n\nexport const CreditHistory = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [total, setTotal] = useState(10);\n  const [creditList, setCreditList] = useState<DataType[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { defaultAlgorithm, darkAlgorithm } = theme;\n  const global = getGlobal();\n  const systemTheme = selectTheme(global);\n  const columns: TableColumnsType<DataType> = [\n    {\n      title: 'Detail',\n      dataIndex: 'description',\n      key: 'description',\n    },\n    {\n      title: 'Credits',\n      dataIndex: 'amount',\n      key: 'amount',\n    },\n    {\n      title: 'Time',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      render: (value: string) => formatPostgresTimestamp(value),\n    },\n  ];\n  const getCreditHistoryList = async (page: number) => {\n    const res = await getCreditHistory(page);\n    setLoading(false);\n    const { records, pagination } = res.data;\n    if (pagination.total > 0) {\n      setTotal(pagination.total);\n      setCurrentPage(page);\n    }\n    if (records.length > 0) {\n      setCreditList(records);\n    }\n  };\n\n  const onChange = (page: number) => {\n    setLoading(true);\n    getCreditHistoryList(page);\n  };\n\n  useEffect(() => {\n    getCreditHistoryList(1);\n  }, []);\n\n  return (\n    <ConfigProvider theme={{\n      algorithm: systemTheme === 'dark' ? darkAlgorithm : defaultAlgorithm,\n    }}\n    >\n      <Table<DataType>\n        columns={columns}\n        dataSource={creditList}\n        loading={loading}\n        pagination={{\n          showSizeChanger: false,\n          current: currentPage,\n          pageSize: 10,\n          total,\n          onChange,\n        }}\n      />\n    </ConfigProvider>\n  );\n};\n","import React, { memo, useEffect, useRef } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { injectComponent } from '../../chatAssistant/injectComponent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Modal from '../../ui/Modal';\nimport { CreditHistory } from './CreditHistory';\n\nimport styles from './CreditsModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['creditsModal'];\n};\nconst CreditsModal = ({ modal }: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { closeCreditsModal } = getActions();\n  const injectElement = injectComponent({\n    component: CreditHistory,\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeCreditsModal();\n  });\n\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      // 类型断言确保 ref 是 HTMLElement\n      injected = injectElement(containerRef.current as HTMLElement);\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, [injectElement]);\n\n  if (!modal?.isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={Boolean(modal?.isOpen)}\n      contentClassName={styles.content}\n      title=\"Credits Detail\"\n      hasCloseButton\n      onClose={handleClose}\n    >\n      <div ref={containerRef}></div>\n    </Modal>\n  );\n};\n\nexport default memo(CreditsModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"aZyt0u4J\"};","import React, { useEffect, useState } from 'react';\nimport type { TableColumnsType } from 'antd';\nimport { ConfigProvider, Table, theme } from 'antd';\nimport cx from 'classnames';\nimport copy from 'copy-to-clipboard';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { selectTheme } from '../../../global/selectors';\nimport { getMyInviteCodes } from '../../chatAssistant/utils/telegpt-api';\nimport { formatPostgresTimestamp } from '../../chatAssistant/utils/util';\n\nimport Icon from '../../chatAssistant/component/Icon';\n\ninterface DataType {\n  key: React.Key;\n  inviteCode: string;\n  invitedUser: string;\n  invitedUserName: string;\n  points: number;\n  invitedAt: string;\n  status: 'available' | 'used';\n}\n\nexport const InviteCode = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [total, setTotal] = useState(10);\n  const [inviteCodes, setInviteCodes] = useState<DataType[]>([]);\n  const [loading, setLoading] = useState(true);\n  const { defaultAlgorithm, darkAlgorithm } = theme;\n  const global = getGlobal();\n  const systemTheme = selectTheme(global);\n  const handleCopy = (code: string) => {\n    copy(code);\n    getActions().showNotification({\n      message: 'TextCopied',\n    });\n  };\n  const columns: TableColumnsType<DataType> = [\n    {\n      title: 'Code',\n      dataIndex: 'inviteCode',\n      key: 'inviteCode',\n      render: (value: string, record: DataType) => {\n        return (\n          <div\n            className={cx('w-[100px] h-[36px] text-white text-[14px] flex items-center justify-center gap-[6px] rounded-[8px] bg-[#369CFF]', {\n              'bg-[#D6D6D6]': record.status === 'used',\n            })}\n            onClick={() => handleCopy(value)}\n          >\n            <span>{value}</span>\n            <Icon name=\"copy\" className=\"cursor-pointer text-[18px]\" />\n          </div>\n        );\n      },\n    },\n    {\n      title: 'Invitees',\n      dataIndex: 'invitedUserName',\n      key: 'invitedUserName',\n    },\n    {\n      title: 'Credits',\n      dataIndex: 'points',\n      key: 'points',\n      render: (value: number) => {\n        return value ? value : '';\n      },\n    },\n    {\n      title: 'Time',\n      dataIndex: 'invitedAt',\n      key: 'invitedAt',\n      render: (value: string) => {\n        if (value) {\n          return formatPostgresTimestamp(value);\n        }\n        return '';\n      },\n    },\n  ];\n\n  const getCodeList = async (page: number) => {\n    const res = await getMyInviteCodes(page);\n    setLoading(false);\n    const { records, pagination } = res.data;\n    if (pagination.total > 0) {\n      setTotal(pagination.total);\n      setCurrentPage(page);\n    }\n    if (records.length > 0) {\n      setInviteCodes(records);\n    }\n  };\n\n  const onChange = (page: number) => {\n    setLoading(true);\n    getCodeList(page);\n  };\n\n  useEffect(() => {\n    getCodeList(1);\n  }, []);\n\n  return (\n    <ConfigProvider theme={{\n      algorithm: systemTheme === 'dark' ? darkAlgorithm : defaultAlgorithm,\n    }}\n    >\n      <Table<DataType>\n        columns={columns}\n        dataSource={inviteCodes}\n        loading={loading}\n        pagination={{\n          showSizeChanger: false,\n          current: currentPage,\n          pageSize: 10,\n          total,\n          onChange,\n        }}\n      />\n    </ConfigProvider>\n  );\n};\n","/* eslint-disable no-null/no-null */\nimport React, { memo, useCallback, useEffect, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport LinkIcon from '../../../components/chatAssistant/assets/invite/link.svg';\nimport UserGroupIcon from '../../../components/chatAssistant/assets/invite/user-group.svg';\nimport { injectComponent } from '../../chatAssistant/injectComponent';\nimport { getMyInvitation } from '../../chatAssistant/utils/telegpt-api';\n\nimport Icon from '../../common/icons/Icon';\nimport Modal from '../../ui/Modal';\nimport { InviteCode } from './InviteCode';\n\nimport styles from './InviteFriendsModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteFriendsModal'];\n};\n\nconst InviteFriendsModal = ({ modal }: OwnProps) => {\n  const { closeInviteFriendsModal } = getActions();\n  const [myInviteCode, setMyInviteCode] = useState<string | null>(null);\n  const contentRef = useRef<HTMLDivElement>();\n  const injectElement = injectComponent({\n    component: InviteCode,\n  });\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (contentRef.current) {\n      // 类型断言确保 ref 是 HTMLElement\n      injected = injectElement(contentRef.current as HTMLElement);\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, [injectElement]);\n\n  const getMyInvitationInfo = () => {\n    getMyInvitation().then((res) => {\n      if (res.code === 0) {\n        setMyInviteCode(res.data.inviteCode);\n      }\n    });\n  };\n\n  useEffect(() => {\n    if (modal?.isOpen) {\n      const cachedInvitation = localStorage.getItem('user-invitation');\n      const invitation = cachedInvitation ? JSON.parse(cachedInvitation) : {};\n      if (invitation?.inviteCode) {\n        setMyInviteCode(invitation.inviteCode);\n      } else {\n        getMyInvitationInfo();\n      }\n    }\n  }, [modal?.isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeInviteFriendsModal();\n  }, [closeInviteFriendsModal]);\n\n  if (!modal?.isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={modal.isOpen}\n      onClose={handleClose}\n      className={styles.modal}\n    >\n      <div className={styles.header}>\n        {/* <img src={HeaderBg} alt=\"\" /> */}\n        <div className={styles.headerBadge}></div>\n        <Icon className=\"text-[18px] cursor-pointer z-10 mt-[1rem]\" name=\"close\" onClick={handleClose} />\n      </div>\n      <div className={styles.content}>\n        <div className=\"flex flex-col gap-[12px]\">\n          <div className=\"flex items-center gap-[10px]\">\n            <img className=\"w-[20px] h-[20px]\" src={LinkIcon} alt=\"\" />\n            <span className=\"text-[16px] text-[var(--color-text)] font-semibold\">\n              My Code\n            </span>\n          </div>\n          <div className=\"text-[var(--color-text-secondary)] text-[14px]\">\n            This is your exclusive invitation code, it has already been linked to your account.\n          </div>\n          <div className=\"text-[14px] text-[var(--color-text)]\">\n            <span className=\"font-bold\">{myInviteCode}</span>\n            <span>(Used by my account)</span>\n          </div>\n        </div>\n        <div className=\"flex flex-col gap-[12px] mt-[18px]\">\n          <div className=\"flex items-center gap-[10px]\">\n            <img className=\"w-[20px] h-[20px]\" src={UserGroupIcon} alt=\"\" />\n            <span className=\"text-[16px] text-[var(--color-text)] font-semibold\">\n              Get Credits for Inviting Friends\n            </span>\n          </div>\n          <div className=\"text-[var(--color-text-secondary)] text-[14px]\">\n            Share the invitation codes below with your friends! When a new user signs up and uses your invitation code, both you and the invitee will each receive a 100 credit bonus.\n          </div>\n          <div ref={contentRef}></div>\n        </div>\n\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(InviteFriendsModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"Atk759rS\",\"content\":\"EsOVcnjd\",\"header\":\"JncR5ehY\",\"headerBadge\":\"b_IDNEEX\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"tHOvsXvB\",\"container\":\"aE_tTreD\",\"header\":\"pvOW79XD\",\"title\":\"QQrZjQwa\",\"subtitle\":\"mNshS0kL\",\"content\":\"VPxgzl1P\",\"input\":\"AAMVR_VT\",\"error\":\"hHHsDtnR\",\"footer\":\"qoqDTwEz\",\"submitButton\":\"PoDbRDyr\"};","/* eslint-disable no-console */\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport HeaderBg from '../../chatAssistant/assets/share-header-bg.png';\nimport { submitInviteCode } from '../../chatAssistant/utils/telegpt-api';\n\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './InviteCodeModal.module.scss';\n\nexport interface OwnProps {\n  modal: TabState['inviteCodeModal'];\n}\n\nconst InviteCodeModal = ({ modal }: OwnProps) => {\n  const { closeInviteCodeModal } = getActions();\n  const [inviteCode, setInviteCode] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState('');\n\n  const handleSubmit = () => {\n    if (!inviteCode.trim()) return;\n\n    setIsSubmitting(true);\n    try {\n      submitInviteCode(inviteCode).then((res) => {\n        if (res.code === 0) {\n          closeInviteCodeModal();\n          setError('');\n        } else {\n          console.log('Failed to submit invite code:', res);\n          setError(res.error);\n        }\n      });\n    } catch (error) {\n      console.error('Failed to submit invite code:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setInviteCode(e.target.value);\n  };\n\n  if (!modal?.isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={modal.isOpen}\n      onClose={() => {}} // 不允许关闭\n      className={styles.modal}\n    >\n      <div className={styles.container}>\n        <div className={styles.header}>\n          <img src={HeaderBg} alt=\"\" />\n        </div>\n        <div className={styles.content}>\n          <h3 className={styles.title}>Invitation Code</h3>\n\n          <InputText\n            value={inviteCode}\n            onChange={handleInputChange}\n            placeholder=\"Please enter the invitation code\"\n            className={styles.input}\n          />\n          <div className={styles.error}>{error}</div>\n          <div className={styles.actions}>\n            <Button\n              onClick={handleSubmit}\n              disabled={!inviteCode.trim() || isSubmitting}\n              className={styles.submitButton}\n              noForcedUpperCase\n            >\n              {isSubmitting ? 'Confirm...' : 'Confirm'}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(InviteCodeModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"iPYLjGRN\",\"container\":\"bXjDu4AH\",\"headerBadge\":\"MVw30piB\",\"header\":\"Ew6sXI7m\",\"title\":\"xxS1QyO1\",\"closeButton\":\"f2Wsapg3\",\"pricingCards\":\"BDPB7EkE\",\"pricingCard\":\"bYO5T_qM\",\"selected\":\"BE9SgHCo\",\"planTitle\":\"IlfR09Hu\",\"price\":\"DftVWLUr\",\"creditsInfo\":\"y999O3nR\",\"featuresTitle\":\"u2kltuIN\",\"feature\":\"WBuVoBis\",\"upgradeButton\":\"jOxFhAVG\",\"creditsInfoDescription\":\"ngIi6AD9\",\"period\":\"tcBLDlq0\",\"topContent\":\"fbVKY2k0\",\"cardHeader\":\"DXcB0v5g\",\"pricing\":\"UmPmxmgp\",\"priceRow\":\"lxGKzaAX\",\"botInfo\":\"J76Z3ZQP\",\"features\":\"UkLVxigA\",\"listdot\":\"uZi2jyLW\",\"checkIcon\":\"DLjk4XGB\"};","import React, { memo, useCallback, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getSubscriptionInfo } from '../../chatAssistant/utils/telegpt-api';\n\nimport Icon from '../../common/icons/Icon';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PayPackageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['payPackageModal'];\n};\n\ntype AllPlanType = 'free' | 'basic' | 'pro' | 'plus';\ntype PlanType = 'basic' | 'pro' | 'plus';\n\nconst PLAN_ORDER: Record<AllPlanType, number> = {\n  free: 0,\n  basic: 1,\n  pro: 2,\n  plus: 3,\n};\n\ninterface PricingPlan {\n  planType: PlanType;\n  title: string;\n  price: string;\n  period: string;\n  creditsInfo: string;\n  creditsInfoDescription: string;\n  buttonLink: string;\n  features: string[];\n  buttonText: string;\n  isSelected?: boolean;\n}\n\nconst PRICING_PLANS: Record<PlanType, PricingPlan> = {\n  basic: {\n    planType: 'basic',\n    title: 'Basic',\n    price: '$4.99',\n    period: '/month',\n    creditsInfo: '10,000 Credits monthly',\n    creditsInfoDescription: '10,000 extra credits first month [LIMITED TIME]',\n    buttonLink: 'https://buy.stripe.com/28E8wQeqhfPK2g5g014Ni05',\n    features: [\n      '1 daily Global Chat Summary',\n      '250 Group Chat Summary ',\n      '200 Images Summary ',\n      '60 mins video & Voice Summary',\n      '10k-characters AI Translation',\n      '10k-characters Grammar Check',\n      '60-pages Web & Doc Summary',\n      'AI Chat Folders',\n    ],\n    buttonText: 'Get Started',\n    isSelected: false,\n  },\n  pro: {\n    planType: 'pro',\n    title: 'Pro',\n    price: '$9.99',\n    period: '/month',\n    creditsInfo: '60,000 Credits monthly',\n    creditsInfoDescription: '60,000 extra credits first month [LIMITED TIME]',\n    buttonLink: 'https://buy.stripe.com/28EdRa2HzdHC3k9g014Ni07',\n    features: [\n      '3 daily Global Chat Summary',\n      '1k Group Chat Summary',\n      '1k Images Summary',\n      '300 min Video & Voice Summary',\n      '300k-characters AI Translation',\n      '300k-characters Grammar Check',\n      '300 pages Web & Doc Summary',\n      '120 Schedule Meetings',\n      'Urgent Alert',\n      'AI Chat Folders',\n      'Priority Support',\n    ],\n    buttonText: 'Upgrade',\n    isSelected: true,\n  },\n  plus: {\n    planType: 'plus',\n    title: 'Plus',\n    price: '$19.99',\n    period: '/month',\n    creditsInfo: '120,000 Credits monthly',\n    creditsInfoDescription: '120,000 extra credits first month [LIMITED TIME]',\n    buttonLink: 'https://buy.stripe.com/14A3cwbe5fPKcUJ4hj4Ni08',\n    features: [\n      '3 daily Global Chat Summary',\n      '2k Group Chat Summary ',\n      '2k Images Summary ',\n      '600 min Video & Voice Summary',\n      '600k-characters AI Translation',\n      '600k-characters Grammar Check',\n      '600 pages Web & Doc Summary',\n      'Unlimited Schedule Meetings',\n      'Urgent Alert',\n      'AI Chat Folders',\n      'Users Portrait',\n      'Priority Support',\n    ],\n    buttonText: 'Upgrade',\n    isSelected: false,\n  },\n};\n\nconst PayPackageModal = ({ modal }: OwnProps) => {\n  const { subscriptionInfo } = getGlobal();\n  const { subscriptionType } = subscriptionInfo;\n  const { closePayPackageModal, updateSubscriptionInfo } = getActions();\n  const [selectedPlan, setSelectedPlan] = useState<PlanType>(\n    subscriptionType === 'basic' ? 'pro' : subscriptionType === 'pro' ? 'plus' : subscriptionType === 'plus' ? 'plus' : 'basic',\n  );\n  const [curSubscriptionInfo, setCurSubscriptionInfo] = useState(subscriptionInfo);\n\n  useEffect(() => {\n    if (modal?.isOpen) {\n      getSubscriptionInfo().then(({ code, data }) => {\n        if (code === 0) {\n          setCurSubscriptionInfo(data);\n          const { subscriptionType, creditBalance, createdAt, subscriptionExpiresAt, isExpirated } = data;\n          setSelectedPlan(subscriptionType === 'basic' ? 'pro' : subscriptionType === 'pro' ? 'plus' : subscriptionType === 'plus' ? 'plus' : 'basic');\n          updateSubscriptionInfo({\n            subscriptionType,\n            creditBalance,\n            createdAt,\n            subscriptionExpiresAt,\n            isExpirated,\n          });\n        }\n      });\n    }\n  }, [modal?.isOpen]);\n\n  const handleClose = useCallback(() => {\n    closePayPackageModal();\n  }, [closePayPackageModal]);\n\n  const handleUpgrade = useCallback((plan: PlanType) => {\n    const buttonLink = PRICING_PLANS[plan].buttonLink;\n    const currentUserId = getGlobal().currentUserId;\n    const currentPlan: PlanType = curSubscriptionInfo.subscriptionType as PlanType;\n    if (!currentUserId) {\n      return;\n    }\n    if (PLAN_ORDER[plan] > PLAN_ORDER[currentPlan]) {\n      window.open(`${buttonLink}?client_reference_id=${currentUserId}`, '_blank');\n    } else {\n      // eslint-disable-next-line no-console\n      console.warn('只能升级到比当前更高的套餐');\n    }\n    closePayPackageModal();\n  }, [curSubscriptionInfo.subscriptionType]);\n\n  const handlePlanSelect = useCallback((plan: PlanType) => {\n    setSelectedPlan(plan);\n  }, []);\n\n  if (!modal?.isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={modal.isOpen}\n      onClose={handleClose}\n      className={styles.modal}\n    >\n      <div className={styles.container}>\n        {/* Header with close button */}\n        <div className={styles.header}>\n          <div className={styles.headerBadge}></div>\n          <h2 className={styles.title}>Upgrade your plan</h2>\n          <Icon\n            className={styles.closeButton}\n            name=\"close\"\n            onClick={handleClose}\n          />\n        </div>\n\n        {/* Pricing Cards */}\n        <div className={styles.pricingCards}>\n          {(Object.keys(PRICING_PLANS) as PlanType[]).map((planType) => {\n            const plan = PRICING_PLANS[planType];\n            const isSelected = selectedPlan === planType;\n\n            return (\n              <div\n                key={planType}\n                className={`${styles.pricingCard} ${isSelected ? styles.selected : ''} ${styles[`card${plan.title}`]}`}\n                onClick={() => handlePlanSelect(planType)}\n              >\n                <div className={styles.topContent}>\n                  <div className={styles.cardHeader}>\n                    <h3 className={styles.planTitle}>{plan.title}</h3>\n                  </div>\n\n                  <div className={styles.pricing}>\n                    <div className={styles.priceRow}>\n                      <span className={styles.price}>{plan.price}</span>\n                      <span className={styles.period}>{plan.period}</span>\n                    </div>\n                  </div>\n\n                  <div>\n                    <div className={styles.creditsInfo}>{plan.creditsInfo}</div>\n                    <div className={styles.creditsInfoDescription}>{plan.creditsInfoDescription}</div>\n                  </div>\n                  <button\n                    className={styles.upgradeButton}\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleUpgrade(planType);\n                    }}\n                  >\n                    <span>\n                      {curSubscriptionInfo.subscriptionType === planType ? 'Your current plan' : 'Upgrade'}\n                    </span>\n                    {curSubscriptionInfo.subscriptionType !== planType && (\n                      <Icon name=\"arrow-right\" />\n                    )}\n                  </button>\n                </div>\n\n                <div className={styles.botInfo}>\n                  <ul className={styles.features}>\n                    {plan.features.map((feature, index) => (\n                      <li key={index} className={styles.feature}>\n                        <span className={styles.listdot}>\n                          <Icon name=\"check\" className={styles.checkIcon} />\n                        </span>\n                        {feature}\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PayPackageModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import React from '@teact';\nimport {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import React from '@teact';\nimport {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import React from '@teact';\nimport {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import React from '@teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_AMOUNT_MAX,\n  STARS_SUGGESTED_POST_AMOUNT_MIN,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_AMOUNT_MAX,\n  TON_SUGGESTED_POST_AMOUNT_MIN } from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate ? scheduleDate / 1000 : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName(styles.input, 'input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig?.starsSuggestedPostAmountMax || STARS_SUGGESTED_POST_AMOUNT_MAX;\n    const minStarsAmount = appConfig?.starsSuggestedPostAmountMin || STARS_SUGGESTED_POST_AMOUNT_MIN;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n\n    const tonMaxAmount = appConfig?.tonSuggestedPostAmountMax || TON_SUGGESTED_POST_AMOUNT_MAX;\n    const tonMinAmount = appConfig?.tonSuggestedPostAmountMin || TON_SUGGESTED_POST_AMOUNT_MIN;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import React from '@teact';\nimport { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { STARS_CURRENCY_CODE, STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_COMMISSION_PERMILLE,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_COMMISSION_PERMILLE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig?.starsSuggestedPostCommissionPermille\n      || STARS_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const tonCommissionPermille = appConfig?.tonSuggestedPostCommissionPermille\n      || TON_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const minAge = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = (appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN) * 2;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import React from '@teact';\nimport { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import React from '@teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","/* eslint-disable func-names */\n/* eslint-disable no-null/no-null */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable max-len */\nimport type { IVSDocument } from '../types/IVSDocument';\nimport type { IVSFilterCriteria, IVSFilterOptions } from '../types/IVSFilterOptions';\n\nexport function filterDocuments(documents: Array<IVSDocument<any>>, filterOptions?: IVSFilterOptions): Array<IVSDocument<any>> {\n  let filteredDocuments = documents;\n  if (filterOptions) {\n    if (filterOptions.include) {\n      filteredDocuments = filteredDocuments.filter((doc) => matchesCriteria(doc, filterOptions.include!));\n    }\n    if (filterOptions.exclude) {\n      filteredDocuments = filteredDocuments.filter((doc) => !matchesCriteria(doc, filterOptions.exclude!));\n    }\n  }\n  return filteredDocuments;\n}\n\nfunction matchesCriteria(document: IVSDocument<any>, criteria: IVSFilterCriteria): boolean {\n  if (criteria.metadata) {\n    for (const key in criteria.metadata) {\n      if (document.metadata[key] !== criteria.metadata[key]) {\n        return false;\n      }\n    }\n  }\n  if (criteria.text) {\n    const texts = Array.isArray(criteria.text) ? criteria.text : [criteria.text];\n    if (!texts.includes(document.text)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function getObjectSizeInMB(obj: object): number {\n  const bytes = JSON.stringify(obj).length;\n  const kilobytes = bytes / 1024;\n  return kilobytes / 1024;\n}\n\nexport function debounce(func: (...args: any[]) => void, delay: number): (...args: any[]) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return function (this: any, ...args: any[]) {\n    const context = this;\n\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n\n    timeoutId = setTimeout(() => func.apply(context, args), delay);\n  };\n}\n","/* eslint-disable @typescript-eslint/no-redundant-type-constituents */\n/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n\nimport type { IDBPDatabase } from 'idb';\nimport { openDB } from 'idb';\n\nimport type { ICreateEmbeddingResponse } from './types/ICreateEmbeddingResponse';\nimport type { IVSDocument, IVSSimilaritySearchItem } from './types/IVSDocument';\nimport type { IVSOptions } from './types/IVSOptions';\nimport type { IVSSimilaritySearchParams } from './types/IVSSimilaritySearchParams';\n\nimport { constants } from './common/constants';\nimport { filterDocuments } from './common/helpers';\n\nexport class VectorStorage<T> {\n  private db!: IDBPDatabase<any>;\n\n  private documents: Array<IVSDocument<T>> = [];\n\n  private readonly maxSizeInMB: number;\n\n  private readonly debounceTime: number;\n\n  private readonly openaiModel: string;\n\n  private readonly openaiApiKey?: string;\n\n  private readonly embedTextsFn: (text: string) => Promise<number[]>;\n\n  private readonly dbName: string;\n\n  private readonly dbVersion: number;\n\n  constructor(options: IVSOptions) {\n    this.dbName = options.dbName ?? constants.DEFAULT_DB_NAME;\n    this.dbVersion = options.dbVersion ?? constants.DEFAULT_DB_VERSION;\n    this.maxSizeInMB = options.maxSizeInMB ?? constants.DEFAULT_MAX_SIZE_IN_MB;\n    this.debounceTime = options.debounceTime ?? constants.DEFAULT_DEBOUNCE_TIME;\n    this.openaiModel = options.openaiModel ?? constants.DEFAULT_OPENAI_MODEL;\n    this.embedTextsFn = options.embedTextsFn; // Use the custom function if provided, else use the default one\n    this.openaiApiKey = options.openAIApiKey;\n    if (!this.openaiApiKey && !options.embedTextsFn) {\n      console.error('VectorStorage: pass as an option either an OpenAI API key or a custom embedTextsFn function.');\n    } else {\n      // 启动定期检测和清理机制\n      this.startPeriodicCleanup();\n    }\n  }\n\n  public async addText(text: string, id: string, metadata: T): Promise<IVSDocument<T>> {\n    // Create a document from the text and metadata\n    const doc: IVSDocument<T> = {\n      metadata,\n      text,\n      id,\n      timestamp: Date.now(),\n      vector: [],\n      vectorMag: 0,\n    };\n    const docs = await this.addDocuments(doc);\n    return docs;\n  }\n\n  public async updateText(text: string, id: string, metadata: T): Promise<IVSDocument<T>> {\n    const doc: IVSDocument<T> = {\n      metadata,\n      text,\n      id,\n      timestamp: Date.now(),\n      vector: [],\n      vectorMag: 0,\n    };\n    const docs = await this.updateDocument(doc);\n    return docs;\n  }\n\n  public async deleteText(id: string): Promise<void> {\n    // this.documents = this.documents.filter((doc) => doc.id !== id);\n    if (!this.db) {\n      this.db = await this.initDB();\n    }\n    try {\n      const tx = this.db.transaction('documents', 'readwrite');\n      tx.objectStore('documents').delete(id);\n      await tx.done;\n    } catch (error) {\n      console.error('Error deleting text:', error);\n    }\n  }\n\n  public async getText(id: string): Promise<any | undefined> {\n    if (!this.db) {\n      this.db = await this.initDB();\n    }\n    const tx = this.db.transaction('documents', 'readonly');\n    const result = await tx.objectStore('documents').get(id);\n    return result;\n  }\n\n  // public async addTexts(texts: string[], metadatas: T[]): Promise<Array<IVSDocument<T>>> {\n  //   if (texts.length !== metadatas.length) {\n  //     throw new Error('The lengths of texts and metadata arrays must match.');\n  //   }\n  //   const docs: Array<IVSDocument<T>> = texts.map((text, index) => ({\n  //     metadata: metadatas[index],\n  //     text,\n  //     timestamp: Date.now(),\n  //     vector: [],\n  //     vectorMag: 0,\n  //   }));\n  //   return this.addDocuments(docs);\n  // }\n\n  public async similaritySearch(params: IVSSimilaritySearchParams): Promise<{\n    similarItems: Array<IVSSimilaritySearchItem<T>>;\n    query: { text: string; embedding: number[] };\n  }> {\n    const {\n      query, k = 4, filterOptions, includeValues,\n    } = params;\n    let { queryEmbedding } = params;\n    if (!queryEmbedding || queryEmbedding.length === 0) {\n      queryEmbedding = await this.embedText(query);\n    }\n    const queryMagnitude = this.calculateMagnitude(queryEmbedding);\n    const allDocuments = await this.loadFromIndexDbStorage();\n    const filteredDocuments = filterDocuments(allDocuments, filterOptions);\n    const scoresPairs: Array<[IVSDocument<T>, number]> = this.calculateSimilarityScores(filteredDocuments, queryEmbedding, queryMagnitude);\n    const sortedPairs = scoresPairs.sort((a, b) => b[1] - a[1]);\n    const results = sortedPairs.slice(0, k).map((pair) => ({ ...pair[0], score: pair[1] }));\n    this.updateHitCounters(results);\n    // if (results.length > 0) {\n    //   this.removeDocsLRU();\n    //   await this.saveToIndexDbStorage();\n    // }\n    if (!includeValues) {\n      results.forEach((result) => {\n        delete result.vector;\n        delete result.vectorMag;\n      });\n    }\n    return {\n      query: { embedding: queryEmbedding, text: query },\n      similarItems: results,\n    };\n  }\n\n  public async documentSearch(params: IVSSimilaritySearchParams): Promise<Array<IVSDocument<T>>> {\n    const { filterOptions } = params;\n    const allDocuments = await this.loadAllFromIndexDbStorage();\n    const filteredDocuments = filterDocuments(allDocuments, filterOptions);\n\n    return filteredDocuments;\n  }\n\n  private async initDB(): Promise<IDBPDatabase<any>> {\n    return openDB<any>(this.dbName, this.dbVersion, {\n      upgrade(db) {\n        // clear old store\n        for (const storeName of db.objectStoreNames) {\n          db.deleteObjectStore(storeName);\n        }\n        const documentStore = db.createObjectStore('documents', {\n          autoIncrement: true,\n          keyPath: 'id',\n        });\n        documentStore.createIndex('text', 'text', { unique: false });\n        documentStore.createIndex('metadata', 'metadata');\n        documentStore.createIndex('timestamp', 'timestamp');\n        documentStore.createIndex('vector', 'vector');\n        documentStore.createIndex('vectorMag', 'vectorMag');\n        documentStore.createIndex('hits', 'hits');\n        documentStore.createIndex('id', 'id', { unique: true });\n      },\n    });\n  }\n\n  private async addDocuments(document: IVSDocument<T>): Promise<IVSDocument<T>> {\n    // filter out already existing documents\n    // const newDocuments = documents.filter((doc) => !this.documents.some((d) => d.text === doc.text));\n    // If there are no new documents, return an empty array\n    // if (newDocuments.length === 0) {\n    //   return [];\n    const vector = await this.embedTextsFn(document.text);\n    document.vector = vector;\n    document.vectorMag = calcVectorMagnitude(document);\n    // const newVectors = await this.embedTextsFn(documents.map((doc) => doc.text));\n    // Assign vectors and precompute vector magnitudes for new documents\n    // documents.forEach((doc, index) => {\n    //   doc.vector = newVectors[index];\n    //   doc.vectorMag = calcVectorMagnitude(doc);\n    // });\n    // Add new documents to the store\n    // this.documents.push(...newDocuments);\n    // this.removeDocsLRU();\n    // Save to index db storage\n    await this.addToIndexDbStorage([document]);\n    return document;\n  }\n\n  private async updateDocument(document: IVSDocument<T>): Promise<IVSDocument<T>> {\n    const vertor = await this.embedTextsFn(document.text);\n    document.vector = vertor;\n    document.vectorMag = calcVectorMagnitude(document);\n    // const oldDoc = this.documents.find((doc) => doc.id === document.id);\n    // if (oldDoc) {\n    //   // Add new documents to the store\n    //   this.documents = this.documents.map((doc) => {\n    //     if (doc.id === document.id) {\n    //       return document;\n    //     }\n    //     return doc;\n    //   });\n    // } else {\n    //   this.documents.push(document);\n    // }\n\n    // this.removeDocsLRU();\n    // Save to index db storage\n    await this.addToIndexDbStorage([document]);\n    return document;\n  }\n\n  private async embedTexts(texts: string[]): Promise<number[][]> {\n    const response = await fetch(constants.OPENAI_API_URL, {\n      body: JSON.stringify({\n        input: texts,\n        model: this.openaiModel,\n      }),\n      headers: {\n        Authorization: `Bearer ${this.openaiApiKey}`,\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const responseData = (await response.json()) as ICreateEmbeddingResponse;\n    return responseData.data.map((data) => data.embedding);\n  }\n\n  private async embedText(query: string): Promise<number[]> {\n    return (await this.embedTextsFn(query));\n  }\n\n  private calculateMagnitude(embedding: number[]): number {\n    const queryMagnitude = Math.sqrt(embedding.reduce((sum, val) => sum + val * val, 0));\n    return queryMagnitude;\n  }\n\n  private calculateSimilarityScores(filteredDocuments: Array<IVSDocument<T>>, queryVector: number[], queryMagnitude: number): Array<[IVSDocument<T>, number]> {\n    return filteredDocuments.map((doc) => {\n      const dotProduct = doc.vector!.reduce((sum, val, i) => sum + val * queryVector[i], 0);\n      let score = getCosineSimilarityScore(dotProduct, doc.vectorMag!, queryMagnitude);\n      score = normalizeScore(score); // Normalize the score\n      return [doc, score];\n    });\n  }\n\n  private updateHitCounters(results: Array<IVSDocument<T>>): void {\n    results.forEach((doc) => {\n      doc.hits = (doc.hits ?? 0) + 1; // Update hit counter\n    });\n  }\n\n  private async loadFromIndexDbStorage(): Promise<IVSDocument<T>[]> {\n    if (!this.db) {\n      this.db = await this.initDB();\n    }\n    const tx = this.db.transaction('documents', 'readonly');\n    const store = tx.store;\n    const index = store.index('timestamp');\n\n    const result = [];\n    let count = 0;\n\n    for await (const cursor of index.iterate(null, 'prev')) {\n      result.push(cursor.value);\n      count++;\n      if (count >= 3000) break;\n    }\n\n    await tx.done;\n    return result;\n    // this.documents = result;\n    // this.documents = await this.db.getAll('documents');\n    // this.removeDocsLRU();\n  }\n\n  private async loadAllFromIndexDbStorage(): Promise<IVSDocument<T>[]> {\n    if (!this.db) {\n      this.db = await this.initDB();\n    }\n    const tx = this.db.transaction('documents', 'readonly');\n    const store = tx.store;\n    const index = store.index('timestamp');\n\n    const result = [];\n\n    for await (const cursor of index.iterate(null, 'prev')) {\n      result.push(cursor.value);\n    }\n\n    await tx.done;\n    return result;\n  }\n\n  private async addToIndexDbStorage(documents: Array<IVSDocument<T>>): Promise<void> {\n    if (!this.db) {\n      this.db = await this.initDB();\n    }\n    try {\n      const tx = this.db.transaction('documents', 'readwrite');\n      for (const doc of documents) {\n        await tx.objectStore('documents').put(doc);\n      }\n      await tx.done;\n    } catch (error: any) {\n      console.error('Failed to save to IndexedDB:', error.message);\n    }\n  }\n\n  /**\n   * 启动定期清理机制，每小时检查一次数据量\n   */\n  private startPeriodicCleanup(): void {\n    // 立即执行一次检查\n    this.checkAndCleanupData();\n\n    // 每小时检查一次（3600000毫秒）\n    setInterval(() => {\n      this.checkAndCleanupData();\n    }, 3600000);\n  }\n\n  /**\n   * 检查数据量并清理老数据\n   * 当数据超过20000条时，按时间删除最老的数据，保留最新的15000条\n   */\n  private async checkAndCleanupData(): Promise<void> {\n    try {\n      if (!this.db) {\n        this.db = await this.initDB();\n      }\n\n      const tx = this.db.transaction('documents', 'readwrite');\n      const store = tx.objectStore('documents');\n      const index = store.index('timestamp');\n\n      // 统计总数据量\n      const totalCount = await store.count();\n\n      if (totalCount > 40000) {\n        console.log(`VectorStorage: 检测到数据量超过限制 (${totalCount} > 40000)，开始清理老数据...`);\n\n        // 获取所有文档按时间戳排序（最新的在前）\n        const allDocs: IVSDocument<T>[] = [];\n        for await (const cursor of index.iterate(null, 'prev')) {\n          allDocs.push(cursor.value);\n        }\n\n        // 保留最新的15000条，删除其余的\n        const docsToKeep = allDocs.slice(0, 35000);\n        const docsToDelete = allDocs.slice(35000);\n\n        // 清空存储\n        await store.clear();\n\n        // 重新添加要保留的文档\n        for (const doc of docsToKeep) {\n          await store.put(doc);\n        }\n\n        await tx.done;\n\n        console.log(`VectorStorage: 清理完成，删除了 ${docsToDelete.length} 条老数据，保留了 ${docsToKeep.length} 条最新数据`);\n      } else {\n        console.log(`VectorStorage: 数据量检查完成，当前数据量: ${totalCount}`);\n      }\n    } catch (error) {\n      console.error('VectorStorage: 数据清理过程中发生错误:', error);\n    }\n  }\n\n  /**\n   * 手动触发数据清理\n   */\n  public async manualCleanup(): Promise<void> {\n    await this.checkAndCleanupData();\n  }\n\n  /**\n   * 获取当前数据库中的文档数量\n   */\n  public async getDocumentCount(): Promise<number> {\n    try {\n      if (!this.db) {\n        this.db = await this.initDB();\n      }\n      const tx = this.db.transaction('documents', 'readonly');\n      const count = await tx.objectStore('documents').count();\n      await tx.done;\n      return count;\n    } catch (error) {\n      console.error('VectorStorage: 获取文档数量时发生错误:', error);\n      return 0;\n    }\n  }\n}\n\nfunction calcVectorMagnitude(doc: IVSDocument<any>): number {\n  return Math.sqrt(doc.vector!.reduce((sum, val) => sum + val * val, 0));\n}\n\nfunction getCosineSimilarityScore(dotProduct: number, magnitudeA: number, magnitudeB: number): number {\n  return dotProduct / (magnitudeA * magnitudeB);\n}\n\nfunction normalizeScore(score: number): number {\n  return (score + 1) / 2;\n}\n","// Define constants\nexport const constants = {\n  DEFAULT_DEBOUNCE_TIME: 0,\n  DEFAULT_DB_VERSION: 1,\n  // DEFAULT_MAX_SIZE_IN_MB: 2048,\n  DEFAULT_MAX_SIZE_IN_MB: 128,\n  DEFAULT_OPENAI_MODEL: 'text-embedding-ada-002',\n  OPENAI_API_URL: 'https://api.openai.com/v1/embeddings',\n  DEFAULT_DB_NAME: 'VectorStorage',\n};\n","/* eslint-disable no-null/no-null */\n// import { SERVER_API_URL } from '../../config';\n\nimport { VectorStorage } from './vector-storage/VectorStorage';\n\nasync function embedTextsFn(text: string): Promise<number[]> {\n  // const { userId, userName } = getCurrentUserInfo();\n  // texts = texts.filter((text) => text.trim() !== ''); // Filter out empty strings\n  // if (texts.length === 0) {\n  //   return [];\n  // }\n  // ${SERVER_API_URL}/embeddings\n  const response = await fetch(`http://47.85.96.140:8100/v1/embeddings`, {\n    body: JSON.stringify({\n      // values: texts,\n      // userId,\n      // userName,\n      dimensions: null,\n      encoding_format: 'float',\n      input: text,\n      model: 'null',\n      user: 'null',\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n  });\n\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n\n  const responseData = (await response.json());\n  return responseData.data?.[0]?.embedding;\n}\n\nconst vectorStoreMap = new Map();\n\nfunction getVectorStore(dbName: string, dbVersion?: number) {\n  if (!vectorStoreMap.has(dbName)) {\n    vectorStoreMap.set(dbName, new VectorStorage({ embedTextsFn, dbName, dbVersion }));\n  }\n  return vectorStoreMap.get(dbName)!;\n}\n\nexport const toolsEmbeddingStore = getVectorStore('tools-embedding', 2);\nexport const messageEmbeddingStore = getVectorStore('message-embedding', 2);\nexport const knowledgeEmbeddingStore = getVectorStore('knowledge-embedding');\n(window as any).toolsEmbeddingStore = toolsEmbeddingStore;\n","/* eslint-disable no-null/no-null */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleSearch,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleSearch: (inputValue: string) => void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleSearch(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleSearch, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full mx-[22px] flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const AISearchInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message, UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getGlobal } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { createUpgradeTipMessage } from '../room-ai/room-ai-utils';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { getApihHeaders } from '../utils/telegpt-fetch';\nimport { messageEmbeddingStore } from '../vector-store';\n\nimport { AISearchInput } from './AISearchInput';\n\nconst GLOBAL_SEARCH_CHATID = '777889';\n\nexport const AISearch = () => {\n  const global = getGlobal();\n  const { userId, userName } = getCurrentUserInfo();\n\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, status, stop,\n  } = useChat({\n    id: GLOBAL_SEARCH_CHATID,\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    sendExtraMessageFields: true,\n    onError: (error) => {\n      try {\n        const data = JSON.parse(error.message);\n        if (data.code === 102 || data.code === 103) {\n          const upgradeTip = createUpgradeTipMessage();\n          setMessages((prev) => [...prev, upgradeTip]);\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('error.message is not JSON:', error.message);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    ChataiStores.message?.getMessages(GLOBAL_SEARCH_CHATID, undefined, 20)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseStoreMessage2Message(res.messages);\n        setMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const suggestionMessage: Message = {\n          role: 'assistant',\n          id: uuidv4(),\n          createdAt: new Date(),\n          content: '',\n          annotations: [{\n            type: 'ai-search-sugesstion',\n          }],\n        };\n        setMessages([suggestionMessage]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n    return () => {\n      setMessages([]);\n    };\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    if (messages.length > 0 && status === 'ready') {\n      const parsedMessage = parseMessage2StoreMessage(GLOBAL_SEARCH_CHATID, messages);\n      ChataiStores.message?.storeMessages([...parsedMessage]);\n    }\n  }, [status, messages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.message?.getMessages(GLOBAL_SEARCH_CHATID, pageInfo?.lastTime, 20)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  //   const deleteMessage = useCallback((messageId: string) => {\n  //     ChataiStores.message?.delMessage(messageId).then(() => {\n  //       setLocalChatAiMessages((prev) => prev.filter((message) => message.id !== messageId));\n  //       setMessages((prev) => prev.filter((message) => message.id !== messageId));\n  //     });\n  //   }, [setMessages]);\n\n  const searchGroup = useCallback(async (query: string) => {\n    const vectorSearchResults = await messageEmbeddingStore.similaritySearch({\n      query,\n      k: 100,\n      filterOptions: {\n        include: {\n          metadata: {\n            chatType: 'group',\n          },\n        },\n      },\n    });\n    const similarItems = vectorSearchResults.similarItems;\n    let searchResult = null;\n    if (similarItems.length > 0) {\n      const chatIds = Array.from(new Set(similarItems.map((item: any) => {\n        if (item.score > 0.7) {\n          return (item?.metadata as { chatId: string })?.chatId;\n        }\n        return undefined;\n      }).filter(Boolean)));\n      if (chatIds.length > 0) {\n        searchResult = JSON.stringify(chatIds);\n      }\n    }\n    if (searchResult) {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: searchResult,\n        createdAt: new Date(),\n        parts: [],\n        annotations: [{\n          type: 'group-search',\n        }],\n      };\n      setMessages((prev) => [...prev, message]);\n    } else {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: 'No relevant group was found',\n        createdAt: new Date(),\n        parts: [],\n      };\n      setMessages((prev) => [...prev, message]);\n    }\n  }, [setMessages]);\n\n  const searchUser = useCallback(async (query: string) => {\n    const vectorSearchResults = await messageEmbeddingStore.similaritySearch({\n      query,\n      k: 100,\n      filterOptions: {\n        include: {\n          metadata: {\n            chatType: 'private',\n          },\n        },\n      },\n    });\n    const similarItems = vectorSearchResults.similarItems;\n    let searchResult = null;\n    if (similarItems.length > 0) {\n      const senderIds = Array.from(new Set(similarItems.map((item: any) => {\n        if (item.score > 0.7) {\n          return (item?.metadata as { senderId: string })?.senderId;\n        }\n        return undefined;\n      }).filter(Boolean)));\n      if (senderIds.length > 0) {\n        searchResult = JSON.stringify(senderIds);\n      }\n    }\n    if (searchResult) {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: searchResult,\n        createdAt: new Date(),\n        parts: [],\n        annotations: [{\n          type: 'user-search',\n        }],\n      };\n      setMessages((prev) => [...prev, message]);\n    } else {\n      const message: UIMessage = {\n        id: uuidv4(),\n        role: 'assistant',\n        content: 'No relevant users was found',\n        createdAt: new Date(),\n        parts: [],\n      };\n      setMessages((prev) => [...prev, message]);\n    }\n  }, [setMessages]);\n  const searchMessage = useCallback(async (query: string) => {\n    const vectorSearchResults = await messageEmbeddingStore.similaritySearch({\n      query,\n      k: 100,\n    });\n    const similarItems = vectorSearchResults.similarItems;\n    if (similarItems.length > 0) {\n      const messageList = similarItems.map((item: any) => {\n        const { chatId, senderId } = item.metadata as { chatId: string; senderId: string };\n        const chat = selectChat(global, chatId);\n        if (chat) {\n          const peer = senderId ? selectUser(global, senderId) : undefined;\n          return {\n            chatId,\n            chatTitle: chat?.title ?? 'Unknown',\n            senderName: peer ? `${peer.firstName || ''} ${peer.lastName || ''}` : '',\n            content: item.text,\n          };\n        }\n        return null;\n      });\n      append({\n        role: 'user',\n        content: `你是一个专业的聊天记录分析师,用户输入的关键词是${query},下面是根据关键词检索出来的相关的聊天记录,请对此加以总结:\n          # 总结消息偏好:\n              ## 根据消息的内容选择合适的语种进行总结\n              ## 过滤所有的无意义消息；\n              ## 尽量提取关键信息(如任务、问题、请求等),并简要总结。\n              ## 为保证输出内容的完整性,尽量精简总结内容；\n              ## 主话题不超过5个,子话题总数不超过15个\n          # 消息内容\n          ${JSON.stringify(messageList)}\n        `,\n        id: Math.random().toString(),\n        annotations: [{\n          isAuxiliary: true,\n        }],\n      }, {\n        headers: getApihHeaders(),\n      });\n      scrollToBottom();\n    }\n  }, [append, global, scrollToBottom]);\n\n  const toolsHitCheck = useCallback((inputValue: string) => {\n    fetch(`${SERVER_API_URL}/tool-check`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        messages: [{\n          id: uuidv4(),\n          content: inputValue,\n          role: 'user',\n        }],\n      }),\n    }).then((res) => res.json())\n      .then((toolResults) => {\n        if (toolResults && toolResults.length > 0) {\n          toolResults.forEach((toolCall: any) => {\n            if (toolCall.toolName === 'checkIsSearchGroup') {\n              searchGroup(toolCall.result.keyword);\n            } else if (toolCall.toolName === 'checkIsSearchUser') {\n              searchUser(toolCall.result.keyword);\n            } else if (toolCall.toolName === 'nullTool') {\n              // eslint-disable-next-line no-console\n              console.log('没有命中工具');\n              searchMessage(inputValue);\n            }\n          });\n        }\n      });\n  }, [searchGroup, searchMessage, searchUser]);\n\n  const handleSearch = useCallback((query: string) => {\n    setMessages((messages) => {\n      return [...messages, {\n        role: 'user',\n        content: query,\n        id: Math.random().toString(),\n        createdAt: new Date(),\n      }];\n    });\n    toolsHitCheck(query);\n  }, [setMessages, toolsHitCheck]);\n\n  return (\n    <div className=\"pb-[28px] flex-1 flex flex-col h-full gap-[8px] overflow-hidden\">\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        status={status}\n        messages={messages}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={GLOBAL_SEARCH_CHATID}\n      />\n      <form className=\"flex mx-auto gap-2 w-full\">\n        <AISearchInput\n          status={status}\n          stop={stop}\n          setMessages={setMessages}\n          handleSearch={handleSearch}\n        />\n      </form>\n    </div>\n  );\n};\n","import React from '@teact';\n/* eslint-disable no-null/no-null */\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport { injectComponent } from '../../chatAssistant/injectComponent';\nimport { AISearch } from '../../chatAssistant/ai-search/AISearch';\n\nconst injectMessageAI = injectComponent({ component: AISearch });\nexport const AISearchWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | undefined>(undefined);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current);\n    }\n    return () => {\n      injected?.unmount();\n    };\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  return (\n    <div className=\"LeftSearch--content\" ref={containerRef} />\n  );\n};\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading } from '../../../global/helpers';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const global = getGlobal();\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = selectMessageDownloadableMedia(global, message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const thumbDataUri = useThumbnail(message);\n  const mediaThumbnail = !getMessageSticker(message) ? thumbDataUri : undefined;\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          withSticker\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <Transition\n      ref={containerRef}\n      slideClassName=\"LeftSearch--content LeftSearch--media\"\n      name=\"fade\"\n      activeKey={canRenderContents ? 1 : 0}\n      shouldCleanup\n    >\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            withSticker\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"fHc6WtIe\",\"content\":\"N8GlyYo0\",\"loadingScreen\":\"l7JTscdP\",\"searchButtonContent\":\"dqfofU9e\",\"sticker\":\"bhaEA7Az\",\"title\":\"HkiOz0kI\",\"description\":\"B5FR0TSV\",\"searchButton\":\"Ii0w2ObZ\",\"remainingSearches\":\"fYxU7PVl\",\"searchIcon\":\"NMdA935k\",\"searchIconWithNext\":\"NqAG2PXY\",\"searchQuery\":\"eRsI0lkH\",\"limitTitle\":\"uAggPEqN\",\"limitDescription\":\"oirV9yqd\",\"paidSearchButton\":\"LMu5PMXS\",\"freeSearchUnlock\":\"IdgXsecy\",\"premiumTitle\":\"SBmNHjsL\",\"premiumDescription\":\"KoW3G8Sv\",\"subscribePremiumButton\":\"tGWjYFeK\",\"premiumSubtitle\":\"o2V6uF3Y\"};","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSearchPostsFlood } from '../../../api/types';\n\nimport {\n  PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT,\n  PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY,\n} from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_PREVIEW_URLS, LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport TextTimer from '../../ui/TextTimer';\nimport Transition from '../../ui/Transition';\n\nimport styles from './PublicPostsSearchLauncher.module.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  searchFlood?: ApiSearchPostsFlood;\n  onSearch: () => void;\n  isLoading?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  starsBalance: number;\n};\n\nconst WAIT_DELAY = 2;\n\nconst PublicPostsSearchLauncher = ({\n  searchQuery,\n  searchFlood,\n  onSearch,\n  isLoading,\n  isCurrentUserPremium,\n  starsBalance,\n}: OwnProps & StateProps) => {\n  const lang = useLang();\n  const queryIsFree = searchFlood?.queryIsFree;\n  const queryFromFlood = searchFlood?.query;\n\n  const searchButtonActiveKey = useTransitionActiveKey([searchQuery?.slice(0, 18).trimEnd()]);\n\n  const handleSearchClick = useLastCallback(() => {\n    onSearch();\n  });\n\n  useEffect(() => {\n    if (queryIsFree && searchQuery && queryFromFlood === searchQuery) {\n      onSearch();\n    }\n  }, [queryIsFree, searchQuery, queryFromFlood, onSearch]);\n\n  const handlePaidSearchClick = useLastCallback(() => {\n    const starsAmount = searchFlood?.starsAmount || 0;\n    const currentBalance = starsBalance;\n\n    if (currentBalance < starsAmount) {\n      openStarsBalanceModal({\n        topup: {\n          balanceNeeded: starsAmount,\n        },\n      });\n    } else {\n      onSearch();\n    }\n  });\n\n  const {\n    checkSearchPostsFlood,\n    openPremiumModal,\n    openStarsBalanceModal,\n  } = getActions();\n\n  const onCheckFlood = useLastCallback(() => {\n    checkSearchPostsFlood({});\n  });\n\n  const handleSubscribePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const renderLimitReached = () => {\n    const waitTill = searchFlood?.waitTill;\n    const starsAmount = searchFlood?.starsAmount || PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT;\n    const totalDaily = searchFlood?.totalDaily || PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.limitTitle}>\n            {lang('PublicPostsLimitReached')}\n          </div>\n          <div className={styles.limitDescription}>\n            {lang('HintPublicPostsSearchQuota', { count: totalDaily }, { pluralValue: totalDaily })}\n          </div>\n          <Button\n            className={styles.paidSearchButton}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={!searchQuery}\n            noForcedUpperCase\n            onClick={handlePaidSearchClick}\n          >\n            {lang('PublicPostsSearchForStars', {\n              stars: formatStarsAsIcon(lang, starsAmount, { asFont: true }),\n            }, { withNodes: true })}\n          </Button>\n          {Boolean(waitTill) && (\n            <div className={styles.freeSearchUnlock}>\n              <TextTimer\n                langKey=\"UnlockTimerPublicPostsSearch\"\n                endsAt={waitTill + WAIT_DELAY}\n                onEnd={onCheckFlood}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const renderSearchButton = () => {\n    const remainingSearches = searchFlood?.remains || 0;\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <AnimatedIconWithPreview\n            className={styles.sticker}\n            size={120}\n            tgsUrl={LOCAL_TGS_URLS.Search}\n            previewUrl={LOCAL_TGS_PREVIEW_URLS.Search}\n            nonInteractive\n            noLoop={false}\n          />\n          <div className={styles.title}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.description}>\n            {lang('DescriptionPublicPostsSearch')}\n          </div>\n          <Button\n            className={styles.searchButton}\n            color=\"primary\"\n            size=\"smaller\"\n            noForcedUpperCase\n            disabled={!searchQuery}\n            onClick={handleSearchClick}\n          >\n            <Transition\n              name=\"fade\"\n              activeKey={searchButtonActiveKey}\n            >\n              <div className={styles.searchButtonContent}>\n                <Icon\n                  name=\"search\"\n                  className={\n                    buildClassName(styles.searchIcon,\n                      searchQuery && styles.searchIconWithNext)\n                  }\n                />\n                {lang('ButtonSearchPublicPosts', {\n                  query: searchQuery ? <span className={styles.searchQuery}>{searchQuery}</span> : '',\n                }, { withNodes: true })}\n                {searchQuery && <Icon name=\"next\" className={styles.nextIcon} />}\n              </div>\n            </Transition>\n          </Button>\n          <div className={styles.remainingSearches}>\n            {lang('RemainingPublicPostsSearch', { count: remainingSearches }, { pluralValue: remainingSearches })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderPremiumRequired = () => {\n    return (\n      <div className={styles.container}>\n        <div className={styles.content}>\n          <div className={styles.premiumTitle}>\n            {lang('GlobalSearch')}\n          </div>\n          <div className={styles.premiumDescription}>\n            {lang('PublicPostsPremiumFeatureDescription')}\n          </div>\n          <Button\n            className={styles.subscribePremiumButton}\n            color=\"primary\"\n            size=\"smaller\"\n            noForcedUpperCase\n            onClick={handleSubscribePremiumClick}\n          >\n            {lang('PublicPostsSubscribeToPremium')}\n          </Button>\n          <div className={styles.premiumSubtitle}>\n            {lang('PublicPostsPremiumFeatureSubtitle')}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const serverTime = getServerTime();\n  const shouldRenderPaidScreen = searchFlood?.remains === 0\n    || (searchFlood?.waitTill && searchFlood.waitTill > serverTime);\n\n  const renderLoading = () => {\n    return (\n      <div className={styles.container}>\n        <div className={buildClassName(styles.content, styles.loadingScreen)}>\n          <Loading />\n        </div>\n      </div>\n    );\n  };\n\n  const getActiveKey = () => {\n    if (!isCurrentUserPremium) {\n      return 3;\n    }\n    if (isLoading) {\n      return 2;\n    }\n    if (shouldRenderPaidScreen) {\n      return 0;\n    }\n    return 1;\n  };\n\n  const renderContent = () => {\n    if (!isCurrentUserPremium) {\n      return renderPremiumRequired();\n    }\n    if (isLoading) {\n      return renderLoading();\n    }\n    if (shouldRenderPaidScreen) {\n      return renderLimitReached();\n    }\n    return renderSearchButton();\n  };\n\n  return (\n    <Transition\n      name=\"fade\"\n      activeKey={getActiveKey()}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => ({\n  isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  starsBalance: global.stars?.balance?.amount || 0,\n}))(PublicPostsSearchLauncher));\n","import React from '@teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiSearchPostsFlood } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport PublicPostsSearchLauncher from './PublicPostsSearchLauncher.tsx';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  searchFlood?: ApiSearchPostsFlood;\n  shouldShowSearchLauncher?: boolean;\n  isNothingFound?: boolean;\n  isLoading?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst PublicPostsResults = ({\n  searchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  searchFlood,\n  shouldShowSearchLauncher,\n  isNothingFound,\n  isLoading,\n  animationLevel,\n}: OwnProps & StateProps) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const handleSearch = useLastCallback(() => {\n    if (!searchQuery) return;\n\n    searchMessagesGlobal({\n      type: 'publicPosts',\n      shouldResetResultsByType: true,\n    });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'publicPosts',\n        });\n      });\n    }\n  }, []);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        key={`${message.chatId}-${message.id}`}\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  return (\n    <Transition\n      name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n      activeKey={shouldShowSearchLauncher || isLoading ? 0 : 1}\n    >\n      {shouldShowSearchLauncher || isLoading ? (\n        <PublicPostsSearchLauncher\n          searchQuery={searchQuery}\n          searchFlood={searchFlood}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n      ) : (\n        <div className=\"LeftSearch--content\">\n          <InfiniteScroll\n            key={searchQuery}\n            className=\"search-content custom-scroll chat-list\"\n            items={foundMessages}\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {isNothingFound && (\n              <NothingFound\n                text={oldLang('ChatList.Search.NoResults')}\n                description={oldLang('ChatList.Search.NoResultsDescription')}\n                withSticker\n              />\n            )}\n            {Boolean(foundMessages.length) && (\n              <div className=\"pb-2\">\n                <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n                  {lang('PublicPosts')}\n                </h3>\n                {foundMessages.map(renderFoundMessage)}\n              </div>\n            )}\n          </InfiniteScroll>\n        </div>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { messages: { byChatId: globalMessagesByChatId } } = global;\n    const { resultsByType, searchFlood, fetchingStatus } = selectTabState(global).globalSearch;\n    const publicPostsResult = resultsByType?.publicPosts;\n    const { foundIds } = publicPostsResult || {};\n    const isLoading = Boolean(fetchingStatus?.publicPosts && !publicPostsResult);\n    const shouldShowSearchLauncher = !publicPostsResult && !isLoading;\n    const isNothingFound = publicPostsResult && !foundIds?.length;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      foundIds,\n      globalMessagesByChatId,\n      searchFlood,\n      shouldShowSearchLauncher,\n      isNothingFound,\n      isLoading,\n      animationLevel,\n    };\n  },\n)(PublicPostsResults));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { type AnimationLevel, GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { parseDateString } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport { AISearchWrapper } from './AISearchWrapper';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\nimport PublicPostsResults from './PublicPostsResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n  animationLevel: AnimationLevel;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  // { type: GlobalSearchContent.AI, key: 'SearchTabAI' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.PublicPosts, key: 'SearchTabPublicPosts' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n    checkSearchPostsFlood,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  useEffect(() => {\n    if (isActive) {\n      checkSearchPostsFlood({});\n    }\n  }, [isActive]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.AI:\n              return (\n                <AISearchWrapper />\n              );\n            case GlobalSearchContent.PublicPosts:\n              return (\n                <PublicPostsResults\n                  key=\"publicPosts\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return { currentContent, chatId, animationLevel };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport {\n  AI_FOLDER_ID, ALL_FOLDER_ID, PRESET_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS, UNREAD_FOLDER_ID,\n} from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { filterAIFolder } from '../../../chatAssistant/ai-chatfolders/util';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      } else if (id === PRESET_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: 'Preset',\n            entities: [],\n          },\n        };\n      } else if (id === UNREAD_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: 'Unread',\n            entities: [],\n          },\n        };\n      } else if (id === AI_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: 'AI',\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            // eslint-disable-next-line max-len\n            if (folder.id === ALL_FOLDER_ID || folder.id === PRESET_FOLDER_ID || folder.id === UNREAD_FOLDER_ID || folder.id === AI_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">\n                      {/* {lang('FoldersAllChatsDesc')} */}\n                      {\n                        folder.id === UNREAD_FOLDER_ID\n                          ? lang('FoldersUnreadChatsDesc') : folder.id === PRESET_FOLDER_ID\n                            ? 'Preset Tags' : folder.id === AI_FOLDER_ID\n                              ? 'AI-Generated Tags' : lang('FoldersAllChatsDesc')\n                      }\n                    </span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    let folderIds = global.chatFolders.orderedIds;\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      folderIds = filterAIFolder(folderIds);\n    }\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import React from '@teact';\nimport {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import React from '@teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\nconst STICKER_SET_CARD_HEIGHT = 56;\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'small-icon', className)}\n      style={`height: ${STICKER_SET_CARD_HEIGHT}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings } from '../../../global/types';\nimport type { AccountSettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React from '@teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MED)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MED : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              size=\"smaller\"\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig?.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useRef, useState } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrollNotch from '../../../hooks/useScrollNotch.ts';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  animationLevel: AnimationLevel;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  animationLevel,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useScrollNotch({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={resolveTransitionName('layers', animationLevel, shouldSkipTransition)}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\n// Import React dependencies.\nimport React, {\n  type ChangeEvent,\n  useCallback, useRef, useState,\n} from 'react';\nimport type { DSlateRef } from '@dslate/antd';\nimport DSlate from '@dslate/antd';\nimport { Button, Input } from 'antd';\nimport type { Descendant } from 'slate';\nimport { Node } from 'slate';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport { ChataiStores } from '../../chatAssistant/store';\n\ntype OwnProps = {\n  knowledge?: AiKnowledge | null;\n  type: 'add' | 'edit';\n  onClose: () => void;\n  onUpdate: () => void;\n};\n\nconst ErrorTip = ({ message }: { message: string }) => {\n  return (\n    <div className=\"text-[12px] leading-[18px] text-red-400\">{message}</div>\n  );\n};\n\nconst AIKnowledgeEditor = (props: OwnProps) => {\n  const {\n    type, knowledge, onClose, onUpdate,\n  } = props;\n  const knowledgeId = useRef(uuidv4());\n  const [value, setValue] = useState<Descendant[]>(knowledge?.richText || [\n    {\n      type: 'paragraph',\n      children: [{ text: '' }],\n    },\n  ]);\n  const [question, setQuestion] = useState<string>(knowledge?.question || '');\n  const [questionError, setQuestionError] = useState<string>('');\n  const [valueError, setValueError] = useState<string>('');\n  const ref = useRef<DSlateRef>(null);\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n  const serialize = (nodes: Descendant[]) => {\n    return nodes.map((n) => Node.string(n)).join('\\n');\n  };\n  const handleSave = useCallback(() => {\n    const plainText = serialize(value);\n    if (!plainText) {\n      setValueError('Please enter your notes');\n      return;\n    } else {\n      setValueError('');\n    }\n    if (!question) {\n      setQuestionError('Please enter a question');\n      return;\n    } else {\n      setQuestionError('');\n    }\n    const knowledgeIdValue = type === 'add' ? knowledgeId.current : knowledge?.id as string;\n    ChataiStores.knowledge?.addKnowledge({\n      id: knowledgeIdValue,\n      richText: value,\n      plainText,\n      question,\n    }).then(() => {\n      onClose();\n      onUpdate();\n    });\n  }, [knowledge?.id, onClose, onUpdate, question, type, value]);\n  return (\n    <div className=\"flex flex-col gap-[20px] h-full\">\n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <DSlate\n          className=\"flex-1 flex flex-col overflow-hidden\"\n          ref={ref}\n          value={value}\n          onChange={setValue}\n          toolbar={['history', 'bold', 'italic', 'decoration', 'text-align', 'list']}\n          placeholder=\"Save your most-used answers as Quick Replies — e.g. your email, Calendly link, or a short project intro. Next time someone asks, insert it in one tap. \"\n        />\n        {valueError && <ErrorTip message={valueError} />}\n      </div>\n      <div className=\"flex flex-col gap-[8px]\">\n        <div>\n          Preset standard questions\n          <span className=\"text-[#FF543D]\">*</span>\n        </div>\n        <Input value={question} onChange={handleQuestionChange} />\n        {questionError && <ErrorTip message={questionError} />}\n      </div>\n      <div className=\"flex flex-row gap-8 justify-end\">\n        <Button className=\"!w-[120px] !h-[42px]\" onClick={onClose}>Cancel</Button>\n        <Button type=\"primary\" className=\"!w-[120px] !h-[42px]\" onClick={handleSave}>Add</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AIKnowledgeEditor;\n","import React from '@teact';\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport { injectComponent } from '../../chatAssistant/injectComponent';\n\nimport Modal from '../../ui/Modal';\nimport AIKnowledgeEditor from './AIKnowledgeEditor';\n\nimport './AIKnowledgeEditor.scss';\n\ntype OwnProps = {\n  knowledge?:AiKnowledge | null;\n  type: 'add' | 'edit';\n  isOpen: boolean;\n  onClose: () => void;\n  onUpdate:()=>void;\n};\nconst AddKnowledgeModal = ({\n  type, knowledge, isOpen, onClose, onUpdate,\n}: OwnProps) => {\n  const editorRef = injectComponent({\n    component: AIKnowledgeEditor,\n    props: {\n      knowledge,\n      type,\n      onClose,\n      onUpdate,\n    },\n  })\n  return (\n    <Modal\n      title=\"Notes\"\n      hasCloseButton\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 1000px; width: 70vw; height: 60vh;\"\n    >\n      <div className=\"knowledge-editor\" ref={editorRef} />\n    </Modal>\n  );\n};\nexport default AddKnowledgeModal;\n","import React from '@teact';\n/* eslint-disable max-len */\nimport copy from 'copy-to-clipboard';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport AIKnowledgeEmpty from '../../../assets/ai-knowledge-empty.png';\n\nconst AIKnowledgeEmptyContent = ({ onAdd }:{ onAdd:NoneToVoidFunction }) => {\n  return (\n    <div className=\"flex flex-col justify-center items-center px-[30px] pt-[120px]\">\n      <img src={AIKnowledgeEmpty} alt=\"AIKnowledge\" className=\"w-[125px] h-[125px] mb-[12px]\" />\n      <span className=\"text-[14px] text-[#676B74]\">\n        Store your frequently used personal info, company details, and business materials here.During chats, AI will reference this content to deliver more relevant and intelligent responses.\n      </span>\n      <Button\n        round\n        color=\"translucent\"\n        className=\"!bg-[#8C42F0] flex flex-row items-center gap-[8px] !w-[148px] !h-[42px] !p-0 !rounded-[21px] mt-[20px]\"\n        onClick={onAdd}\n      >\n        <Icon className=\"text-white text-[14px]\" name=\"add\" />\n        <span className=\"text-white\">Add</span>\n      </Button>\n    </div>\n  );\n};\nconst AIKnowledgeList = ({ knowledgeList, onEdit, onDelete }:{\n  knowledgeList:any[];\n  onEdit:(knowledge:AiKnowledge)=>void;\n  onDelete:(id:string)=>void;\n}) => {\n  const { showNotification } = getActions();\n  const handleCopy = useCallback((knowledge:AiKnowledge) => {\n    copy(knowledge.plainText);\n    showNotification({\n      message: 'TextCopied',\n    });\n  }, []);\n  const handleEdit = useCallback((knowledge:AiKnowledge) => {\n    onEdit(knowledge);\n  }, [onEdit]);\n  const handleDelete = useCallback((knowledge:AiKnowledge) => {\n    onDelete(knowledge.id);\n  }, [onDelete]);\n  return (\n    <div className=\"px-[20px]\">\n      {knowledgeList.map((item) => (\n        <div key={item.id} className=\"bg-[#F7F7F7] rounded-[12px] px-[16px] py-[15px] mb-[12px]\">\n          <div className=\"white-space-pre-wrap line-clamp-3 overflow-hidden text-ellipsis\">\n            {item?.question || ''}\n          </div>\n          <div className=\"white-space-pre-wrap line-clamp-3 overflow-hidden text-ellipsis\">\n            {item.plainText.replace(/\\\\n/g, '')}\n          </div>\n          <div className=\"flex justify-end gap-[8px] items-center\">\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCopy(item)}\n            >\n              <Icon name=\"copy\" className=\"text-[14px]\" />\n            </Button>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleEdit(item)}\n            >\n              <Icon name=\"edit\" className=\"text-[14px]\" />\n            </Button>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleDelete(item)}\n            >\n              <Icon name=\"delete\" className=\"text-[14px]\" />\n            </Button>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\nconst AIKnowledgeContent = ({\n  knowledgeList, onShowAddModal, onEdit, onDelete,\n}:{\n  knowledgeList:any[];\n  onShowAddModal:(type:'edit' | 'add')=>void ;\n  onEdit:(knowledge:AiKnowledge)=>void;\n  onDelete:(id:string)=>void;\n}) => {\n  const handleAdd = useCallback(() => {\n    onShowAddModal('add');\n  }, [onShowAddModal]);\n  return (\n    <div className=\"pt-[20px] h-full box-border\">\n      {knowledgeList.length === 0 ? (\n        <AIKnowledgeEmptyContent onAdd={handleAdd} />\n      ) : (\n        <AIKnowledgeList knowledgeList={knowledgeList} onEdit={onEdit} onDelete={onDelete} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(AIKnowledgeContent);\n","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  showAddButton:boolean;\n  onReset: () => void;\n  onShowAddModal:(type:'edit' | 'add') => void;\n};\nconst AIKnowledgeHeader: FC<OwnProps> = ({ onReset, showAddButton, onShowAddModal }) => {\n  const oldLang = useOldLang();\n\n  function renderHeaderContent() {\n    return <h3>{oldLang('Quick Replies')}</h3>;\n  }\n  const handleAdd = useCallback(() => {\n    onShowAddModal('add');\n  }, [onShowAddModal]);\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      {showAddButton && (\n        <Button\n          round\n          color=\"translucent\"\n          className=\"!bg-[#8C42F0] flex flex-row items-center gap-[8px] !w-[92px] !h-[30px] !p-0 !rounded-[21px] !text-[14px]\"\n          onClick={handleAdd}\n        >\n          <Icon className=\"text-white text-[14px]\" name=\"add\" />\n          <span className=\"text-white\">Add</span>\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(AIKnowledgeHeader);\n","import React from '@teact';\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\n\nimport type { AiKnowledge } from '../../chatAssistant/store/knowledge-store';\n\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport AddKnowledgeModal from './AddKnowledgeModal';\nimport AIKnowledgeContent from './AIKnowledgeContent';\nimport AIKnowledgeHeader from './AIKnowledgeHeader';\n\nexport type OwnProps = {\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\nconst AIKnowledge:FC<OwnProps> = ({ onReset }) => {\n  const [knowledgeList, setKnowledgeList] = useState<AiKnowledge[]>([]);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [type, setType] = useState<'edit' | 'add'>('add');\n  const [editKnowledge, setEditKnowledge] = useState<AiKnowledge | null>(null);\n  useEffect(() => {\n    ChataiStores.knowledge?.getAllKnowledge().then((knowledge) => {\n      setKnowledgeList(knowledge || []);\n    });\n  }, []);\n  const handleReset = useLastCallback(() => {\n    onReset(true);\n  });\n  const handleCloseAddModal = useCallback(() => {\n    setShowAddModal(false);\n  }, []);\n  const handleShowAddModal = useCallback((type:'edit' | 'add') => {\n    setShowAddModal(true);\n    setType(type);\n  }, []);\n  const handleEdit = useCallback((knowledge:AiKnowledge) => {\n    setType('edit');\n    setEditKnowledge(knowledge);\n    setShowAddModal(true);\n  }, []);\n  const handleUpdate = useCallback(() => {\n    setEditKnowledge(null);\n    ChataiStores.knowledge?.getAllKnowledge().then((knowledge) => {\n      setKnowledgeList(knowledge || []);\n    });\n  }, []);\n  const handleDelete = useCallback((id:string) => {\n    ChataiStores.knowledge?.deleteKnowledge(id).then(() => {\n      setKnowledgeList((prev) => {\n        return prev.filter((item) => item.id !== id);\n      });\n    });\n  }, []);\n  function renderCurrentSection() {\n    return (\n      <>\n        <AIKnowledgeHeader\n          onReset={handleReset}\n          showAddButton={knowledgeList.length > 0}\n          onShowAddModal={handleShowAddModal}\n        />\n        <AIKnowledgeContent knowledgeList={knowledgeList} onShowAddModal={handleShowAddModal} onEdit={handleEdit} onDelete={handleDelete} />\n        {showAddModal && (\n          <AddKnowledgeModal type={type} isOpen={showAddModal} onClose={handleCloseAddModal} knowledge={editKnowledge} onUpdate={handleUpdate} />\n        )}\n      </>\n\n    );\n  }\n  return (\n    <Transition\n      id=\"AiKnowledge\"\n      name=\"fade\"\n      activeKey={0}\n      renderCount={1}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(AIKnowledge);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T_GGJ8J2\",\"item\":\"fe7VNmNB\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { telegptSettings } from '../../chatAssistant/api/user-settings';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './AutoTranslateLanguage.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype StateProps = { autoTranslateLanguage:string | undefined };\nconst AutoTranslateLanguage: FC<StateProps> = ({ autoTranslateLanguage }) => {\n  const { setSettingOption } = getActions();\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string | undefined>(autoTranslateLanguage);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  const handleChange = useLastCallback((newSelectedIds: string) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      autoTranslateLanguage: newSelectedIds,\n      translationLanguage: newSelectedIds,\n    });\n    telegptSettings.setSettingOption({\n      autotranslatelanguage: newSelectedIds,\n    });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValue={displayedOptions}\n          onSelectedValueChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable={false}\n          allowMultiple={false}\n          withDefaultPadding\n          itemInputType=\"radio\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      autoTranslateLanguage,\n    } = global.settings.byKey;\n\n    return {\n      autoTranslateLanguage,\n    };\n  },\n)(AutoTranslateLanguage));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { telegptSettings } from '../../chatAssistant/api/user-settings';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport AutoTranslateLanguage from './AutoTranslateLanguage';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\ntype StateProps = { autoTranslate: boolean | undefined };\n\nconst AITranslateContent: FC<OwnProps & StateProps> = ({\n  autoTranslate,\n  isActive,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    // openPremiumModal,\n  } = getActions();\n  const lang = useOldLang();\n\n  const [displayAutoTranslate, setDisplayAutoTranslate] = useState(autoTranslate);\n\n  const handleAutoTranslateChange = useLastCallback((newValue: boolean) => {\n    setDisplayAutoTranslate(newValue);\n    setSettingOption({ autoTranslate: newValue });\n    telegptSettings.setSettingOption({\n      autotranslate: newValue,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('Auto Translate')}\n          checked={displayAutoTranslate}\n          onCheck={handleAutoTranslateChange}\n        />\n      </div>\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Language')}\n        </h4>\n        <AutoTranslateLanguage />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      autoTranslate,\n    } = global.settings.byKey;\n\n    return {\n      autoTranslate,\n    };\n  },\n)(AITranslateContent));\n","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  onReset: () => void;\n};\nconst AITranslateHeader: FC<OwnProps> = ({ onReset }) => {\n  const oldLang = useOldLang();\n\n  function renderHeaderContent() {\n    return <h3>{oldLang('AI Translate')}</h3>;\n  }\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n    </div>\n  );\n};\n\nexport default memo(AITranslateHeader);\n","import React from '@teact';\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport Transition from '../../ui/Transition';\nimport AITranslateContent from './AITranslateContent';\nimport AITranslateHeader from './AITranslateHeader';\n\nexport type OwnProps = {\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\nconst AITranslate:FC<OwnProps> = ({ onReset }) => {\n  function renderCurrentSection() {\n    return (\n      <>\n        <AITranslateHeader onReset={onReset} />\n        <AITranslateContent onReset={onReset} />\n      </>\n    );\n  }\n  return (\n    <Transition\n      id=\"AiTranslate\"\n      name='fade'\n      activeKey={0}\n      renderCount={1}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(AITranslate);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useCallback, useState } from '@teact';\nimport { getActions } from '../../../global';\n\nimport { type AnimationLevel, LeftColumnContent } from '../../../types';\n\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  animationLevel: AnimationLevel;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  animationLevel,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={resolveTransitionName('layers', animationLevel)}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  const isLoading = !shouldRenderContents && (canSendStickers || isForEffects) && !noPopulatedSets;\n\n  return (\n    <Transition className={fullClassName} activeKey={isLoading ? 0 : 1} name=\"fade\" shouldCleanup>\n      {!shouldRenderContents ? (\n        !canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )\n      ) : (\n        <>\n          {!isForEffects && (\n            <div ref={headerRef} className={headerClassName}>\n              <div className=\"shared-canvas-container\">\n                <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n                {allSets.map(renderCover)}\n              </div>\n            </div>\n          )}\n          <div\n            ref={containerRef}\n            onMouseMove={handleMouseMove}\n            onScroll={handleContentScroll}\n            className={\n              buildClassName(\n                styles.main,\n                IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n                !isForEffects && styles.hasHeader,\n              )\n            }\n          >\n            {allSets.map((stickerSet, i) => (\n              <StickerSet\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n                noContextMenus={noContextMenus}\n                index={i}\n                idPrefix={prefix}\n                observeIntersection={observeIntersectionForSet}\n                observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n                observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n                isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n                favoriteStickers={favoriteStickers}\n                isSavedMessages={isSavedMessages}\n                isCurrentUserPremium={isCurrentUserPremium}\n                isTranslucent={isTranslucent}\n                isChatStickerSet={stickerSet.id === chatStickerSetId}\n                onStickerSelect={handleStickerSelect}\n                onStickerUnfave={handleStickerUnfave}\n                onStickerFave={handleStickerFave}\n                onStickerRemoveRecent={handleRemoveRecentSticker}\n                forcePlayback\n                shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport SerenaPath from '../../chatAssistant/assets/serena.png';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  filteredUsers: ApiUser[] | undefined;\n  onInsertUserName: (peer: ApiPeer, forceFocus?: boolean, insertAtEnd?: boolean) => void;\n  onInsertUsersAll?: (users: ApiUser[]) => void;\n  onClose: NoneToVoidFunction;\n  onReset?: NoneToVoidFunction;\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  filteredUsers,\n  onClose,\n  onInsertUserName,\n  onInsertUsersAll,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const lang = useOldLang();\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false, insertAtEnd = false) => {\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus, insertAtEnd);\n  });\n\n  const handleMentionAll = useLastCallback(() => {\n    const renderedChatMembers = filteredUsers && filteredUsers.length\n      ? filteredUsers\n      : undefined;\n\n    if (!renderedChatMembers?.length) {\n      return;\n    }\n\n    // Prefer batch insertion when available\n    if (onInsertUsersAll) {\n      onInsertUsersAll(renderedChatMembers);\n      return;\n    }\n\n    // Fallback: sequential insert (older behavior)\n    renderedChatMembers.forEach((member, index) => {\n      handleUserSelect(member.id, index === 0, index > 0);\n    });\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      <ListItem\n        key=\"all-users\"\n        className=\"chat-item-clickable scroll-item smaller-icon\"\n        onClick={handleMentionAll}\n        focus={selectedMentionIndex === 0}\n      >\n        <div className=\"ChatInfo\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <img src={SerenaPath} alt=\"mention all\" className=\"w-[34px] h-34px rounded-full mr-[0.7em]\" />\n          <div className=\"info\">\n            <div className=\"info-name-title\">\n              Mention All\n            </div>\n          </div>\n        </div>\n      </ListItem>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index + 1}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    insertMentionsBatch,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {lang('ContextMoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {lang('ContextMoveTextDown')}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onInsertUsersAll={insertMentionsBatch}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                size=\"smaller\"\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport {\n  TODO_ITEM_LENGTH_LIMIT,\n  TODO_ITEMS_LIMIT,\n  TODO_TITLE_LENGTH_LIMIT,\n} from '../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount?: number;\n  maxTitleLength?: number;\n  maxItemLength?: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount = TODO_ITEMS_LIMIT,\n  maxTitleLength = TODO_TITLE_LENGTH_LIMIT,\n  maxItemLength = TODO_ITEM_LENGTH_LIMIT,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const title = isAddTaskMode ? 'TitleAppendToDoList' : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount', {\n          count: maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0),\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig?.todoItemsMax,\n      maxTitleLength: appConfig?.todoTitleLengthMax,\n      maxItemLength: appConfig?.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type { EmojiData, EmojiModule, EmojiRawData } from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <Transition className={containerClassName} activeKey={shouldRenderContent ? 1 : 0} name=\"fade\" shouldCleanup>\n      {!shouldRenderContent ? (\n        <Loading />\n      ) : (\n        <>\n          <div\n            ref={headerRef}\n            className={headerClassName}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {allCategories.map(renderCategoryButton)}\n          </div>\n          <div\n            ref={containerRef}\n            onScroll={handleContentScroll}\n            className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n          >\n            {allCategories.map((category, i) => (\n              <EmojiCategory\n                category={category}\n                index={i}\n                allEmojis={emojis}\n                observeIntersection={observeIntersection}\n                shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n                onEmojiSelect={handleEmojiSelect}\n              />\n            ))}\n          </div>\n        </>\n      )}\n    </Transition>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\nimport Transition from '../../ui/Transition.tsx';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const isLoading = canSendGifs && (!canRenderContents || !savedGifs);\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      slideClassName=\"GifPickerGrid\"\n      activeKey={isLoading ? 0 : 1}\n      name=\"fade\"\n      shouldCleanup\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading color=\"yellow\" />\n      )}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { AnimationLevel, ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  isLeftColumnShown,\n  isBackgroundTranslucent,\n  animationLevel,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name={resolveTransitionName('slide', animationLevel)}\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(SymbolMenu));\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef } from '@teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import React from '@teact';\nimport type { FC, TeactNode } from '@teact';\nimport { memo } from '@teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName.ts';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className={buildClassName('BaseResult chat-item-clickable', typeof content === 'string' && 'with-text')}\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useRef } from '@teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const thumbDataUri = useThumbnail(message);\n  const mediaHash = useMessageMediaHash(message, 'micro');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || thumbDataUri) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || thumbDataUri, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph.token,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        if (!isGraph(graph)) {\n          return;\n        }\n\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import React from '@teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction MessageStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${messageId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {(!loadedCharts.current.size || !statistics.publicForwardsData) && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(MessageStatistics));\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import React from '@teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n} from '../../../api/types';\n\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\nimport { isGraph } from './helpers/isGraph';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      if (!isGraph(graph)) {\n        return;\n      }\n      const isAsync = graph.graphType === 'async';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph.token });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.add(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div\n      key={`${chatId}-${storyId}`}\n      className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}\n    >\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => {\n          const isReady = loadedCharts.current.has(graph) && !errorCharts.current.has(graph);\n          return (\n            <div className={buildClassName(styles.graph, !isReady && styles.hidden)} />\n          );\n        })}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const { ref } = useMediaTransition<HTMLImageElement>({\n    hasMediaData: Boolean(photoUrl),\n  });\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","React","id","className","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getMediaViewerItem","message","avatarOwner","profilePhotos","standaloneMedia","mediaIndex","sponsoredMessage","type","media","selectViewableMedia","global","params","isSingle","length","avatar","photos","action","document","photo","video","paidMedia","getMessageContent","isDocumentPhoto","isDocumentVideo","webPage","selectWebPageFromMessage","webpageType","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","viewableMedia","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","children","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","includes","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","currentItem","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","closeFriends","denyList","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","modal","noBackdrop","header","closeButton","headerTitle","renderHeaderContent","slideClassName","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","getReactionKey","withEffectOnly","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","minAge","verifyAgeMin","VERIFY_AGE_MIN_DEFAULT","ageFromParam","age","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","gift","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","giftSticker","getStickerFromGift","ParticlesHeader","model","getHeaderText","getHeaderDescription","CustomEmoji","renderHeader","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","perUserTotal","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","headerClassName","pickerStyles","listClassName","shouldCleanup","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","hasAbsoluteCloseButton","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","CreditHistory","currentPage","setCurrentPage","total","setTotal","creditList","setCreditList","loading","setLoading","defaultAlgorithm","darkAlgorithm","systemTheme","columns","dataIndex","formatPostgresTimestamp","getCreditHistoryList","res","getCreditHistory","page","records","pagination","ConfigProvider","algorithm","Table","dataSource","showSizeChanger","pageSize","CreditsModal","closeCreditsModal","injectElement","injectComponent","component","injected","unmount","InviteCode","inviteCodes","setInviteCodes","record","cx","handleCopy","copy","getCodeList","getMyInviteCodes","InviteFriendsModal","closeInviteFriendsModal","myInviteCode","setMyInviteCode","cachedInvitation","localStorage","getItem","invitation","inviteCode","getMyInvitation","LinkIcon","UserGroupIcon","InviteCodeModal","closeInviteCodeModal","setInviteCode","isSubmitting","setIsSubmitting","setError","HeaderBg","submitInviteCode","submitButton","noForcedUpperCase","PLAN_ORDER","free","basic","pro","plus","PRICING_PLANS","planType","period","creditsInfo","creditsInfoDescription","buttonLink","features","PayPackageModal","subscriptionInfo","subscriptionType","closePayPackageModal","updateSubscriptionInfo","selectedPlan","setSelectedPlan","curSubscriptionInfo","setCurSubscriptionInfo","getSubscriptionInfo","creditBalance","createdAt","subscriptionExpiresAt","isExpirated","handleUpgrade","plan","currentPlan","warn","handlePlanSelect","headerBadge","pricingCards","pricingCard","topContent","cardHeader","planTitle","pricing","priceRow","upgradeButton","feature","listdot","checkIcon","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","STARS_SUGGESTED_POST_AMOUNT_MAX","minStarsAmount","starsSuggestedPostAmountMin","STARS_SUGGESTED_POST_AMOUNT_MIN","ageMinSeconds","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","futureMin","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","futureMax","starsSuggestedPostFutureMax","STARS_SUGGESTED_POST_FUTURE_MAX","tonMaxAmount","tonSuggestedPostAmountMax","TON_SUGGESTED_POST_AMOUNT_MAX","tonMinAmount","tonSuggestedPostAmountMin","TON_SUGGESTED_POST_AMOUNT_MIN","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","STARS_SUGGESTED_POST_COMMISSION_PERMILLE","tonCommissionPermille","tonSuggestedPostCommissionPermille","TON_SUGGESTED_POST_COMMISSION_PERMILLE","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","filterDocuments","documents","filterOptions","filteredDocuments","include","doc","matchesCriteria","exclude","criteria","metadata","isArray","VectorStorage","dbName","dbVersion","maxSizeInMB","debounceTime","openaiModel","embedTextsFn","openaiApiKey","openAIApiKey","startPeriodicCleanup","addText","vector","vectorMag","addDocuments","updateText","updateDocument","deleteText","db","initDB","tx","transaction","objectStore","delete","done","getText","similaritySearch","includeValues","queryEmbedding","embedText","queryMagnitude","calculateMagnitude","loadFromIndexDbStorage","calculateSimilarityScores","pair","score","updateHitCounters","embedding","similarItems","documentSearch","loadAllFromIndexDbStorage","openDB","upgrade","storeName","objectStoreNames","deleteObjectStore","documentStore","createObjectStore","autoIncrement","keyPath","createIndex","calcVectorMagnitude","addToIndexDbStorage","vertor","embedTexts","texts","response","fetch","headers","Authorization","Error","json","sqrt","sum","val","queryVector","dotProduct","magnitudeA","normalizeScore","hits","store","cursor","iterate","put","checkAndCleanupData","setInterval","allDocs","docsToKeep","docsToDelete","manualCleanup","getDocumentCount","encoding_format","responseData","vectorStoreMap","getVectorStore","toolsEmbeddingStore","messageEmbeddingStore","PureMultimodalInput","setMessages","textareaRef","adjustHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","domValue","submitForm","AITextarea","rows","autoFocus","shiftKey","toast","StopButton","SendButton","AISearchInput","prevProps","nextProps","PureStopButton","messages","sanitizeUIMessages","StopIcon","PureSendButton","GLOBAL_SEARCH_CHATID","injectMessageAI","AISearch","getCurrentUserInfo","pageInfo","setPageInfo","lastTime","hasMore","scrollToBottom","scrollLocked","isScrollLock","useScrollToBottom","append","useChat","api","SERVER_API_URL","sendExtraMessageFields","onError","upgradeTip","createUpgradeTipMessage","ChataiStores","getMessages","localChatAiMessages","parseStoreMessage2Message","suggestionMessage","uuidv4","annotations","parsedMessage","parseMessage2StoreMessage","storeMessages","Promise","resolve","searchGroup","chatType","searchResult","chatIds","searchUser","senderIds","searchMessage","random","isAuxiliary","getApihHeaders","toolsHitCheck","toolResults","toolCall","toolName","keyword","Messages","AISearchWrapper","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","withSticker","shouldDrawDateDivider","toYearMonth","selectMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","privateChatUserId","privateChatUser","ChatMessage","useThumbnail","mediaThumbnail","getMessageSticker","useMessageMediaHash","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","PublicPostsSearchLauncher","searchFlood","onSearch","queryIsFree","queryFromFlood","searchButtonActiveKey","useTransitionActiveKey","trimEnd","handleSearchClick","handlePaidSearchClick","starsAmount","checkSearchPostsFlood","onCheckFlood","handleSubscribePremiumClick","shouldRenderPaidScreen","remains","waitTill","loadingScreen","renderLimitReached","PUBLIC_POSTS_SEARCH_DEFAULT_STARS_AMOUNT","totalDaily","PUBLIC_POSTS_SEARCH_DEFAULT_TOTAL_DAILY","previewUrl","LOCAL_TGS_PREVIEW_URLS","limitTitle","limitDescription","paidSearchButton","freeSearchUnlock","renderSearchButton","remainingSearches","searchButton","searchButtonContent","searchIcon","searchIconWithNext","nextIcon","premiumTitle","premiumDescription","subscribePremiumButton","premiumSubtitle","publicPostsResult","publicPosts","shouldShowSearchLauncher","isNothingFound","animationLevel","PublicPostsResults","resolveTransitionName","TABS","GlobalSearchContent","ChannelList","BotApps","PublicPosts","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","AI","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","foldersById","recommended","recommendedChatFolders","folderIds","aiChatFolders","filterAIFolder","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","PRESET_FOLDER_ID","UNREAD_FOLDER_ID","AI_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","region","getLocation","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","renderValue","renderContentSizeSlider","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MED","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","wasAnimationLevelSetManually","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","CHAT_HEIGHT_PX","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useScrollNotch","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","_isFrom","_currentKey","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","renderCurrentSectionContent","shouldWrap","withSwipeControl","ErrorTip","knowledge","knowledgeId","richText","setQuestion","questionError","setQuestionError","valueError","setValueError","handleQuestionChange","handleSave","plainText","n","Node","string","knowledgeIdValue","addKnowledge","DSlate","toolbar","Input","AddKnowledgeModal","editorRef","AIKnowledgeEditor","AIKnowledgeEmptyContent","onAdd","AIKnowledgeEmpty","AIKnowledgeList","knowledgeList","onEdit","handleEdit","AIKnowledgeContent","onShowAddModal","handleAdd","AIKnowledgeHeader","showAddButton","AIKnowledge","setKnowledgeList","showAddModal","setShowAddModal","setType","editKnowledge","setEditKnowledge","getAllKnowledge","handleCloseAddModal","handleShowAddModal","deleteKnowledge","autoTranslateLanguage","AutoTranslateLanguage","telegptSettings","autotranslatelanguage","autoTranslate","AITranslateContent","displayAutoTranslate","setDisplayAutoTranslate","handleAutoTranslateChange","autotranslate","AITranslateHeader","AITranslate","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","filteredUsers","onInsertUserName","onInsertUsersAll","handleUserSelect","forceFocus","insertAtEnd","handleMentionAll","renderedChatMembers","handleSelectMention","selectedMentionIndex","prevChatMembers","SerenaPath","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","insertMentionsBatch","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","TODO_ITEMS_LIMIT","TODO_TITLE_LENGTH_LIMIT","TODO_ITEM_LENGTH_LIMIT","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","tasksToRender","stateIndex","renderItems","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","toggleStoryStatistics","imgBlobUrl","withStorySolid","forceUnreadStorySolid","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","errorCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","isGraph","graphType","token","isPercentage","ensureLovelyChart","isAsync","isError","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwardsData","publicForwards","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","hasMediaData","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop"],"sourceRoot":""}