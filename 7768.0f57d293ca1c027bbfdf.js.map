{"version":3,"file":"7768.0f57d293ca1c027bbfdf.js","mappings":"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","sources":["webpack://TelyAI/./src/global/actions/ui/calls.ts","webpack://TelyAI/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://TelyAI/./src/global/reducers/reactions.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/messages.ts","webpack://TelyAI/./src/global/actions/api/messages.ts","webpack://TelyAI/./src/global/actions/api/symbols.ts","webpack://TelyAI/./src/global/actions/api/globalSearch.ts","webpack://TelyAI/./src/global/actions/api/middleSearch.ts","webpack://TelyAI/./src/global/actions/api/management.ts","webpack://TelyAI/./src/global/actions/api/sync.ts","webpack://TelyAI/./src/global/actions/api/accounts.ts","webpack://TelyAI/./src/global/actions/api/users.ts","webpack://TelyAI/./src/util/PopupManager.ts","webpack://TelyAI/./src/global/reducers/bots.ts","webpack://TelyAI/./src/global/actions/api/bots.ts","webpack://TelyAI/./src/global/actions/api/twoFaSettings.ts","webpack://TelyAI/./src/util/payments/stripe.ts","webpack://TelyAI/./src/global/actions/api/payments.ts","webpack://TelyAI/./src/util/requestQuery.ts","webpack://TelyAI/./src/global/actions/api/stars.ts","webpack://TelyAI/./src/global/actions/api/reactions.ts","webpack://TelyAI/./src/global/actions/api/statistics.ts","webpack://TelyAI/./src/global/actions/api/stories.ts","webpack://TelyAI/./src/global/actions/ui/chats.ts","webpack://TelyAI/./src/global/actions/ui/bots.ts","webpack://TelyAI/./src/global/helpers/meta.ts","webpack://TelyAI/./src/global/actions/ui/messages.ts","webpack://TelyAI/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://TelyAI/./src/global/actions/ui/globalSearch.ts","webpack://TelyAI/./src/global/actions/ui/middleSearch.ts","webpack://TelyAI/./src/global/actions/ui/stickerSearch.ts","webpack://TelyAI/./src/global/actions/ui/account.ts","webpack://TelyAI/./src/global/actions/ui/users.ts","webpack://TelyAI/./src/util/getIsAppUpdateNeeded.ts","webpack://TelyAI/./src/util/updateIcon.ts","webpack://TelyAI/./src/util/updatePageTitle.ts","webpack://TelyAI/./src/global/actions/ui/misc.ts","webpack://TelyAI/./src/global/actions/ui/payments.ts","webpack://TelyAI/./src/global/actions/ui/mediaViewer.ts","webpack://TelyAI/./src/global/actions/ui/passcode.ts","webpack://TelyAI/./src/global/actions/ui/stars.ts","webpack://TelyAI/./src/global/actions/ui/reactions.ts","webpack://TelyAI/./src/global/actions/ui/stories.ts","webpack://TelyAI/./src/global/actions/ui/statistics.ts","webpack://TelyAI/./src/global/actions/ui/credits.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/chats.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/users.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/symbols.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/misc.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/settings.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/calls.ts","webpack://TelyAI/./src/global/actions/apiUpdaters/payments.ts","webpack://TelyAI/./src/components/chatAssistant/component/guidance/guidance-carousel.tsx","webpack://TelyAI/./src/components/chatAssistant/component/guidance/guidance-wrapper.tsx","webpack://TelyAI/./src/components/chatAssistant/component/guidance/guidance-modal.tsx","webpack://TelyAI/./src/hooks/useCacheBuster.ts","webpack://TelyAI/./src/components/right/hooks/useTransitionFixes.ts","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-attachments-modal.tsx","webpack://TelyAI/./src/hooks/usePreventPinchZoomGesture.ts","webpack://TelyAI/./src/components/calls/ActiveCallHeader.async.tsx","webpack://TelyAI/./src/components/calls/group/GroupCall.async.tsx","webpack://TelyAI/./src/components/calls/phone/PhoneCall.async.tsx","webpack://TelyAI/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://TelyAI/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://TelyAI/./src/components/common/DeleteMessageModal.async.tsx","webpack://TelyAI/./src/components/common/StickerSetModal.async.tsx","webpack://TelyAI/./src/components/common/UnreadCounter.tsx","webpack://TelyAI/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://TelyAI/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://TelyAI/./src/components/left/ArchivedChats.async.tsx","webpack://TelyAI/./src/components/left/NewChatButton.tsx","webpack://TelyAI/./src/components/left/search/LeftSearch.async.tsx","webpack://TelyAI/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://TelyAI/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://TelyAI/./src/components/chatAssistant/component/upgrade-tip.tsx","webpack://TelyAI/./src/components/left/main/ChatFolders.tsx","webpack://TelyAI/./src/components/left/main/ContactList.async.tsx","webpack://TelyAI/./src/hooks/useConnectionStatus.ts","webpack://TelyAI/./src/hooks/window/useBrowserOnline.ts","webpack://TelyAI/./src/components/left/ConnectionStatusOverlay.tsx","webpack://TelyAI/./src/components/chatAssistant/component/upgrade/UpgradeButton.tsx","webpack://TelyAI/./src/components/left/main/AccountMenuItems.tsx","webpack://TelyAI/./src/components/left/main/LeftSideMenuItems.tsx","webpack://TelyAI/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://TelyAI/./src/components/left/main/StatusButton.tsx","webpack://TelyAI/./src/components/left/main/LeftMainHeader.tsx","webpack://TelyAI/./src/components/left/main/LeftMain.tsx","webpack://TelyAI/./src/components/left/newChat/NewChat.async.tsx","webpack://TelyAI/./src/components/left/settings/Settings.async.tsx","webpack://TelyAI/./src/components/left/LeftColumn.tsx","webpack://TelyAI/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://TelyAI/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://TelyAI/./src/components/middle/MessageListHistoryHandler.tsx","webpack://TelyAI/./src/components/chatAssistant/assets/lottieData/index.ts","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-ai-entry-button.tsx","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-ai-entry-wrapper.tsx","webpack://TelyAI/./src/components/middle/hooks/usePinnedMessage.ts","webpack://TelyAI/./src/components/chatAssistant/multi-input.tsx","webpack://TelyAI/./src/components/chatAssistant/component/FloatingActionButton.tsx","webpack://TelyAI/./src/components/chatAssistant/component/InputText.tsx","webpack://TelyAI/./src/components/chatAssistant/component/Spinner.tsx","webpack://TelyAI/./src/components/chatAssistant/component/TextArea.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/rooms-tab.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://TelyAI/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://TelyAI/./src/components/chatAssistant/component/InviteButton.tsx","webpack://TelyAI/./src/components/chatAssistant/global-summary/summary-header-actions.tsx","webpack://TelyAI/./src/components/chatAssistant/global-summary/urgent-notification.tsx","webpack://TelyAI/./src/components/chatAssistant/global-summary/global-summary.tsx","webpack://TelyAI/./src/components/chatAssistant/global-summary/global-summary.module.scss?0db0","webpack://TelyAI/./src/components/chatAssistant/global-summary/GlobalSummaryWrapper.tsx","webpack://TelyAI/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://TelyAI/./src/components/common/SeenByModal.async.tsx","webpack://TelyAI/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://TelyAI/./src/components/middle/ChatLanguageModal.async.tsx","webpack://TelyAI/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://TelyAI/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://TelyAI/./src/components/middle/ScrollDownButton.tsx","webpack://TelyAI/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://TelyAI/./src/components/middle/FloatingActionButtons.tsx","webpack://TelyAI/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://TelyAI/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://TelyAI/./src/components/middle/helpers/groupMessages.ts","webpack://TelyAI/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://TelyAI/./src/components/middle/ContactGreeting.tsx","webpack://TelyAI/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://TelyAI/./src/components/middle/MessageListAccountInfo.tsx","webpack://TelyAI/./src/components/middle/hooks/useMessageObservers.ts","webpack://TelyAI/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://TelyAI/./src/components/right/userPortrait/UserPortraitBasicCard.tsx","webpack://TelyAI/./src/components/right/userPortrait/UserPortraitBasicCardMenu.tsx","webpack://TelyAI/./src/components/middle/message/SenderGroupAvatar.tsx","webpack://TelyAI/./src/components/middle/message/SenderGroupContainer.tsx","webpack://TelyAI/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://TelyAI/./src/components/middle/message/SponsoredMessage.tsx","webpack://TelyAI/./src/components/middle/MessageListContent.tsx","webpack://TelyAI/./src/components/middle/hooks/useScrollHooks.ts","webpack://TelyAI/./src/components/middle/NoMessages.tsx","webpack://TelyAI/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://TelyAI/./src/components/middle/RequirementToContactMessage.tsx","webpack://TelyAI/./src/components/middle/MessageList.tsx","webpack://TelyAI/./src/hooks/useNativeCopySelectedMessages.ts","webpack://TelyAI/./src/components/middle/hooks/useStickyDates.ts","webpack://TelyAI/./src/components/middle/hooks/useContainerHeight.ts","webpack://TelyAI/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://TelyAI/./src/hooks/useMessageMediaMetadata.ts","webpack://TelyAI/./src/components/middle/panes/AudioPlayer.tsx","webpack://TelyAI/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://TelyAI/./src/components/middle/PinnedMessageNavigation.tsx","webpack://TelyAI/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://TelyAI/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://TelyAI/./src/components/middle/MiddleHeader.tsx","webpack://TelyAI/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://TelyAI/./src/components/middle/panes/BotAdPane.tsx","webpack://TelyAI/./src/components/middle/panes/BotVerificationPane.tsx","webpack://TelyAI/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://TelyAI/./src/components/middle/panes/ChatReportPane.tsx","webpack://TelyAI/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://TelyAI/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://TelyAI/./src/components/middle/MiddleHeaderPanes.tsx","webpack://TelyAI/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://TelyAI/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://TelyAI/./src/components/middle/ReactorListModal.async.tsx","webpack://TelyAI/./src/components/middle/search/MiddleSearch.async.tsx","webpack://TelyAI/./src/components/middle/MiddleColumn.tsx","webpack://TelyAI/./src/hooks/useResize.ts","webpack://TelyAI/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://TelyAI/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://TelyAI/./src/components/modals/ModalContainer.tsx","webpack://TelyAI/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://TelyAI/./src/components/modals/boost/BoostModal.async.tsx","webpack://TelyAI/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://TelyAI/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://TelyAI/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://TelyAI/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://TelyAI/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://TelyAI/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://TelyAI/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://TelyAI/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://TelyAI/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://TelyAI/./src/components/modals/map/MapModal.async.tsx","webpack://TelyAI/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://TelyAI/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://TelyAI/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://TelyAI/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://TelyAI/./src/components/modals/credits/CreditsModal.async.tsx","webpack://TelyAI/./src/components/modals/inviteCode/InviteCodeModal.async.tsx","webpack://TelyAI/./src/components/modals/inviteFriends/InviteFriendsModal.async.tsx","webpack://TelyAI/./src/components/modals/membership/PayPackageModal.async.tsx","webpack://TelyAI/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://TelyAI/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://TelyAI/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://TelyAI/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://TelyAI/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/GiftModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://TelyAI/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://TelyAI/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://TelyAI/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://TelyAI/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://TelyAI/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://TelyAI/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://TelyAI/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://TelyAI/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://TelyAI/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://TelyAI/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://TelyAI/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://TelyAI/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://TelyAI/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://TelyAI/./src/components/payment/PaymentModal.async.tsx","webpack://TelyAI/./src/components/payment/ReceiptModal.async.tsx","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://TelyAI/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://TelyAI/./src/components/right/AddChatMembers.tsx","webpack://TelyAI/./src/components/right/CreateTopic.async.tsx","webpack://TelyAI/./src/components/right/EditTopic.async.tsx","webpack://TelyAI/./src/components/right/GifSearch.async.tsx","webpack://TelyAI/./src/components/right/management/Management.async.tsx","webpack://TelyAI/./src/components/right/PollResults.async.tsx","webpack://TelyAI/./src/components/right/hooks/useProfileState.ts","webpack://TelyAI/./src/components/right/hooks/useProfileViewportIds.ts","webpack://TelyAI/./src/components/common/gift/SavedGift.module.scss?4193","webpack://TelyAI/./src/components/common/gift/SavedGift.tsx","webpack://TelyAI/./src/components/common/PreviewMedia.tsx","webpack://TelyAI/./src/components/right/Profile.tsx","webpack://TelyAI/./src/components/right/RightHeader.tsx","webpack://TelyAI/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://TelyAI/./src/components/right/statistics/BoostStatistics.tsx","webpack://TelyAI/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://TelyAI/./src/components/common/AboutMonetizationModal.async.tsx","webpack://TelyAI/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://TelyAI/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://TelyAI/./src/components/right/statistics/Statistics.async.tsx","webpack://TelyAI/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://TelyAI/./src/components/right/StickerSearch.async.tsx","webpack://TelyAI/./src/components/right/RightColumn.tsx","webpack://TelyAI/./src/components/story/StoryViewer.async.tsx","webpack://TelyAI/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://TelyAI/./src/components/main/BotTrustModal.async.tsx","webpack://TelyAI/./src/components/main/DeleteFolderDialog.async.tsx","webpack://TelyAI/./src/components/main/Dialogs.async.tsx","webpack://TelyAI/./src/components/main/DownloadManager.tsx","webpack://TelyAI/./src/components/main/DraftRecipientPicker.async.tsx","webpack://TelyAI/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://TelyAI/./src/components/main/GameModal.tsx","webpack://TelyAI/./src/components/main/HistoryCalendar.async.tsx","webpack://TelyAI/./src/components/main/NewContactModal.async.tsx","webpack://TelyAI/./src/components/main/Notifications.async.tsx","webpack://TelyAI/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://TelyAI/./src/components/main/premium/GiveawayModal.async.tsx","webpack://TelyAI/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://TelyAI/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://TelyAI/./src/components/main/SafeLinkModal.async.tsx","webpack://TelyAI/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://TelyAI/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://TelyAI/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://TelyAI/./src/components/main/visualEffects/WaveContainer.tsx","webpack://TelyAI/./src/components/main/Main.tsx","webpack://TelyAI/./src/components/main/LockScreen.tsx","webpack://TelyAI/./src/components/main/LockScreen.module.scss?8252","webpack://TelyAI/./src/bundles/main.ts"],"sourcesContent":["import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line @stylistic/max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: 'Sorry, your browser doesn\\'t support group calls',\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload;\n\n  if (!sounds?.[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      // 统计消息发送数据\n      import('../../../components/chatAssistant/room-storage').then((RoomStorage) => {\n        RoomStorage.default.incrementMessageCount(chatId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  // replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n    return message?.content.text!;\n  });\n  const { currentUserId } = global;\n  const userName = getUserFullName(selectUser(global, currentUserId!));\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n    userId: currentUserId!,\n    userName: userName!,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency: isTon ? 'TON' : 'XTR', tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency: isTon ? 'TON' : 'XTR',\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  RESALE_GIFTS_LIMIT,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n    isUserPortraitShown: false,\n    isChatInfoShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), userId, chatId } = payload || {};\n  const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n  if (chatId && chatId !== currentChatId) {\n    actions.openChat({ id: chatId, tabId });\n  }\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isUserPortraitShown: true,\n    userPortraitUserId: userId,\n  }, tabId);\n  global = { ...global };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCreditsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    creditsModal: { isOpen: true },\n  }, tabId);\n});\n\naddActionHandler('closeCreditsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    creditsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openInviteFriendsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteFriendsModal: { isOpen: true },\n  }, tabId);\n});\n\naddActionHandler('closeInviteFriendsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteFriendsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openInviteCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteCodeModal: { isOpen: true },\n  }, tabId);\n});\n\naddActionHandler('closeInviteCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteCodeModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('toggleUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isUserPortraitShown = force !== undefined ? force : !selectTabState(global, tabId).isUserPortraitShown;\n\n  global = updateTabState(global, { isUserPortraitShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n\naddActionHandler('closePayPackageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    payPackageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPayPackageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payPackageModal: { isOpen: true },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport {\n  addActionHandler,\n  setGlobal,\n} from '../../index';\n\naddActionHandler('updateSubscriptionInfo', (global, actions, payload): ActionReturnType => {\n  const { subscriptionType,\n    creditBalance,\n    createdAt,\n    subscriptionExpiresAt,\n    isExpirated,\n  } = payload;\n\n  // Update global credits state\n  global = {\n    ...global,\n    subscriptionInfo: {\n      subscriptionType,\n      creditBalance,\n      createdAt,\n      subscriptionExpiresAt,\n      isExpirated,\n    },\n  };\n  setGlobal(global);\n  return global;\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","/* eslint-disable no-null/no-null */\n\nimport React, { useRef } from 'react';\nimport { Carousel } from 'antd';\nimport type { CarouselRef } from 'antd/es/carousel';\nimport cx from 'classnames';\n\nimport { CloseIcon } from '../../icons';\n\nimport './guidance.scss';\n\nconst CarouselItem = ({ className, children }: { className: string; children?: React.ReactNode }) => {\n  return (\n    <div className={cx('guidance-carousel-item', className)}>\n      <div className=\"w-[42%] pl-[50px] pt-[5%] pb-[12%] h-full flex flex-col justify-center\">\n        {children}\n      </div>\n    </div>\n  );\n};\nconst GuidanceCarousel = ({ handleClose }: { handleClose: () => void }) => {\n  const carouselRef = useRef<CarouselRef>(null);\n  const handleNextClick = (step: number) => {\n    carouselRef.current?.goTo(step);\n    if (step === 4) {\n      handleClose();\n    }\n  };\n  return (\n    <div>\n      <div className=\"guidance-bubble\" />\n      <div className=\"absolute top-[10px] right-[10px] cursor-pointer text-[#A89E9E] z-10\" onClick={handleClose}>\n        <CloseIcon size={24} />\n      </div>\n      <Carousel className=\"guidance-carousel\" ref={carouselRef}>\n        <CarouselItem className=\"guidance-summary\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Chat Summary</div>\n          <div className=\"text-[14px]\">\n            Message Summarization uses AI to extract key points from IM chats and provide regular summaries, helping users stay updated.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(1)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-translation\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Translation & Grammar Check</div>\n          <div className=\"text-[14px]\">\n            Instant Translation: Real-time translation with auto language detection.\n            Error Detection: Spots spelling, grammar, and structure issues.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(2)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-meeting\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Meeting Scheduler</div>\n          <div className=\"text-[14px]\">\n            Automatically detects meeting chats, gathers details, and sends calendar invites—all within the conversation.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(3)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-actions\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Action Items</div>\n          <div className=\"text-[14px]\">\n            AI picks out tasks and follow-ups from chats in real time—no manual notes needed.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(4)}>Next</div>\n        </CarouselItem>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default GuidanceCarousel;\n","import React from '../../../../lib/teact/teact';\n\nimport { injectComponent } from '../../injectComponent';\nimport GuidanceCarousel from './guidance-carousel';\n\nconst GuidanceWrapper = ({ handleClose }: { handleClose: () => void }) => {\n  const containerRef = injectComponent({\n    component: GuidanceCarousel,\n    props: {\n      handleClose,\n    },\n  });\n  return (\n    <div ref={containerRef} />\n  );\n};\n\nexport default GuidanceWrapper;\n","import React, { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { getMyInvitation } from '../../utils/telegpt-api';\nimport GuidanceWrapper from './guidance-wrapper';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Modal from '../../../ui/Modal';\n\nimport './guidance.scss';\n\nconst GuidanceModal = () => {\n  const telegptGuidance = localStorage.getItem('telegpt-guidance') === 'true';\n  const [isFirstIn, setIsFirstIn] = useState<boolean>(!telegptGuidance);\n\n  const checkInvitationStatus = useLastCallback(async () => {\n    const { openInviteCodeModal } = getActions();\n    try {\n      // 先从localStorage获取受邀信息\n      const cachedInvitation = localStorage.getItem('user-invitation') || undefined;\n      if (cachedInvitation) {\n        try {\n          const invitation = JSON.parse(cachedInvitation);\n          if (invitation && invitation.inviteCode) {\n            return; // 已有受邀信息，无需打开弹窗\n          }\n        } catch (error) {\n          // eslint-disable-next-line no-console\n          console.error('Error parsing invitation:', error);\n        }\n      }\n\n      // 调用API获取受邀状态\n      const invitationData = await getMyInvitation();\n      const invitationInfo = invitationData.data;\n\n      // 存储到localStorage\n      localStorage.setItem('user-invitation', JSON.stringify(invitationInfo));\n\n      // 如果受邀信息为空，打开邀请码提交弹窗\n      if (!invitationInfo) {\n        openInviteCodeModal();\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to check invitation status:', error);\n      // 如果API调用失败，也打开邀请码弹窗\n      openInviteCodeModal();\n    }\n  });\n\n  useEffect(() => {\n    if (!isFirstIn) {\n    // 检测用户受邀状态\n      checkInvitationStatus();\n    }\n  }, [isFirstIn]);\n\n  const handleClose = useLastCallback(async () => {\n    localStorage.setItem('telegpt-guidance', 'true');\n    setIsFirstIn(false);\n\n    // 检测用户受邀状态\n    await checkInvitationStatus();\n  });\n\n  if (!isFirstIn) {\n    return undefined;\n  }\n  return (\n    <Modal\n      isOpen\n      noBackdropClose\n      onClose={handleClose}\n      className=\"guidance-modal\"\n    >\n      <GuidanceWrapper handleClose={handleClose} />\n    </Modal>\n  );\n};\n\nexport default GuidanceModal;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type {\n  ProfileTabType, SharedMediaType,\n} from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport {\n  getMessageDocument,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport {\n  checkIsUrl,\n  documentSummary, photoSummary, videoSummary, webPageSummary,\n} from '../utils/ai-analyse-message';\n\nimport useCacheBuster from '../../../hooks/useCacheBuster';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useTransitionFixes from '../../right/hooks/useTransitionFixes';\n\nimport Document from '../../common/Document';\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\n\nimport './room-attachments-modal.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chatId: string;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  isSavedDialog?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n];\n\nconst RoomAttachmentsModal: FC<OwnProps & StateProps> = ({\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  isChatProtected,\n  nextProfileTab,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    searchSharedMediaMessages,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    arr.push(...TABS);\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [lang]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n\n  // 简化版的viewport管理，只处理media、documents、links\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  // 直接使用foundIds作为viewportIds\n  const viewportIds = foundIds;\n  const getMore = useLastCallback(() => {\n    if (searchSharedMediaMessages) {\n      searchSharedMediaMessages();\n    }\n  });\n  const isFirstTab = resultType === 'media';\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    const message = messagesById?.[messageId];\n    if (message) {\n      const {\n        photo, document, webPage, text, video,\n      } = message.content;\n      const isUrl = checkIsUrl(text?.text);\n      if (photo) {\n        photoSummary(message);\n      } else if (webPage || isUrl) {\n        webPageSummary(message);\n      } else if (document) {\n        documentSummary(message);\n      } else if (video) {\n        videoSummary(message);\n      }\n      onClose();\n    }\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  function renderContent() {\n    if (!viewportIds || !messagesById) {\n      const noSpinner = isFirstTab;\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n\n              onClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              message={messagesById[id]}\n              observeIntersection={observeIntersectionForMedia}\n              canAutoLoad\n              autoLoadFileMaxSizeMb={SHARED_MEDIA_SLICE}\n\n              onSelect={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              onlyWebPage\n              observeIntersection={observeIntersectionForMedia}\n\n              onMessageClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  // 弹窗未打开时不渲染组件内容，避免执行内部逻辑\n  if (!isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"room-attachments-modal\"\n      title=\"Select a file\"\n      hasCloseButton\n    >\n      <div\n        ref={containerRef}\n        className=\"profile-container\"\n      >\n        <div className=\"shared-media\">\n          <div\n            className={buildClassName(\n              'profile-content-wrapper',\n              'no-selection',\n            )}\n          >\n            <div className=\"shared-media-wrapper\">\n              <div className=\"shared-media-header\">\n                {tabs.length > 1 && (\n                  <TabList\n                    tabs={tabs}\n                    activeTab={activeKey}\n                    onSwitchTab={handleSwitchTab}\n                  />\n                )}\n\n              </div>\n              <Transition\n                ref={transitionRef}\n                name=\"slide\"\n                activeKey={activeKey}\n                renderCount={tabs.length}\n                className=\"shared-media-transition\"\n                onStart={applyTransitionFix}\n                onStop={handleTransitionStop}\n              >\n                <InfiniteScroll\n                  className=\"shared-media-list\"\n                  items={viewportIds}\n                  onLoadMore={getMore}\n                  cacheBuster={cacheBuster}\n                  noScrollRestore={activeTab !== activeKey}\n                  noFastList\n                >\n                  {renderContent()}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = selectChat(global, chatId!);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messagesById = selectChatMessages(global, chatId!);\n    const { nextProfileTab } = selectTabState(global);\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    return {\n      chatId: chatId!,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      chatsById: global.chats.byId,\n      usersById: global.users.byId,\n      userStatusesById: global.users.statusesById,\n      isRightColumnShown,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab,\n    };\n  },\n)(RoomAttachmentsModal));\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\n\nimport AiChatFoldersBg from '../../../assets/chat_ai_folder.png';\nimport AiChatFoldersDarkBg from '../../../assets/chat_ai_folder_dark.png';\nimport SerenaPath from '../assets/serena.png';\n\ntype StateProps = {\n  theme: ThemeKey;\n  subscriptionInfo: GlobalState['subscriptionInfo'];\n};\ninterface OwnProps {\n  subscriptionType: string;\n}\nconst UpgradeTip = (props: StateProps & OwnProps) => {\n  const { theme, subscriptionType } = props;\n  const { openPayPackageModal } = getActions();\n  return (\n    <div\n      className=\"p-[12px] flex flex-row items-center relative gap-3\"\n      style={`background-image: url(${\n        theme === 'dark' ? AiChatFoldersDarkBg : AiChatFoldersBg\n      }); background-size: 100% 100%;`}\n    >\n      <img src={SerenaPath} alt=\"\" className=\"w-[24px] h-[24px]\" />\n      {subscriptionType && (\n        <span className=\"text-[var(--color-aichatfolders-tag-text)] text-[12px]\">\n          {subscriptionType === 'free' ? 'Unlock more power with TelyAI' : 'Go limitless with Pro.'}\n        </span>\n      )}\n      <div\n        className=\"bg-[var(--color-background)] h-[24px] px-[8px] text-[12px] font-medium text-[var(--color-text)] ml-auto rounded-[12px] leading-[24px] cursor-pointer\"\n        onClick={() => openPayPackageModal()}\n      >\n        Upgrade\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global) => {\n    const {\n      subscriptionInfo,\n    } = global;\n    return {\n      theme: selectTheme(global),\n      subscriptionInfo,\n    };\n  })(UpgradeTip),\n);\n","/* eslint-disable @stylistic/max-statements-per-line */\nimport type { FC } from '@teact';\nimport React from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport UpgradeTip from '../../chatAssistant/component/upgrade-tip.tsx';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n  subscriptionType?: string;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n  subscriptionType,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n    } else {\n      setAiChatFoldersStep(AIChatFolderStep.classify);\n    }\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n      if (res === undefined || (res === true && aiChatFolders)) {\n        openRenderAiChatFoldersTip();\n      } else {\n        closeRenderAiChatFoldersTip();\n      }\n    });\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(async (\n    { loading, isShowTip }: { loading: boolean; isShowTip?: boolean },\n  ) => {\n    setAiChatFoldersLoading(loading);\n    const tipShowRes = await ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW);\n    if ((aiChatFolders || tipShowRes === undefined) && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs[activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs[activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs[activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs[activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs[activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs[activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n      {subscriptionType && (subscriptionType === 'free' || subscriptionType === 'basic') && (\n        <UpgradeTip subscriptionType={subscriptionType} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n      subscriptionInfo,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n    const { animationLevel } = selectSharedSettings(global);\n    const subscriptionType = subscriptionInfo?.subscriptionType || 'free';\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n      subscriptionType,\n    };\n  },\n)(ChatFolders));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport './UpgradeButton.scss';\nconst UpgradeButton = () => {\n  const handleUpgrade = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    getActions().openPayPackageModal();\n  };\n  return (\n    <div className=\"upgrade-button\" onClick={handleUpgrade}>\n      Upgrade\n    </div>\n  );\n};\n\nexport default memo(UpgradeButton);\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport UpgradeButton from '../../chatAssistant/component/upgrade/UpgradeButton';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n                <UpgradeButton />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import React from '@teact';\nimport { Modal } from 'antd';\nimport { memo, useMemo, useCallback, useState, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal, getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { updateFolderManager, forceResortFolder } from '../../../util/folderManager';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFoldersFromUser, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport InviteGiftIcon from '../../chatAssistant/assets/invite/invite-gift.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from '../../chatAssistant/store';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\nimport Icon from '../../common/icons/Icon';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n  enableChatSorting?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings' | 'subscriptionInfo'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  enableChatSorting,\n  subscriptionInfo,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n    openCreditsModal,\n    openInviteFriendsModal,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleCreditsClick = useLastCallback(() => {\n    openCreditsModal();\n  });\n\n  const handleInviteFriendsClick = useLastCallback(() => {\n    openInviteFriendsModal();\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  const handleSwitchChatSorting = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const isEnabled = !enableChatSorting;\n    console.log('切换聊天排序开关:', isEnabled);\n    setSharedSettingOption({ enableChatSorting: isEnabled });\n    // 立即强制重新排序主文件夹\n    setTimeout(() => {\n      console.log('强制重新排序主文件夹');\n      forceResortFolder(0); // 0 是主文件夹的 ID\n    }, 0);\n  });\n\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFoldersFromUser();\n          hideTip(AIChatFolderStep.classify);\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => { },\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      eventEmitter.emit(Actions.UpdateAIChatFoldersApplying, {\n        loading: false,\n      });\n      ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading, isApply }: { loading: boolean; isApply: boolean }) => {\n    if (isApply) {\n      setAiChatFoldersLoading(loading);\n    } else {\n      const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n      if (isNext) {\n        setAiChatFoldersLoading(false);\n      } else {\n        setAiChatFoldersLoading(loading);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        onClick={handleCreditsClick}\n      >\n        <div className='pl-[1.25rem] pr-[0.75rem] w-full flex items-center justify-between'>\n          <span>{oldLang('Credits')}</span>\n          {subscriptionInfo?.creditBalance && (\n            <>\n              <div className='flex items-center'>\n                <span className='text-[13px] font-semibold text-[#037EE5]'>{Math.max(0, Math.round(subscriptionInfo?.creditBalance))}</span>\n                <Icon name='arrow-right' className='mr-0' />\n              </div>\n            </>\n          )}\n        </div>\n      </MenuItem>\n      <MenuSeparator />\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('Quick Replies')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={InviteGiftIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={handleInviteFriendsClick}\n      >\n        {oldLang('Invite Friends')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"sort\"\n        onClick={handleSwitchChatSorting}\n      >\n        <span className=\"menu-item-name\">{oldLang('Chat Sorting')}</span>\n        <Switcher\n          label=\"\"\n          checked={enableChatSorting === true}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings, subscriptionInfo\n    } = global;\n    const { animationLevel, aiChatFolders, enableChatSorting } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n      enableChatSorting,\n      subscriptionInfo\n    };\n  },\n)(LeftSideMenuItems));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\nimport { UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport { getSubscriptionInfo } from '../../chatAssistant/utils/telegpt-api';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent: GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n    updateSubscriptionInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      const handleTrigger = () => {\n        onTrigger();\n        getSubscriptionInfo().then((res) => {\n          if (res.code === 0) {\n            updateSubscriptionInfo({\n              subscriptionType: res.data.subscriptionType,\n              creditBalance: res.data.creditBalance,\n              createdAt: res.data.createdAt,\n              subscriptionExpiresAt: res.data.subscriptionExpiresAt,\n              isExpirated: res.data.isExpirated,\n            });\n          }\n        });\n      };\n      return (\n        <Button\n          round\n          ripple={hasMenu && !isMobile}\n          size=\"smaller\"\n          color=\"translucent\"\n          className={isOpen ? 'active' : ''}\n\n          onClick={hasMenu ? handleTrigger : () => onReset()}\n          ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n        >\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        </Button>\n      )\n    };\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          // footer={`${APP_NAME} ${versionString}`}\n          footer={`TelyAI ${version || ''}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n            onEnter={handleSearchEnter}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { fireBaseAnalytics, UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\nimport { compareVersion } from '../../chatAssistant/utils/util';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\n// import useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  // const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n  const [shouldRenderUpdateButton, setShouldRenderUpdateButton] = useState(false);\n  const [webFireBase, setWebFireBase] = useState<{\n    force_update_required: boolean;\n    force_update_current_version: string;\n    force_update_store_url: string;\n  }>();\n\n  const handleFireBaseUpdate = (payload: any) => {\n    try {\n      const { webFireBase } = payload;\n\n      const { force_update_current_version } = webFireBase;\n      const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n      const compareRes = compareVersion(version, force_update_current_version);\n      if (compareRes === -1) {\n        setShouldRenderUpdateButton(true);\n        setWebFireBase(webFireBase);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n    eventEmitter.on(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    return () => {\n      eventEmitter.off(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    };\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  // const {\n  //   shouldRender: shouldRenderUpdateButton,\n  //   transitionClassNames: updateButtonClassNames,\n  // } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AIKonwledge });\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AITranslate });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n    fireBaseAnalytics.deferUpdate(webFireBase?.force_update_current_version!);\n    // window.location.reload();\n    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n    if (webFireBase?.force_update_store_url!) {\n      window.location.href = webFireBase?.force_update_store_url;\n    } else {\n      window.location.reload();\n    }\n\n    // if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n    //   window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    // } else if (isElectronUpdateAvailable) {\n    //   window.electron?.installUpdate();\n    // } else {\n    //   window.location.reload();\n    // }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className=\"btn-update\"\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegpt')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef,\n} from '@teact';\nimport React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { debounce } from '../../util/schedulers';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  Settings,\n  Archived,\n  NewGroup,\n\n  NewChannel,\n\n  AIKnowledge,\n\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  const debouncedSetGlobalSearchQuery = useMemo(() => debounce((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, 200, false, true), [setGlobalSearchQuery]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      debouncedSetGlobalSearchQuery(query);\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            // isAppUpdateAvailable={isAppUpdateAvailable}\n            // isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import serenaWaiting from './serena-waiting.json';\nimport serenaWorking from './serena-working.json';\n\nconst waitBlob = new Blob([JSON.stringify(serenaWaiting)], { type: 'application/json' });\nconst serenaWaitUrl = URL.createObjectURL(waitBlob);\n\nconst workBlob = new Blob([JSON.stringify(serenaWorking)], { type: 'application/json' });\nconst serenaWorkUrl = URL.createObjectURL(workBlob);\n\nexport {\n  serenaWaitUrl,\n  serenaWorkUrl,\n};\n","import React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { DotLottie } from '@lottiefiles/dotlottie-react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport { getActions, getGlobal } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport RoomStorage from '../room-storage';\n\nimport './room-ai.scss';\n\nimport { serenaWaitUrl, serenaWorkUrl } from '../assets/lottieData/index';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIEntryButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  // eslint-disable-next-line no-null/no-null\n  const [dotLottie, setDotLottie] = useState<DotLottie | null>(null);\n  const [isSummary, setIsSummary] = useState<boolean>(false);\n  const containerRef = useRef<HTMLDivElement>(undefined);\n  const onClick = useCallback((e: React.MouseEvent) => {\n    // 检查是否正在拖拽，如果是则阻止点击\n    const wrapper = e.currentTarget.closest('.room-ai-entry-wrapper');\n    if (wrapper && wrapper.getAttribute('data-dragging') === 'true') {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  }, [chatId, openChatAIWithInfo]);\n  const updateUnreadCount = useCallback((param: { chatId: string; count: number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  }, [chatId]);\n  const updateSummaryState = useCallback((param: { chatId: string; state: boolean }) => {\n    if (param.chatId === chatId) {\n      setIsSummary(param.state);\n    }\n  }, [chatId]);\n  const intervalAnimate = useCallback(() => {\n    if (dotLottie && !isSummary) {\n      dotLottie.play();\n    }\n  }, [dotLottie, isSummary]);\n\n  const handleAutoSummary = useCallback(() => {\n    const global = getGlobal();\n    const { realTimeAssistants } = selectSharedSettings(global);\n    const realTimeAssistantById = realTimeAssistants?.[chatId] ? realTimeAssistants?.[chatId] : false;\n    if (realTimeAssistantById) {\n      RoomStorage.summary(chatId);\n    }\n  }, [chatId]);\n\n  useEffect(() => {\n    const interval = setInterval(intervalAnimate, 10000);\n    return () => clearInterval(interval);\n  }, [chatId, intervalAnimate]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    eventEmitter.on(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    const summaryState = RoomStorage.getRoomAISummaryState(chatId);\n    setUnreadCount(count);\n    setIsSummary(summaryState);\n    handleAutoSummary();\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n      eventEmitter.off(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    };\n  }, [chatId, handleAutoSummary, updateSummaryState, updateUnreadCount]);\n\n  const dotLottieRefCallback = useCallback((dotLottie: DotLottie) => {\n    setDotLottie(dotLottie);\n  }, []);\n\n  const handleMouseEnter = useCallback(() => {\n    if (dotLottie) {\n      dotLottie?.play();\n    }\n  }, [dotLottie]);\n  // 确保当 isSummary 为 true 时动画播放\n  useEffect(() => {\n    if (isSummary && dotLottie) {\n      dotLottie.play();\n    }\n  }, [isSummary, dotLottie]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"room-ai-entry-button\"\n\n    >\n      {isSummary ? (\n        <DotLottieReact\n          key=\"serenaWork\"\n          className=\"w-[62px] h-[62px]\"\n          src={serenaWorkUrl}\n          loop\n          autoplay\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n        />\n      ) : (\n        <DotLottieReact\n          key=\"serenaWait\"\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWaitUrl}\n          loop={false}\n          autoplay={false}\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n          onMouseEnter={handleMouseEnter}\n        />\n      )}\n      {unreadCount > 0 && (\n        <div className=\"room-ai-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIEntryButton;\n","/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\nimport React from '@teact'\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport buildStyle from '../../../util/buildStyle';\nimport RoomAIEntryButton from './room-ai-entry-button';\n\nimport './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string;\n}\n\nconst RoomAIEntryWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  // const containerRef = useRef<HTMLDivElement>();\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 224, // 14rem = 224px (14 * 16)\n  });\n  const dragStartRef = useRef({\n    x: 0,\n    y: 0,\n    startX: 0,\n    startY: 0,\n  });\n  const hasDraggedRef = useRef(false);\n  const isDraggingRef = useRef(false);\n  const positionRef = useRef(position);\n\n  // 同步position到ref\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n\n  // 同步isDragging到ref\n  useEffect(() => {\n    isDraggingRef.current = isDragging;\n  }, [isDragging]);\n\n  // 从localStorage加载位置\n  const loadPosition = useCallback(() => {\n    const savedPosition = localStorage.getItem('room-ai-position');\n    if (savedPosition) {\n      const pos = JSON.parse(savedPosition);\n      setPosition(pos);\n    } else {\n      // 设置默认位置：右侧16px，底部224px\n      const defaultX = -16; // max(1rem, env(safe-area-inset-right)) ≈ 16px\n      setPosition({ x: defaultX, y: 224 });\n    }\n  }, []);\n\n  // 保存位置到localStorage\n  const savePosition = useCallback((pos: { x: number; y: number }) => {\n    localStorage.setItem('room-ai-position', JSON.stringify(pos));\n  }, []);\n\n  const longPressTimerRef = useRef<number | null>(null);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging) return;\n\n    hasDraggedRef.current = true;\n    const deltaX = e.clientX - dragStartRef.current.x;\n    const deltaY = e.clientY - dragStartRef.current.y;\n\n    const newPosition = {\n      x: dragStartRef.current.startX + deltaX,\n      y: dragStartRef.current.startY - deltaY, // 修正Y轴方向：鼠标向下移动时减少Y值\n    };\n\n    // 边界限制\n    const containerWidth = 62;\n    const containerHeight = 62;\n    const minX = -window.innerWidth + containerWidth; // 左边界\n    const maxX = 0; // 右边界\n    const minY = 0; // 距离底部最小距离（贴底）\n    const maxY = window.innerHeight - containerHeight; // 距离底部最大距离（贴顶）\n\n    newPosition.x = Math.max(minX, Math.min(maxX, newPosition.x));\n    newPosition.y = Math.max(minY, Math.min(maxY, newPosition.y));\n\n    setPosition(newPosition);\n  }, [isDragging]);\n\n  const handleMouseUp = useCallback(() => {\n    // 清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n\n    // 只有在真正拖拽时才保存位置\n    if (isDragging) {\n      if (hasDraggedRef.current) {\n        savePosition(positionRef.current);\n      }\n    }\n    setIsDragging(false);\n\n    // 延迟重置拖拽标记，防止立即触发点击事件\n    setTimeout(() => {\n      hasDraggedRef.current = false;\n    }, 100);\n  }, [isDragging, savePosition]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    hasDraggedRef.current = false;\n    dragStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startX: position.x,\n      startY: position.y,\n    };\n\n    // 设置长按定时器，150ms后开始拖拽\n    longPressTimerRef.current = window.setTimeout(() => {\n      setIsDragging(true);\n    }, 150);\n  }, [position]);\n\n  const handleMouseLeave = useCallback(() => {\n    // 鼠标离开时清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    // 如果刚刚完成拖拽，阻止点击事件\n    if (hasDraggedRef.current || isDragging) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, [isDragging]);\n\n  // 添加全局鼠标事件监听\n  useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  useEffect(() => {\n    loadPosition();\n  }, [loadPosition]);\n  const containerRef = injectComponent({\n    component: RoomAIEntryButton,\n    props: {\n      chatId,\n    },\n  });\n\n  return (\n    <div\n      className=\"room-ai-entry-wrapper\"\n      ref={containerRef}\n      data-dragging={isDragging}\n      style={buildStyle(`right: ${-position.x}px; bottom: ${position.y}px; cursor: ${isDragging ? 'grabbing' : 'grab'}; userSelect: none`)}\n      onMouseDown={handleMouseDown}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIEntryWrapper));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","/* eslint-disable no-null/no-null */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue: string) => void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        // autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import type { FC } from 'react';\nimport React from 'react';\nimport { debounce } from 'lodash';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const handleClick = debounce(onClick, 500);\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    'w-[3.5rem] bg-[var(--color-primary)] h-[3.5rem] rounded-full flex items-center justify-center',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <button\n      className={buttonClassName}\n      disabled={disabled}\n      onClick={isShown && !disabled ? handleClick : undefined}\n      tabIndex={-1}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FloatingActionButton;\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './InputText.scss';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  type?: 'text' | 'number';\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  type = 'text',\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        type={type}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","import type { FC } from 'react';\nimport React from 'react';\nimport cx from 'classnames';\n\nimport './Spinner.scss';\n\nconst Spinner: FC<{\n  color?: 'blue' | 'white' | 'black' | 'green' | 'gray' | 'yellow';\n  backgroundColor?: 'light' | 'dark';\n  className?: string;\n}> = ({\n  color = 'blue',\n  backgroundColor,\n  className,\n}) => {\n  return (\n    <div className={cx(\n      'Spinner-GPT', className, color, backgroundColor && 'with-background', backgroundColor && `bg-${backgroundColor}`,\n    )}\n    >\n      <div className=\"Spinner__inner\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  let textareaRef = useRef<HTMLTextAreaElement>(undefined);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, [resizeHeight]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange, resizeHeight]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage, Switch } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { phone } = telegptSettings.telegptSettings;\n  const filterPhone = phone.replace(/^\\+\\d+\\s*/, \"\").replace(/\\s/g, \"\");\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(filterPhone);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:IUrgentTopic = drawerParams || {\n    topic: '',\n    prompt: '',\n    is_call: false,\n    is_open: false,\n  };\n  const [form, setForm] = useState<IUrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev:IUrgentTopic) => {\n      prev.is_call = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.topic = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.prompt = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const number = e.currentTarget.value.trim();\n    setPhoneNumber(number);\n    if (number.trim().length === 0) {\n      setPhoneNumberError(false);\n    }\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.is_call && phoneNumber.length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateUrgentTopic(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n        if (form.is_call && phoneNumber.length > 0) {\n          telegptSettings.setSettingOption({\n            phone: phoneNumber,\n          });\n        }\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n      setIsLoading(false);\n    });\n  }, [form, openDrawer, phoneNumber]);\n\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and descriptions for which you want alerts. When a message contains these keywords, you’ll be notified.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topic}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <div className=\"mb-[24px]\">\n          <TextArea\n            className=\"!mb-[12px]\"\n            label=\"Topic Description\"\n            value={form.prompt}\n            noReplaceNewlines\n            error={descriptionError ? 'Please enter the topic description' : undefined}\n            onChange={handleTopicDescriptionChange}\n          />\n          <div className=\"text-[14px] text-[#767676]\">\n            Please describe the specific content or keywords that should trigger an alert. For example, if ‘Vitalik’ + ‘ETH’ + ‘sell’ appear, please notify me.\n          </div>\n        </div>\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch value={form.is_call} onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        {form.is_call && (\n          <InputText\n            label=\"Phone Number\"\n            type=\"number\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            error={phoneNumberError ? 'Please enter a valid phone number' : undefined}\n          />\n        )}\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport type { CheckboxChangeEvent } from 'antd';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './chat-picker-panel.scss';\n\nconst PickerChatItem = ({ id, isChecked, onChange }:{\n  id: string;\n  isChecked:boolean;\n  onChange:(e:CheckboxChangeEvent) => void;\n}) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const {\n    currentUserId,\n  } = global;\n  const peer:ApiPeer | undefined = selectPeer(global, id);\n  if (!peer) {\n    return undefined;\n  }\n\n  const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n  const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n  const realPeer = 'id' in peer ? peer : undefined;\n  const isUser = realPeer && isApiPeerUser(realPeer);\n  const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n  function getSubtitle() {\n    if (!peer) return undefined;\n    if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n    if (isApiPeerChat(peer)) {\n      return [getGroupStatus(lang, peer)];\n    }\n\n    const userStatus = selectUserStatus(global, peer.id);\n    return getUserStatus(lang, peer, userStatus);\n  }\n\n  function getTitle() {\n    if (customPeer) {\n      return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n    }\n\n    if (isSelf) {\n      return lang('SavedMessages');\n    }\n\n    return title;\n  }\n\n  const subtitle = getSubtitle() || '';\n  const specialTitle = getTitle();\n  return (\n    <Checkbox\n      value={id}\n      className=\"chat-picker-item rounded-[12px]\"\n      checked={isChecked}\n      onChange={onChange}\n    >\n      <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          clickOpenRoom={false}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)] flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group className=\"w-full\" value={selected}>\n          <div className=\"flex flex-col gap-[12px] w-full overflow-hidden\">\n            {ids.map((id) => {\n              const isChecked = selected.includes(id);\n              return (\n                <PickerChatItem\n                  id={id}\n                  isChecked={isChecked}\n                  onChange={(e:CheckboxChangeEvent) => {\n                    const checked = e.target.checked;\n                    setSelected((prev) => {\n                      if (checked) {\n                        return [...prev, id];\n                      } else {\n                        return prev.filter((item) => item !== id);\n                      }\n                    });\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:ISummaryTemplate = drawerParams || {\n    topic: '',\n    prompt: '',\n  };\n  const [form, setForm] = useState(initialValues);\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateSummarizeTemplate(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n  }, [form, openDrawer]);\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topic = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topic = topic;\n      return { ...prev };\n    });\n    if (topic.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">\n        Enter a topic you want AI to track and summarize. Add details so summaries are more accurate and relevant.\n      </p>\n      <InputText\n        label=\"Topic name\"\n        value={form.topic}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport useOldLang from '../hook/useOldLang';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { autoReply } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { getBestKnowledgeMatch } from '../utils/knowledge-match';\n\nimport Avatar from '../component/Avatar';\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(undefined);\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  const handleSmaryReply = async (message: ApiMessage) => {\n    if (message.content.text?.text) {\n      const bestMatch = await getBestKnowledgeMatch(message.content.text.text);\n      if (bestMatch && bestMatch.score > 0.8) {\n        setReplyResponse(bestMatch.answer);\n      } else {\n        autoReply({\n          message: message.content.text?.text,\n          message_id: message.id,\n        }).then((res) => {\n          setReplyResponse(res.data.reply);\n        }).catch(() => {\n          console.log('error');\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const isUser = peer && isApiPeerUser(peer);\n    const chat = selectChat(global, chatId);\n    const title = peer && isUser ? getUserFullName(peer) : getChatTitle(lang, chat!);\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          {isUser ? (\n            <Avatar peer={peer} size={34} />\n          ) : (\n            <ChatAvatar chatId={chatId} size={34} />\n          )}\n\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {title}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by TelyAI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n  {\n    relevantMessages: { chatId: string; messageIds: number[] }[];\n  }) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }: MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle,\n  getGroupStatus,\n  getUserFullName,\n  getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport useOldLang from '../hook/useOldLang';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './rooms-tab.scss';\nimport './selected-chats.scss';\n\ninterface Props {\n  title: string;\n  ignoredIds: string[];\n  onIgnored: (id: string) => void;\n  onUnIgnored: (id: string) => void;\n}\n\nexport const RoomsTab = (props: Props) => {\n  const {\n    title,\n    ignoredIds,\n    onIgnored,\n    onUnIgnored,\n  } = props;\n  const orderedIds = React.useMemo(() => {\n    const ids = getOrderedIds(ALL_FOLDER_ID) || [];\n    return ids.filter((id) => id !== GLOBAL_SUMMARY_CHATID);\n  }, []);\n  const unIgnoreIds = orderedIds.filter((id) => !ignoredIds.includes(id));\n  const [activeTab, setActiveTab] = useState<'summary' | 'ignored'>('summary');\n  const lang = useOldLang();\n  const global = getGlobal();\n\n  const renderRoomItem = (\n    id: string,\n    isIgnored: boolean,\n  ) => {\n    const peer: ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap font-medium\">{specialTitle}</div>\n          <div className=\"text-[var(--color-text-secondary)] text-sm\">{subtitle}</div>\n        </div>\n        {isIgnored ? (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#5493F2] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onUnIgnored(id)}\n          >\n            Stop Ignoring\n          </div>\n        ) : (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#FF5757] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onIgnored(id)}\n          >\n            <Icon name=\"eye-crossed\" />\n            Ignore\n          </div>\n        )}\n\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"summary-rooms-tab mt-[20px]\">\n      <div className=\"tabs-container\">\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'summary'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('summary')}\n        >\n          {title}\n        </button>\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'ignored'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('ignored')}\n        >\n          Ignored Chats\n        </button>\n      </div>\n\n      {activeTab === 'summary' ? (\n        <div>\n          {unIgnoreIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {unIgnoreIds.map((id) => renderRoomItem(id, false))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          {ignoredIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {ignoredIds.map((id) => renderRoomItem(id, true))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { message as showMessage } from 'antd';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { getGlobal } from '../../../global';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport Spinner from '../component/Spinner';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst SummaryItem = ({\n  template, selectedTemp, handleSelect, onDelete,\n}: {\n  template: ISummaryTemplate;\n  selectedTemp:string[];\n  onDelete: (id: string) => void;\n  handleSelect:(id: string) => void;\n}) => {\n  const { openDrawer } = useDrawerStore();\n  const global = getGlobal();\n  const { currentUserId } = global;\n  const handeleDeleteTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(template.id!);\n  };\n  const handleEditTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openDrawer(DrawerKey.CustomizationPrompt, template);\n  };\n  return (\n    <div\n      className={cx('urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]', {\n        '!bg-[var(--color-chat-active)] text-white': selectedTemp.includes(template.id!),\n      })}\n      onClick={() => handleSelect(template.id!)}\n    >\n      <div>{template.topic}</div>\n      {selectedTemp.includes(template.id!) && (\n        <Icon className=\"urgent-topic-item-check\" name=\"check\" />\n      )}\n      {template.user_id === currentUserId && (\n        <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n          <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n          <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AddSummaryTemplate = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAdd = () => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAdd}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst SummarizeTab = () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { curious_info, ignored_summary_chat_ids, curious_id } = telegptSettings.telegptSettings;\n  const ignoredChatIds = getIdsFromEntityTypes(ignored_summary_chat_ids);\n  const [summaryTemplate, setSummaryTemplate] = useState<ISummaryTemplate[]>(curious_info);\n  const [originSelectedTemp, setOriginSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedTemp, setSelectedTemp] = useState<string[]>(curious_id);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(ignoredChatIds);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const actionsVisable = useMemo(() => {\n    return !isEqual(selectedTemp, originSelectedTemp);\n  }, [originSelectedTemp, selectedTemp]);\n\n  const handleTemplateSelect = useCallback((selectedId: string) => {\n    let newSelected: string[] = [];\n    if (selectedTemp.includes(selectedId)) {\n      newSelected = selectedTemp.filter((id) => id !== selectedId);\n    } else {\n      if (selectedTemp.length >= 3) {\n        showMessage.info('You can only select up to three topics.');\n        return;\n      }\n      newSelected = [...selectedTemp, selectedId];\n    }\n    setSelectedTemp(newSelected);\n  }, [selectedTemp]);\n\n  const handleSave = useCallback(() => {\n    setIsLoading(true);\n    telegptSettings.setSettingOption({\n      curious_id: selectedTemp,\n    }, () => {\n      setIsLoading(false);\n      setOriginSelectedTemp(selectedTemp);\n    });\n  }, [selectedTemp]);\n\n  const handleDelete = useCallback((id: string) => {\n    if (selectedTemp.includes(id)) {\n      const newSelectedTemp = selectedTemp.filter((item) => item !== id);\n      setSelectedTemp(newSelectedTemp);\n      setOriginSelectedTemp(newSelectedTemp);\n      telegptSettings.setSettingOption({\n        curious_id: newSelectedTemp,\n      });\n    }\n    // TODO: delete summary template\n    telegptSettings.deleteSummarizeTemplate(id).then((res:any) => {\n      if (res.code === 0) {\n        const newSummaryTemplate = summaryTemplate.filter((item) => item.id !== id);\n        setSummaryTemplate(newSummaryTemplate);\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  }, [selectedTemp, summaryTemplate]);\n\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...new Set([...ignoredIds, id])];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text) mb-[24px]\">Topic Preferences</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {summaryTemplate.map((item) => {\n            return (\n              <SummaryItem template={item} onDelete={handleDelete} selectedTemp={selectedTemp} handleSelect={handleTemplateSelect} />\n            );\n          })}\n          {summaryTemplate.length < 10 && (\n            <AddSummaryTemplate />\n          )}\n        </div>\n        <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Summary\" />\n      </div>\n      <FloatingActionButton\n        isShown={actionsVisable}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n\n      </FloatingActionButton>\n    </div>\n  );\n};\nexport default SummarizeTab;\n","import React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: IUrgentTopic; onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id!);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topic}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    const { subscriptionInfo } = getGlobal();\n    if ((subscriptionInfo.subscriptionType === 'plus' || subscriptionInfo.subscriptionType === 'pro') && !subscriptionInfo.isExpirated) {\n      openDrawer(DrawerKey.AddTopicPanel);\n    } else {\n      getActions().openPayPackageModal();\n    }\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const { urgent_info, ignored_urgent_chat_ids } = telegptSettings.telegptSettings;\n  const selectUrgentChatIds = getIdsFromEntityTypes(ignored_urgent_chat_ids);\n  const [topics, setTopics] = useState<IUrgentTopic[]>(urgent_info);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(selectUrgentChatIds);\n\n  const handeleDeleteTopic = (id: string) => {\n    telegptSettings.deleteUrgentTopic(id).then((res: any) => {\n      if (res.code === 0) {\n        setTopics(topics.filter((t) => t.id !== id));\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  };\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...ignoredIds, id];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold mb-[24px]\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          {topics.length < 10 && <AddTopic />}\n        </div>\n      </div>\n      <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Urgent\" />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Chat Summary',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1 overflow-y-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[2.75rem] h-[2.75rem] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Add Topics');\n        break;\n      case DrawerKey.ChatPicker:\n        setTitle('Select chat');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem] w-[var(--right-column-width)]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<Icon name=\"arrow-left\" className=\"text-[26px]\" />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<Icon name=\"close\" className=\"text-[26px]\" />} onClick={onClose} />\n      )}\n      <div className=\"text-[1.25rem] font-[var(--font-weight-medium)] pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden w-[var(--right-column-width)]\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","import React, { memo } from 'react';\nimport { getActions } from '../../../global';\n\nimport './InviteButton.scss';\n\nimport InviteGif from '../assets/invite/invite-gift.png';\nconst InviteButton = () => {\n  const handleInviteFriendsClick = () => {\n    getActions().openInviteFriendsModal();\n  };\n  return (\n    <div className=\"invite-button\" onClick={handleInviteFriendsClick}>\n      <img className=\"w-[20px] h-[20px]\" src={InviteGif} alt=\"\" />\n      <span className=\"text-[12px] font-medium\">Invite</span>\n    </div>\n  );\n};\n\nexport default memo(InviteButton);\n","import React, { useCallback } from 'react';\n\nimport { telegptSettings } from '../api/user-settings';\nimport { SettingIcon } from '../icons';\n\nimport InviteButton from '../component/InviteButton';\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n    telegptSettings.getGptSettings();\n  }, [openDrawer]);\n\n  return (\n    <div className=\"flex items-center gap-[16px]\">\n      <InviteButton />\n      <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n        <span className=\"text-[var(--color-text-secondary)]\">\n          <SettingIcon />\n        </span>\n        <span className=\"text-[16px] font-semibold\">Personalize</span>\n      </div>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","\n/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { orderBy } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport { createUpgradeTipMessage } from '../room-ai/room-ai-utils';\nimport { ChataiStores } from '../store';\nimport {\n  parseMessage2SummaryStoreMessage,\n  parseSummaryStoreMessage2Message,\n  type SummaryStoreMessage,\n} from '../store/summary-store';\nimport { getApihHeaders } from '../utils/telegpt-fetch';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\nimport { useDrawerStore } from './DrawerContext';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = () => {\n  const { isOpen } = useDrawerStore();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [summaryMessages, setSummaryMessages] = useState<Message[]>([]);\n  const [viewMessages, setViewMessages] = useState<Message[]>([]);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({\n    lastTime: undefined,\n    hasMore: true,\n  });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat`,\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n    onError: (error) => {\n      try {\n        const data = JSON.parse(error.message);\n        if (data.code === 102 || data.code === 103) {\n          const upgradeTip = createUpgradeTipMessage();\n          setMessages((prev) => [...prev, upgradeTip]);\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('error.message is not JSON:', error.message);\n      }\n    },\n  });\n\n  useEffect(() => {\n    const sorted = orderBy(\n      [...messages, ...summaryMessages],\n      [(item: Message) => new Date(item.createdAt as Date).getTime()],\n      ['asc'],\n    );\n    setViewMessages(sorted);\n  }, [messages, summaryMessages]);\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, viewMessages, scrollToBottom]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setSummaryMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n  }, [setSummaryMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setSummaryMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 30)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setSummaryMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setSummaryMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setViewMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  // useEffect(() => {\n  //   const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n  //   // 再次聚焦间隔6小时触发一次总结\n  //   if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 60 * 6) {\n  //     globalSummaryTask.initSummaryChats(false);\n  //   }\n  //   RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  // }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    scrollLocked();\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      // setSummaryMessages((prev) => prev.filter((message) => message.id !== messageId));\n      setViewMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [scrollLocked]);\n\n  const handleInputSubmit = useCallback((value: string) => {\n    scrollToBottom();\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    }, {\n      headers: getApihHeaders(),\n    });\n  }, [append, scrollToBottom]);\n\n  useEffect(() => {\n    if (status === 'ready' || status === 'error') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n  const className = buildClassName(\n    styles.globaSummaryBg,\n    'flex flex-col w-full h-full',\n    'global-summary-inner',\n    isOpen && 'right-panel-open',\n  );\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={className}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"TelyAI\" />\n            <span className=\"text-[15px] font-semibold\">TelyAI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={viewMessages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n};\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mykZ1IJ0\"};","import React from '@teact';\nimport { injectComponent } from '../injectComponent';\nimport GlobalSummary from './global-summary';\nconst GlobalSummaryWrapper = () => {\n  const containerRef = injectComponent({\n    component: GlobalSummary,\n  });\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default GlobalSummaryWrapper;\n\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { UserPortraitInfo } from '../../chatAssistant/store/user-portrait-store';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './UserPortrait.scss';\nimport { checkCredisBalance } from '../../../util/paymentErrorHandler';\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  userId: string;\n  onClose: () => void;\n};\n\nexport const PortraitTagColors = [\n  '#E5D9FF',\n  '#CCD6FF',\n  '#B6FFCE',\n  '#FFD9D9',\n  '#FFD9FF',\n];\n\nconst UserPortraitBaseCard: FC<StateProps & OwnProps> = ({ userId, user, onClose }) => {\n  const [portraitInfo, setPortraitInfo] = useState<UserPortraitInfo | undefined>(undefined);\n\n  const getPortraitInfo = useLastCallback(async () => {\n    const info = await ChataiStores.userPortrait?.getUserPortrait(\n      userId,\n    );\n    setPortraitInfo(info);\n  });\n\n  useEffect(() => {\n    getPortraitInfo();\n  }, [userId]);\n\n  const handlePortraitClick = useLastCallback(() => {\n    if (!checkCredisBalance()) {\n      getActions().openPayPackageModal();\n      return;\n    }\n    const subscriptionInfo = getGlobal().subscriptionInfo;\n    if (subscriptionInfo.subscriptionType === 'plus') {\n      getActions().openUserPortrait({ userId });\n    } else {\n      getActions().openPayPackageModal();\n    }\n\n    onClose();\n  });\n\n  function renderBasicInfo() {\n    return (\n      <div className=\"border-b-[1px] border-[#F3F3F3] px-[12px] pb-[12px]\">\n        <div className=\"text-[20px] font-[700] mb-2\">Portrait</div>\n        <div className=\"text-[16px] font-[700] mb-2\">Basic Description</div>\n        <div className=\"flex flex-col gap-1\">\n          {user?.usernames?.[0]?.username && (\n            <div>\n              <span className=\"font-[600]\">Username: </span>\n              {user?.usernames?.[0]?.username}\n            </div>\n          )}\n          <div>\n            <span className=\"font-[600]\">Alias/Nickname: </span>\n            {user?.firstName} {user?.lastName}\n          </div>\n          {portraitInfo && (\n            <>\n              {portraitInfo.langs && (\n                <div>\n                  <span className=\"font-[600]\">Language: </span>\n                  {`${portraitInfo.langs?.[0]\n                      ? `${portraitInfo.langs?.[0]}(Primary)`\n                      : ''\n                    } ${portraitInfo.langs?.[1]\n                      ? `, ${portraitInfo.langs?.[1]}(Secondary)`\n                      : ''\n                    }`}\n                </div>\n              )}\n              {portraitInfo?.tags && portraitInfo?.tags?.length > 0 && (\n                <>\n                  <div>\n                    <span className=\"font-[600]\">Tags: </span>\n                  </div>\n                  <div className=\"flex flex-row flex-wrap items-center gap-2\">\n                    {portraitInfo?.tags?.map((tag, index) => (\n                      <div\n                        className=\"flex items-center justify-center px-2 rounded-[4px] h-[28px] text-[12px] font-[500] text-black\"\n                        style={`background: ${PortraitTagColors[index]}`}\n                      >\n                        {tag}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-[24rem]\">\n      {renderBasicInfo()}\n      <div\n        className=\"h-[42px] flex items-center justify-center text-[var(--color-primary)] text-[14px] font-semibold pt-[0.5rem] cursor-pointer\"\n        onClick={handlePortraitClick}\n      >\n        View details\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal((global, { userId }): StateProps => {\n    const user = userId\n      ? selectUser(global, userId)\n      : undefined;\n\n    return {\n      user,\n    };\n  })(UserPortraitBaseCard),\n);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport UserPortraitBasicCard from './UserPortraitBasicCard';\n\ntype OwnProps = {\n  menuRef?: React.RefObject<HTMLDivElement|undefined>;\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n};\nexport const UserPortraitBasicCardMenu:FC< OwnProps & MenuPositionOptions> = ({\n  menuRef,\n  isOpen,\n  userId,\n  onClose,\n  ...menuPositionOptions\n}) => {\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose);\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClose={onClose}\n      onCloseAnimationEnd={onClose}\n      className=\"PortraitMenu\"\n      withPortal\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      noCompact\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...menuPositionOptions}\n    >\n      {isOpen && <UserPortraitBasicCard userId={userId} onClose={onClose} />}\n    </Menu>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  useCallback,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport { UserPortraitBasicCardMenu } from '../../right/userPortrait/UserPortraitBasicCardMenu';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps = {\n  avatarPeer?: ApiPeer;\n  forwardInfo?: {\n    hiddenUserName?: string;\n  };\n  handleAvatarClick: () => void;\n};\n\nconst SenderGroupAvatar: FC<OwnProps> = ({\n  avatarPeer,\n  forwardInfo,\n  handleAvatarClick,\n}) => {\n  const { openUserPortrait } = getActions();\n  const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n  const triggerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getMenuElement = useCallback(() => menuRef.current!, []);\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  return (\n    <div className=\"inline-block\" ref={ref}>\n      <ResponsiveHoverButton\n        round\n        className={buildClassName('!p-0 !w-auto !h-auto')}\n        color=\"translucent\"\n        onActivate={handleActivateSymbolMenu}\n      >\n        <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n        <Avatar\n          size=\"small\"\n          className={styles.senderAvatar}\n          peer={avatarPeer}\n          text={hiddenName}\n          onClick={avatarPeer ? handleAvatarClick : undefined}\n        />\n      </ResponsiveHoverButton>\n      <UserPortraitBasicCardMenu\n        isOpen={isSymbolMenuOpen}\n        onClose={closeSymbolMenu}\n        userId={avatarPeer?.id!}\n        anchor={contextMenuAnchor}\n        menuRef={menuRef}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n      />\n    </div>\n  )\n};\n\nexport default SenderGroupAvatar;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\nimport SenderGroupAvatar from './SenderGroupAvatar';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {/* {renderAvatar()} */}\n           <SenderGroupAvatar handleAvatarClick={handleAvatarClick} avatarPeer={avatarPeer} forwardInfo={forwardInfo} />\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '@teact';\nimport React from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom.ts';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  autoTranslate?: boolean;\n  autoTranslateLanguage?: string;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  ContactGreeting,\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  autoTranslate,\n  autoTranslateLanguage,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  // canTranslate,\n  // translationLanguage,\n  // shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestMessageTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  // useEffect(() => {\n  //   if (!shouldAutoTranslate || !canTranslate) return;\n  //   requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  // }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useEffect(() => {\n    if (!autoTranslate) return;\n    messageIds?.forEach((messageId) => {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: autoTranslateLanguage });\n    });\n  }, [autoTranslate, autoTranslateLanguage, chatId, messageIds]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const { autoTranslate, autoTranslateLanguage } = global.settings.byKey;\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      autoTranslate,\n      autoTranslateLanguage,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React from '@teact';\nimport { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic, ApiMessage } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_SAFARI,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIEntryWrapper from '../chatAssistant/room-ai/room-ai-entry-wrapper';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting, {\n  ASK_MEETING_EMAIL, ASK_MEETING_TIME, ASK_MEETING_TIMEZONE, MEETING_INVITATION_TIP,\n} from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/global-summary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\nimport RoomStorage from '../chatAssistant/room-storage/index.tsx';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Track chat stay duration for analytics\n  useEffect(() => {\n    let enterTime: number | undefined;\n    \n    if (chatId) {\n      // Record enter time when entering a chat\n      enterTime = Date.now();\n    }\n\n    return () => {\n      // Record stay duration when leaving a chat\n      if (chatId && enterTime) {\n        const stayDuration = Date.now() - enterTime;\n        RoomStorage.addStayDuration(chatId, stayDuration);\n      }\n    };\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }: { message: ApiMessage }) => {\n    const messageText = message.content.text?.text;\n    if (\n      messageText === ASK_MEETING_TIMEZONE\n      || messageText === ASK_MEETING_TIME\n      || messageText === ASK_MEETING_EMAIL\n      || messageText === MEETING_INVITATION_TIP\n    ) {\n      return;\n    }\n    if (ScheduleMeeting.get(chatId!)) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage({\n      messageId: message.id,\n      chatId: message.chatId,\n      senderId: message.senderId,\n      messageText,\n    });\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(message.chatId, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === message.chatId) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: message.chatId });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {\n        Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n          <>\n            <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n              <MiddleHeaderPanes\n                key={renderingChatId}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <MiddleHeader\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                isComments={isComments}\n                isMobile={isMobile}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <Transition\n                name={resolveTransitionName(\n                  'slide',\n                  animationLevel,\n                  shouldSkipHistoryAnimations || !withInterfaceAnimations,\n                )}\n                activeKey={currentTransitionKey}\n                shouldCleanup\n                cleanupExceptionKey={cleanupExceptionKey}\n                isBlockingAnimation\n                onStop={handleSlideTransitionStop}\n              >\n                <MessageList\n                  key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                  chatId={renderingChatId!}\n                  threadId={renderingThreadId!}\n                  type={renderingMessageListType!}\n                  isComments={isComments}\n                  canPost={renderingCanPost!}\n                  onScrollDownToggle={setIsScrollDownShown}\n                  onNotchToggle={setIsNotchShown}\n                  isReady={isReady}\n                  isContactRequirePremium={isContactRequirePremium}\n                  paidMessagesStars={paidMessagesStars}\n                  withBottomShift={withMessageListBottomShift}\n                  withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                  onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n                />\n                <div className={footerClassName}>\n                  {renderingCanPost && (\n                    <Composer\n                      type=\"messageList\"\n                      chatId={renderingChatId!}\n                      threadId={renderingThreadId!}\n                      messageListType={renderingMessageListType!}\n                      dropAreaState={dropAreaState}\n                      onDropHide={handleHideDropArea}\n                      isReady={isReady}\n                      isMobile={isMobile}\n                      editableInputId={EDITABLE_INPUT_ID}\n                      editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                      inputId=\"message-input-text\"\n                    />\n                  )}\n                  {isPinnedMessageList && canUnpin && (\n                    <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        color=\"secondary\"\n                        className=\"composer-button unpin-all-button\"\n                        onClick={handleOpenUnpinModal}\n                      >\n                        <Icon name=\"unpin\" />\n                        <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                      </Button >\n                    </div >\n                  )\n                  }\n                  {\n                    canShowOpenChatButton && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"composer-button open-chat-button\"\n                          onClick={handleOpenChatFromSaved}\n                        >\n                          <span>{oldLang('SavedOpenChat')}</span>\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {composerRestrictionMessage}\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  }\n                  {\n                    (\n                      isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                    ) && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingShouldSendJoinRequest && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang('ChannelJoinRequest')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {oldLang('BotStart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {oldLang('BotRestart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanUnblock && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleUnblock}\n                        >\n                          {oldLang('Unblock')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  <MessageSelectToolbar\n                    messageListType={renderingMessageListType}\n                    isActive={isSelectModeActive}\n                    canPost={renderingCanPost}\n                  />\n                  <SeenByModal isOpen={isSeenByModalOpen} />\n                  <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                  <ReactorListModal isOpen={isReactorListModalOpen} />\n                  {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n                </div >\n              </Transition >\n              <RoomAIEntryWrapper chatId={chatId} />\n              <FloatingActionButtons\n                withScrollDown={renderingIsScrollDownShown}\n                canPost={renderingCanPost}\n                withExtraShift={withExtraShift}\n              />\n            </div >\n            <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n          </>\n        )\n      }\n      {\n        chatId && (\n          <UnpinAllMessagesModal\n            isOpen={isUnpinModalOpen}\n            chatId={chatId}\n            pinnedMessagesCount={pinnedMessagesCount}\n            onClose={closeUnpinModal}\n            onUnpin={handleUnpinAllMessages}\n          />\n        )\n      }\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div >\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport CreditsModal from './credits/CreditsModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteCodeModal from './inviteCode/InviteCodeModal.async';\nimport InviteFriendsModal from './inviteFriends/InviteFriendsModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport PayPackageModal from './membership/PayPackageModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'creditsModal' |\n  'inviteCodeModal' |\n  'inviteFriendsModal' |\n  'payPackageModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  creditsModal: CreditsModal,\n  inviteCodeModal: InviteCodeModal,\n  inviteFriendsModal: InviteFriendsModal,\n  payPackageModal: PayPackageModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CreditsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CreditsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CreditsModal = useModuleLoader(Bundles.Extra, 'CreditsModal', !modal?.isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreditsModal ? <CreditsModal {...props} /> : undefined;\n};\n\nexport default CreditsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteCodeModalAsync: FC<OwnProps> = (props) => {\n  const InviteCodeModal = useModuleLoader(Bundles.Extra, 'InviteCodeModal');\n\n  return InviteCodeModal ? <InviteCodeModal {...props} /> : undefined;\n};\n\nexport default InviteCodeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteFriendsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteFriendsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteFriendsModal = useModuleLoader(Bundles.Extra, 'InviteFriendsModal', !modal?.isOpen);\n\n  return InviteFriendsModal ? <InviteFriendsModal {...props} /> : undefined;\n};\n\nexport default InviteFriendsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PayPackageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PayPackageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PayPackageModal = useModuleLoader(Bundles.Extra, 'PayPackageModal', !modal?.isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PayPackageModal ? <PayPackageModal {...props} /> : undefined;\n};\n\nexport default PayPackageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { Popover } from 'antd';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { checkCredisBalance } from '../../../util/paymentErrorHandler';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport {\n  createNewFeatureReminderMessage, generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }: OwnProps) => {\n  const { scrollToBottom } = useScrollToBottom();\n\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n    scrollToBottom();\n  };\n\n  const handleSummarize = () => {\n    if (!checkCredisBalance()) {\n      getActions().openPayPackageModal();\n      return;\n    }\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleMediaSummarize = () => {\n    if (!checkCredisBalance()) {\n      getActions().openPayPackageModal();\n      return;\n    }\n    const { openRoomAttachmentsModal } = getActions();\n    openRoomAttachmentsModal();\n  };\n\n  const handleActionItems = () => {\n    if (!checkCredisBalance()) {\n      getActions().openPayPackageModal();\n      return;\n    }\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleNewFeature = () => {\n    const newFeatureMessage: Message = createNewFeatureReminderMessage();\n    insertMessage(newFeatureMessage);\n  };\n\n  const handleActions = (payload: any) => {\n    const { action } = payload;\n    if (payload.chatId === chatId) {\n      switch (action) {\n        case 'summary':\n          handleSummarize();\n          break;\n        case 'schedule-meet':\n          handleScheduleMeeting();\n          break;\n        case 'todo':\n          handleActionItems();\n          break;\n        case 'new-feature':\n          handleNewFeature();\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    eventEmitter.on(Actions.RoomAIActions, handleActions);\n    return () => {\n      eventEmitter.off(Actions.RoomAIActions, handleActions);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n\n  const popoverContent = (\n    <div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleSummarize}\n      >\n        🧠 Chat Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleMediaSummarize}\n      >\n        📁 Media/File Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleScheduleMeeting}\n      >\n        📅 Schedule meeting\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleActionItems}\n      >\n        ✅ Action Items\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summary\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Meeting\n      </div>\n      <Popover\n        content={popoverContent}\n        trigger=\"click\"\n        placement=\"bottomLeft\"\n        overlayClassName=\"room-actions-popover\"\n      >\n        <div className={actionItemClassName}>\n          🚀 All\n        </div>\n      </Popover>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Ask me about your chats...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-row items-center justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable @typescript-eslint/require-await */\n/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { getApihHeaders } from '../utils/telegpt-fetch';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport {\n  createGoogleLoginMessage, createGoogleMeetingMessage,\n  createRoomDescriptionMessage, createUpgradeTipMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const { userId, userName } = getCurrentUserInfo();\n  const [pageInfo, setPageInfo] = useState<{\n    lastTime: number | undefined;\n    hasMore: boolean;\n  }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: chatId,\n    sendExtraMessageFields: true,\n    onError: (error) => {\n      try {\n        const data = JSON.parse(error.message);\n        if (data.code === 102 || data.code === 103) {\n          const upgradeTip = createUpgradeTipMessage();\n          setMessages((prev) => [...prev, upgradeTip]);\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('error.message is not JSON:', error.message);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message: Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify({\n            chatId,\n            eventData: response,\n          }),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n    }\n  }, [chatId, insertMessage, messages, setMessages]);\n\n  const updateToken = useCallback((payload: { message: Message; token: string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if ((status === 'ready' || status === 'error') && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  const handleInputSubmit = async (value: string) => {\n    scrollToBottom();\n    const newMessage: Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    // setMessages((messages) => {\n    //   return [...messages, newMessage];\n    // });\n    append(newMessage, {\n      headers: getApihHeaders(),\n    });\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIWrapper = (props: StateProps) => {\n  const containerRef = injectComponent({\n    component: RoomAI,\n    props,\n  });\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n    const isSpinner = noContent && !noSpinner;\n\n    return (\n      <Transition activeKey={isSpinner ? 0 : 1} name=\"fade\">\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </Transition>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isUserPortrait?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n  UserPortrait,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  isUserPortrait,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return false;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI  : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isUserPortrait ? (\n    HeaderContent.UserPortrait\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"TelyAI\" />\n              <h3 className=\"title\">{oldLang('TelyAI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time Assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      case HeaderContent.UserPortrait:\n        return <h3 className=\"title\">{oldLang('Portrait')}</h3>;\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import React from '@teact';\nimport { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport React from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport UserPortrait from './userPortrait/UserPortrait';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  userPortraitUserId?: string;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  userPortraitUserId,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n    toggleUserPortrait,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isUserPortrait = contentKey === RightColumnContent.UserPortrait;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserPortrait:\n        toggleUserPortrait({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n      case RightColumnContent.UserPortrait:\n        return userPortraitUserId && <UserPortrait userId={userPortraitUserId} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isUserPortrait={isUserPortrait}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const { userPortraitUserId } = selectTabState(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      userPortraitUserId,\n    };\n  },\n)(RightColumn));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React from '@teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React from '@teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React from '@teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport GuidanceModal from '../chatAssistant/component/guidance/guidance-modal';\nimport RoomAttachmentsModal from '../chatAssistant/room-ai/room-attachments-modal';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  isRoomAttachmentsModalOpen?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  isRoomAttachmentsModalOpen,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    closeRoomAttachmentsModal,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  const handleRoomAttachmentsModalClose = useLastCallback(() => {\n    closeRoomAttachmentsModal();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      {isRoomAttachmentsModalOpen && (\n        <RoomAttachmentsModal isOpen={Boolean(isRoomAttachmentsModalOpen)} onClose={handleRoomAttachmentsModalClose} />\n      )}\n      <GuidanceModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      isRoomAttachmentsModalOpen: selectTabState(global).isRoomAttachmentsModalOpen,\n    };\n  },\n)(Main));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","Promise","all","Object","values","map","sound","prevSrc","src","muted","volume","play","then","pause","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","addActionHandler","global","actions","payload","force","tabId","getCurrentTabId","updateTabState","isCallPanelVisible","selectTabState","async","chatId","chat","selectChat","result","callApi","peer","getGlobal","updateGroupCall","id","setGlobal","requestMasterAndJoinGroupCall","accessHash","groupCall","selectActiveGroupCall","hasPublicUsername","Boolean","getMainUsername","inviteLink","selectChatFullInfo","call","canSelfUnmute","copyTextToClipboard","showNotification","message","key","username","inviteHash","fetchChatByUsername","langProvider","full","loadFullChat","requestMasterAndCallAction","action","undefined","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectGroupCall","selectChatGroupCall","leaveGroupCall","rejoin","selectIsCurrentUserFrozen","existingGroupCall","omit","isLoaded","participantsCount","fetchGroupCall","nextOffset","offset","requestGroupCallParticipants","userId","isVideo","selectUser","state","participantId","adminId","currentUserId","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","length","getTracks","forEach","track","stop","checkMicrophonePermission","catch","audio","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","filter","isOwn","peerId","reaction","type","unshift","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","RoomStorage","default","incrementMessageCount","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","userFullNames","userFullName","getUserFullName","oldTranslate","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","shouldResetVoters","pollResults","voters","votes","vote","offsets","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","autoTranslateLanguage","settings","byKey","voice","mediaHash","getMediaHash","mediaLoader","fetch","blob","formData","FormData","append","audioToText","transcriptionText","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","userName","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchFlood","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","ChataiStores","contact","addContact","name","phoneNumber","addUser","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","openPriceConfirmModal","originalAmount","newAmount","directInfo","formId","sendStarPaymentForm","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","reloadPeerSavedGifts","interactionLocalId","availableReaction","aroundAnimation","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","isChatAIShown","nextProfileTab","lastIsChatInfoShown","isUserPortraitShown","userPortraitUserId","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","creditsModal","inviteFriendsModal","inviteCodeModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","isRoomAttachmentsModalOpen","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","isElectronUpdateAvailable","isAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","payPackageModal","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","subscriptionType","creditBalance","createdAt","subscriptionExpiresAt","isExpirated","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","shouldRemove","removeGroupCall","isCallNotEmpty","participants","groupCallId","participant","updateGroupCallParticipant","playGroupCallSound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","CarouselItem","children","React","cx","GuidanceCarousel","handleClose","carouselRef","useRef","handleNextClick","goTo","onClick","CloseIcon","Carousel","ref","GuidanceWrapper","containerRef","injectComponent","component","props","GuidanceModal","telegptGuidance","getItem","isFirstIn","setIsFirstIn","useState","checkInvitationStatus","useLastCallback","openInviteCodeModal","cachedInvitation","invitation","inviteCode","invitationInfo","getMyInvitation","setItem","useEffect","Modal","noBackdropClose","onClose","useCacheBuster","cacheBuster","setCacheBuster","useCallback","useTransitionFixes","transitionElSelector","setMinHeight","container","transitionEl","querySelector","tabsEl","newHeight","clientHeight","offsetHeight","requestMutation","style","minHeight","addEventListener","removeEventListener","applyTransitionFix","requestMeasure","overflowY","scrollBarWidth","offsetWidth","clientWidth","paddingRight","releaseTransitionFix","TABS","memo","withGlobal","mediaSearchType","isRightColumnShown","chatsById","usersById","isChatProtected","isProtected","RoomAttachmentsModal","setSharedMediaSearchType","searchSharedMediaMessages","transitionRef","oldLang","useOldLang","useLang","tabs","useMemo","tab","initialTab","activeTab","setActiveTab","handleSwitchTab","renderingActiveTab","tabType","resultType","getMore","isFirstTab","activeKey","resetCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","handleTransitionStop","handleSelectMedia","isUrl","checkIsUrl","photoSummary","webPageSummary","documentSummary","videoSummary","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","hasCloseButton","buildClassName","TabList","onSwitchTab","Transition","renderCount","onStart","onStop","InfiniteScroll","onLoadMore","noScrollRestore","noFastList","noSpinner","Spinner","NothingFound","dir","isRtl","teactFastList","Media","observeIntersection","Document","getMessageDocument","withDate","smaller","canAutoLoad","autoLoadFileMaxSizeMb","onSelect","WebLink","onlyWebPage","onMessageClick","renderContent","metaViewport","defaultViewportContent","getAttribute","preventEvent","preventDefault","ActiveCallHeader","useModuleLoader","Bundles","Calls","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","menuItems","MenuItem","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","LeftSearch","ActiveTag","folderType","setActiveTag","item","currentTag","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onDelete","xmlns","height","fill","d","PRESET_TAGS","PresetTagModal","activeTag","tagList","PRESET_FOLDER_ID","getAITags","dialogStyle","onClickTag","selectTheme","openPayPackageModal","AiChatFoldersDarkBg","AiChatFoldersBg","SerenaPath","alt","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","animationLevel","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","res","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","loading","isShowTip","tipShowRes","eventEmitter","on","Actions","UpdateAIChatFoldersApplying","off","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","isMainList","canDisplayArchive","shouldRenderFolders","StoryRibbon","contextRootElementSelector","AIChatFoldersTip","resolveTransitionName","UpgradeTip","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","UpgradeButton","stopPropagation","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","enableChatSorting","attachBots","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","openCreditsModal","openInviteFriendsModal","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleCreditsClick","handleInviteFriendsClick","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","aiChatFoldersLoading","handleSwitchChatSorting","forceResortFolder","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","emit","confirm","onOk","deleteAiChatFoldersFromUser","hideTip","onCancel","updateAIChatFoldersLoading","isApply","UpdateSettingAIChatFoldersLoading","IS_MULTIACCOUNT_SUPPORTED","AIKnowledgeIcon","buildStyle","AITranslateIcon","InviteGiftIcon","AIChatFolderIcon","checked","disabled","Switcher","label","noAnimation","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","updateSubscriptionInfo","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleTrigger","getSubscriptionInfo","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","UPDATE_DEFER_KEY","DropdownMenu","trigger","footer","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","setShouldRenderUpdateButton","webFireBase","setWebFireBase","handleFireBaseUpdate","force_update_current_version","compareVersion","UpdateFirebaseConfig","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","fireBaseAnalytics","deferUpdate","force_update_store_url","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","debouncedSetGlobalSearchQuery","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","currentScreen","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","waitBlob","Blob","serenaWaiting","serenaWaitUrl","createObjectURL","workBlob","serenaWorking","serenaWorkUrl","openChatAIWithInfo","setUnreadCount","dotLottie","setDotLottie","isSummary","setIsSummary","wrapper","currentTarget","closest","updateRoomAIData","updateUnreadCount","updateSummaryState","intervalAnimate","handleAutoSummary","realTimeAssistants","summary","interval","UpdateRoomAIUnreadCount","UpdateRoomAISummaryState","getRoomAIUnreadCount","summaryState","getRoomAISummaryState","dotLottieRefCallback","DotLottieReact","autoplay","isDragging","setIsDragging","setPosition","dragStartRef","hasDraggedRef","isDraggingRef","positionRef","loadPosition","savedPosition","pos","savePosition","longPressTimerRef","handleMouseMove","deltaX","clientX","deltaY","clientY","newPosition","minX","innerWidth","maxY","innerHeight","handleMouseUp","handleMouseDown","handleClick","RoomAIEntryButton","onMouseDown","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","AITextarea","target","rows","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","FloatingActionButton","buttonClassName","InputText","success","readOnly","inputMode","maxLength","teactExperimentControlled","onInput","onKeyPress","onBlur","onPaste","labelText","fullClassName","htmlFor","backgroundColor","TextArea","maxLengthIndicator","noReplaceNewlines","resizeHeight","element","requestForcedReflow","useLayoutEffect","textarea","previousSelectionEnd","selectionEnd","AddTopicPanel","telegptSettings","filterPhone","openDrawer","drawerParams","useDrawerStore","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","setPhoneNumber","setIsLoading","initialValues","prompt","is_call","is_open","setForm","handleTopicNameChange","topicName","prev","handleTopicDescriptionChange","topicDescription","handlePhoneNumberChange","handleSave","updateUrgentTopic","DrawerKey","PersonalizeSettings","setSettingOption","showMessage","Switch","PickerChatItem","isChecked","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","Checkbox","clickOpenRoom","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","onSave","Input","Group","CustomizationPromptPanel","titleError","setTitleError","promptError","setPromptError","updateSummarizeTemplate","Message","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","bestMatch","getBestKnowledgeMatch","score","answer","autoReply","message_id","reply","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","RoomsTab","ignoredIds","onIgnored","onUnIgnored","unIgnoreIds","GLOBAL_SUMMARY_CHATID","renderRoomItem","isIgnored","SummaryItem","template","selectedTemp","handleSelect","user_id","CustomizationPrompt","AddSummaryTemplate","handleAdd","SummarizeTab","curious_info","ignored_summary_chat_ids","curious_id","ignoredChatIds","getIdsFromEntityTypes","summaryTemplate","setSummaryTemplate","originSelectedTemp","setOriginSelectedTemp","setSelectedTemp","setIgnoredIds","actionsVisable","isEqual","handleTemplateSelect","selectedId","newSelected","handleDelete","newSelectedTemp","deleteSummarizeTemplate","newSummaryTemplate","handleIgnored","entityTypes","buildEntityTypeFromIds","handleUnIgnored","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","urgent_info","ignored_urgent_chat_ids","selectUrgentChatIds","setTopics","deleteUrgentTopic","t","urgentCheckTask","updateUrgentChats","selectedTabIndex","setSelectedTabIndex","hasBackDrawer","ChatPicker","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","InviteButton","InviteGif","SummaryHeaderActions","handleShowRightPanel","getGptSettings","SettingIcon","UrgentNotification","api","contextHolder","useNotification","msg","parsedMessage","padding","SerenaLogoPath","DangerIcon","notificationUrgentMessage","GlobalSummary","notificationMessage","setNotificationMessage","summaryMessages","setSummaryMessages","viewMessages","setViewMessages","pageInfo","setPageInfo","lastTime","scrollToBottom","scrollLocked","isScrollLock","useScrollToBottom","useChat","SERVER_API_URL","sendExtraMessageFields","upgradeTip","createUpgradeTipMessage","orderBy","getTime","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","deleteMessage","delMessage","role","uuidv4","getApihHeaders","msgs","parseMessage2SummaryStoreMessage","storeMessages","Messages","loadMore","GlobalSummaryWrapper","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","disablePictureInPicture","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","PortraitTagColors","UserPortraitBaseCard","portraitInfo","setPortraitInfo","getPortraitInfo","userPortrait","getUserPortrait","handlePortraitClick","checkCredisBalance","openUserPortrait","usernames","langs","UserPortraitBasicCardMenu","menuRef","menuPositionOptions","markMouseInside","useMouseInside","withPortal","noCompact","UserPortraitBasicCard","SenderGroupAvatar","avatarPeer","handleAvatarClick","hiddenName","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","contextMenuAnchor","setContextMenuAnchor","triggerRef","getTriggerElement","getMenuElement","getRootElement","getLayout","shouldAvoidNegativePosition","handleActivateSymbolMenu","triggerEl","getBoundingClientRect","ResponsiveHoverButton","onActivate","anchor","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","avatarRef","canMention","shouldRenderContextMenu","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","debounceMs","threshold","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","Content","runDebouncedForScroll","autoTranslate","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","translationLanguage","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadFactChecks","requestMessageTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","rememberScrollPositionRef","preservedItemElements","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","AccountInfo","StarsRequired","onScroll","RequirementToContactMessage","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","mediaDuration","selectMessageMediaDuration","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","enterTime","stayDuration","addStayDuration","visualViewport","isFixNeeded","documentElement","toggle","handleAnalyticsMessage","messageText","ASK_MEETING_TIMEZONE","ASK_MEETING_TIME","ASK_MEETING_EMAIL","MEETING_INVITATION_TIP","ScheduleMeeting","meetingMentionMessage","createMeetingMentionMessage","storeMessage","parseMessage2StoreMessage","AddRoomAIMessage","IntentionToScheduleMeeting","initResize","resetResize","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","newWidth","stopDrag","cleanup","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIEntryWrapper","onUnpin","teactOrderKey","AgeVerificationModalAsync","modal","AgeVerificationModal","MODALS","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","CreditsModal","InviteCodeModal","InviteFriendsModal","PayPackageModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","actionItemClassName","RoomActions","insertMessage","handleScheduleMeeting","scheduleGoogleMeeting","handleSummarize","summaryRoomMessage","handleActionItems","generateRoomActionItems","handleActions","handleNewFeature","newFeatureMessage","createNewFeatureReminderMessage","RoomAIActions","popoverContent","handleMediaSummarize","openRoomAttachmentsModal","Popover","placement","overlayClassName","domValue","autoFocus","RoomAIInput","RoomAIInner","getCurrentUserInfo","tokenRef","CHATAI_IDB_STORE","newMessages","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","createGoogleLoginMessage","mergeMesssage","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","rightPanelBg","RoomAI","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","allowMultiple","withStatus","itemInputType","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","nonInteractive","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","useIsIntersecting","transitionClassNames","useMediaTransitionDeprecated","decoding","formatMediaDuration","shouldWarnAboutSvg","isTopicInfo","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","monoforumChannel","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","loadMoreMembers","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","handleNewMemberDialogOpen","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noContent","isSpinner","forceRenderHiddenMembers","isViewportIdsEmpty","SearchingDuck","noLoop","MediaStory","onDateClick","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","renderSpinnerOrContent","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","isUserPortrait","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","handleSwitchRealTimeAssistant","setShouldSkipTransition","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","UserPortrait","renderingContentKey","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","toggleUserPortrait","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","closeRoomAttachmentsModal","loadContentSettings","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","handleRoomAttachmentsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","useShowTransitionDeprecated","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}