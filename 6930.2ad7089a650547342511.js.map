{"version":3,"file":"6930.2ad7089a650547342511.js","mappings":"8OACA,SAAgB,QAAU,WAAW,OAAS,WAAW,OAAS,WAAW,WAAa,WAAW,UAAY,WAAW,aAAe,WAAW,YAAc,WAAW,aAAe,WAAW,YAAc,WAAW,SAAW,YCuI7O,GAAeA,EAAAA,EAAAA,IAtG2BC,EACxCC,WACAC,YACAC,UACAC,qBACAC,oBACAC,cACAC,cAEA,MAAMC,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,EAAAA,MAENC,EAAoBC,EAAqBC,IAAyBC,EAAAA,EAAAA,MAEzEC,EAAAA,EAAAA,IAAU,KACHf,GACHa,KAED,CAACb,IAEJ,MAAOgB,EAAkBC,IAAaC,EAAAA,EAAAA,IAAQ,KAC5C,IAAKhB,EAAS,MAAO,MAACiB,GAAW,GAEjC,MAAMC,EAAYlB,EAAQmB,OAAO,CAACC,EAAKC,IACrCD,EAAIE,MAAQD,EAAOC,MAAQF,EAAMC,GAE7BE,EAAepB,GAAee,EAAUI,MAAQnB,EAEhDqB,EAAwG,GAC9G,IAAIC,EAA2B,EAC3BC,GAAmB,EAgBvB,OAfA1B,EAAQ2B,QAAQ,CAACN,EAAQO,KAClBP,EAAOQ,YAAYJ,IAEpBtB,IAAgBoB,GAAgBF,EAAOC,MAAQnB,IAC9CM,IAAsBY,EAAOQ,WAIlCL,EAAOM,KAAK,CACVT,SACAU,WAAYC,KAAKC,IAAIR,EArDL,GAsDhBS,OAAQN,IAAU5B,EAAQmC,OAAS,IANnCT,GAAmB,KAUhB,CAACF,EAAQE,IACf,CAACjB,EAAoBT,EAASG,IAEjC,OACEiC,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOvC,QAASD,IAC5Ce,GAAkB0B,IAAI,EAAGnB,SAAQU,aAAYG,aAC5C,MAAMC,EAASrB,GAAkBqB,OAC3BM,EAAQN,EAAS,GAAM,EACvBO,EAAiBrB,IAAWpB,EAElC,IAAI0C,EACJ,GAAItB,GAAU,YAAaA,EAAQ,CACjC,MAAMuB,EAASvB,EAAOwB,QAAQC,KAAMC,GAAQA,EAAIC,QAAU9C,IACrDmB,EAAOwB,QAAQ1B,OAAO,CAACC,EAAK2B,IAASA,EAAIC,MAAQ5B,EAAI4B,MAAQD,EAAM3B,EAAMC,EAAOwB,QAAQ,IAC7FF,EAAmBC,GAAQK,YAC7B,CAEA,OACEb,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GACTC,EAAOlB,QAAUoB,GAASP,GAAWK,EAAOW,WAAYR,GAAkBH,EAAOY,QAEnFC,IAAK/B,EAAOC,MACZlB,QAASA,IAAMA,IAAUiB,IAEzBe,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOc,WAAW,KAC9BC,EAAAA,EAAAA,IAAcjC,EAAOC,OACvBc,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOgB,aAAcC,IAAKjD,EAAKkD,MAAQ,MAAQ,OAC5DC,MAAMC,KAAK,CAAExB,OAAQJ,IAAcS,IAAI,IACtCJ,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UAAWwC,EAAOsB,YAAaC,KAAK,OAAOC,KAAK,WAIhE3B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOyB,eACpBC,EAAAA,EAAAA,GAAe1D,EAAMc,EAAO6C,OAAQ7C,EAAO8C,YAE5CzB,GAAmBzC,GAAsB,YAAaA,IAAwB0C,GAC9EP,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOyB,cACrB5B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOU,eACpBmB,EAAAA,EAAAA,GAAW/D,EAAQ,2BAA2BiD,EAAAA,EAAAA,IAAcX,WAOvElC,GAAsBM,GACtBqB,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACtE,UAAWwC,EAAO+B,YAAaC,QAAM,EAACC,mBAAiB,EAACpE,QAASM,GACtEL,EAAQ,2BACT+B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAAC1E,UAAWwC,EAAOmC,SAAUC,KAAK,Y,kHChIjD,MC6EA,GAAe/E,EAAAA,EAAAA,IAhDSgF,EACtBC,SACAC,eACAC,iBACAC,SACAC,SACAC,aACAC,cACAC,gBACAC,UACAC,gBACAC,sBAGEnD,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJX,OAAQA,EACR9E,WAAWuC,EAAAA,EAAAA,GD7CM,WC6CsBiD,GACvCA,iBD9CwJ,WC+CxJE,wBAAsB,EACtBC,yBAA0BP,EAAc,yBAAsBlE,EAC9DoE,QAASA,GAERN,GAAkB3C,EAAAA,GAAAC,cAAA,OAAKtC,UDnDiF,YCmDtDqC,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAMI,KAC9DC,EACD5C,EAAAA,GAAAC,cAAA,WACGyC,GAActC,IAAI,EAAEmD,EAAMC,EAAOC,KAE9BzD,EAAAA,GAAAC,cAACyD,EAAAA,EAAQ,CACPC,UAAQ,EACRC,WAAS,EACTL,KAAMA,EACNM,cD5D2H,YC8D3H7D,EAAAA,GAAAC,cAAA,QAAMtC,UAAU,SAAS6F,GACzBxD,EAAAA,GAAAC,cAAA,QAAMtC,UAAU,YAAY8F,MAKnCT,GAAiBhD,EAAAA,GAAAC,cAAC6D,EAAAA,EAAS,CAACnG,UDpEkJ,aCqE9KkF,EACAC,GACC9C,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACN,KAAK,UAAU3D,QAASkF,GAAiBD,GAAUH,I,qTCpDnE,MA2CA,GAAetF,EAAAA,EAAAA,IA3CKuG,EAClBC,oBACAC,oBACAC,sBACAC,kBACAC,YACAC,yBACGC,MAEH,MAAMnG,GAAOD,EAAAA,EAAAA,KACPqG,EAAYC,QAAQR,GAAqBI,GAE/C,OACEpE,EAAAA,GAAAC,cAACmD,EAAAA,EACCqB,EAAA,GACIH,EAAU,CACdI,QAAM,EACN/G,WAAWuC,EAAAA,EAAAA,GACTgE,GCrCmE,WDsCnEC,GCtC2C,WDuC3CG,EAAW3G,WAEbwF,kBAAkBjD,EAAAA,EAAAA,GCzCE,WDyC6BoE,EAAWnB,kBAC5DwB,iBAAiBzE,EAAAA,EAAAA,GC1CwE,WD0C1CoE,EAAWK,mBAEzDL,EAAWM,SACXL,GACCvE,EAAAA,GAAAC,cAAA,OAAKtC,UC9C6G,YD+ChHqC,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLoC,oBAAqBA,EACrBrG,QAASoG,GAAaE,EAAWrB,QACjC4B,MAAM,UACNlD,KAAK,UACLmD,SAAUb,GAETD,GAAqB7F,EAAK,e,ykBEtDvC,SAAgB,YAAc,WAAW,QAAU,WAAW,KAAO,WAAW,WAAa,WAAW,KAAO,WAAW,eAAiB,WAAW,YAAc,WAAW,QAAU,WAAW,OAAS,WAAW,eAAiB,WAAW,aAAe,WAAW,YAAc,WAAW,OAAS,WAAW,OAAS,WAAW,cAAgB,Y,oFCqN/V,GAAeX,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAAqB,CAACC,GAAUC,YAG3C,CACLC,KAHWD,GAAOE,WAAYC,EAAAA,EAAAA,KAAWJ,EAAQC,EAAME,gBAAatG,IADpDkG,CAxK8BM,EAChDJ,QACAC,WAEA,MAAM,oBACJI,EAAmB,YAAEC,EAAW,gBAAEC,IAChCC,EAAAA,EAAAA,MAEEC,GAAYC,EAAAA,EAAAA,IAAuB,MAEnClD,EAAS+B,QAAQS,GAAOxC,QAExBmD,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAElChH,GAAUC,EAAAA,EAAAA,MAET4H,EAAgBC,IAAqBC,EAAAA,EAAAA,OACrCC,EAAgBC,IAAmBF,EAAAA,EAAAA,KAAS,IAEnDvH,EAAAA,EAAAA,IAAU,KACHgE,GACHyD,GAAgB,IAEjB,CAACzD,IAEJ,MAAM0D,GAAeC,EAAAA,EAAAA,GAAgB,KACnC,MAAMC,EAASX,EAAUY,QACzB,GAAKD,GACD5D,EAAQ,CACV,MAAM,IACJ8D,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,GAChBL,EAAOM,cAAc,kBAAmBC,wBAC5CpB,EAAgB,CACde,MACAC,OACAC,QACAC,SACAG,WAAW,GAEf,KAGFpI,EAAAA,EAAAA,IAAU,KACJmH,GAAgBkB,aAClBX,KAED,CAACP,EAAgBO,IAEpB,MAAMY,GAAcX,EAAAA,EAAAA,GAAiBnH,IAC9B2G,IAELG,EAAkB9G,GAEhBsG,EADEL,EACU,CACVxD,KAAM,YACNsF,OAAQ9B,EAAK+B,GACb/H,MAAOD,EAAOC,MACd6C,SAAU9C,EAAO8C,SACjBD,OAAQ7C,EAAO6C,QAGL,CACVJ,KAAM,QACNxC,MAAOD,EAAOC,MACd6C,SAAU9C,EAAO8C,SACjBD,OAAQ7C,EAAO6C,YAWfoF,GAAcd,EAAAA,EAAAA,GAAgB,KAClCd,MAaI6B,GAAavI,EAAAA,EAAAA,IAAQ,KACzB,MACMwI,EADOnJ,EAAQ,qCACFoJ,MAAM,UACzB,MAAO,CACLD,EAAM,GACNpH,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CACPC,IAAKtJ,EAAQ,gBACbuJ,KAAMvJ,EAAQ,4CAEhBmJ,EAAM,KAEP,CAACnJ,IAEJ,OACE+B,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJzF,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOsH,aACjCtE,iBAAkBhD,EAAOuH,QACzBhC,UAAWA,EACXhB,QAAM,EACNzB,QAASiE,EACTzE,OAAQA,GAERzC,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOwH,KAAM,iBAAkBC,SA1ClE,SAAsBC,GACpB,MAAM,UAAEC,GAAcD,EAAEE,cAExB7B,EAAgB4B,GAAa,IAC/B,GAuCM9H,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACL+F,OAAK,EACLrG,KAAK,UACLhE,UAAWwC,EAAO8H,YAClBpD,MAAM,cAEN7G,QAASA,IAAMsH,IACf4C,UAAWjK,EAAQ,UAEnB+B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,WAEbvC,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOyC,OAAQqD,GAAkB9F,EAAOgI,eACrEnI,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,EAAOiI,gBACZnK,EAAPiH,EAAe,iBAA4B,wBAGhDlF,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOkI,YACpBnD,EACClF,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CACL5G,KAvII,IAwIJ6G,KAAMtD,EACNvH,UAAWwC,EAAOsI,SAEpBzI,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOuI,eAAgBC,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,KAGjF9I,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO4I,KAAMJ,IAAKK,EAAUH,IAAI,GAAGC,WAAW,IAC9D9I,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOuI,eAAgBC,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,MAIrF9I,EAAAA,GAAAC,cAAA,MAAItC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAO8I,WAAY9I,EAAO+I,SAjExDtD,GAAgBkB,YACX5B,GAAOlD,EAAAA,EAAAA,GAAW/D,EAAQ,kCAC/BkL,EAAAA,EAAAA,GAAuBrD,EAAgBhE,OAAQgE,EAAgB/D,SAAU9D,EAAQmL,OAAQ,CAAC,qBACxFpH,EAAAA,EAAAA,GAAW/D,EAAQ,oBAAqB6H,GAAgB5G,OAAQ,CAAC,oBAGzDjB,EAAPiH,EAAe,iBAA4B,uBA8D9ClF,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,EAAOkJ,aAClBnE,GAAOlD,EAAAA,EAAAA,GACN/D,EAAQ,2BAA2BqL,EAAAA,EAAAA,IAAarL,EAASiH,IAAQ,CAAC,oBAChEjH,EAAQ,gCAEd+B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOoJ,SACrBvJ,EAAAA,GAAAC,cAACxC,EAAAA,EAAmB,CAClBG,QAASgI,GAAgB4D,iBACzBxL,QAAS+I,IAEX/G,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOsJ,eACpBtC,S,sEC7Mb,MCyGA,GAAe3J,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAAsBC,IACxC,MACE0E,OAAO,QACLC,GACD,cACDC,GACE5E,EAEJ,MAAO,CACL6E,QAAS7E,EAAO8E,aAAaD,QAC7BE,cAAeJ,EAAQ5I,OACvBiJ,gBAAiBL,EAAQM,SACzBL,kBAZgB7E,CAxEuCmF,EACzDzH,SACAmH,gBACAG,gBACAC,kBACAH,cAEA,MAAM,6BAAEM,EAA4B,mBAAEC,IAAuB3E,EAAAA,EAAAA,MAEvDxH,GAAUC,EAAAA,EAAAA,MAETmM,EAAaC,IAAkBtE,EAAAA,EAAAA,IAAiB,IAEjDuE,GAAmB3L,EAAAA,EAAAA,IAAQ,KAC/B,MAAM4L,GAAYC,EAAAA,EAAAA,MAAY7J,MAAM8J,KAC9BC,GAAcC,EAAAA,EAAAA,IAAO,IACrBf,GAAW,MACXE,GAAiB,MACjBC,GAAmB,KAGnBa,GAAkBC,EAAAA,EAAAA,IAAmB,CACzCC,IAAKJ,EAAaK,MAAOX,EAAa3I,KAAM,SAG9C,OAAOuJ,EAAAA,EAAAA,GAAYJ,EAAgBK,OAAQjE,IACzC,MAAM/B,EAAOsF,EAAUvD,GAEvB,SAAK/B,GAIGA,EAAKiG,YACPC,EAAAA,EAAAA,IAAUlG,KAAUmG,EAAAA,EAAAA,IAAcnG,IACnC+B,IAAO2C,GAAiB3C,IAAOqE,EAAAA,SAErC,CAAC1B,EAAeS,EAAaR,EAASE,EAAeC,IAElDuB,GAA8BnF,EAAAA,EAAAA,GAAiBoF,IAC/CA,GAAezL,SACjBqK,EAAmB,CAAEjF,UAAWqG,IAChCrB,OAIJ,OACEnK,EAAAA,GAAAC,cAAC8D,EAAAA,EAAW,CACVpG,UDhFiB,WCiFjB8E,OAAQA,EACRQ,QAASkH,EACT3G,MAAOvF,EAAQ,kBACfwN,gBAAc,EACdvH,qBAAmB,EACnBC,iBAAe,EACfH,kBAAmB/F,EAAQ,YAC3ByN,QAASvB,GAETnK,EAAAA,GAAAC,cAAC0L,EAAAA,EAAU,CACThO,UD3FyI,WC4FzIiO,QAASrB,EACTsB,YAAaxB,EACbyB,kBAAmB7N,EAAQ,UAC3B8N,eAAgBzB,EAChB0B,cAAY,EACZC,oBAAkB,EAClBC,YAAU,EACVC,mBAAoBZ,Q,2FCnG5B,SAAgB,KAAO,WAAW,QAAU,WAAW,WAAa,WAAW,KAAO,WAAW,UAAY,WAAW,QAAU,WAAW,aAAe,WAAW,IAAM,WAAW,KAAO,WAAW,eAAiB,WAAW,WAAa,WAAW,YAAc,WAAW,OAAS,WAAW,eAAiB,WAAW,QAAU,WAAW,aAAe,WAAW,YAAc,WAAW,eAAiB,WAAW,aAAe,WAAW,aAAe,WAAW,YAAc,WAAW,YAAc,WAAW,cAAgB,WAAW,aAAe,WAAW,WAAa,WAAW,eAAiB,WAAW,cAAgB,WAAW,aAAe,WAAW,WAAa,WAAW,uBAAyB,WAAW,cAAgB,WAAW,kBAAoB,WAAW,aAAe,WAAW,cAAgB,WAAW,KAAO,WAAW,WAAa,WAAW,YAAc,WAAW,SAAW,WAAW,aAAe,YCqDl8B,GAAe/N,EAAAA,EAAAA,IAhCM4O,EAAGC,UAAS1O,YAAW2O,oBAC1C,MAAMnO,GAAOC,EAAAA,EAAAA,MAEP,sBACJmO,IACE9G,EAAAA,EAAAA,MAEJ,OACEzF,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOqM,aAAc7O,IAClDqC,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOsM,aACrBzM,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,EAAOuM,aAAcvO,EAAK,iBAC3C6B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOwM,eACrB3M,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAACE,KAAK,OAAOC,KAAK,gBACd9C,IAAZwN,GAAwBO,EAAAA,EAAAA,IAAkBzO,EAAMkO,GAAW,IAC3DC,GACCtM,EAAAA,GAAAC,cAAC4M,EAAAA,EAAW,CACVlP,UAAWwC,EAAO2M,eAElB9O,QAASA,IAAMuO,EAAsB,CAAC,IAEtCvM,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CACH1E,UAAWwC,EAAO4M,aAClBxK,KAAK,c,qCC3CrB,SAAgB,KAAO,WAAW,KAAO,WAAW,OAAS,WAAW,cAAgB,WAAW,OAAS,WAAW,MAAQ,WAAW,YAAc,WAAW,SAAW,WAAW,aAAe,WAAW,YAAc,WAAW,QAAU,WAAW,iBAAmB,YC+FpR,GAAe/E,EAAAA,EAAAA,IA/DewP,EAAGC,mBAC/B,MAAM,2BAAEC,IAA+BzH,EAAAA,EAAAA,OACjC,OACJ0H,EAAM,QAAEC,EAAO,MAAEC,EAAK,YAAEC,EAAW,MAAE9J,EAAK,MAAE+J,GAC1CN,EACE9O,GAAOD,EAAAA,EAAAA,KAEPsK,GAAOgF,EAAAA,EAAAA,GAbf,SAA4BL,GAC1B,OAAQnI,IACNyI,EAAAA,EAAAA,KAAWzI,EAAQmI,EAEvB,CAS2BO,CAAmBP,IAEtCpG,GAAcX,EAAAA,EAAAA,GAAgB,KAClC8G,EAA2B,CAAED,mBAG/B,IAAKzE,EACH,OAGF,MAAMmF,EAAaN,EAAQO,KAAKC,MAAQ,IAClCC,GAAgBC,EAAAA,EAAAA,GAA2B,IAARV,EAAclP,EAAKiL,MAAM,EAAM,QAExE,OACEpJ,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO6N,KAAMhQ,QAAS+I,GACpC/G,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO8N,SACrBjO,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAAC5G,KAAK,SAAS6G,KAAMA,IAC5BxI,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UAAWwC,EAAO+N,iBAAkBxM,KAAK,OAAOC,KAAK,WAEjE3B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOgO,MACrBnO,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,EAAOqD,QAAQxB,EAAAA,EAAAA,IAAWsH,EAAAA,EAAAA,IAAanL,EAAMqK,IAAS,KACpEhF,GACCxD,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,EAAOsD,UAClB8J,GAASvN,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAAC6F,SAAUb,EAAO5L,KAAK,WACvCK,EAAAA,EAAAA,GAAWwB,IAGhBxD,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,EAAOkJ,aAClBlL,EACCwP,EAAa,2BACTL,EAAc,2BAA6B,0BAC/CQ,KAIN9N,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOkO,QACnBf,GAAeK,EACf3N,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOmO,aACpBnQ,EAAKwP,EAAa,iCAAmC,qCAGxD3N,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOoO,eACrBvO,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UAAWwC,EAAOqO,KAAM9M,KAAK,OAAOC,KAAK,aACnD3B,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,EAAO2B,SACrBZ,EAAAA,EAAAA,IAAckM,EAAQtL,UAG3B9B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOsO,cAAetQ,EAAK,8C,0BC/EhD,SAASuQ,EAAoBzQ,EAAoBE,EAAcwQ,GACpE,GAAIA,EAAYC,aACd,OAAOzQ,EACL,yBACA,CAAE0Q,MAAOF,EAAYC,cACrB,CACEE,WAAW,EACXC,YAAaJ,EAAYC,eAI/B,GAAID,EAAYK,iBACd,OAAO/Q,EAAQ,6BAA6BgR,EAAAA,EAAAA,IAAcN,EAAYK,mBAExE,GAAIL,EAAYO,cAAe,OAAOjR,EAAQ,4BAC9C,GAAI0Q,EAAYQ,cAAe,OAAOlR,EAAQ,qBAC9C,GAAI0Q,EAAYS,mBAAoB,OAAOT,EAAYnL,OAASvF,EAAQ,4BACxE,GAAI0Q,EAAYU,WAAY,OAAOpR,EAAQ,sBAC3C,GAAI0Q,EAAYW,eAAgB,OAAOrR,EAAQ,8BAC/C,GAAI0Q,EAAYY,SAAU,OAAOtR,EAAQ,iBACzC,GAAI0Q,EAAYa,OAAQ,OAAOvR,EAAQ,qBACvC,GAAI0Q,EAAYc,SACd,OAAOC,EAAsBf,EAAYzP,OAASjB,EAAQ,wBAA0BA,EAAQ,uBAG9F,MAAM0R,EAAchB,EAAYnG,MAAkC,SAA1BmG,EAAYnG,KAAK9G,OACpDkO,EAAAA,EAAAA,IAAgCjB,EAAYnG,YAAU3J,EAE3D,OAAI8Q,EAAmBA,EAAWnM,OAASvF,EAAQ0R,EAAWE,UAEvDlB,EAAYnL,KACrB,CAEO,SAASkM,EAAsBI,GACpC,OAAIA,EAAYhO,OAAegO,EAAYhO,OAAS,EAC7CgO,EAAYC,MAAQ,CAC7B,C,gDC5CA,SAAgB,KAAO,WAAW,QAAU,WAAW,MAAQ,WAAW,MAAQ,WAAW,UAAY,WAAW,WAAa,WAAW,WAAa,WAAW,WAAa,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,YCmE3O,SAASC,IAAiB,YACxBC,EAAW,MACXzQ,EAAK,UACL7B,IAMA,MAAMuS,EAASD,EAAYE,OAASF,EAAY1C,MAC1C6C,GAAYC,EAAAA,EAAAA,IAAaH,EAAO,aAChCI,GAAQC,EAAAA,EAAAA,IAAiBL,GAEzBM,GAAYC,EAAAA,EAAAA,GAASL,GAE3B,OACEpQ,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOmQ,WAAiBzR,IAAVW,GAAuB,2BAA2BA,IAAS7B,IACrG2S,GAAStQ,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOuQ,OAAQ/H,IAAK2H,EAAOzH,IAAI,KACxD2H,GAAaxQ,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOwQ,KAAMhI,IAAK6H,EAAW3H,IAAI,KAGrE,CAEA,UAAerL,EAAAA,EAAAA,IAnEQoT,EACrBV,QAAOvS,YAAWkT,uBAAsB7S,cAExC,MAAM6Q,EAAQjP,KAAKC,IAAIqQ,EAAMnQ,OAAQ8Q,EALX,EADR,GAOZC,EAAW,cAAeZ,EAAM,GACtC,OACElQ,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GACTC,EAAO6N,KACP7N,EAAO,YAAY0O,KACnBgC,GAAwB1Q,EAAO8N,QAC/BtQ,GAEFyD,IAAI,MACJpD,QAASA,GAERkS,EAAMa,MAAM,EAAGlC,GAAOmC,UAAU5Q,IAAI,CAAC6Q,EAAMC,EAAGC,KAC7C,MAAMC,EAAYD,EAAIpR,OAASmR,EAAI,EACnC,MAAO,cAAeD,EACpBjR,EAAAA,GAAAC,cAACoR,EAAAA,EAAY,CACX1T,UAAWwC,EAAOmQ,MAClBgB,WAAS,EACT7K,MAAOwK,EAAKxK,MACZC,OAAQuK,EAAKvK,OACb6K,aAAcN,EAAKO,WAAWC,UAGhCzR,EAAAA,GAAAC,cAAC+P,GAAgB,CACfrS,WAAWuC,EAAAA,EAAAA,GAAe2Q,GAAwBO,EAAY,GAAKjR,EAAOuR,WAC1EzB,YAAagB,EACbzR,MAAO4R,MAIZN,GACC9Q,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO0O,OACrB7O,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,eACV2N,EAAMnQ,OAAS,EAAImQ,EAAMnQ,OAAS,OC5D7C,IAAgB,KAAO,WAAW,KAAO,WAAW,MAAQ,WAAW,OAAS,WAAW,MAAQ,WAAW,YAAc,WAAW,KAAO,WAAW,SAAW,WAAW,SAAW,WAAW,QAAU,WAAW,iBAAmB,WAAW,qBAAuB,WAAW,YAAc,YCyLxS,IAAevC,EAAAA,EAAAA,IA5IcmU,EAAGhD,cAAahR,gBAC3C,MAAM,0BAAEiU,IAA8BnM,EAAAA,EAAAA,OAChC,KACJoM,EAAI,MACJ3S,EAAK,MACLqO,EACA/E,KAAMsJ,EAAe,cACrB3C,EAAa,mBACbC,GACET,EACExQ,GAAOC,EAAAA,EAAAA,KACPH,GAAUC,EAAAA,EAAAA,KAEViP,EAAkC,SAAzB2E,EAAgBpQ,KAAkBoQ,EAAgB7K,QAAKpI,EAChE2J,GAAOgF,EAAAA,EAAAA,GApBf,SAA4BL,GAC1B,OAAQnI,GACNmI,GAASM,EAAAA,EAAAA,KAAWzI,EAAQmI,QAAUtO,CAE1C,CAgB2BkT,CAAmB5E,IACtCsC,EAAWd,EAAYc,SACvBuC,EAAkC,mBAAnBvC,GAAU/N,KACzBuQ,EAAcxC,IAAYyC,EAAAA,EAAAA,IAAmBzC,GAE7C0C,GAAOvT,EAAAA,EAAAA,IAAQ,KACnB,IACIyK,EACAgF,EACA+D,EAHA5O,EAAQkL,EAAoBzQ,EAASE,EAAMwQ,GAK/C,GAA8B,SAA1BA,EAAYnG,KAAK9G,KACnB2H,EAAcb,IAAQc,EAAAA,EAAAA,IAAarL,EAASuK,GAC5C4J,EAAa5J,GAAQ6J,EAAAA,OAChB,CACL,MAAM1C,GAAaC,EAAAA,EAAAA,IAAgCjB,EAAYnG,MAC/DhF,EAAQmM,EAAWnM,OAASvF,EAAQ0R,EAAWE,UAC/CxG,EAAcpL,EAAQ0R,EAAW2C,aACjCF,EAAazC,CACf,CAsBA,OApBIhB,EAAYO,eAAgD,mBAA/BP,EAAYc,UAAU/N,OACrD2H,EAAcsF,EAAYc,SAASjM,OAGjCmL,EAAYpB,QACd6E,OAAavT,GAGX8P,EAAY4D,WACdlE,EAASpQ,EAAQ,kBAGf0Q,EAAY6D,YACdnE,EAASpQ,EAAQ,gBAGf0Q,EAAY8D,YACdpE,EAASpQ,EAAQ,iBAGZ,CACLuF,QACA6F,cACA+I,aACA/D,WAED,CAACpQ,EAASE,EAAMqK,EAAMmG,IAEnB+D,GAAiB9T,EAAAA,EAAAA,IAAQ,KAC7B,GAAIoT,EAAc,CAChB,MAAM,SAAEW,IAAaC,EAAAA,EAAAA,IAAkBnD,GACjCoD,EAAmB,CAACF,EAAUG,YAAaH,EAAUI,WAE3D,OACE/S,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAC+S,EAAAA,EAAuB,CACtBrV,UAAWwC,GAAO8S,qBAClBJ,iBAAkBA,IAEpB7S,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBvV,UAAWwC,GAAO8R,YAClBkB,QAASlB,EACTtQ,KArFc,GAsFdyR,MAAM,IAId,CAEA,OAAInB,EAEAjS,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBvV,UAAWwC,GAAO8R,YAClBkB,QAASlB,EACTtQ,KAjGgB,GAkGhByR,MAAM,IAKRjE,EACKnP,EAAAA,GAAAC,cAAC2Q,GAAc,CAACV,MAAOf,EAAe0B,sBAAoB,IAIjE7Q,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAAC5G,KAAK,SAASyM,SAAUb,EAAO/E,KAAM2J,EAAKC,aACjD5N,QAAQ4K,IACPpP,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UAAWwC,GAAO+N,iBAAkBxM,KAAK,OAAOC,KAAK,YAIpE,CAACqQ,EAAc7C,EAAe5B,EAAO4E,EAAKC,WAAYhD,EAAoBK,EAAUwC,IAEjFlL,GAAcX,EAAAA,EAAAA,GAAgB,KAClCwL,EAA0B,CAAEjD,kBAG9B,OACE3O,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO6N,KAAMrQ,GAAYK,QAAS+I,GAC/D/G,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAO8N,SACpByE,GAEH1S,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOgO,MACrBnO,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,GAAOqD,OAAQ2O,EAAK3O,OAClC2O,EAAK9I,aACJrJ,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,GAAOkJ,cAAcrH,EAAAA,EAAAA,GAAWmQ,EAAK9I,cAErDrJ,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,GAAO0R,OAClBwB,EAAAA,EAAAA,IAA8B,IAAPxB,EAAa5T,EAAQmL,MAAM,GAClD+I,EAAK9D,QAAU,OAAO8D,EAAK9D,YAGhCrO,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOjB,OACrBc,EAAAA,GAAAC,cAAA,QACEtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO2B,OAAQ4N,EAAsBxQ,GAASiB,GAAOmT,SAAWnT,GAAOoT,YAEhGC,EAAAA,EAAAA,IAA6BrV,EAAMe,IAEtCc,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UAAWwC,GAAOqO,KAAM9M,KAAK,OAAOC,KAAK,iBC9IrD8R,GAAoB,CAAC,MAAO,UAAW,YACvCC,GAA0C,CAC9C,uBACA,4BACA,6BAEIC,GAAyB,uBAyR/B,IAAenW,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IACjBC,IAGQ,CACL4O,kBAHwBpP,QAAQQ,EAAO9F,OAAO2U,SAASC,KAAKC,aAAahU,QAIzEiU,kBAAmBhP,EAAO9F,MAC1B+U,gBAAgBC,EAAAA,EAAAA,KAA+BlP,KAPjCD,CA5QMoP,EACxBlP,QAAO+O,oBAAmBC,gBAAeL,wBAEzC,MAAM,uBACJQ,EAAsB,sBAAEC,EAAqB,uBAAEC,EAAsB,4BAAEC,EAA2B,YAAEhP,IAClGE,EAAAA,EAAAA,OAEE,QAAE4G,EAAO,QAAEwH,EAAO,cAAEW,GAAkBR,GAAqB,CAAC,EAE5D/V,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,EAAAA,MAEN6H,EAAgBC,IAAmBF,EAAAA,EAAAA,KAAS,IAC5CyO,EAAkBC,IAAuB1O,EAAAA,EAAAA,IAAS,IAClD2O,EAAoBC,EAAgBC,IAAkBrW,EAAAA,EAAAA,KAEvDiE,EAAS+B,QAAQS,GAAS+O,IAE1B,mBACJc,EAAkB,eAAEC,EAAc,WAAEC,EAAU,MAAEC,GAC9ChQ,GAAS,CAAC,EAERiQ,EAAkBJ,GAAsBC,GAAkBC,GAAcC,EAExEE,EAA2BL,GAAoBM,MAAMC,SAASC,aAC/DR,GAAoBS,kBAAkBC,qBAAqB1T,QAC3DiT,GAAgBjT,QAChBkT,GAAYS,KAAKvW,OACjB+V,GAAOS,cACN3X,EAAcoX,EAA2BA,GAA4B9I,GAASvK,QAAU,QAAKjD,EAC7F8W,IAAkB/W,EAAAA,EAAAA,IAAQ,KAC9B,MAAMoG,GAASyF,EAAAA,EAAAA,MAEf,GAAIsK,EAAgB,CAClB,MAAMa,GAAUC,EAAAA,EAAAA,KAAW7Q,EAAQ+P,EAAee,QAClD,IAAKF,EAAS,OACd,OAAO3X,EAAQ,4BAA4B8X,EAAAA,EAAAA,IAAa9X,EAAS2X,GACnE,CAEA,GAAId,EAAoB,CACtB,MAAMkB,EAAMlB,EAAmBM,MAAMa,OAAQ7Q,EAAAA,EAAAA,KAAWJ,EAAQ8P,EAAmBM,KAAKa,YAASpX,EACjG,IAAKmX,EAAK,OACV,OAAO/X,EAAQ,mBAAmBiY,EAAAA,EAAAA,IAAgBF,GACpD,CAEA,GAAIhB,EAAY,CACd,MAAMxM,GAAOpD,EAAAA,EAAAA,KAAWJ,EAAQgQ,EAAW7H,QAC3C,IAAK3E,EAAM,OACX,OAAOvK,EAAQ,uBAAuBqL,EAAAA,EAAAA,IAAanL,EAAMqK,GAC3D,CAEA,MA/DyB,SA+DrByM,GAAOkB,QACFlY,EAAQ,uBAGbgX,GAAOkB,UAAYC,EAAAA,IACdjY,EAAK,uCAAmCU,EAAW,CACxDwX,cAAc,EACdvH,WAAW,SAHf,GAQC,CAACiG,EAAgBD,EAAoBE,EAAYC,GAAOkB,QAAShY,EAAMF,IAEpEqY,GAAkB9R,QAAQqP,GAASC,KAAKC,aAAahU,SAAWmV,GAChEqB,IAAwBrB,EAExBsB,IAAuC5X,EAAAA,EAAAA,IAAQ,IAC5C8U,GAAsBtT,IAAKY,IAAG,CACnCwC,MAAOrF,EAAK6C,MAEb,CAAC7C,KAEJM,EAAAA,EAAAA,IAAU,KACHgE,IACHyD,GAAgB,GAChBwO,EAAoB,GACpBG,MAED,CAACpS,KAEJhE,EAAAA,EAAAA,IAAU,KACJyW,EACFN,IAIFC,KACC,CAACK,IAEJ,MAAMuB,IAAU7X,EAAAA,EAAAA,IAAQ,KACtB,IAAK6D,EAAQ,OAEb,MACM2E,EADOnJ,EAAQ,qCACFoJ,MAAM,UACzB,MAAO,CACLD,EAAM,GACNpH,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKtJ,EAAQ,gBAAiBuJ,KAAMvJ,EAAQ,4CACtDmJ,EAAM,KAEP,CAAC3E,EAAQxE,IAQNyY,IAA6BtQ,EAAAA,EAAAA,GAAgB,KACjDiO,EAAsB,CACpB3S,KAAM+R,GAAkBgB,OAItBkC,IAA8BvQ,EAAAA,EAAAA,GAAgB,KAClDkO,MAGIsC,IAAqCxQ,EAAAA,EAAAA,GAAgB,KACzDmO,EAA4B,CAAC,KAGzBsC,IAAiBzQ,EAAAA,EAAAA,GAAiBnH,IACtCsG,EAAY,CACV7D,KAAM,QACNxC,MAAOD,EAAOC,MACd6C,SAAU9C,EAAO8C,SACjBD,OAAQ7C,EAAO6C,WAInB,OACE9B,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJzF,WAAWuC,EAAAA,EAAAA,GAAeC,EAAO6N,MAAO4F,IAAsBe,GAAsBxU,EAAO2W,SAC3FrU,OAAQA,EACRQ,QAASmR,GAETpU,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOwH,KAAM,iBAAkBC,SAnClE,SAAsBC,GACpB,MAAM,UAAEC,GAAcD,EAAEE,cAExB7B,EAAgB4B,GAAa,IAC/B,GAgCM9H,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACL+F,OAAK,EACLrG,KAAK,UACLhE,UAAWwC,EAAO8H,YAClBpD,MAAM,cAEN7G,QAASA,IAAMoW,IACflM,UAAW/J,EAAK,UAEhB6B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,WAEbvC,EAAAA,GAAAC,cAACmM,EAAY,CAACC,QAASA,EAAS1O,UAAWwC,EAAO4W,eAClD/W,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOyC,OAAQqD,GAAkB9F,EAAOgI,eACrEnI,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,EAAOiI,gBACnBnK,EAAQ,mBAGb+B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOoJ,SACrBvJ,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO4I,KAAMJ,IAAKK,EAAUH,IAAI,GAAGC,WAAW,IAC9D9I,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOuI,eAAgBC,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,IAC/E9I,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,EAAO8I,YACnBlL,EAAcE,EAAQ,mBAAoBkX,GAA4BlX,EAAQ,kBAEjF+B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOkJ,cACpBrH,EAAAA,EAAAA,GACC2T,IAAmB1X,EAAQ,qBAC3B,CAAC,kBAAmB,WAGvBgW,IAAkBU,GACjB3U,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLtE,UAAWwC,EAAO6W,WAClBhZ,QAAS4W,GAER3W,EAAQ,2BAGZgW,IAAkBU,GAAsB4B,IACvCvW,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLE,QAAM,EACNC,mBAAiB,EACjBzE,UAAWwC,EAAO6W,WAClBhZ,QAAS4Y,IAER3Y,EAAQ,sBAGZ0W,GAAsBX,GAAmBiD,cACxCjX,EAAAA,GAAAC,cAACxC,EAAAA,EAAmB,CAClBM,YAAaA,EACbH,QAASoW,EAAkBiD,aAC3BjZ,QAAS6Y,MAIdlC,GACC3U,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO+W,KACpBT,IAGJH,IAAmB9R,QAAQgQ,GAAe2C,KAAKpX,SAC9CC,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOoJ,SACrBvJ,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,EAAOiX,cAAenZ,EAAQ,wBAC7C+B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOqU,eACpBA,GAAe2C,KAAK/W,IAAK6M,GACxBjN,EAAAA,GAAAC,cAAC+M,EAAqB,CACpBhM,IAAKiM,EAAahG,GAClBgG,aAAcA,KAGjBuH,GAAe6C,YACdrX,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLE,QAAM,EACN2C,SAAU0P,EAAc8C,UACxB3V,KAAK,UACLS,mBAAiB,EACjBzE,UAAWwC,EAAOoX,SAClBvZ,QAAS2Y,IAET3W,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,OAAO5E,UAAWwC,EAAOqX,eACnCvZ,EAAQ,gCAMlBqY,IACCtW,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOsX,WACrBzX,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOoJ,SACrBvJ,EAAAA,GAAAC,cAACyX,EAAAA,GAAU,CACTnV,KAAMpE,EAAKkD,MAAQ,oBAAsB,iBACzCsW,UAAWlD,EACXmD,YAAalE,GAAsB3T,OACnC8X,qBAAmB,EACnBla,UAAWwC,EAAO2X,YAElB9X,EAAAA,GAAAC,cAAC8X,EAAAA,EAAc,CACbC,WAAYtB,GACZuB,MAAOpE,IAAUJ,GAAkBgB,KAAoBV,aACvDmE,uBAAwB,IAAI/X,EAAOwH,OACnCwQ,aAAc,IAAIxE,KAClBhW,UAAWwC,EAAO4T,aAClBqE,YAAU,EACVC,sBAAoB,GAEnBxE,IAAUJ,GAAkBgB,KAAoBV,aAAa3T,IAAKuO,GACjE3O,EAAAA,GAAAC,cAAC0R,GAAoB,CACnB3Q,IAAK,GAAG2N,EAAY1H,MAAM0H,EAAY4D,WACtC5D,YAAaA,EACbhR,UAAWgW,SAMrB3T,EAAAA,GAAAC,cAACqY,EAAAA,EAAO,CACN3a,UAAWwC,EAAOoY,KAClBC,aAAcrY,EAAOsY,IACrBC,UAAWjE,EACX8D,KAAM/B,GACNmC,YAAajE,U,oDC5Q3B,MAwKA,IAAelX,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAM+Q,EAAM/Q,GAAOmQ,MAAMa,OAAQ7Q,EAAAA,EAAAA,KAAWJ,EAAQC,EAAMmQ,KAAKa,YAASpX,EAElE+Z,EAAoD,YAA9B3T,GAAO4T,cAAcnX,KAAqBuD,EAAM4T,kBAAeha,EACrFia,EAAUF,GACZG,EAAAA,EAAAA,KAAkB/T,EAAQ4T,EAAoB9C,OAAQ8C,EAAoBI,gBAAana,EACrFoa,EAAOL,GAAsB/C,EAAAA,EAAAA,KAAW7Q,EAAQ4T,EAAoB9C,aAAUjX,EAC9Eqa,EAAcJ,GAASpR,QAAQyR,UAErC,MAAO,CACLnD,MACAhC,kBAAmBhP,EAAO9F,MAC1Bka,iBAAkBF,EAAcJ,OAAUja,EAC1Cwa,cAAeH,EAAcD,OAAOpa,IAdtBkG,CAxKKuU,EACvBrU,QACA+Q,MACAhC,oBACAoF,mBACAC,oBAEA,MAAM,uBAAEE,EAAsB,sBAAEhN,EAAqB,oBAAEiN,IAAwB/T,EAAAA,EAAAA,OACxE6R,EAAWmC,EAAaC,IAAiBlb,EAAAA,EAAAA,KAC1CiE,EAAS+B,QAAQS,GAAO4T,cAAgB7E,GAExC2F,GAAYC,EAAAA,GAAAA,GAAY3U,GACxBW,EAAiBX,GAAS0U,GAE1B,KAAEvE,EAAI,iBAAEG,GAAqB3P,GAAkB,CAAC,EAChD9D,EAASsT,GAAMC,SAASC,aAAeC,GAAkBC,qBAAqB1T,OAC9E+X,EAAoBrV,QAAQ4Q,GAAMC,QAAQjG,oBAC1C0K,GAAmBvE,GAAkBC,oBAErCjI,EAAQ6H,GAAM7H,MAEdtP,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,EAAAA,MAEbK,EAAAA,EAAAA,IAAU,KACHgE,GACHiX,KAED,CAACjX,IAEJ,MAAMsX,GAAkBnb,EAAAA,EAAAA,IAAQ,KAC9B,IAAKgH,GAAgBiT,aACnB,MAAO,GAGT,MAAMmB,GAAU9D,EAAAA,EAAAA,IAAgBF,GAC1BiE,EAAYhc,EAAQ,kCAAmC6D,GAE7D,GAAIsX,EAAkB,CACpB,MAAMjK,EAAgBiK,EAAiB1R,QAAQyR,UAAWhK,cACpD+K,EAAe/K,EAAcgL,MAAOjK,IAAWA,EAAMkK,UACrDC,EAAelL,EAAcgL,MAAOjK,KAAYA,EAAMkK,UAEtDE,EAA2Brc,EAAfic,EAAuB,wBACrCG,EAAuB,wBACb,QAFoDlL,EAAcpP,QAI1Ewa,GAAexE,EAAAA,EAAAA,IAAa9X,EAASob,GAC3C,OAAOpb,EAAQ,4BAA6B,CAACqc,EAAWC,EAAcN,GACxE,CAEA,OAAI1E,EACKpX,EAAK,qBAAsB,CAChC8a,KAAM1D,EAAiB/R,MACvB1B,UACC,CACDgN,WAAW,EACXuH,cAAc,EACdtH,YAAajN,IAIb+X,EACK1b,EAAK,wBAAyB,CACnCoE,KAAM6S,EAAK5R,MACX1B,SACAkU,IAAKgE,GACJ,CACDjL,YAAajN,IAIV7D,EAAQ,sBAAuB,CAACmX,EAAM5R,MAAOwW,EAASC,KAC5D,CACDrU,GAAgBiT,aAAc7C,EAAK/X,EAAS6D,EAAQsX,EAAkB7D,EAAkBsE,EAAmBzE,EAC3GiE,EAAelb,IAGXqc,GAAiB5b,EAAAA,EAAAA,IAAQ,KAC7B,GAAI2W,EACF,OAAOpX,EAAK,qBAAsB,CAChCsc,KAAMza,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKpJ,EAAK,0BAA2BqJ,KAAMrJ,EAAK,iCAC/D,CACD2Q,WAAW,KAKd,CAACyG,EAAkBpX,IAEhBuc,GAAmB9b,EAAAA,EAAAA,IAAQ,KAC/B,GAAK2W,EAIL,OAAOoF,EAAAA,EAAAA,IAAwBpF,IAC9B,CAACA,IAEEqF,GAAgBxU,EAAAA,EAAAA,GAAgB,KACpC,MAAMiG,EAAU2H,GAAmB3H,aACpBxN,IAAXiD,QAAoCjD,IAAZwN,IAIxBvK,EAASuK,EAAQvK,OACnByK,EAAsB,CACpBuI,mBAAoB7P,KAKxBuU,EAAoB,CAAC,GACrBC,QAGF,OACEzZ,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJD,iBAAkBhD,EAAO0a,eACzBpY,OAAQA,EACRY,wBAAsB,EACtBqB,QAAM,EACNzB,QAASsW,GAETvZ,EAAAA,GAAAC,cAACmM,EAAY,CAACC,QAAS2H,GAAmB3H,QAAS1O,UAAWwC,EAAO4W,eACrE/W,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAO2a,cAAe1Z,IAAKnD,EAAQoD,MAAQ,MAAQ,OAChE+X,EACCpZ,EAAAA,GAAAC,cAAC2Q,GAAc,CAACV,MAAOkJ,EAAiB1R,QAAQyR,UAAWhK,gBACzDuL,EACF1a,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAAC5K,UAAWwC,EAAO4a,aAAcvS,KAAMkS,EAAkB/Y,KAAK,UACrE3B,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAACE,KAAK,OAAOC,KAAK,WAAWhE,UAAWwC,EAAO6a,cAG1Dhb,EAAAA,GAAAC,cAACgb,GAAAA,EAAS,CACRzS,KAAO+E,OAAc1O,EAANmX,EACfkF,eAAgB3N,EAChB4N,WAAW,QACXC,UAAU,OACVC,WAAWna,EAAAA,EAAAA,IAAcY,GACzBwZ,eAAgBnb,EAAOob,YACvB5d,UAAWwC,EAAO4a,eAGtB/a,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOqb,uBAAwB7S,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,KAEzF9I,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,EAAO8I,YACAhL,EAAnByc,EAA2B,sBAAiC,8BAE9DZ,GAAmB9Z,EAAAA,GAAAC,cAACwb,GAAAA,EAAQ,CAAC9d,UAAWwC,EAAOub,QAASvO,OAAQiI,GAAMa,QACvEjW,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOkJ,cACpBrH,EAAAA,EAAAA,GAAW+X,EAAiB,CAAC,kBAAmB,WAEnD/Z,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACtE,UAAWwC,EAAOwb,cAAeha,KAAK,UAAU3D,QAAS4c,EAAetD,UAAWA,GACxFnZ,EAAK0b,EAAoB,+BAAiC,WAAY,CACrE/X,QAAQ8Z,EAAAA,GAAAA,GAAkBzd,EAAM2D,EAAS,CAAE+Z,QAAQ,KAClD,CACD/M,WAAW,KAGd0L,GACCxa,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAO2b,WAAY3b,EAAOuM,cACtD8N,O,oDChNX,MC8EA,IAAehd,EAAAA,EAAAA,IAnDUue,EACvBC,iBACAC,oBACAC,mBACA1Y,QACAC,WACA9F,gBAEA,MAAMga,EC9BD,SAAgCwE,GACrC,MAAMxE,GAAYhS,EAAAA,EAAAA,IAAO,GACzB,IAAIyW,GAAY,EAOhB,OAJAxd,EAAAA,EAAAA,IAAQ,KAAQ+Y,EAAUrR,SAAW,EAAG8V,GAAY,GAASD,GAItDxE,EAAUrR,OACnB,CDoBoB+V,CAAuB,CAACL,EAAgBC,EAAmBC,IACvEI,EAAgBL,GAAmBM,UAEnCC,GAAwB5d,EAAAA,EAAAA,IAAQ,KACpC,MAAM6d,EAAiB,CAACR,EAAkBnJ,YAAamJ,EAAkBlJ,WACnE2J,EAAeT,EAAkBS,aAEvC,OACE1c,EAAAA,GAAAC,cAAC+S,EAAAA,EAAuB,CACtBrV,UD5C0C,WC6C1CkV,iBAAkB4J,EAClBC,aAAcA,EACdC,YAAaT,EAAiB/I,WAGjC,CAAC8I,EAAmBC,IAEvB,OACElc,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GDrDG,WCqDyBvC,IAC1CqC,EAAAA,GAAAC,cAACyX,EAAAA,GAAU,CACT/Z,UDvDuF,WCwDvFif,eDxDoH,WCyDpHjF,UAAWA,EACXkF,UAAW,EACXta,KAAK,sBAEJia,EACDxc,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBvV,UD/D6D,WCgE7DwV,QAAS6I,EAAe7I,QACxBxR,KAxCW,OA2Cd6B,GAASxD,EAAAA,GAAAC,cAAA,MAAItC,UDpE2H,YCoEjG6F,GACvCC,GACCzD,EAAAA,GAAAC,cAAA,KAAGtC,UDtE0J,WCsE9Hmf,OAAOC,EAAAA,GAAAA,GAAWT,GAAiB,UAAUA,MACzE7Y,MEvEX,GAAwF,WAAxF,GAAoI,WAApI,GAAgL,WC4ShL,IAAejG,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAMkI,EAA4C,SAAnClI,GAAO0J,aAAanG,MAAM9G,MAAmBuD,EAAM0J,YAAYnG,KAAKvB,GAC7EuB,EAAO2E,GAASM,EAAAA,EAAAA,KAAWzI,EAAQmI,QAAUtO,EAC7Cme,EAAwBhY,EAAOiY,WAAWC,mCAE1CC,EAAYlY,GAAO0J,YAAYzP,MAC/Bke,EAAmBnY,GAAO0J,YAAYa,SAAU6N,EAAAA,EAAAA,KAA0BrY,EAAQmY,GAAWrb,QAEnG,MAAO,CACL0G,OACA8U,uBAAuBC,EAAAA,EAAAA,KAA4BvY,GACnDwY,WAAYJ,EACZJ,0BAbcjY,CAnPqC0Y,EACvDxY,QAAOuD,OAAM8U,wBAAuBE,aAAYR,4BAEhD,MAAM,iBAAEU,EAAgB,gBAAEC,EAAe,2BAAEC,IAA+BnY,EAAAA,EAAAA,MAEpEtH,GAAOC,EAAAA,EAAAA,KACPH,GAAUC,EAAAA,EAAAA,MACV,YAAEyQ,GAAgB1J,GAAS,CAAC,EAE5B4Y,GAAkBzX,EAAAA,EAAAA,GAAgB,KACtC,MAAM8J,EAAQvB,GAAaQ,cACtBe,GAELyN,EAAgB,CACdG,OAAQC,GAAAA,GAAkBC,iBAC1BC,gBAAiB/N,EAAMgO,QAASjN,GAASkN,OAAOC,OAAOnN,QAIrDoN,GAAgBzf,EAAAA,EAAAA,IAAQ,KAC5B,IAAK+P,EACH,OAGF,MAAM,eACJW,EAAc,MAAE/B,EAAK,MAAErO,EAAK,cAAEgQ,EAAa,SAAEO,GAC3Cd,EAEE8G,EAAO9G,GAAac,SACpBuC,EAA8B,mBAAfyD,GAAM/T,KACrByR,EAAUxE,GAAac,UAAWyC,EAAAA,EAAAA,IAAmBvD,EAAYc,UAAY+N,EAE7Ec,EAAiBtM,GAAeY,EAAAA,EAAAA,IAAkB6C,QAAQ5W,EAE1D8Q,EAAchB,EAAYnG,MAAkC,SAA1BmG,EAAYnG,KAAK9G,OAClDkO,EAAAA,EAAAA,IAAgCjB,EAAYnG,YAAU3J,EAEvDsO,EAAoC,SAA3BwB,EAAYnG,MAAM9G,KAAkBiN,EAAYnG,KAAKvB,QAAKpI,EACnE0f,EAAS5P,EAAYnG,MAAQvK,EA+NvC,SAA8BuK,GAC5B,OAAQA,EAAK9G,MACX,IAAK,WACH,MAAO,WACT,IAAK,aACH,MAAO,aACT,IAAK,WACH,MAAO,WACT,IAAK,aACH,MAAO,sBACT,IAAK,MACH,MAAO,sBACT,IAAK,MACH,MAAO,kDACT,QACE,MAAO,sCAEb,CAhP+C8c,CAAqB7P,EAAYnG,OAEtEhF,EAAQkL,EAAoBzQ,EAASE,EAAMwQ,GAE3C8P,EAAcjW,GAAQmG,EAAYqK,YAAc9J,GAClDwP,EAAAA,EAAAA,IAAelW,OAAM3J,EAAW8P,EAAYqK,gBAAana,EACvD8f,EAAsBnW,GAAQ8G,IAAkBoP,EAAAA,EAAAA,IAAelW,OAAM3J,EAAWyQ,GAEhFY,EAAQvB,EAAYQ,cAEpByP,EAAc1O,GAAOnQ,QAAU,EAC/Bma,EAAehK,GAAOiK,MAAO0E,IAAOA,EAAE1O,OACtCkK,EAAenK,GAAOiK,MAAO0E,IAAOA,EAAEtR,OAEtC+M,EAA2Brc,EAAfic,EAAuB,wBACrCG,EAAuB,wBACb,QAFoDuE,GAI5DvV,EAAcsF,EAAYtF,cAC1B6F,GAAoC,mBAAnBO,GAAU/N,KAA4B+N,EAASjM,WAAQ3E,KACxEqR,EAAQoK,OAAYzb,GAEpBigB,GAAuB5O,IAAUiD,EACjCf,EAAc7E,OAA+B1O,EAAtB2J,GAAQmH,EAE/BoP,EAAmB/M,GACvBhS,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,GDzH2E,aC0HxGH,EAAAA,GAAAC,cAAC8b,GAAgB,CACfE,kBAAmBqC,EAAgB3L,SACnCuJ,iBAAkBoC,EAAgBU,QAClChD,eAAgBsC,EAAgBW,MAChCzb,MAAOiS,EAAKjS,MACZC,SAAUtF,EAAK,sBAAuB,CAAE+gB,OAAQzJ,EAAKyJ,YAKrDC,EACJnf,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,IACb+P,GACClQ,EAAAA,GAAAC,cAAC2Q,GAAc,CACbjT,WAAWuC,EAAAA,EAAAA,GDxIyT,WCwIrR,6BAC/CgQ,MAAOA,EACPlS,QAAS6f,KAGX3N,GAASiD,GACTnT,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBlS,IAAK2N,EAAY1H,GACjBkM,QAASA,EACTC,KAAMkK,EACN8B,QAAM,IAGTN,GACC9e,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAACC,KAAM4J,EAAYhE,SAAUb,EAAO5L,KAAK,WAEhDwR,GACAnT,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GD1JyQ,YC2JpRyI,IAAKC,EACLC,IAAI,GACJC,WAAW,IAGdtF,GAASxD,EAAAA,GAAAC,cAAA,MAAItC,UDhKiI,YCgKvG6F,GACxCxD,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IAAqBkJ,GACnCrJ,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IACZH,EAAAA,GAAAC,cAAA,QACEtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAeuP,EAAsBxQ,GDpKP,WAAtB,cCsKjCsU,EAAAA,EAAAA,IAA6BrV,EAAMe,IAEtCc,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAACE,KAAK,OAAOC,KAAK,YAE5BgN,EAAYC,cAAgBD,EAAYK,kBAAoBgO,GAE3Dhd,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IACXhC,EACC,oCACA,CAAEkhB,SAASpQ,EAAAA,EAAAA,IAAc+N,EAAwB,KACjD,CACElO,WAAW,EACXuH,cAAc,MAQpBiJ,EAAuB,GAgB7B,IAAIC,EAdA5Q,IAAgBA,EAAYC,cAC9B0Q,EAAU5f,KAAK,CACbzB,EAAQ,wCACRA,EAAQ,4CAIRiR,GACFoQ,EAAU5f,KAAK,CACbzB,EAAQ,kBACRA,EAAQ,2BAMVshB,EADErQ,EACUjR,EAAQ,8BACXyR,EAAsBxQ,IAAUyP,EAAYY,SACzCtR,EAAQ,wBACX0Q,EAAYK,mBAAqBL,EAAYC,aAC1C3Q,EAAQ,0CAERA,EADHkP,EACW,wBAEA,yBAGtBmS,EAAU5f,KAAK,CACb6f,EACApS,EAAS,CAAE2I,OAAQ3I,GAAWoR,GAAU,KAGtC5P,EAAYK,kBAAoBL,EAAYC,cAC9C0Q,EAAU5f,KAAK,CACbvB,EAAK,gCACLyd,EAAAA,GAAAA,GAAkBzd,EAChBwQ,EAAYzP,MAAM4C,SAAW,IAAM6M,EAAYK,kBAAoB,KACnE,CAAE6M,QAAQ,EAAOle,UDjOoN,WCiOxL6hB,mBDjOkK,eCqOjNf,GACFa,EAAU5f,KAAK,CAACzB,EAAQ,mCAAoC+B,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKkX,EAAajX,KAAMiX,MAG5FE,IACFW,EAAU5f,KAAK,CAACzB,EAAQ,eAAgB+B,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKoX,EAAqBnX,KAAMvJ,EAAQ,gBAC1FqhB,EAAU5f,KAAK,CAACzB,EAAQ,QAASA,EAAQ,QAAS0Q,EAAYzP,MAAO,QAGnEyP,EAAY1H,IACdqY,EAAU5f,KAAK,CACbzB,EAAQ,wBAEN+B,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAA,OACEtC,UDpPmL,WCqPnLK,QAASA,MACPyhB,EAAAA,GAAAA,IAAoB9Q,EAAY1H,IAChCyW,EAAiB,CACf5E,QAAS7a,EAAQ,gCAIpB0Q,EAAY1H,IAEfjH,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAAC1E,UD9PoS,WC8PxQ4E,KAAK,YAM/C+c,EAAU5f,KAAK,CACbzB,EAAQ,2BACRoV,EAAAA,EAAAA,IAA0C,IAAnB1E,EAAYkD,KAAa5T,EAAQmL,MAAM,KAGhE,MACMsW,EADazhB,EAAQ,6BACQoJ,MAAM,UAUzC,MAAO,CACLzE,OAAQoP,EAAe+M,EAAmBI,EAC1CG,YACAzc,OAVA7C,EAAAA,GAAAC,cAAA,QAAMtC,UD7QuP,YC8Q1P+hB,EAAgB,GACjB1f,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKtJ,EAAQ,gBAAiBuJ,KAAMvJ,EAAQ,4CACrDyhB,EAAgB,MASpB,CAAC/Q,EAAa1Q,EAASE,EAAMqK,EAAM8U,EAAuBE,EAAYR,IAGnE2C,GADgB/F,EAAAA,GAAAA,GAAYyE,IACUA,EAE5C,OACEre,EAAAA,GAAAC,cAAC2f,GAAAA,EAAc,CACbnd,OAAQ+B,QAAQmK,GAChBhR,UDjSkB,WCkSlBoF,YAA6C,mBAAhC4L,GAAac,UAAU/N,KACpCkB,OAAQ+c,GAAoB/c,OAC5B0c,UAAWK,GAAoBL,UAC/Bzc,OAAQ8c,GAAoB9c,OAC5BC,WAAY7E,EAAQ,MACpBgF,QAAS2a,OCvSf,GAA4O,WCiP5O,IAAepgB,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAMkI,EAASlI,GAAOgI,aAAaE,OAGnC,MAAO,CACL3E,KAHW2E,GAASM,EAAAA,EAAAA,KAAWzI,EAAQmI,QAAUtO,IAHnCkG,CA1MsC8a,EACxD5a,QAAOuD,WAEP,MAAM,4BACJsX,EAA2B,yBAC3BC,EAAwB,wBACxBC,EAAuB,gBACvBC,EAAe,eACfC,EAAc,YACd3a,IACEE,EAAAA,EAAAA,MACExH,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,EAAAA,MACP,aAAE6O,GAAiBhI,GAAS,CAAC,EAE7Bkb,GAAcvhB,EAAAA,EAAAA,IAAQ,KAC1B,IAAKqO,EACH,MAAO,SAGT,GAAIA,EAAamT,aACf,MAAO,YAGT,MAAM1iB,EAAWuP,EAAaI,MAAQO,KAAKC,MAAQ,IACnD,GAAInQ,IAAauP,EAAaK,YAC5B,MAAO,SAGT,GAAI5P,GAAYuP,EAAaK,YAC3B,MAAO,QAGT,MAAM+S,EAAapT,EAAaqT,gBAAkBrT,EAAasT,YAC/D,OAAK7iB,GAAY2iB,EACR,UAGF,MACN,CAACpT,IAEEuT,GAAoBpa,EAAAA,EAAAA,GAAgB,KACxC,GAAK6G,EAAL,CAIA,OAAQkT,GACN,IAAK,YACHJ,EAAyB,CAAE9Y,GAAIgG,EAAahG,KAC5C,MAEF,IAAK,UACCgG,EAAaqT,eACfL,EAAgB,CAAEQ,KAAMxT,EAAaqT,iBAC5BrT,EAAasT,aACtBhb,EAAY,CACV7D,KAAM,OACNgf,KAAMzT,EAAasT,cAGvBL,IACA,MAEF,IAAK,QACHF,EAAwB,CAAE/Y,GAAIgG,EAAahG,GAAIqG,aAAa,IAC5D,MAEF,IAAK,SACH0S,EAAwB,CAAE/Y,GAAIgG,EAAahG,GAAIqG,aAAa,IAIhEwS,GA5BA,IA+BIzB,GAAgBzf,EAAAA,EAAAA,IAAQ,KAC5B,IAAKqO,IAAiBzE,EACpB,OAGF,MAAM,QACJ4E,EAAO,MAAEC,EAAK,YAAEC,EAAW,aAAE8S,EAAY,MAAE7S,EAAK,MAAE/J,EAAK,gBAAEmd,GACvD1T,EAEE4M,GAAoB+G,EAAAA,EAAAA,IAAcpY,GAElC5F,EACJ5C,EAAAA,GAAAC,cAAA,OAAKtC,UD9HiC,YC+HpCqC,EAAAA,GAAAC,cAAA,OAAKtC,UD/HkJ,YCgIrJqC,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAACC,KAAO+E,OAAe1O,EAAP2J,EAAkB4F,SAAUb,EAAO5L,KAAK,UAC/D3B,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UDjIyK,WCiIrI+D,KAAK,OAAOC,KAAK,cAEjE3B,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GDpI+G,YCqI1HyI,IAAKC,EACLC,IAAI,GACJC,WAAW,IAEb9I,EAAAA,GAAAC,cAAA,MAAItC,UDzImD,YCyIzB6F,GAASvF,EAAQ,2BAC/C+B,EAAAA,GAAAC,cAAA,KAAGtC,UD1IwE,YC2IxEQ,EAAK,gBAAiB,CACrB2D,OAAQsL,EAAQtL,QACf,CACDgN,WAAW,EACX+R,mBAAoB,CAClB,CAACC,EAAAA,KAAyB9gB,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CAAC7D,UDhJmK,WCgJrIgE,KAAK,WAAWD,KAAK,cAO3F4d,EAAuB,GAE7BA,EAAU5f,KAAK,CACbzB,EAAQ4b,EAAoB,uBAAyB,4BACrD,CAAE/D,OAAQtN,EAAKvB,MAGbzD,GACF8b,EAAU5f,KAAK,CACbzB,EAAQ,+BACRuF,IAIJ,MAAMmK,EAAaN,EAAQO,KAAKC,MAAQ,IACxCyR,EAAU5f,KAAK,CACbzB,EAAQ0P,EAAa,gCACjBL,EAAc,gCAAkC,iCACpD+F,EAAAA,EAAAA,IAA+B,IAARhG,EAAcpP,EAAQmL,MAAM,KAGrD,MAAM2X,EAAY5iB,EAAK,sBAAuB,CAC5Csc,KAAMza,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKpJ,EAAK,2BAA4BqJ,KAAMrJ,EAAK,kCAChE,CACD2Q,WAAW,IA4Cb,MAAO,CACLlM,SACA0c,YACAzc,OA3CA7C,EAAAA,GAAAC,cAAA,QAAMtC,UDnL2F,YCoL/FqC,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IAAmB4gB,GAChCzT,GACCtN,EAAAA,GAAAC,cAAA,KAAGtC,UDtLmP,YCuLnPM,EAAQ0iB,EAAkB,oCAAsC,mCAGpEP,GACCpgB,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IACXlC,EAAQ,kCAAkCoV,EAAAA,EAAAA,IAA+B,IAARhG,EAAcpP,EAAQmL,MAAM,MAGhGkE,IAAgB8S,GAAgBzS,GAChC3N,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IACXlC,EAAQ,gCAAgCoV,EAAAA,EAAAA,IAA+B,IAARhG,EAAcpP,EAAQmL,MAAM,MAG9FkE,IAAgB8S,IAAiBzS,GACjC3N,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,IACXlC,EAAQ,+BAA+BoV,EAAAA,EAAAA,IAA+B,IAARhG,EAAcpP,EAAQmL,MAAM,KAG9E,WAAhB+W,GACCngB,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLN,KAAK,UACLkD,MAAuB,WAAhBsb,EAA2B,SAAW,UAC7Che,OAAwB,WAAhBge,EACRniB,QAASwiB,GAERviB,EACiB,WAAhBkiB,EAA2B,0BACP,cAAhBA,EAA8B,6BACZ,YAAhBA,EAA4B,yBACV,UAAhBA,EAA0B,yBAA2B,UAYtE,CAACA,EAAahiB,EAAMF,EAASuK,EAAMyE,IAGhC0S,GADgB/F,EAAAA,GAAAA,GAAYyE,IACUA,EAE5C,OACEre,EAAAA,GAAAC,cAAC2f,GAAAA,EAAc,CACbnd,OAAQ+B,QAAQyI,GAChBtP,UDxOkB,WCyOlBiF,OAAQ+c,GAAoB/c,OAC5B0c,UAAWK,GAAoBL,UAC/Bzc,OAAQ8c,GAAoB9c,OAC5BI,QAAS6c,O,wIC5Of,UAAgB,KAAO,WAAW,OAAS,WAAW,SAAW,WAAW,SAAW,WAAW,qBAAuB,WAAW,cAAgB,WAAW,kBAAoB,WAAW,sBAAwB,YCwBhNkB,GAAiB,CAAC,GAAI,IAAK,IAAK,IAAM,IAAM,IAAM,KA6FxD,SAASC,GAAYC,EAAkBC,GACrC,MAAMC,EAAaF,EAAOG,UAAWC,GAAUH,GAASG,GAClDC,EAAYL,EAAOE,EAAa,IAAM,EACtCI,EAAYN,EAAOE,IAAeF,EAAOA,EAAOnhB,OAAS,GAE/D,OAAOqhB,GADWD,EAAQI,IAAcC,EAAYD,EAEtD,CAEA,SAASE,GAASP,EAAkBQ,GAClC,MAAMN,EAAaxhB,KAAK+hB,MAAMD,GACxBH,EAAYL,EAAOE,EAAa,IAAM,EAEtCD,EAAQI,IADIL,EAAOE,IAAeF,EAAOA,EAAOnhB,OAAS,IACxBwhB,IAAcG,EAAWN,GAChE,OAAOxhB,KAAKoI,MAAMmZ,EACpB,CAEA,UAAe3jB,EAAAA,EAAAA,IA3GIokB,EACjBC,WACAC,eACAnkB,YACAokB,eAGA,MAAMC,GAAmBrc,EAAAA,EAAAA,IAAuB,MAE1Cub,GAAStiB,EAAAA,EAAAA,IAAQ,KACrB,MAAMQ,EAAS,GACf,IAAK,IAAI8R,EAAI,EAAGA,EAAI8P,GAAejhB,OAAQmR,IAKzC,GAJI8P,GAAe9P,GAAK2Q,GACtBziB,EAAOM,KAAKshB,GAAe9P,IAGzB8P,GAAe9P,IAAM2Q,EAAU,CACjCziB,EAAOM,KAAKmiB,GACZ,KACF,CAGF,OAAOziB,GACN,CAACyiB,KAEGV,EAAOc,IAAYjc,EAAAA,EAAAA,IAAS,IAEnCkc,EAAAA,GAAAA,GAAc,KACZD,EAAShB,GAAYC,EAAQY,MAG/B,MAAMK,GAA0B/b,EAAAA,EAAAA,GAAgB,KAC9C,MAAMgc,EAAQJ,EAAiB1b,QAC/B,IAAK8b,EAAO,OACZ,MAAMC,EAASD,EAAME,eAErBC,EAAAA,GAAAA,IAAe,KACb,MAAMC,EAAWH,EAAOI,WAAaL,EAAMM,YAAc,EACnDC,EAAWN,EAAOI,WAAaJ,EAAOK,YAAcN,EAAMM,YAAc,GAE9EE,EAAAA,GAAAA,IAAgB,KACdP,EAAOvF,MAAM+F,YAAY,WAAY,GAAGL,OACxCH,EAAOvF,MAAM+F,YAAY,WAAY,GAAGF,cAK9CG,EAAAA,GAAAA,GAAkBd,EAAkBG,GAEpC,MAAMY,GAAe3c,EAAAA,EAAAA,GAAiB4c,IACpC,MAAMC,EAAWC,OAAOF,EAAMjb,cAAcoZ,OAC5Cc,EAASgB,GAETlB,EAASN,GAASP,EAAQ+B,MAG5B,OACEjjB,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO6N,KAAMrQ,GAAYmf,MAAO,eAAeqE,EAAQD,EAAOnhB,QAC3FC,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOgjB,sBACrBnjB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOijB,cAAeC,IAAKrB,GACzChiB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOmjB,mBACrBtjB,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,OAAO5E,UAAWwC,GAAOojB,oBACpCvjB,EAAAA,GAAAC,cAACujB,GAAAA,EAAe,CAAChc,MAAMtG,EAAAA,EAAAA,IAAcugB,GAASP,EAAQC,OAExDnhB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOsjB,sBAAuBhd,MAAM,KAAKC,OAAO,KAAKgd,QAAQ,YAAYC,KAAK,QAC5F3jB,EAAAA,GAAAC,cAAA,YACED,EAAAA,GAAAC,cAAA,kBAAgBgH,GAAG,oBAAoB2c,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAC7D/jB,EAAAA,GAAAC,cAAA,QAAM+jB,OAAO,OAAO,aAAW,YAC/BhkB,EAAAA,GAAAC,cAAA,QAAM+jB,OAAO,OAAO,aAAW,cAGnChkB,EAAAA,GAAAC,cAAA,QAAMgkB,EAAE,uTAAuTN,KAAK,+BAI1U3jB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOuhB,UACrB1hB,EAAAA,GAAAC,cAACikB,GAAAA,EAAQ,CAACC,OAAO,WAAWxmB,UAAWwC,GAAOikB,YAEhDpkB,EAAAA,GAAAC,cAAA,SACEtC,UAAWwC,GAAOkkB,OAClB3iB,KAAK,QACL7B,IAAK,EACLb,IAAKkiB,EAAOnhB,OACZ+hB,aAAcb,GAAYC,EAAQY,GAClCwC,KAAK,MACLvC,SAAUgB,OC/GlB,IAAgB,QAAU,WAAW,MAAQ,WAAW,OAAS,WAAW,YAAc,WAAW,SAAW,WAAW,UAAY,WAAW,aAAe,WAAW,SAAW,WAAW,uBAAyB,WAAW,qBAAuB,WAAW,eAAiB,WAAW,qBAAuB,WAAW,eAAiB,WAAW,yBAA2B,WAAW,mBAAqB,WAAW,UAAY,WAAW,SAAW,WAAW,SAAW,WAAW,IAAM,WAAW,SAAW,WAAW,WAAa,WAAW,QAAU,WAAW,WAAa,YCuEtkBwB,GAA6B,CACjCC,WAAY,gBACZC,sBAAuB,UACvBC,cAAc,EACd7U,SAAU,0BAySZ,IAAerS,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAMgU,EAAOhU,IAAS4Q,EAAAA,EAAAA,KAAW7Q,EAAQC,EAAM6Q,QACzCgD,EAAU7T,IAAS8T,EAAAA,EAAAA,KAAkB/T,EAAQC,EAAM6Q,OAAQ7Q,EAAM+T,WACjE2L,EAAc3f,EAAO9F,OAAOmN,QAC5BuY,EAAY5f,EAAOiY,WAAW4H,uBAnTZ,KAoTlBC,EAAiB9f,EAAO+f,SAASC,oBACjCC,EAA6BhM,GAAMgM,2BACnCrb,EAAgB5E,EAAO4E,cAG7B,MAAO,CACLqP,OACAH,UACA6L,cACAC,YACAE,iBACAG,6BACArb,gBACAsb,aAVkB9f,EAAAA,EAAAA,KAAWJ,EAAQ4E,KATvB7E,CAtSMogB,EACxBlgB,QACAgU,OACAH,UACA8L,YACAD,cACAG,iBACAG,6BACArb,gBACAsb,kBAEA,MAAM,uBAAEE,EAAsB,qBAAEC,EAAoB,wBAAEC,IAA4B7f,EAAAA,EAAAA,OAE3EqK,EAAayV,IAAkBvf,EAAAA,EAAAA,IAtBX,KAuBpBwf,EAAWC,EAAaC,IAAiBlnB,EAAAA,EAAAA,MACzCmnB,EAAuBC,IAA4B5f,EAAAA,EAAAA,KAAS,IAC5D6f,EAAcC,IAAmB9f,EAAAA,EAAAA,IAAS4D,GAE3CkM,EAASmD,GAAMhS,GAEf8e,EAAaF,GAAgBpY,EAAAA,EAAAA,MAAWhD,EAAAA,EAAAA,MAAaob,GAAiBX,EAEtEjnB,GAAUC,EAAAA,EAAAA,MACV,SAAE8nB,IAAaC,EAAAA,GAAAA,MACf9nB,GAAOC,EAAAA,EAAAA,KAEP8nB,GAA+B9f,EAAAA,EAAAA,GAAiByB,IACpD+d,GAA0B/d,EAAEse,OAAOC,WAG/BC,GAAqBjgB,EAAAA,EAAAA,GAAiB+a,IAC1CoE,EAAepE,GACfsE,OAGFhnB,EAAAA,EAAAA,IAAU,KACJqX,IAAWmP,GACbK,EAAwB,CAAExP,YAE3B,CAACA,EAAQmP,IAEZ,MAAMqB,GAAuB1nB,EAAAA,EAAAA,IAAQ,KACnC,MAAMQ,EAAS6lB,GAA4B7kB,IAAKoI,GAASA,EAAKvB,IAC3DiE,OAAQjE,GAAOA,IAAO6O,GAEzB,OADA1W,GAAQmnB,QAAQ3c,GACTxK,GACN,CAAC6lB,EAA4BnP,EAAQlM,IAElC4c,EAAsBF,GAAwBA,EAAqBvmB,OAAS,GAElFtB,EAAAA,EAAAA,IAAU,KACHwG,GACHygB,KAED,CAACzgB,KAEJxG,EAAAA,EAAAA,IAAU,KACR,MAAMgoB,EAAiB3N,GAAS4N,WAAWC,aAAajmB,KAAMkmB,GAAYA,EAAQC,MAClF,GAAIJ,EAKF,OAJAb,EAAyBphB,QAAQiiB,EAAeK,mBAC5CL,EAAetZ,QACjB2Y,EAAgBW,EAAetZ,SAKnCyY,EAAkD,cAAzBd,GAAgBpjB,OAAwB,GACpC,SAAzBojB,GAAgBpjB,MAAmB4kB,GAAsBS,SAASjC,EAAe3X,QACnF2Y,EAAgBhB,EAAe3X,QAIjC2Y,EAAgBlc,IACf,CAACkb,EAAgBhM,GAAS4N,WAAWC,YAAaL,EAAsB1c,IAE3E,MAAMod,GAAa5gB,EAAAA,EAAAA,GAAgB,KAC5BnB,IAELogB,EAAqB,CACnBvP,OAAQ7Q,EAAM6Q,OACdkD,UAAW/T,EAAM+T,UACjBnK,MAAOiB,EACPmX,UAAWtB,EACXxY,OAAQwY,GAAyBE,IAAiBjc,OAAgB/K,EAAYgnB,EAC9EqB,4BAA4B,IAE9B9B,OAGI+B,GAAyB/gB,EAAAA,EAAAA,GAAiB+G,IAC9CyY,GAAyB,GACzBE,EAAgB3Y,KAGZia,GAAiBhhB,EAAAA,EAAAA,GAAiB+G,IACtC,MAAM3E,GAAOiF,EAAAA,EAAAA,MAAWhD,EAAAA,EAAAA,MAAa0C,GAC/Bka,EAAaxB,IAAiB1Y,IAAWwY,EAC/C,GAAKnd,EAEL,OACExI,EAAAA,GAAAC,cAACqnB,GAAAA,EACC,CACAtpB,QAASA,IAAMmpB,EAAuBha,IAEtCnN,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CACL5G,KAAK,QACL6G,KAAMA,IAERxI,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOonB,WACpCvnB,EAAAA,GAAAC,cAACunB,GAAAA,EAAa,CAAC7pB,UAAWwC,GAAOsnB,UAAWjf,KAAMA,EAAMkf,QAAM,EAACC,YAAU,IACzE3nB,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,GAAOynB,eACrBhH,EAAAA,EAAAA,IAAcpY,GAAQrK,EAAK,uBAAyBA,EAAK,iBAG9D6B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CACH1E,UAAWwC,GAAO0nB,SAClBtlB,KAAM8kB,EAAa,QAAU,mBAM/BS,GAAwElpB,EAAAA,EAAAA,IAAQ,IAC7E,EAAGmpB,YAAWtlB,YACnBzC,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACL+lB,QAAShC,EACTrkB,KAAK,UACLkD,MAAM,cACNlH,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO8nB,qBAAsBxlB,EAAS,SAAW,IAC3EzE,QAAS+pB,EACT7f,UAAW/J,EAAK,sBAEhB6B,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CACL5K,UAAWwC,GAAO+nB,uBAClBvmB,KAAK,OACL6G,KAAMmd,EAAwBpB,GAAiBwB,IAEjD/lB,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CACHE,KAAK,OACL5E,UAAWwC,GAAOgoB,kBAIvB,CAACnC,EAAU7nB,EAAM4nB,EAAYJ,IAE1ByC,GAAkBxpB,EAAAA,EAAAA,IAAQ,KAC9B,GAAK4nB,EACL,OACExmB,EAAAA,GAAAC,cAACooB,GAAAA,EAAY,CACX1qB,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOmoB,eAAgB,yBACjDC,gBAAiBpoB,GAAOqoB,qBACxBC,QAASX,EACTY,UAAU,QACVC,WAAS,GAERrC,EAAqBlmB,IAAK6G,GACzBmgB,EAAengB,MAIpB,CAAC6gB,EAAsBxB,EAAsBE,IAE1CG,GAAc/nB,EAAAA,EAAAA,IAAQ,KAC1B,MAAMoG,GAASyF,EAAAA,EAAAA,MACTqJ,EAAMgF,GAAS4N,WAAWC,YAChC,IAAK7S,EACH,OAGF,MAAM1U,EAAwB,GAC9B,IAAIwpB,GAAmB,EACnBC,EAAkB,EA0BtB,GAxBA/U,EAAIvU,QAASqnB,IACX,MAAMpe,EAAOoe,EAAQzZ,QAASM,EAAAA,EAAAA,KAAWzI,EAAQ4hB,EAAQzZ,aAAUtO,EACnE,IAAK2J,IAASoe,EAAQE,cAAgBF,EAAQC,KAAM,OAKpD,GAJID,EAAQC,OACVgC,EAAkBjC,EAAQ/X,OAGxB+X,EAAQC,OAASD,EAAQzZ,SAAW0Y,GAAiBe,EAAQE,cAAgBnB,GAAyB,OAE1G,MAAMmD,EAAmBjD,IAAiBe,EAAQzZ,QAAWwY,GAAyBiB,EAAQE,YAE1FgC,IACFF,GAAmB,GAGrBxpB,EAAOM,KAAK,CACVoC,OAAQ8kB,EAAQ/X,MAChBka,YAAaD,GAAoBtD,EAAY1V,EAAc,EAC3D+W,KAAMD,EAAQC,KACdC,YAAaF,EAAQE,YACrB5hB,KAAMsD,OAILogB,EAAkB,CACrB,MAAMI,GAASvb,EAAAA,EAAAA,KAAWzI,EAAQ6gB,GAClCzmB,EAAOM,KAAK,CACVoC,OAAQ+mB,EACRE,YAAavD,EAAY1V,EAAc,EACvC+W,MAAM,EACN3hB,KAAM8jB,GAEV,CAIA,OAFA5pB,EAAO6pB,KAAK,CAACC,EAAGC,IAAOA,EAAErnB,OAASqnB,EAAEJ,aAAgBG,EAAEpnB,OAASonB,EAAEH,cAE1D3pB,EAAO2R,MAAM,EA3NC,IA4NpB,CAACyU,EAAW1M,GAAS4N,WAAWC,YAAa7W,EAAa+V,EAAcF,IAErEyD,GAAYnQ,IAAQ3P,EAAAA,EAAAA,IAAarL,EAASgb,GAEhD,OACEjZ,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJX,OAAQ+B,QAAQS,GAChBhC,QAASmiB,EACT1gB,QAAM,EACNrB,wBAAsB,EACtBF,iBAAkBhD,GAAOuH,QACzB2hB,oBAAkB,GAElBrpB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOmpB,0BACpBlB,GAEHpoB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOopB,oBACrBvpB,EAAAA,GAAAC,cAACmM,EAAY,CAACC,QAASsY,EAAahnB,UAAWwC,GAAO4W,aAAczK,eAAa,KAGnFtM,EAAAA,GAAAC,cAAC2hB,GAAU,CACTjkB,UAAWwC,GAAOkkB,OAClBvC,aAjPqB,GAkPrBD,SAAU+C,EACV7C,SAAUsE,IAEZrmB,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,GAAOqD,OAAQvF,EAAQ,uBACtC+B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOkJ,cACpBrH,EAAAA,EAAAA,GAAW/D,EAAQ,oBAAqBmrB,IAAY,CAAC,kBAAmB,WAE3EppB,EAAAA,GAAAC,cAAC6D,GAAAA,EAAS,KACP6iB,GAAe3mB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOqpB,UAAWvrB,EAAQ,6BAE3D0oB,GACC3mB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOoG,KACpBogB,EAAYvmB,IAAKwmB,IAChB,MAAM6C,GAAYvoB,EAAAA,EAAAA,IAAc0lB,EAAQ9kB,OAAS8kB,EAAQmC,aACnDvgB,EAAQoe,EAAQE,cAAgBF,EAAQ1hB,MAAS0hB,EAAQC,MAAQlB,EACnEpB,GAAiBqC,EAAQ1hB,KACvBsC,EAAO,iBAAkBgB,EAAOvK,EAAQuK,EAAKqH,UAC/CrH,IAAQc,EAAAA,EAAAA,IAAarL,EAASuK,GAClC,OACExI,EAAAA,GAAAC,cAACgb,GAAAA,EAAS,CACRtd,UAAWwC,GAAOupB,QAClB1oB,IAAK,GAAG4lB,EAAQ1hB,MAAM+B,IAAM,eAAewiB,IAC3CjhB,KAAMA,EACN6S,UAAWoO,EACXrO,UAAU,OACVE,eAAgBnb,GAAOwpB,SACvBniB,KAAMA,OAMfmf,GAAgB3mB,EAAAA,GAAAC,cAAC6D,GAAAA,EAAS,CAACnG,UAAWwC,GAAOypB,YAC9C5pB,EAAAA,GAAAC,cAAC4pB,GAAAA,EAAQ,CACPlsB,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO2pB,SAAU,mBAC3C1D,SAAUT,EACV5D,SAAUmE,EACV6D,MAAO9rB,EAAQ,qCAEjB+B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLN,KAAK,UACL3D,QAASgpB,GAER7oB,EAAK,mBAAoB,CAAE2D,OAAQgO,GAAe,CACjDhB,WAAW,EACX+R,mBAAoB,CAClB,CAACC,EAAAA,KAAyB9gB,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAAC1E,UAAWwC,GAAO6pB,WAAYznB,KAAK,aAIzEvC,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,GAAO2b,YAClB3d,EAAK,qBAAsB,CAC1Bsc,KAAMza,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACE,KAAMrJ,EAAK,yBAA0BoJ,IAAKpJ,EAAK,wBAC9D,CACD2Q,WAAW,S,2HC7WrB,SAA+b,WAA/b,GAA6d,WAA7d,GAAsf,WCqYtf,IAAetR,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUmI,aACT,MAAM8c,GAAQC,EAAAA,EAAAA,KAAYllB,IACpB,MACJ9F,GACE8F,GAEFmlB,UAAWC,EAAmB,aAC9B1N,EACA2N,WAAYC,EAAgB,gBAC5BC,IACEC,EAAAA,EAAAA,KAAkBxlB,EAAQilB,IAAU,CAAC,EACnCzhB,GAAOiF,EAAAA,EAAAA,KAAWzI,EAAQmI,GAC1Bsd,GAAoBC,EAAAA,EAAAA,KAA4B1lB,EAAQmI,GACxDwd,GAAeC,EAAAA,EAAAA,KAAmB5lB,EAAQmI,GAE1C0d,EADgB7lB,EAAO4E,gBACWuD,EAClC2d,GAAgCD,GACjCF,GAAcI,iBAAiBC,8BAC9BC,GAAkCJ,GACnCF,GAAcI,iBAAiBE,+BAE9BC,GAAWC,EAAAA,EAAAA,KAAenmB,GAEhC,MAAO,CACL2f,YAAazlB,GAAOmN,QACpB7D,OACAyhB,QACAG,sBACA1N,eACA4N,mBACAC,kBACAa,aAAcpmB,EAAOiY,WAAWoO,yBAChCzhB,cAAe5E,EAAO4E,cACtB0hB,qBAAsBJ,EAASI,qBAC/Bb,oBACAK,+BACAG,mCArCclmB,CA3UpB,UAAsB,KACpB0Q,EAAI,YACJ8V,EAAW,OACXpe,EAAM,KACN3E,EAAI,aACJ4iB,EAAY,MACZnB,EAAK,oBACLG,EAAmB,aACnB1N,EAAY,gBACZ6N,EAAe,iBACfD,EAAgB,cAChB1gB,EAAa,qBACb0hB,EAAoB,YACpB3G,EAAW,kBACX8F,EAAiB,6BACjBK,EAA4B,+BAC5BG,IAEA,MAAM,aACJO,EAAY,uBAAEC,EAAsB,YAAElmB,EAAW,qBAAEmmB,EAAoB,sBAAEnf,IACvE9G,EAAAA,EAAAA,MAEEtH,GAAOC,EAAAA,EAAAA,MAENutB,EAAaC,IAAkB5lB,EAAAA,EAAAA,IAAiB,KAChD6lB,EAAgBC,IAAqB9lB,EAAAA,EAAAA,KAAkB,IACvD+lB,EAAqBC,IAA0BhmB,EAAAA,EAAAA,KAAkB,IACjEimB,EAAkBC,IAAuBlmB,EAAAA,EAAAA,KAAkB,GAE5DmmB,GAAwBC,EAAAA,GAAAA,GAAoBnC,EAAOK,IAEzD7rB,EAAAA,EAAAA,IAAU,KACJwsB,GACFe,GAAuB,IAExB,CAACf,EAAgCc,IAEpC,MAAMM,EAAa,OAAQ5W,EACrB6W,EAAoBf,GAAe,WAAYA,EAC/CgB,EAAa/jB,IAAQoY,EAAAA,EAAAA,IAAcpY,GACnCgkB,EAASrf,IAAWvD,EAEpB6iB,GAAe7tB,EAAAA,EAAAA,IAAQ,KAC3B,IAAKytB,EAAY,CACf,MAAMK,EAAcT,GAAoBK,EAAoBf,EAAc9V,EAC1E,MAAO,CACLxO,IAAK,EACL6O,OAAQ,IACR6W,YAAY,EACZC,SAAUhjB,EACViI,KAAMjS,KAAK+hB,MAAM/T,KAAKC,MAAQ,KAC9BnG,QAAS,CACPmlB,OAAQ,CACNC,UAAW,SACXprB,KAAM,cACNI,OAAQ4qB,EAAY5qB,OACpBC,SAAU2qB,EAAY3qB,SACtBgrB,OAAQtX,EAAKsX,OACbjU,QAAS6S,EAAc,CAAEnkB,KAAMmkB,QAAgB9sB,IAIvD,CAEA,MAAO,CACLoI,IAAK,EACL6O,OAAQ,IACR6W,YAAY,EACZC,SAAUhjB,EACViI,KAAMjS,KAAK+hB,MAAM/T,KAAKC,MAAQ,KAC9BnG,QAAS,CACPmlB,OAAQ,CACNC,UAAW,SACXprB,KAAM,WACNoX,QAAS6S,GAAa5rB,OAAS,CAC7ByH,KAAMmkB,QACJ9sB,EACJmuB,aAAcnB,QAAkBhtB,EAChCouB,eAAgBxX,EAAKwX,eACrBC,WAAYnB,QAAuBltB,EACnCsuB,wBAAyBpB,EAAsBtW,EAAK2X,kBAAevuB,EACnE4W,OACAtI,SACAkgB,OAAQzjB,MAIb,CAACA,EAAe6L,EAAMkW,EAAaU,EACpCR,EAAgBE,EAAqB5e,EACrC8e,EAAkBK,EAAmBf,IAEjC+B,GAA0BlnB,EAAAA,EAAAA,GAAiByB,IAC/C+jB,EAAe/jB,EAAEse,OAAOhF,SAGpBoM,GAA6BnnB,EAAAA,EAAAA,GAAgB,KACjD0lB,GAAmBD,KAGf2B,GAAkCpnB,EAAAA,EAAAA,GAAgB,KACtD4lB,GAAwBD,KAGpB0B,GAAyBrnB,EAAAA,EAAAA,GAAgB,KACzCkmB,GAAmBJ,GAAqBD,KAGxCyB,GAA2BtnB,EAAAA,EAAAA,GAAgB,KAC1CimB,GACLX,EAAqB,CACnBiC,OAAQlY,EAAKxO,GACbkG,aAIEygB,GAAqBxnB,EAAAA,EAAAA,GAAgB,KACzCmG,EAAsB,CAAC,KAGnBshB,GAAwBznB,EAAAA,EAAAA,GAAgB,KACxCimB,EACFb,EAAa,CACXre,SACA0e,iBACApW,OACAqD,QAAS6S,EAAc,CAAEnkB,KAAMmkB,QAAgB9sB,EAC/CivB,cAAe/B,IAKfE,GAAoBK,EACtBb,EAAuB,CACrBzkB,OAAQmG,EACR4f,OAAQxB,EAAYwB,OACpBjrB,OAAQypB,EAAYzpB,OACpBgX,QAAS6S,EAAc,CAAEnkB,KAAMmkB,QAAgB9sB,IAKnD0G,EAAY,CACV7D,KAAM,WACNmI,QAAS,CAACsD,GACVpL,SAAU0T,EAAK1T,SACfD,OAAQ2T,EAAK3T,OACb7C,OAAQwW,EACRqD,QAAS6S,EAAc,CAAEnkB,KAAMmkB,QAAgB9sB,MAI7CkvB,EAAqBzB,GAAqB3H,GAAgBA,EAAY7iB,OAASypB,EAAYzpB,OA+I3FksB,GAAc9tB,EAAAA,EAAAA,GDhW2jB,WAAkF,WCmW/pBoqB,GDnWwmB,WCoWxmBC,GDpWmoB,WCqWnoBD,GAAoBF,GDrWgqB,YCwWtrB,OACEpqB,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GDzWG,WCyWyB,kBAC1CF,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GD3WmV,WC2W1S,eAEpD+tB,OAAK,EACLnR,OAAOC,EAAAA,GAAAA,GACL,oBAAoBL,IACpB6N,GAAmB,6BAA6BA,MAGlDvqB,EAAAA,GAAAC,cAAA,OACEtC,UAAWqwB,EACXlR,MAAOqP,EAAwB,wBAAwBA,SAA0BttB,IAEnFmB,EAAAA,GAAAC,cAACiuB,GAAAA,EAAa,CACZltB,IAAKqrB,EAAa5W,EAAKxO,GAAKwO,EAAKsX,OACjCjU,QAAS2T,EACT0B,SAAUC,GAAAA,GACVC,gBAAiB,KAzKzB,WACE,MAAMC,EAAclD,EAAeA,EAAeO,EAAY5rB,YAASlB,EAEjE2E,GAAQ8F,EAAAA,EAAAA,IAAanL,EAAMqK,GACjC,OACExI,EAAAA,GAAAC,cAAA,OAAKtC,UDvNiS,aCyNlS8sB,GACAzqB,EAAAA,GAAAC,cAACsuB,GAAAA,EAAQ,CACP5wB,UD3NoX,WC4NpXokB,SAAUuL,EACVnM,MAAOwK,EACP5B,MAAO5rB,EAAK,0BACZqwB,UAAWpD,EACXqD,mBACEH,GAAeA,EAzKG,GAyKqCA,EAAYI,gBAAa7vB,IAKrFkvB,GACC/tB,EAAAA,GAAAC,cAACyD,GAAAA,EAAQ,CAAC/F,UAAWwC,GAAiBwuB,QAAM,EAAC3G,QAAM,EAAChqB,QAASyvB,GAC3DztB,EAAAA,GAAAC,cAAA,YACG9B,EAAK,0BAA2B,CAC/Be,OAAO0c,EAAAA,GAAAA,GAAkBzd,EAAMotB,EAAYzpB,OAAQ,CAAEnE,UAAWwC,MAC/D,CAAE2O,WAAW,KAElB9O,EAAAA,GAAAC,cAAC2uB,GAAAA,EAAQ,CACPxI,QAAS6F,EACTlK,SAAU0L,EACV1D,MAAO5rB,EAAK,iCAKjBmuB,GAAqB3H,GACpB3kB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,IACbhC,EAAK,oCAAqC,CACzCe,OAAO0c,EAAAA,GAAAA,GAAkBzd,EAAMwmB,EAAY7iB,OAAQ,CAAEnE,UAAWwC,KAChEsa,KAAMza,EAAAA,GAAAC,cAAC4uB,GAAAA,EAAI,CAACC,WAAS,EAAC9wB,QAAS4vB,GAAqBzvB,EAAK,0BACxD,CACD2Q,WAAW,EACXuH,cAAc,KAKnBgW,GAAc5W,EAAK2X,eAAiBtC,GACnC9qB,EAAAA,GAAAC,cAACyD,GAAAA,EAAQ,CACP/F,UAAWwC,GACXwuB,QAAM,EACN3G,QAAM,EACNhqB,QAASwvB,EACT1oB,SAAUmmB,GAEVjrB,EAAAA,GAAAC,cAAA,YACG9B,EAAK,iBAAkB,CACtBe,OAAO0c,EAAAA,GAAAA,GAAkBzd,EAAMsX,EAAK2X,aAAc,CAAEzvB,UAAWwC,MAC9D,CAAE2O,WAAW,KAElB9O,EAAAA,GAAAC,cAAC2uB,GAAAA,EAAQ,CACPxI,QAAS2F,EACThK,SAAUyL,EACVzD,MAAO5rB,EAAK,wBAIjBkuB,GAAc5W,EAAK2X,eAAiBtC,GACnC9qB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,IACbosB,EACGpuB,EAAK,4BAA6B,CAClC+G,KAAM1B,EACNiX,KAAMza,EAAAA,GAAAC,cAAC4uB,GAAAA,EAAI,CAACC,WAAS,EAAC9wB,QAAS0vB,GAA2BvvB,EAAK,wBAC9D,CACD2Q,WAAW,IAEX3Q,EAAK,mCAAoC,CACzCqK,KAAMhF,EACNiX,KAAMza,EAAAA,GAAAC,cAAC4uB,GAAAA,EAAI,CAACC,WAAS,EAAC9wB,QAAS0vB,GAA2BvvB,EAAK,wBAC9D,CACD2Q,WAAW,KAKlBud,GACCrsB,EAAAA,GAAAC,cAACyD,GAAAA,EAAQ,CAAC/F,UAAWwC,GAAiBwuB,QAAM,EAAC3G,QAAM,EAAChqB,QAASuvB,GAC3DvtB,EAAAA,GAAAC,cAAA,YAAO9B,EAAK,mBACZ6B,EAAAA,GAAAC,cAAC2uB,GAAAA,EAAQ,CACPxI,QAASyF,EACT9J,SAAUwL,EACVxD,MAAO5rB,EAAK,qBAIjBkuB,GACCrsB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,IACbqsB,EAASruB,EAAK,+BACXouB,EAAapuB,EAAK,0BAA2B,CAAE4wB,SAAUvrB,IACvDrF,EAAK,mCAKrB,CAoEK6wB,GACDhvB,EAAAA,GAAAC,cAAA,OAAKtC,UD/XoD,aC4T7D,WACE,MAAMmE,EAASmqB,GAAoBK,GAC/B1Q,EAAAA,GAAAA,GAAkBzd,EAAMotB,EAAYzpB,OAAQ,CAAE+Z,QAAQ,IACtDwQ,GACEzQ,EAAAA,GAAAA,GAAkBzd,EAAMsX,EAAKvW,OAAS6sB,EAAsBtW,EAAK2X,aAAgB,GAAI,CAAEvR,QAAQ,KAC/Fha,EAAAA,EAAAA,GAAe1D,EAAMsX,EAAK3T,OAAQ2T,EAAK1T,UAE7C,OACE/B,EAAAA,GAAAC,cAAA,OAAKtC,UDpU8Z,YCqUha0uB,GAAc5W,EAAKwZ,qBAClBjvB,EAAAA,GAAAC,cAACivB,GAAAA,EAAe,CACdJ,WAAS,EACTpN,SAAUjM,EAAKwZ,oBAAsBxZ,EAAK0Z,kBAC1CC,UAAWjxB,EAAK,gBAAiB,CAC/B0Q,MAAO4G,EAAK0Z,kBAAqB1Z,EAAKwZ,sBAExCI,SAAUlxB,EAAK,gBAAiB,CAAE0Q,MAAO4G,EAAKwZ,sBAC9CtxB,UD7UyY,aCgV7YqC,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLtE,UDjV6hB,WCkV7hBgE,KAAK,UACL3D,QAAS6vB,EACTvW,UAAWgU,GAEVntB,EAAK,WAAY,CAChB2D,UACC,CACDgN,WAAW,KAKrB,CAkCKwgB,GAGP,I,gBCnYA,SAA4B,WAA5B,GAA2H,WCqG3H,IAAe9xB,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAU/F,aAIF,CACLkU,SAJcoc,EAAAA,EAAAA,KAA6BvqB,EAAQ/F,EAAO8tB,QAK1DzP,uBAJ4BC,EAAAA,EAAAA,KAA4BvY,KAH1CD,CAhEpB,UAAyB,QACvBoO,EAAO,sBAAEmK,EAAqB,gBAAEkS,EAAe,OAAEvwB,EAAM,cAAEwwB,EAAa,QAAEzxB,IAExE,MAAM,OACJ+uB,EAAM,OAAEjrB,EAAM,SAAEC,GACd9C,EACEd,GAAOC,EAAAA,EAAAA,KAEPsxB,GAAkBtpB,EAAAA,EAAAA,GAAgB,KACtCpI,EAAQiB,KAGJ0wB,EAAW/vB,KAAK+hB,MAAM7f,EAASirB,GAC/B6C,EAAWJ,GAAmBA,EAAkBG,EAClD/vB,KAAKiwB,KAAK,IAAMF,GAAYH,EAAkB,WAC9C3wB,EAaJ,OACEmB,EAAAA,GAAAC,cAAA,OACEtC,UAAWwC,GACX2vB,SAAU,EACVC,KAAK,SACL/xB,QAAS0xB,GAET1vB,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBC,QAASA,EACTC,KAAMkK,EACN8B,QAAM,EACN4Q,gBAAc,EACdruB,KA1CkB,KAmBxB,WACE,MAAMsuB,EAAqB,KAAXlD,EACZ5uB,EAAK,QAAS,CAAE0Q,MAAO,GAAK,CAAEE,YAAa,IAC3C5Q,EAAK,SAAU,CAAE0Q,MAAOke,GAAU,CAAEhe,YAAage,IACrD,OACE/sB,EAAAA,GAAAC,cAAA,OAAKtC,UD3DsE,YC4DxEsyB,EAGP,CAiBKC,GACDlwB,EAAAA,GAAAC,cAAA,OAAKtC,UDjF+F,YCkFjGQ,EAAK,2BAER6B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACtE,UAAWwC,GAAY6vB,gBAAc,EAACruB,KAAK,OAAOwuB,MAAI,EAACC,OAAK,IACjEjnB,EAAAA,EAAAA,GAAuBrH,EAAQC,IAEjC0tB,GACCzvB,EAAAA,GAAAC,cAAA,OAAKtC,UDxFiL,YCyFnLQ,EAAK,wBAAyB,CAC7Be,OAAQ0c,EAAAA,GAAAA,GAAkBzd,EAAMsxB,EAAc3tB,OAAQ,CAAEnE,UD1FsJ,cC2F7M,CAAEmR,WAAW,EAAMuH,cAAc,KAGvC7R,QAAQorB,IACP5vB,EAAAA,GAAAC,cAACowB,GAAAA,EAAU,CAACxrB,MAAM,SAAS2C,KAAMrJ,EAAK,eAAgB,CAAEkhB,QAASuQ,MAIzE,ICfA,IAAepyB,EAAAA,EAAAA,IAxDf,UAAsB,KAAEiY,EAAI,oBAAE6a,EAAmB,QAAEtyB,IACjD,MAAM,kBAAEuyB,IAAsB9qB,EAAAA,EAAAA,MAGxB4d,GAAM1d,EAAAA,EAAAA,IAAuB,MAE7BxH,GAAOC,EAAAA,EAAAA,MACNoyB,EAAYpd,IAAQ5U,EAAAA,EAAAA,MAErB,MACJU,EAAK,UACLuxB,EAAS,UACTC,EAAS,QACTvd,GACEsC,EAEEia,GAAkBtpB,EAAAA,EAAAA,GAAgB,KAClCsqB,EACFH,EAAkB,CAAE9a,SAItBzX,EAAQyX,KAOV,OAJAkb,EAAAA,GAAAA,IAAetN,EAAKiN,EAAsBM,IACpCA,EAAMC,gBAAgBzd,MAI1BpT,EAAAA,GAAAC,cAAA,OACEojB,IAAKA,EACL1lB,WAAWuC,EAAAA,EAAAA,GAAeC,GF5DkB,YE6D5C2vB,SAAU,EACVC,KAAK,SACL/xB,QAAS0xB,GAET1vB,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBC,QAASA,EACTiM,QAAM,EACNhM,KAAMod,EACNR,gBAAc,EACdruB,KA5CkB,KA8CpB3B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACtE,UAAWwC,GAAY6vB,gBAAc,EAACruB,KAAK,OAAOkD,MAAM,QAAQisB,mBAAiB,EAACX,MAAI,EAACC,OAAK,GAClGpwB,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,OAAO5E,UFzEmH,aE0ErIqC,EAAAA,GAAAC,cAAA,OAAKtC,UF1EoJ,YE2EtJuB,IAGJuxB,IAAcC,GAAa1wB,EAAAA,GAAAC,cAACowB,GAAAA,EAAU,CAACxrB,MAAM,OAAO2C,KAAMrJ,EAAK,iBAC/DuyB,GAAa1wB,EAAAA,GAAAC,cAACowB,GAAAA,EAAU,CAACxrB,MAAM,MAAM2C,KAAMrJ,EAAK,iBAGvD,G,gBClFA,MCwFA,IAAeX,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IACjBC,IACC,MAAM,UAAE+rB,GAAc/rB,EAEtB,MAAO,CACLgsB,cAAeD,GAAWC,gBALZjsB,CAhESksB,EAC3BD,gBACAE,oBACAC,oCAGA,MAAM9N,GAAM1d,EAAAA,EAAAA,IAAuB,MAE7BxH,GAAOC,EAAAA,EAAAA,KACPgzB,GAAuCxyB,EAAAA,EAAAA,IAAQ,IAAMoyB,GAAiB7S,OAAOkT,KAAKL,GACrF9lB,OAAQomB,GAA0B,QAAbA,GAAmC,YAAbA,GAC3ClxB,IAAI8iB,QACJ+F,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACtB,CAAC6H,KAEMO,EAAkBC,IAAuBxrB,EAAAA,EAAAA,IAA2B,OAgB3E,SAASyrB,EAAmBH,GAC1B,OACEtxB,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GD1D2E,WC4DpFqxB,IAAqBD,GD5DoH,YC8D3ItzB,QAASA,IArBf,SAAyBszB,GACvBE,EAAoBF,GACpBJ,EACEI,EAEJ,CAgBqBI,CAAgBJ,IAE9BpO,OAAOyO,UAAUL,IAChBtxB,EAAAA,GAAAC,cAACuB,EAAAA,EAAQ,CACP7D,UDlEyJ,WCmEzJ+D,KAAK,OACLC,KAAK,WApBf,SAA4B2vB,GAC1B,MAAiB,QAAbA,EAA2BnzB,EAAK,oBACnB,UAAbmzB,EAA6BnzB,EAAK,sBACrB,YAAbmzB,EAA+BnzB,EAAK,wBACjCmzB,CACT,CAkBOM,CAAmBN,GAG1B,CAIA,OAFAO,EAAAA,GAAAA,GAAoBxO,OAAKxkB,GAAW,GAGlCmB,EAAAA,GAAAC,cAAA,OAAKojB,IAAKA,EAAK1lB,WAAWuC,EAAAA,EAAAA,GD/EP,WC+EmC,iBACnDuxB,EAAmB,QAClBN,GAAiCM,EAAmB,WACrDA,EAAmB,SACnBL,GAAgBhxB,IAAIqxB,OCnF3B,IAAgB,KAAO,WAAW,WAAa,WAAW,QAAU,WAAW,KAAO,WAAW,YAAc,WAAW,QAAU,WAAW,mBAAqB,WAAW,oBAAsB,WAAW,OAAS,WAAW,YAAc,WAAW,WAAa,WAAW,aAAe,WAAW,iBAAmB,WAAW,YAAc,WAAW,QAAU,WAAW,QAAU,WAAW,eAAiB,WAAW,OAAS,WAAW,YAAc,WAAW,qBAAuB,WAAW,UAAY,WAAW,aAAe,WAAW,cAAgB,WAAW,OAAS,WAAW,oBAAsB,YC+D3mBK,IAAwBC,EAAAA,GAAAA,IAAUC,GAAOA,IAFvB,KAE8C,GAiVtE,IAAex0B,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAAqB,CAACC,GAAUC,YAClD,MAAM,UACJ8rB,EAAS,MACT7xB,EAAK,cACL0K,GACE5E,EAEEwD,EAAOvD,GAAOgtB,WAAYxkB,EAAAA,EAAAA,KAAWzI,EAAQC,EAAMgtB,gBAAapzB,EAChE2tB,EAAShoB,QAAQoF,GAAiB3E,GAAOgtB,YAAcroB,GACvD+gB,EAAeniB,GAAOoiB,EAAAA,EAAAA,KAAmB5lB,EAAQwD,GAAMvB,SAAMpI,EAEnE,MAAO,CACLqzB,iBAAkBltB,EAAOiY,WAAWkV,kBACpCC,cAAerB,GAAWrmB,KAC1B2nB,sBAAuBtB,GAAWC,cAClCrM,YAAazlB,GAAOmN,QACpB7D,OACAgkB,SACAzB,gBAAiBJ,GAAcI,kBAlBfhmB,CA/UyButB,EAC3CrtB,QACAmtB,gBACAC,wBACA1N,cACAnc,OACAgkB,SACAzB,sBAEA,MAAM,eACJwH,IACE9sB,EAAAA,EAAAA,MAEEC,GAAYC,EAAAA,EAAAA,IAAuB,MAEnC6sB,GAAgB7sB,EAAAA,EAAAA,IAAuB,MAEvC8sB,GAAgB9sB,EAAAA,EAAAA,IAA2B,MAG3C+sB,GAAc/sB,EAAAA,EAAAA,IAAuB,MAErClD,EAAS+B,QAAQS,GACjBW,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAElCC,EAAOsD,IAAQoY,EAAAA,EAAAA,IAAcpY,GAAQA,OAAO3J,EAC5Coa,EAAOzQ,IAAQmqB,EAAAA,EAAAA,IAAcnqB,GAAQA,OAAO3J,GAE3C+zB,EAAcC,IAAmB7sB,EAAAA,EAAAA,OACjC8sB,EAA4BC,IAAiC/sB,EAAAA,EAAAA,KAAS,IACtEgtB,EAAgCC,IAAqCjtB,EAAAA,EAAAA,KAAS,IAC9EktB,EAAgCC,IAAqCntB,EAAAA,EAAAA,KAAS,IAE9EurB,EAAkBC,IAAuBxrB,EAAAA,EAAAA,IAA2B,OAErEotB,GAAwBx0B,EAAAA,EAAAA,IAAQ,KACpC,IAAKmsB,EACH,OAEF,MAAM,2BACJsI,KACGC,GACDvI,EACJ,OAAQyB,GAAUrO,OAAOC,OAAOkV,GAAqBnZ,MAAM3V,UAC1D,CAACgoB,EAAQzB,IAENwI,GAAmC/G,GAAUzB,GAAiByI,iCAC9DrC,GAAiC3E,GAAUzB,GAAiBE,+BAE5DhtB,GAAUC,EAAAA,EAAAA,KACVC,GAAOC,EAAAA,EAAAA,KACPq1B,EAAW7tB,GAAgB8tB,MAC3BC,GAAgB/0B,EAAAA,EAAAA,IAAQ,IACrB60B,GAAUxK,KAAK,CAAC2K,EAAUne,IAASme,EAAS7G,OAAStX,EAAKsX,QAC9D7hB,OAAQuK,GAAwB,IAAfA,EAAK7U,OAAiC,QAAlB6U,EAAK1T,UAC5C,CAAC0xB,IAEEI,GAAej1B,EAAAA,EAAAA,IAAQ,KAC3B,MAAMk1B,EAAW,IAAIC,IAErB,OAAKJ,GAELA,EAAcp0B,QAASkW,IACrB,MAAM8V,EAAckI,GAAU/yB,KAC3BszB,GAAcA,EAAUjyB,WAAakyB,EAAAA,KACnCD,EAAUjH,SAAWtX,EAAKsX,QAE3BxB,GACFuI,EAASI,IAAIze,EAAM8V,KAIhBuI,GAZoBA,GAa1B,CAACL,EAAUE,IAERQ,GAAWv1B,EAAAA,EAAAA,IAAQ,IAChB+0B,GAAe50B,OAAO,CAACq1B,EAAM3e,IAAU2e,EAAKtyB,OAAS2T,EAAK3T,OAASsyB,EAAO3e,GAChF,CAACke,KAGFU,QAAS/D,IACPgE,EAAAA,GAAAA,IAAwB,CAAEC,QAAS7B,EAAa8B,WAtFxB,IAsF2DC,YAAahyB,IAE9FiyB,EAAelwB,QAAQouB,GACvB+B,GAAmBD,GAAgB5B,EACnC8B,GAAuBF,EAAexB,EAAiCF,GAE7Ev0B,EAAAA,EAAAA,IAAU,KACHgE,IACHswB,GAA8B,GAC9BF,OAAgBh0B,GAChB2yB,EAAoB,SAErB,CAAC/uB,IAEJ,MAAMoyB,IAAezuB,EAAAA,EAAAA,GAAiByB,IACpC,GAAI6sB,EAAc,OAClB,MAAM3sB,EAAgBF,EAAEE,cAExB+pB,GAAsB,KACpB,MAAM,UAAEhqB,GAAcC,EAItB,GAFAgrB,EAA8BjrB,EAAY,KAEtC0qB,EAAclsB,SAAWmsB,EAAcnsB,QAAS,CAClD,MAAQC,IAAKuuB,GAAcrC,EAAcnsB,QAAQM,yBACzCL,IAAKwuB,GAAkBvC,EAAclsB,QAAQM,wBACrDqsB,EAAkC6B,EAAYC,GAAiB,EACjE,MAIEC,GAAyB72B,EAAK,yBAA0B,CAC5D+G,MAAMgR,EAAAA,EAAAA,IAAgBhR,GACtBuV,KACEza,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CACPE,KAAMrJ,EAAK,qCACXoJ,IAAKpJ,EAAK,iCAGb,CAAE2Q,WAAW,IAEVmmB,GAAsBhc,EACxB9a,EAAK,6BAA8B,CAAEqK,MAAMc,EAAAA,EAAAA,IAAanL,EAAM8a,IAAS,CACvEnK,WAAW,EACXuH,cAAc,IAEdmW,EACEruB,EAAK,+BAA2BU,EAAW,CAC3CiQ,WAAW,EACXomB,kBAAmB,CAAC,QAEpB/2B,EAAK,sBAAuB,CAC5B+G,MAAMgR,EAAAA,EAAAA,IAAgBhR,IACrB,CAAE4J,WAAW,EAAMuH,cAAc,IAkClCqZ,IAAkBtpB,EAAAA,EAAAA,GAAiBqP,IACvCod,EAAgBpd,GAChB0d,EAAkC,OAAQ1d,KAwDtCyb,IAAoB9qB,EAAAA,EAAAA,GAAiBkrB,IACzCE,EAAoBF,KAGhB6D,IAAyB/uB,EAAAA,EAAAA,GAAgB,KACzCsuB,EACF7B,OAAgBh0B,GAGlB0zB,MA0CI6C,GAAeV,EAEfW,IAAkBn1B,EAAAA,EAAAA,GACtB,sBACAk1B,IAAgB,cAGlB,OACEp1B,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJsC,UAAWA,EACXzC,QAASsvB,EACT9vB,OAAQA,EACRiC,QAAM,EACNvB,iBAAkBhD,GAAOuH,QACzB/J,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOsH,YAAatH,GAAO6N,MACrDqb,oBAAkB,GAElBrpB,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLtE,UAAWwC,GAAO8H,YAClBD,OAAK,EACLnD,MAAM,cACNlD,KAAK,UACL3D,QAASm3B,GACTjtB,UAA0BjK,EAAfm3B,GAAuB,cAAyB,iBAE3Dp1B,EAAAA,GAAAC,cAAA,OAAKtC,UAAW03B,MAElBr1B,EAAAA,GAAAC,cAACmM,EAAY,CAACzO,UAAWwC,GAAOkM,QAASA,QAASsY,EAAarY,eAAa,IAC5EtM,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOyC,QAAS+xB,IAAoBx0B,GAAOgI,eACxEnI,EAAAA,GAAAC,cAACyX,EAAAA,GAAU,CACTnV,KAAK,oBACLoV,UAAWuL,OAAO0R,IAClBhY,eAAgBzc,GAAOm1B,aAEvBt1B,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,GAAOo1B,kBACnBp3B,EAAKy2B,GAAwBpI,EAAS,sBAAwB,kBAAqB,wBAI1FxsB,EAAAA,GAAAC,cAACyX,EAAAA,GAAU,CACT2L,IAAKmP,EACL70B,UAAWwC,GAAO2X,WAClBvV,KAAK,YACLoV,UAAW+c,EAAe,EAAI,IAE5BA,GAlFJ10B,EAAAA,GAAAC,cAAA,OAAKojB,IAAKqP,EAAa/0B,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOwH,KAAM,iBAAkBC,SAAUitB,IACxF70B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOq1B,SACrBx1B,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CACL5G,KAzPQ,IA0PR6G,KAAMA,IAERxI,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOuI,eAAgBC,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,MAE/E0jB,IAAWvT,IAAS8R,GAAiBsI,4BACrCrzB,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KA/GJtI,EAAAA,GAAAC,cAAA,MAAItC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO8I,WAAY9I,GAAO+I,SACrD/K,EAAK,sBAOR6B,EAAAA,GAAAC,cAAA,KAAGtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOkJ,YAAalJ,GAAO+I,SACrD8rB,IAgEHh1B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOs1B,qBACpB9B,GAAevzB,IAAKqV,GAEjBzV,EAAAA,GAAAC,cAACy1B,GAAe,CACdz2B,OAAQwW,EACRga,cAAeoE,EAAa8B,IAAIlgB,GAChC+Z,gBAAiB2E,EAAWv0B,KAAK+hB,MAAMwS,EAASryB,OAASqyB,EAASpH,aAAUluB,EAC5Eb,QAAS0xB,SAsCb0D,GACApzB,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KAvGJtI,EAAAA,GAAAC,cAAA,MAAIojB,IAAKoP,EAAe90B,WAAWuC,EAAAA,EAAAA,GAAeC,GAAO8I,WAAY9I,GAAO+I,SACzE/K,EAAKquB,EAAS,sBAAwB,oBAOzCxsB,EAAAA,GAAAC,cAAA,KAAGtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOkJ,YAAalJ,GAAOy1B,qBAAsBz1B,GAAO+I,SAClF+rB,IAiGGj1B,EAAAA,GAAAC,cAACgxB,GAAoB,CACnBE,8BAA+BA,EAC/BD,kBAAmBA,KAErBlxB,EAAAA,GAAAC,cAACyX,EAAAA,GAAU,CACTnV,KAAK,WACLoV,WA2FU2Z,GA3FgBC,EA4FrB,QAAbD,IAA4B,EACf,YAAbA,IAAgC,EACnB,UAAbA,GAA6B,EAC1BA,IA9FK3zB,UAAWwC,GAAO01B,qBA9F9B,WACE,MAAMC,EAAkBzD,IAAwBd,IAAmBrmB,OAAQyiB,IACzE,MAAMlY,EAAO2c,IAAgBzE,GAC7B,IAAKlY,EAAM,OAAO,EAElB,MAAM,UAAEgb,EAAS,UAAEC,EAAS,aAAEtD,GAAiB3X,EAC/C,OAAI8d,IAAoCpC,EAC/BV,EAELU,IAAkCoC,GAC5B9C,IAAcC,GAEpB6C,IAAmCpC,GAC9B3sB,QAAQisB,KAAerD,KAMlC,OACEptB,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAO41B,oBACpB3D,GAAiB0D,GAAiB11B,IAAKutB,IACtC,MAAMlY,EAAO2c,EAAczE,GAC3B,OACE3tB,EAAAA,GAAAC,cAAC+1B,GAAY,CACXh1B,IAAK2sB,EACLlY,KAAMA,EACN6a,oBAAqBA,EACrBtyB,QAAS0xB,OAMrB,CA8DauG,MAsDNvB,GAAgB9uB,GAAgBqsB,WAC/BjyB,EAAAA,GAAAC,cAACi2B,GAAkB,CACjBzgB,KAAMmd,EACNrH,YAAasI,EAAa8B,IAAI/C,GAC9BzlB,OAAQvH,EAAeqsB,cA8BnC,IAAwBX,MCtaxB,MC+EA,IAAe9zB,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAAsBC,IACxC,MAAM,cAAE4E,GAAkB5E,EAE1B,MAAO,CACL4E,gBACAC,QAAS7E,EAAO8E,aAAaD,UALb9E,CArDQoxB,EAC1BlxB,QACA2E,gBACAC,cAEA,MAAM,yBAAEusB,EAAwB,cAAEC,IAAkB5wB,EAAAA,EAAAA,MAE9CxH,GAAUC,EAAAA,EAAAA,KACVuE,EAASwC,GAERoF,EAAaC,IAAkBtE,EAAAA,EAAAA,IAAiB,IAEjDuE,GAAmB3L,EAAAA,EAAAA,IAAQ,KAC/B,MAAMoG,GAASyF,EAAAA,EAAAA,MACT6rB,EAAczsB,EAAUA,EAAQ0sB,OAAO3sB,QAAkB/K,EACzD23B,EAAkBF,GAAcxrB,EAAAA,EAAAA,IAAmB,CAAEC,IAAKurB,EAAatrB,MAAOX,IAAiB,GAErG,OAAOY,EAAAA,EAAAA,IAAYL,EAAAA,EAAAA,IAAO4rB,GAAiBtrB,OAAQiC,IAC1CspB,EAAAA,EAAAA,KAAczxB,EAAQmI,SAC3BtO,EAAW,CAAC+K,KACf,CAACA,EAAeS,EAAaR,IAE1B0B,GAA8BnF,EAAAA,EAAAA,GAAiBswB,IACnDL,EAAc,CAAElxB,UAAWuxB,IAC3BN,MAGF,OACEp2B,EAAAA,GAAAC,cAAC8D,EAAAA,EAAW,CACVpG,UDvDiB,WCwDjB8E,OAAQA,EACRQ,QAASmzB,EACT5yB,MAAOvF,EAAQ,mCACfwN,gBAAc,EACdvH,qBAAmB,EACnBC,iBAAe,GAEfnE,EAAAA,GAAAC,cAAC0L,EAAAA,EAAU,CACThO,UDhEmC,WCiEnCiO,QAASrB,EACTsB,YAAaxB,EACbyB,kBAAmB7N,EAAQ,UAC3BkO,mBAAoBZ,EACpBQ,eAAgBzB,EAChB0B,cAAY,EACZC,oBAAkB,EAClBC,YAAU,EACVyqB,eAAa,Q,oDCzErB,UAAgB,MAAQ,WAAW,OAAS,WAAW,MAAQ,WAAW,YAAc,WAAW,QAAU,WAAW,OAAS,WAAW,kBAAoB,WAAW,QAAU,WAAW,UAAY,WAAW,gBAAkB,WAAW,WAAa,WAAW,eAAiB,WAAW,YAAc,WAAW,iBAAmB,WAAW,aAAe,WAAW,SAAW,YC4pBpY,IAAen5B,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAM2xB,EAAW3xB,GAAOwQ,KAClBohB,EAAcD,GAAY,SAAUA,EACpChtB,EAAgB5E,EAAO4E,cAEvByjB,EAASwJ,GAAeD,EAASvJ,OACjCyJ,EAAWzJ,GAAS5f,EAAAA,EAAAA,KAAWzI,EAAQqoB,QAAUxuB,EACjDk4B,EAAa9xB,GAAOkI,QAASM,EAAAA,EAAAA,KAAWzI,EAAQC,EAAMkI,aAAUtO,EAChEoa,EAAO8d,IAAcpE,EAAAA,EAAAA,IAAcoE,GAAcA,OAAal4B,EAC9Dm4B,EAAiB/d,IAAQge,EAAAA,EAAAA,IAAiBhe,EAAM,gBAChDiM,GAAc9f,EAAAA,EAAAA,KAAWJ,EAAQ4E,GACjCstB,EAAyBhS,GAAaiS,YACtCC,EAA2BpyB,EAAOoyB,0BAA0BC,SAElE,MAAO,CACLP,WACAC,aACAntB,gBACA0tB,yBAA0BtyB,EAAOiY,WAAWqa,yBAC5CC,eAAgBvyB,EAAOiY,WAAWsa,eAClCP,iBACAE,yBACAE,6BAvBcryB,CAhmBEyyB,EACpBvyB,QACA6xB,WACAC,aACAntB,gBACA0tB,2BACAN,iBACAE,yBACAE,2BACAG,qBAEA,MAAM,mBACJE,EAAkB,qBAClBC,EAAoB,mBACpBC,EAAkB,iBAClBC,EAAgB,aAChBC,EAAY,qBACZnM,EAAoB,iBACpBhO,IACEjY,EAAAA,EAAAA,OAEGqyB,EAAsBC,EAAoBC,IAAuBx5B,EAAAA,EAAAA,KAElEL,GAAOC,EAAAA,EAAAA,KACPH,GAAUC,EAAAA,EAAAA,KAEVuE,EAAS+B,QAAQS,GACjBW,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAClCgzB,GAAoBpyB,EAAAA,EAAAA,GAAiBixB,GACrCoB,GAAsBryB,EAAAA,EAAAA,GAAiBkxB,GAEvCoB,EAAeD,IAAuBvF,EAAAA,EAAAA,IAAcuF,IAElDziB,KAAMmhB,GAAahxB,GAAkB,CAAC,EACxCixB,EAAcD,GAAY,SAAUA,EACpCwB,EAAYvB,EAAcD,OAAW/3B,EACrCw5B,EAAWD,GAAW/K,SAAWzjB,EACjC0uB,EAAwBF,GAAad,GACzCc,EAAUvmB,KAAOylB,GAA2BiB,EAAAA,GAAAA,OACxC,EACAC,EAAiB54B,KAAKiwB,KAAKyI,EAAuB,GAAK,GAAK,IAE5D7iB,EAAOohB,EAAcD,EAASnhB,KAAOmhB,EACrC3kB,EAAcwD,IAAQvD,EAAAA,EAAAA,IAAmBuD,GACzCgjB,GAAmBH,EAAuB,GAAK9zB,QAAQ4zB,GAAWnL,gBAElEyL,GAAejjB,GAAsB,mBAAdA,EAAK/T,KAE5Bi3B,GAAkBn0B,QAAQ4zB,GAAWQ,cACrCC,IAAaF,IAAmBP,GAAWU,YAC/CX,EAAenB,EAAiBkB,GAAqBjxB,KAAO2C,GAGxD1C,IAAcd,EAAAA,EAAAA,GAAgB,KAClCqxB,MAGIsB,IAAsB3yB,EAAAA,EAAAA,GAAgB,KAC1C,MAAM4yB,EAAWX,EAAWH,EAAsBD,EAClD,IAAKG,GAAWQ,eAAiBI,EAAU,OAC3C,MAAM,aAAEJ,GAAiBR,EACzBP,EAAa,CAAE/hB,OAAQkjB,EAAS/xB,GAAI+R,UAAW4f,IAC/C1xB,OAGI+xB,IAA0B7yB,EAAAA,EAAAA,GAAgB,KAC9C,MAAM,UAAE0yB,EAAS,UAAEI,GAAcd,EACjCV,EAAqB,CAAEjiB,KAAMqjB,EAAYK,cAAeD,IACxDhyB,OAGIkyB,IAAuBhzB,EAAAA,EAAAA,GAAgB,KAC3C,MAAM,UAAE0yB,GAAcV,EACtBT,EAAmB,CAAEliB,KAAMqjB,IAC3Bd,IACA9wB,OAGImyB,IAAyBjzB,EAAAA,EAAAA,GAAgB,KACxCgyB,GACL1M,EAAqB,CAAEiC,OAAQyK,EAAU3iB,KAAKxO,GAAIwO,KAAM2iB,MAGpD9Z,IAAiB1f,EAAAA,EAAAA,IAAQ,IACtB6W,IAAQ7C,EAAAA,EAAAA,IAAkB6C,GAChC,CAACA,IAEE6jB,IAA0E16B,EAAAA,EAAAA,IAAQ,IAC/E,EAAGmpB,YAAWwR,gBACnBv5B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACL+F,OAAK,EACLrG,KAAK,UACLkD,MAAM,oBACNlH,UAAW47B,EAAa,SAAW,GACnCv7B,QAAS+pB,EACT7f,UAAW/J,EAAK,mBAEhB6B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,UAGd,CAACpE,IAEEq7B,IAAqBpzB,EAAAA,EAAAA,GAAgB,IACrCuyB,GAEA34B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACN,KAAK,UAAU3D,QAAS+6B,IAC7B56B,EAAK,yBAKR06B,IAAaT,GAAWjL,0BAA4BiL,EAAUQ,aAE9D54B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACN,KAAK,UAAU83B,SAAO,EAACz7B,QAASq7B,IACrCl7B,EAAK,2BAMV6B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACN,KAAK,UAAU3D,QAASkJ,IAC7B/I,EAAK,QAKNu7B,IAAe96B,EAAAA,EAAAA,IAAQ,KAC3B,IAAK6W,EAAM,OACX,IAAIjO,EAAO,GAWX,MAVkB,aAAdiO,EAAK/T,OACH+T,EAAKkkB,gBACPnyB,GAAQ,GAAGrJ,EAAK,yBAAwBkV,EAAAA,EAAAA,IAA4C,IAArBoC,EAAKkkB,cAAsBx7B,EAAKiL,MAAM,MAEnGqM,EAAKmkB,eACPpyB,GAAQ,KACRA,GAAQ,GAAGrJ,EAAK,wBAAuBkV,EAAAA,EAAAA,IAA2C,IAApBoC,EAAKmkB,aAAqBz7B,EAAKiL,MAAM,OAIhG5B,GACN,CAACiO,EAAMtX,IAEJ07B,IAAYj7B,EAAAA,EAAAA,IAAQ,KACxB,IAAKg4B,IAAanhB,EAChB,OAGF,MAAM,OACJ4X,EAAM,aAAEL,EAAY,eAAEC,EAAc,UAAEiM,EAAS,YAAEY,EAAW,aAAElB,GAC5DR,GAAa,CAAC,EACZ2B,EAAatB,IAAoBj0B,QAAQyoB,GAEzC+M,EAAiBhN,GAAgBkL,EAEjC7uB,EAAc,MAClB,IAAK+uB,EAAW,OAAOj6B,EAAK,8BAC5B,IAAIg6B,EAAJ,CAEA,GAAIC,EAAUQ,aAAc,OAAOz6B,EAAK,+BACxC,GAAIi6B,EAAUlL,YAAckL,EAAUjL,wBACpC,OAAO0L,GACH16B,EAAK,kCACLA,EAAK,wCAAyC,CAAEqK,MAAMc,EAAAA,EAAAA,IAAanL,EAAM+5B,KAE/E,GAAKW,IAAcR,EACnB,OAAIyB,GAAeC,EACVlB,GACH16B,EAAK,+BAAgC,CACrC2D,OAAQmrB,GACP,CACDle,YAAake,EACbne,WAAW,EACXuH,cAAc,IAEdlY,EAAK,sCAAuC,CAC5C2D,OAAQmrB,EACRzkB,MAAMc,EAAAA,EAAAA,IAAanL,EAAM+5B,IACxB,CACDnpB,YAAake,EACbne,WAAW,EACXuH,cAAc,IAIhB+hB,EAAUlL,YAAc2L,GACtBkB,EACK57B,EAAK,6BAA8B,CACxC2D,OAAQmrB,GACP,CACDle,YAAake,EACbne,WAAW,EACXuH,cAAc,IAIXlY,EAAK,qCAGV06B,GACEkB,EACK57B,EAAK,sBAAuB,CACjC2D,OAAQmrB,GACP,CACDne,WAAW,EACXuH,cAAc,EACdtH,YAAake,IAIV9uB,EAAK,8BAGV47B,EACK57B,EAAK,6BAA8B,CACxC2D,OAAQmrB,EACRzkB,MAAMc,EAAAA,EAAAA,IAAanL,EAAM+5B,IACxB,CACDppB,WAAW,EACXuH,cAAc,EACdtH,YAAake,IAIV9uB,EAAK,oCAAqC,CAAEqK,MAAMc,EAAAA,EAAAA,IAAanL,EAAM+5B,IAnE1C,CAoEnC,EAtEmB,GA+Ed+B,EACJj6B,EAAAA,GAAAC,cAACooB,GAAAA,EAAY,CACX1qB,UAAU,wBACV8qB,QAAS6Q,GACT5Q,UAAU,SAEV1oB,EAAAA,GAAAC,cAACi6B,GAAAA,EAAa,CACZ/sB,OAAQvH,EAAgBuH,OACxBsI,KAAMmhB,EACNiC,UAAWA,GACXzB,yBAA0BA,EAC1BF,uBAAwBA,KAKxBiD,EACJn6B,EAAAA,GAAAC,cAAA,OACEtC,UAAWwC,GAAOi6B,aAElBp6B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLtE,UAAWwC,GAAOk6B,iBAClBryB,OAAK,EACLnD,MAAM,oBACNlD,KAAK,UACLuG,UAAW/J,EAAK,SAChBH,QAASkJ,IAETlH,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,WAEZE,GAAUw3B,GAITlb,EAAmB2Z,IACvB14B,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOyC,OAAQzC,GAAOm6B,aACnDt6B,EAAAA,GAAAC,cAAC8b,GAAgB,CACfE,kBAAmBqC,GAAgB3L,SACnCuJ,iBAAkBoC,GAAgBU,QAClChD,eAAgBsC,GAAgBW,MAChCzb,MAAOiS,EAAKjS,MACZC,SAAUtF,EAAK,sBAAuB,CAAE+gB,OAAQzJ,EAAKyJ,YAKrDC,EACJnf,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOyC,QACrB5C,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBvV,UAAWwC,GAAO8R,YAClBkB,QAASlB,EACTtQ,KA9RW,MAgSb3B,EAAAA,GAAAC,cAAA,MAAItC,UAAWwC,GAAOqD,OA3DpBk1B,GAAqBjjB,EAAKjS,MAGXrF,EAFdi6B,EAEES,GAAiB,mBAA2B,gBAFvB,yBA6DzBxvB,GACCrJ,EAAAA,GAAAC,cAAA,KAAGtC,WAAWuC,EAAAA,EAAAA,GAAeC,GAAOkJ,aAAc+uB,GAA4B,aAAf3iB,GAAM/T,MAAuBvB,GAAOo6B,UAChGlxB,IAMHiW,EAAuB,GAC7B,GAAkB,aAAd7J,EAAK/T,KAAqB,EACZ2rB,GAAUL,IAGxB1N,EAAU5f,KAAK,CACbvB,EAAK,gBACJkvB,EAKG,CAAEvX,OAAQuX,GAJZrtB,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAAC5G,KAAK,QAAQ6G,KAAMgyB,EAAAA,KAC3Bx6B,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,GAAOs6B,SAAUx8B,EAAQu8B,EAAAA,GAAmB3qB,cAMjEuoB,GAAWvmB,MACbyN,EAAU5f,KAAK,CACbvB,EAAK,gBACL6B,EAAAA,GAAAC,cAAA,QAAMuD,MAAOk2B,KAAermB,EAAAA,EAAAA,IAAwC,IAAjB+kB,EAAUvmB,KAAa1T,EAAKiL,MAAM,MAIrFqM,EAAKkkB,gBAAkBvB,GACzB9Y,EAAU5f,KAAK,CACbvB,EAAK,sBACLkV,EAAAA,EAAAA,IAA4C,IAArBoC,EAAKkkB,cAAsBx7B,EAAKiL,MAAM,KAI7DqM,EAAKmkB,eAAiBxB,GACxB9Y,EAAU5f,KAAK,CACbvB,EAAK,qBACLkV,EAAAA,EAAAA,IAA2C,IAApBoC,EAAKmkB,aAAqBz7B,EAAKiL,MAAM,KAIhE,MAAMsxB,EAAajlB,EAAKvW,OAASk5B,GAAWjL,yBAA2B,GAEvE7N,EAAU5f,KAAK,CACbvB,EAAK,iBACL6B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOw6B,YACpB/e,EAAAA,GAAAA,GAAkBzd,EAAMu8B,EAAY,CAAE/8B,UAAWwC,GAAOy6B,iBACxD/B,IAAaJ,IAAoBj0B,QAAQyoB,IACxCjtB,EAAAA,GAAAC,cAAC4M,EAAAA,EAAW,CAAC7O,QAAS+5B,GACnB55B,EAAK,kBAAmB,CAAE2D,OAAQmrB,GAAkB,CAAEle,YAAake,QAMxExX,EAAK0Z,mBACP7P,EAAU5f,KAAK,CACbvB,EAAK,wBACLA,EAAK,4BAA6B,CAChC0Q,MAAO4G,EAAKwZ,qBAAuB,EACnC4L,MAAOplB,EAAK0Z,mBACX,CACDpgB,YAAa0G,EAAKwZ,qBAAuB,MAK3CxZ,EAAK2X,eAAiBwL,GACxBtZ,EAAU5f,KAAK,CACbvB,EAAK,kBACL6B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOw6B,WACpBx8B,EAAK,2BACL06B,IAAa74B,EAAAA,GAAAC,cAAC4M,EAAAA,EAAW,CAAC7O,QAASq7B,IAAyBl7B,EAAK,4BAKpEi6B,GAAWtf,SACbwG,EAAU5f,KAAK,MACbb,GACAi8B,EAAAA,GAAAA,IAAuB1C,EAAUtf,UAGvC,CAEA,GAAI4f,GAAc,CAChB,MAAM,UAAEqC,EAAS,aAAEC,EAAY,QAAEC,GAAYxlB,GACvC,MACJwJ,EAAK,SAAEtM,EAAQ,QAAEqM,EAAO,gBAAEkc,GACxB5c,IAAkB,CAAC,EA6DvB,GA3DI0c,EACF1b,EAAU5f,KAAK,CACbvB,EAAK,iBACL6B,EAAAA,GAAAC,cAAA,QACEtC,UAAWwC,GAAO66B,aAClBh9B,QAASA,MACPyhB,EAAAA,GAAAA,IAAoBub,GACpBtd,EAAiB,CACf5E,QAAS,CAAE9X,IAAK,uBAChBuC,KAAM,WAITy3B,EACDh7B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAAC1E,UAAWwC,GAAOg7B,SAAU54B,KAAK,YAI3C+c,EAAU5f,KAAK,CACbvB,EAAK,iBACL88B,EAAU,CAAEnlB,OAAQmlB,EAASG,iBAAiB,GAASL,GAAa,KAIpE9b,GACFK,EAAU5f,KAAK,CACbvB,EAAK,sBACL6B,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,GAAOk7B,iBACrBpc,EAAM1c,KAAKvC,EAAAA,GAAAC,cAAC4M,EAAAA,EAAW,MAAEoC,EAAAA,EAAAA,IAAcgQ,EAAMqc,mBAKhD3oB,GACF2M,EAAU5f,KAAK,CACbvB,EAAK,yBACL6B,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,GAAOk7B,iBACrB1oB,EAASpQ,KAAKvC,EAAAA,GAAAC,cAAC4M,EAAAA,EAAW,MAAEoC,EAAAA,EAAAA,IAAc0D,EAAS2oB,mBAKtDtc,GACFM,EAAU5f,KAAK,CACbvB,EAAK,uBACL6B,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,GAAOk7B,iBACrBrc,EAAQzc,KAAKvC,EAAAA,GAAAC,cAAC4M,EAAAA,EAAW,MAAEoC,EAAAA,EAAAA,IAAc+P,EAAQsc,mBAKxDhc,EAAU5f,KAAK,CACbvB,EAAK,wBACLA,EAAK,iBAAkB,CACrBo9B,OAAQ9lB,EAAK+lB,YACbX,MAAOplB,EAAKgmB,eAIZP,EAAiB,CACnB,MAAM,KACJrpB,EAAI,YAAE6pB,EAAW,QAAE5iB,EAAO,SAAE8T,GAC1BsO,EACEl2B,GAASyF,EAAAA,EAAAA,MAETkxB,EAAY10B,IAChB2wB,EAAiB,CAAE3wB,OACnBwwB,KAGImE,GAAYnuB,EAAAA,EAAAA,KAAWzI,EAAQ02B,GAC/B1S,EAAS4D,GAAWnf,EAAAA,EAAAA,KAAWzI,EAAQ4nB,QAAY/tB,EAEnDiP,GAAgBuF,EAAAA,EAAAA,IAA8B,IAAPxB,EAAa1T,EAAKiL,MAAM,GAC/DyyB,EAEJ77B,EAAAA,GAAAC,cAAC4uB,GAAAA,EAAI,CAAC7wB,QAASA,IAAM29B,EAASD,GAAc5M,WAAS,IAClDxlB,EAAAA,EAAAA,IAAanL,EAAMy9B,IAIxB,IAAIp0B,EACJ,GAAKwhB,GAAU4D,IAAa8O,EAarB,CACL,MAAMI,EAEJ97B,EAAAA,GAAAC,cAAC4uB,GAAAA,EAAI,CAAC7wB,QAASA,IAAM29B,EAAS3S,EAAO/hB,IAAK6nB,WAAS,IAChDxlB,EAAAA,EAAAA,IAAanL,EAAM6qB,IAGxBxhB,EAAOsR,EAAU3a,EAAK,qCAAsC,CAC1DqK,KAAMqzB,EACN7S,OAAQ8S,EACRt0B,MAAMszB,EAAAA,GAAAA,IAAuBhiB,GAC7BjH,KAAM/D,GACL,CACDgB,WAAW,IACR3Q,EAAK,iCAAkC,CAC1CqK,KAAMqzB,EACNhqB,KAAM/D,EACNkb,OAAQ8S,GACP,CACDhtB,WAAW,GAEf,MAjCEtH,EAAOsR,EAAU3a,EAAK,+BAAgC,CACpDqK,KAAMqzB,EACNr0B,MAAMszB,EAAAA,GAAAA,IAAuBhiB,GAC7BjH,KAAM/D,GACL,CACDgB,WAAW,IACR3Q,EAAK,2BAA4B,CACpCqK,KAAMqzB,EACNhqB,KAAM/D,GACL,CACDgB,WAAW,IAyBfwQ,EAAU5f,KAAK,MACbb,EACAmB,EAAAA,GAAAC,cAAA,YAAOuH,IAEX,CACF,CAEA,MAAMu0B,EAAUxE,GAAkBmB,IAAgBjjB,EAAKumB,aACrD,GAAGzE,IAAiB9hB,EAAKumB,cAGrBn5B,EACJ7C,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAO0C,SACnBg2B,IAAakD,IACb/7B,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAO87B,mBACpBF,GACC/7B,EAAAA,GAAAC,cAAA,WACG9B,EAAK,kBAAmB,CACvBsc,KAAMza,EAAAA,GAAAC,cAACqH,EAAAA,EAAQ,CAACC,IAAKw0B,EAASG,iBAAe,EAAC10B,KAAMrJ,EAAK,0BACxD,CAAE2Q,WAAW,KAGnB+pB,IACC74B,EAAAA,GAAAC,cAAA,WACG9B,EAAK,WAAWg6B,EAAe,UAAY,KAAKe,EAAY,SAAW,UAAW,CACjFze,KACEza,EAAAA,GAAAC,cAAC4uB,GAAAA,EAAI,CAACC,WAAS,EAAC9wB,QAASi7B,IACtB96B,EAAK,iBAAgB+6B,EAAY,OAAS,WAG9C,CACDpqB,WAAW,KAIhBkrB,GACCh6B,EAAAA,GAAAC,cAAA,WACG9B,EAAK,0BAKbq7B,MAIL,MAAO,CACLY,YAAa1B,GAAeyB,OAAwBt7B,EACpD+D,OAAQ81B,GAAe3Z,EAAmBI,EAC1CG,YACAzc,WAED,CACD+zB,EAAUwB,EAAWF,EAAqBjmB,EAAa9T,EACvD06B,GAAWJ,GAAkBJ,EAAUp6B,EAASs5B,EAChD9hB,EAAM6I,GAAgBkb,GAAoBrB,EAC1CmB,GAAoB72B,EAAQi2B,GAAc9yB,EAC1CwxB,EAA0BF,EAAwBwC,KAGpD,OACE15B,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAC2f,GAAAA,EAAc,CACbnd,OAAQA,EACR23B,YAAaP,IAAWO,YACxBx3B,OAAQi3B,IAAWj3B,OACnBG,YAAa21B,GACbpZ,UAAWua,IAAWva,UACtBzc,OAAQg3B,IAAWh3B,OACnBlF,UAAWwC,GAAO8E,MAClBhC,QAASiE,KAEVkxB,GACCp4B,EAAAA,GAAAC,cAACk8B,GAAAA,EAAa,CACZ15B,OAAQq1B,EACR70B,QAAS+0B,EACToE,eAAgBhD,GAChB51B,MAAOrF,EAAK,yBAEZ6B,EAAAA,GAAAC,cAAA,WACG9B,EAAK,iCAAkC,CACtC2D,QAAQu6B,EAAAA,GAAAA,GAAkBl+B,EAAMi6B,EAAUnL,gBAC1CzkB,MAAMc,EAAAA,EAAAA,IAAanL,EAAM85B,IACxB,CACDnpB,WAAW,EACXuH,cAAc,KAGjBoiB,IACCz4B,EAAAA,GAAAC,cAAA,WACG9B,EAAK,mCAAoC,CACxC0Q,MAAO2pB,GACN,CACD1pB,WAAW,EACXuH,cAAc,EACdtH,YAAaypB,KAInBx4B,EAAAA,GAAAC,cAAA,WAAM9B,EAAK,qC,uCCrpBrB,SAAmD,WC+KnD,IAAeX,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAMy2B,EAAcz2B,GAAOy2B,YAG3B,MAAO,CACLE,UAHgBF,GAAcjuB,EAAAA,EAAAA,KAAWzI,EAAQ02B,QAAe78B,IAHlDkG,CA9HKu3B,EAAGr3B,QAAO22B,gBACjC,MAAM,sBAAEW,EAAqB,YAAEC,IAAgB/2B,EAAAA,EAAAA,MACzChD,EAAS+B,QAAQS,GAEjBW,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAClCw3B,GAAqB52B,EAAAA,EAAAA,GAAiB+1B,IACrCc,EAA2BC,IAAgC32B,EAAAA,EAAAA,KAAS,IAEpE42B,EAAmBC,IAAwB72B,EAAAA,EAAAA,MAE5C7H,GAAOC,EAAAA,EAAAA,KAEP8I,GAAcd,EAAAA,EAAAA,GAAgB,IAAMm2B,KAEpCO,GAAgB12B,EAAAA,EAAAA,GAAgB,KACpC,MAAMqP,EAAO7P,GAAgB6P,KACxBA,GAAMqjB,YAEX0D,EAAY,CACV/mB,KAAMA,EAAKqjB,UACX4D,4BACAtP,aAAe3X,EAAK0X,6BAA2EtuB,EAAhD4W,EAAKA,KAA4B2X,eAElFlmB,OAGI61B,GAA0B32B,EAAAA,EAAAA,GAAgB,KACzCR,GAAgBo3B,kBACrBH,EA6GJ,SAA6B1lB,EAA8B8lB,GACzD,MAAMC,EAAS/lB,EAAKjM,OAAQiyB,GACZ,UAAdA,EAAKz7B,MAAoBy7B,EAAK56B,OAAS06B,GAAmBhe,MAAM1c,MAE5D66B,EAAWjmB,EAAKjM,OAAQiyB,GACd,YAAdA,EAAKz7B,MAAsBy7B,EAAK56B,OAAS06B,GAAmBje,QAAQzc,MAEhE86B,EAAYlmB,EAAKjM,OAAQiyB,GACf,aAAdA,EAAKz7B,MAAuBy7B,EAAK56B,OAAS06B,GAAmBtqB,SAASpQ,MAOxE,MAAO,CACL0c,MALkBie,EAAOt9B,KAAK+hB,MAAM/hB,KAAK09B,SAAWJ,EAAOn9B,SAM3Dif,QALoBoe,EAASx9B,KAAK+hB,MAAM/hB,KAAK09B,SAAWF,EAASr9B,SAMjE4S,SALqB0qB,EAAUz9B,KAAK+hB,MAAM/hB,KAAK09B,SAAWD,EAAUt9B,SAOxE,CAjIyBw9B,CAAoB33B,EAAeo3B,iBAAkBJ,OAG5EY,EAAAA,GAAAA,GAAYT,EAAyBt6B,EAjCP,SAiC0C5D,GAAW,IAEnFJ,EAAAA,EAAAA,IAAU,KACJgE,GAAUmD,GAAgBo3B,kBAC5BD,KAED,CAACt6B,EAAQmD,GAAgBo3B,oBAG5Bv+B,EAAAA,EAAAA,IAAU,KACR,MAAMg/B,EAAa73B,GAAgBo3B,iBAC9BS,GAMe,IALIA,EAAWvyB,OAAQiyB,GAA0D,YAAdA,EAAKz7B,MACzFtB,IAAK+8B,GAASA,EAAKhqB,YACAsqB,EAAWvyB,OAAQiyB,GAA0D,UAAdA,EAAKz7B,MACvFtB,IAAK+8B,GAASA,EAAKhqB,UAEqC/S,IAAK+S,IAAYuqB,EAAAA,EAAAA,IAAoBvqB,EAAS,SAC7F5T,QAASkhB,KACnBkd,EAAAA,GAAAA,IAAMld,EAAMmd,GAAAA,GAAeC,YAE5B,CAACj4B,GAAgBo3B,mBAEpB,MAAMnD,GAAYj7B,EAAAA,EAAAA,IAAQ,KACxB,IAAKg+B,IAAsBn6B,EACzB,OAGF,MAAMgT,EAAO7P,GAAgB6P,KAEvB/S,EAAe,CACnB,CAAC,UAAWvE,EAAK,0BAA2BA,EAAK,iCACjD,CAAC,QAASA,EAAK,gCAAiCA,EAAK,uCACrD,CAAC,UAAWA,EAAK,6BAA8BA,EAAK,qCAGhDsF,EAAWg5B,EACbt+B,EAAK,sBAAuB,CAAEqK,MAAMc,EAAAA,EAAAA,IAAanL,EAAMs+B,KACvDt+B,EAAK,sBAsCT,MAAO,CACLuE,eACAE,OArCA5C,EAAAA,GAAAC,cAAC8b,GAAgB,CACfC,eAAgB4gB,EAAkB3d,MAClChD,kBAAmB2gB,EAAkBjqB,SACrCuJ,iBAAkB0gB,EAAkB5d,QACpCxb,MAAOrF,EAAK,oBACZsF,SAAUA,IAiCZZ,OA5BA7C,EAAAA,GAAAC,cAAA,OAAKtC,UDnIc,aCoIf8X,GACAzV,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACtE,UAAWwC,GAAqBwB,KAAK,UAAU3D,QAASkJ,GAC7D/I,EAAK,OAGTsX,GACCzV,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAC4pB,GAAAA,EAAQ,CACPE,MAAO5rB,EAAK,0BACZ2/B,QAASnB,EACTvW,QAASsW,IAEX18B,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CAACtE,UAAWwC,GAAqBwB,KAAK,UAAU83B,SAAO,EAACz7B,QAAS8+B,GACrErnB,EAAK0X,wBACFhvB,EAAK,kBACLA,EAAK,oBAAqB,CAC1B2D,QAAQ8Z,EAAAA,GAAAA,GAAkBzd,EAAOsX,EAAKA,KAA4B2X,aAAe,CAAEvR,QAAQ,KAC1F,CAAE/M,WAAW,SAY3B,CAAC8tB,EAAmBn6B,EAAQtE,EAAMs+B,EAAoB72B,GAAgB6P,KAAMinB,IAE/E,OACE18B,EAAAA,GAAAC,cAACuC,GAAAA,EAAe,CACdC,OAAQA,EACRG,OAAQi3B,GAAWj3B,OACnBC,OAAQg3B,GAAWh3B,OACnBH,aAAcm3B,GAAWn3B,aACzBK,aAAW,EACXE,QAASiE,O,gBC1Kf,MC+JA,IAAe1J,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IACjBC,IAIQ,CACLkgB,aAJkB9f,EAAAA,EAAAA,KAAWJ,EAAQA,EAAO4E,eAK5Cm0B,sBAJ2BC,EAAAA,EAAAA,KAA2Bh5B,KAHxCD,CA7HQk5B,EAC1Bh5B,QACAigB,cACA6Y,2BAEA,MAAM,yBACJG,EAAwB,eACxBC,IACE14B,EAAAA,EAAAA,MACEtH,GAAOC,EAAAA,EAAAA,KACPqE,EAAS+B,QAAQS,GACjBW,GAAiBC,EAAAA,EAAAA,GAAiBZ,IAElC,YAAEkyB,GAAgBvxB,GAAkB,CAAC,EAErC0W,EAAgB6a,GAAa5a,UAE7BI,GAAcyhB,EAAAA,GAAAA,GAAejH,GAAakH,mBAE1Cn3B,GAAcd,EAAAA,EAAAA,GAAgB,KAClC83B,MAGII,GAAcl4B,EAAAA,EAAAA,GAAgB,KAC9B+wB,GACFgH,EAAe,CAAEhH,gBAEnB+G,MAGI1hB,GAAwB5d,EAAAA,EAAAA,IAAQ,KACpC,IAAKu4B,IAAgB10B,EAAQ,OAE7B,MAAMga,EAAiB,CAAC0a,EAAYrkB,YAAaqkB,EAAYpkB,WACvD2J,EAAeya,EAAYza,aAEjC,OACE1c,EAAAA,GAAAC,cAAC+S,EAAAA,EAAuB,CACtBrV,UDxEkG,WCyElGkV,iBAAkB4J,EAClBC,aAAcA,EACdC,YAAaA,EAAY4hB,eAG5B,CAACpH,EAAa10B,EAAQka,IAEnB6hB,GAAqB5/B,EAAAA,EAAAA,IAAQ,KAC1B,IACFsmB,EACHiS,gBAED,CAACjS,EAAaiS,IAEXv0B,GAAShE,EAAAA,EAAAA,IAAQ,IAEnBoB,EAAAA,GAAAC,cAAA,OAAKtC,UDzFc,YC0FjBqC,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GD3F8B,YC4FzC4c,OAAOC,EAAAA,GAAAA,GAAWT,GAAiB,UAAUA,MAG5CE,EACDxc,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAACC,KAAMg2B,EAAoB78B,KAAK,QAAQhE,UDhG2F,aCiG1IqC,EAAAA,GAAAC,cAACunB,GAAAA,EAAa,CACZhf,KAAMg2B,EACN7gC,UDnG+J,WCoG/Jy9B,iBAAe,EACf1T,QAAM,EACNC,YAAU,EACV8W,oBAAqBniB,IAEvBtc,EAAAA,GAAAC,cAAA,KAAGtC,UDzGkL,WCyGxJmf,OAAOC,EAAAA,GAAAA,GAAWT,GAAiB,UAAUA,MACvEne,EAAK,YAGV6B,EAAAA,GAAAC,cAAA,OAAKtC,UD7GkE,YC8GrEqC,EAAAA,GAAAC,cAAA,OAAKtC,UD9GuM,YC+G1MQ,EAAK,wBAAyB,CAC5BsX,KAAM+oB,GAAoBrH,aAAa3zB,SAI3CxD,EAAAA,GAAAC,cAAA,OAAKtC,UDpHoO,YCqHvOQ,EAAK,sCAMZ,CAACme,EAAeE,EAAuBgiB,EAAoBrgC,IAExDuE,EAAe,CACnB,CAAC,eAAgBvE,EAAK,iCAAkCA,EAAK,iCAC7D,CAAC,iBAAkBA,EAAK,yCAA0CA,EAAK,yCACvE,CAAC,qBAAsBA,EAAK,4CAC1BA,EAAK,6CAGH0E,GAASjE,EAAAA,EAAAA,IAAQ,KACrB,GAAK6D,EACL,OACEzC,EAAAA,GAAAC,cAAA,OAAKtC,UDvI4P,YCwI/PqC,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLN,KAAK,UACL3D,QAASsgC,GAERngC,EAAK,2BACJ4/B,GAAwB/9B,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,aAAa5E,UD7IoE,gBCiJ3H,CAACQ,EAAM4/B,EAAsBt7B,IAEhC,OACEzC,EAAAA,GAAAC,cAACuC,GAAAA,EAAe,CACdC,OAAQA,EACRG,OAAQA,EACRF,aAAcA,EACdG,OAAQA,EACRE,aAAW,EACXE,QAASiE,O,wCC1Jf,UAAgB,OAAS,WAAW,YAAc,WAAW,SAAW,WAAW,YAAc,WAAW,MAAQ,WAAW,WAAa,YCoCtIw3B,GAA4B,CAChCha,cAAc,EACdF,WAAY,WACZhhB,MAAO,GACPihB,sBAAuB,WAEnBka,GAAoB,IAAMC,GAAAA,EA+FhC,IAAephC,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IACjBC,IACC,MACE+f,UACE8Z,OAAO,YACLC,IAGJC,eACEC,KAAMC,IAENj6B,EAEJ,MAAO,CACL85B,cACAG,iBAfcl6B,CA7FMm6B,EAAGj6B,QAAO65B,cAAaG,mBAC/C,MAAM,uBAAEE,EAAsB,uBAAEC,EAAsB,0BAAEC,IAA8B55B,EAAAA,EAAAA,MAChFhD,EAAS+B,QAAQS,IAEhBq6B,EAAoBC,IAAyBv5B,EAAAA,EAAAA,KAAS,GAEvD7H,GAAOC,EAAAA,EAAAA,KAEPwH,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAClCwQ,EAAO7P,GAAgB6P,MAAMA,KAC7B6I,EAAiB7I,IAAQ7C,EAAAA,EAAAA,IAAkB6C,GAC3C+pB,EAAc55B,GAAgB6P,MAAMgqB,YACtC7/B,KAAKZ,IAAI4G,EAAe6P,KAAKgqB,aAAclH,EAAAA,GAAAA,MAAiB,QAAK15B,EAE/DqI,GAAcd,EAAAA,EAAAA,GAAgB,KAClC+4B,MAGIO,GAAet5B,EAAAA,EAAAA,GAAiBu5B,IACpCN,EAA0B,CACxB5pB,KAAM7P,EAAgB6P,KAAKqjB,UAC3B6G,eAIJ,OACE3/B,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJX,OAAQA,EACRe,MAAOrF,EAAK,qBACZsN,gBAAc,EACd/G,QAAM,EACNzB,QAASiE,GAERoX,GACCte,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACEtI,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOyC,QACrB5C,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOy/B,aACrB5/B,EAAAA,GAAAC,cAAC+S,EAAAA,EAAuB,CACtBrV,UAAWwC,GAAOwS,SAClBE,iBAAkB,CAACyL,EAAe3L,SAAUG,YAAawL,EAAe3L,SAAUI,WAClF2J,aAAc4B,EAAe3L,UAAU+J,aACvCC,YAAa2B,EAAeU,SAAS7L,UAEvCnT,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBvV,UAAWwC,GAAOgT,QAClBxR,KAAMg9B,GACNxrB,QAASmL,EAAeW,OAAO9L,WAGnCnT,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,OAAO5E,UAAWwC,GAAO0/B,QACpC7/B,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CACLC,KAAMk2B,GACN/8B,KAAK,QACLhE,UAAWwC,GAAOsI,UAGtBzI,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,GAAOkJ,aAClBlL,EAAK,0BAA2B,CAC/BsX,KAAM,GAAGA,EAAKjS,UAAUiS,EAAKyJ,UAC5B,CACDpQ,WAAW,EACXuH,cAAc,EACd6e,kBAAmB,CAAC,UAK3B1wB,QAAQg7B,IACPx/B,EAAAA,GAAAC,cAAA,KAAGtC,UAAWwC,GAAO2/B,YAClB3hC,EAAK,mBAAoB,CAAE4hC,MAAMC,EAAAA,GAAAA,IAAQR,IAAgB,CAAEzwB,aAAaixB,EAAAA,GAAAA,IAAQR,OAGnFV,GAAe9+B,EAAAA,GAAAC,cAAA,QAAMtC,UAAWwC,GAAO8/B,YAAa9hC,EAAK,yBAC1D2gC,IAAgBU,GACfx/B,EAAAA,GAAAC,cAACigC,GAAAA,EAAY,CACXC,kBAAgB,EAChBC,YAAajiC,EAAK,4BAClBkiC,MAAOz6B,GAAgB06B,UAAYniC,EAAKoiC,YAAY36B,GAAgB06B,UACpEj3B,YAAalL,EAAK,4BAClBqiC,WAAYpB,EACZ9nB,UAAW1R,GAAgB0R,UAC3B0nB,KAAMC,EACNwB,kBAAmBnB,EACnBoB,iBAAkBj+B,EAClBk+B,2BAA4BpB,EAC5BqB,YAAaziC,EAAK,sBAClB0iC,SAAUnB,Q,oGC5EpB,SAASoB,KACT,CC7COC,eAAeC,GAAiBh2B,GACrC,MAAMi2B,QAAqBC,EAAAA,GAAAA,IAAQ,cAAe,CAAEl2B,UACpD,GAAKi2B,EAIL,MAFY,IAAIA,EAAaE,oBAAqBF,EAAaG,gBAGjE,CCjBA,UAAgB,OAAS,WAAW,YAAc,WAAW,SAAW,WAAW,MAAQ,YC6CrFC,GAAc,EAAIzC,GAAAA,EAClBD,GAAoB,EAAIC,GAAAA,EA+K9B,IAAephC,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IACjBC,IACC,MAAM,YAAE8E,EAAW,cAAEF,GAAkB5E,EAEvC,MAAO,CACLs8B,WAAYx3B,GAAaD,QACzBD,kBANc7E,CA7KMw8B,EACxBt8B,QAAOq8B,aAAY13B,oBAEnB,MAAM,uBAAE43B,EAAsB,sBAAEC,EAAqB,aAAEC,IAAiBj8B,EAAAA,EAAAA,MAClEhD,EAAS+B,QAAQS,GAEjB9G,GAAOC,EAAAA,EAAAA,MAENiM,EAAaC,IAAkBtE,EAAAA,EAAAA,IAAiB,IAEjDJ,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAClCq1B,EAAa10B,GAAgB6P,MAAMA,KACnC6I,EAAiBgc,IAAc1nB,EAAAA,EAAAA,IAAkB0nB,IAEhD5D,EAAYiL,IAAiB37B,EAAAA,EAAAA,MAE9B47B,GAA0B/7B,EAAAA,EAAAA,GAAiB6wB,GAC3CmL,GAAwBjjC,EAAAA,EAAAA,IAAQ,KACpC,MAAMoG,GAASyF,EAAAA,EAAAA,MACf,OAAOm3B,GAA0Bn0B,EAAAA,EAAAA,KAAWzI,EAAQ48B,QAA2B/iC,GAC9E,CAAC+iC,IAEEE,GAAiBC,EAAAA,GAAAA,IAA8BC,EAAAA,KAE/CC,GAAiBrjC,EAAAA,EAAAA,IAAQ,KACtBgM,EAAAA,EAAAA,IAAO,IACR02B,GAAc,MACdQ,GAAkB,KAEvB,CAACR,EAAYQ,KAER1iC,OAAQ8iC,EAAQ,oBAAEC,GFhDb,UAAuB,MACpCn3B,EAAK,QACLo3B,EAAUpB,GAAgB,aAC1Blf,EAAY,gBACZugB,EA3BuB,IA2BW,WAClC5N,IAQA,MAAM6N,EDpCO,SACbC,EAAqBC,EAAYC,GAEjC,MAAOthB,EAAOc,IAAYjc,EAAAA,EAAAA,OACpB,SAAE08B,EAAQ,mBAAEC,GAkBpB,WACE,MAAMlwB,GAAY9M,EAAAA,EAAAA,KAAO,GAEnBg9B,GAAqBC,EAAAA,EAAAA,IAAY,KACrCnwB,EAAUnM,SAAU,GACnB,IAEGu8B,GAAcC,EAAAA,GAAAA,KACdC,GAAiBH,EAAAA,EAAAA,IAAY,KAC5BnwB,EAAUnM,UAIfmM,EAAUnM,SAAU,EACpBu8B,MACC,CAACA,IAGJ,OAFAG,EAAAA,GAAAA,IAAkBlC,GAAMiC,GAEjB,CACLL,UAAUO,EAAAA,EAAAA,MACVN,qBAEJ,CAxC2CO,GACnCC,GAAeC,EAAAA,GAAAA,GAAgBZ,GAAI,GAczC,OAZAa,EAAAA,GAAAA,GAAc,KACRX,EACFC,IAIFQ,EAAa,KACXlhB,EAASsgB,QAGV,IAAIE,EAAcC,IAEdvhB,CACT,CCgByBmiB,CAAiB,IAAMt4B,EAAOq3B,EAAiB,CAACr3B,KAChEm3B,EAAqBoB,IAA0Bv9B,EAAAA,EAAAA,IAAiB,IACjEqE,EAAeW,EAAgBs3B,EAARt3B,EACvBw4B,GAAgBp9B,EAAAA,EAAAA,GAAgBg8B,GAatC,MAAO,KAXQqB,EAAAA,GAAAA,GAAS1C,UACtB,IAAK12B,GAAeoqB,EAElB,OADA8O,EAAuB,IAChBG,QAAQC,QAAQ7hB,GAGzB,MAAM8hB,QAAeJ,EAAcn5B,GAEnC,OADAk5B,EAAuBl5B,GAChBu5B,GACN,CAACv5B,EAAayX,EAAc0hB,EAAe/O,GAAa3S,GAIzDqgB,sBAEJ,CEeoD0B,CAAc,CAC9D74B,MAAOX,EACPyX,aAAcmgB,IAGV3qB,EAAY6qB,IAAwB93B,EAEpCy5B,GAAallC,EAAAA,EAAAA,IAAQ,IACrBujC,EAA4B4B,GAAAA,EAEzB,CAAC,CACNriC,KAAM,WACNgjB,cAAc,EACdF,WAAY,UACZwf,YAAa,EACbxgC,MAAOrF,EAAK,qBAEb,CAACA,EAAMgkC,IAEJ8B,GAAuB79B,EAAAA,EAAAA,GAAiBkrB,IAC3B,aAAbA,IAEJmQ,EAAsB,CACpBhsB,KAAM7P,EAAgB6P,OAExB+rB,OAGI0C,GAAatlC,EAAAA,EAAAA,IAAQ,KACzB,GAAI0Y,EAAW,OAAOysB,GAAAA,EACtB,MAAM/+B,GAASyF,EAAAA,EAAAA,MAEf,OAAOQ,EAAAA,EAAAA,IAAai3B,GAAY,IAAIh3B,OAAQiC,GAC1CA,IAAWvD,IAAiB6sB,EAAAA,EAAAA,KAAczxB,EAAQmI,KAEpD,IACC,CAACmK,EAAW4qB,EAAUt4B,IAEnBu6B,GAAoB/9B,EAAAA,EAAAA,GAAgB,KACxCu7B,OAAc9iC,MAGhBJ,EAAAA,EAAAA,IAAU,KACHgE,GACHk/B,OAAc9iC,IAEf,CAAC4D,IAEJ,MAAM2hC,GAAiBh+B,EAAAA,EAAAA,GAAgB,KAChCR,GAAgB6P,KAAKqjB,YAC1B4I,EAAa,CACXjsB,KAAM7P,EAAe6P,KAAKqjB,UAC1B4C,YAAakG,EACbyC,cAAez+B,EAAe6P,KAAK4uB,gBAGrCF,IACA3C,OAGF,OACExhC,EAAAA,GAAAC,cAAC8D,EAAAA,EAAW,CACVtB,OAAQA,EACRQ,QAASu+B,EACTh+B,MAAOrF,EAAK,qBACZsN,gBAAc,EACdvH,qBAAmB,EACnBC,iBAAe,EACfmgC,cAAY,GAEZtkC,EAAAA,GAAAC,cAAC0L,EAAAA,EAAU,CACTC,QAASs4B,EACTJ,WAAYA,EACZS,yBAA0BN,EAC1Bh4B,oBAAkB,EAClBu4B,mBAAiB,EACjBx4B,cAAY,EACZy4B,iBAAe,EACfntB,UAAWA,EACXzL,YAAaxB,EACbyB,kBAAmB3N,EAAK,UACxB4N,eAAgBzB,EAChB6B,mBAAoBw1B,IAErBrjB,GACCte,EAAAA,GAAAC,cAACk8B,GAAAA,EAAa,CACZ15B,OAAQ+B,QAAQkyB,GAChBgO,gBAAc,EACdzhC,QAASkhC,EACTQ,aAAc/+B,GAAgB6P,KAAK4uB,cAC/BlmC,EACA,4BACA,CAAE2D,QAAQ8Z,EAAAA,GAAAA,GAAkBzd,EAAMyH,EAAe6P,KAAK4uB,cAAe,CAAExoB,QAAQ,KAC/E,CAAE/M,WAAW,IACX3Q,EAAK,iCACXi+B,eAAgBgI,GAEhBpkC,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOyC,QACrB5C,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,GAAOy/B,aACrB5/B,EAAAA,GAAAC,cAAC+S,EAAAA,EAAuB,CACtBrV,UAAWwC,GAAOwS,SAClBE,iBAAkB,CAACyL,EAAe3L,SAAUG,YAAawL,EAAe3L,SAAUI,WAClF2J,aAAc4B,EAAe3L,UAAU+J,aACvCC,YAAa2B,EAAeU,SAAS7L,UAEvCnT,EAAAA,GAAAC,cAACiT,EAAAA,EAAuB,CACtBvV,UAAWwC,GAAOgT,QAClBxR,KAAMg9B,GACNxrB,QAASmL,EAAeW,OAAO9L,WAGnCnT,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAK,OAAO5E,UAAWwC,GAAO0/B,QACpC7/B,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CACLC,KAAMq5B,EACNlgC,KAAM0/B,GACN1jC,UAAWwC,GAAOsI,UAGtBzI,EAAAA,GAAAC,cAAA,SACG2F,GAAgB6P,KAAK4uB,cAClBlmC,EAAK,iCAAkC,CACvCsX,KAAMtX,EAAK,aAAc,CAAEqF,MAAO82B,EAAW92B,MAAO0b,OAAQob,EAAWpb,SACvEpd,QAAQu6B,EAAAA,GAAAA,GAAkBl+B,EAAMyH,EAAe6P,KAAK4uB,eACpD77B,MAAMc,EAAAA,EAAAA,IAAanL,EAAM0jC,IACxB,CACD/yB,WAAW,EACXuH,cAAc,IAEdlY,EAAK,qCAAsC,CAC3CsX,KAAMtX,EAAK,aAAc,CAAEqF,MAAO82B,EAAW92B,MAAO0b,OAAQob,EAAWpb,SACvE1W,MAAMc,EAAAA,EAAAA,IAAanL,EAAM0jC,IACxB,CACD/yB,WAAW,EACXuH,cAAc,UCvI9B,IAAe7Y,EAAAA,EAAAA,KAAKuH,EAAAA,EAAAA,IAAqB,CAACC,GAAUC,YAG3C,CACLC,KAHWD,GAAO+B,QAAS5B,EAAAA,EAAAA,KAAWJ,EAAQC,EAAM+B,aAAUnI,IAD9CkG,CArDI6/B,EAAG3/B,QAAOC,WAChC,MAAM,qBAAE2/B,EAAoB,2BAAEC,IAA+Br/B,EAAAA,EAAAA,OAEtDs/B,EAAmBC,IAAwBh/B,EAAAA,EAAAA,KAAS,GAErDJ,GAAiBC,EAAAA,EAAAA,GAAiBZ,GAClCggC,GAAgBp/B,EAAAA,EAAAA,GAAiBX,IAEjC,cAAEggC,EAAa,OAAEl+B,GAAWpB,GAAkB,CAAC,EAE/CzH,GAAOC,EAAAA,EAAAA,KAEPqE,EAAS+B,QAAQS,GAEjBkgC,GAAyB/+B,EAAAA,EAAAA,GAAgB,KAC7Cy+B,IACK79B,GACL89B,EAA2B,CAAE99B,SAAQo+B,oBAAqBL,MAG5D,OACE/kC,EAAAA,GAAAC,cAACk8B,GAAAA,EAAa,CACZ15B,OAAQA,EACRQ,QAAS4hC,EACTrhC,MAAOrF,EAAK,kBACZwmC,aAAcxmC,EAAK,2BACnBi+B,eAAgB+I,GAEfhnC,EAAK,gCAAiC,CACrCqK,KAAMy8B,IAAiB37B,EAAAA,EAAAA,IAAanL,EAAM8mC,IACzC,CACD5uB,cAAc,EACdvH,WAAW,IAGXtK,QAAQ0gC,IACNllC,EAAAA,GAAAC,cAAC4pB,GAAAA,EAAQ,CACPlsB,UAAU,kBACVosB,MAAO5rB,EAAK,oCAAqC,CAC/C2D,QAAQu6B,EAAAA,GAAAA,GAAkBl+B,EAAM+mC,IAC/B,CACD7uB,cAAc,EACdvH,WAAW,IAEbsX,QAAS2e,EACTjH,QAASkH,O,8HCrErB,QAA2H,WCwG3H,GAAexnC,EAAAA,EAAAA,IArEQoiB,EACrBnd,SACAe,QACA8b,YACA+lB,mBACAziC,SACAw3B,cACAv3B,SACAC,aACAnF,YACAoF,cACAE,UACAC,oBAEA,MAAM,SAAEy4B,IAAal2B,EAAAA,EAAAA,MACf6/B,GAAiBl/B,EAAAA,EAAAA,GAAiB+G,IACtCwuB,EAAS,CAAE10B,GAAIkG,IACflK,MAGF,OACEjD,EAAAA,GAAAC,cAACmD,EAAAA,EAAK,CACJX,OAAQA,EACRgJ,eAAgBjH,QAAQhB,GACxBH,wBAAyBG,EACzBF,yBAA0BP,EAAc,yBAAsBlE,EAC9D6F,QAAM,EACN9B,OAAQw3B,EACR52B,MAAOA,EACP7F,UAAWA,EACXwF,iBDjEoB,WCkEpBF,QAASA,GAERoiC,GACCrlC,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAACC,KAAM68B,EAAkB1jC,KAAK,QAAQhE,UDrEiH,aCuE/JiF,EACD5C,EAAAA,GAAAC,cAAA,OAAKtC,UDxEwE,YCyE1E2hB,GAAWlf,IAAI,EAAE2pB,EAAO5I,KACvBnhB,EAAAA,GAAAC,cAAAD,EAAAA,GAAAsI,SAAA,KACGyhB,GAAS/pB,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,ED3ER,aC2EqC4pB,GACtE/pB,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,ED5EqB,YC4EO4pB,GD5E2E,aC6ElH,iBAAV5I,GAAsB,WAAYA,EACxCnhB,EAAAA,GAAAC,cAACwb,EAAAA,EAAQ,CACPtO,OAAQgU,EAAMrL,OACdnY,UDhF0K,WCiF1Kg5B,eAAa,EACbyE,gBAAiBja,EAAMia,gBACvBmK,SAAUpkB,EAAMrL,OAChB9X,QAASsnC,IAETnkB,MAKXte,EACAC,GACC9C,EAAAA,GAAAC,cAACgC,EAAAA,EAAM,CACLtE,UAAYkF,OAA2BhE,ED9FwD,WC+F/F8C,KAAK,UACL3D,QAASkF,GAAiBD,GAC1BH,K,8FCjGV,SAAgB,KAAO,WAAW,IAAM,WAAW,MAAQ,WAAW,KAAO,YC6D7E,GAAetF,EAAAA,EAAAA,IAjCGyd,EAChBzS,KAAM4J,EACN8I,iBACAC,aACA3T,OACA6T,YACAD,YACAzd,YACA2d,iBACAkqB,qBACAC,gBACAznC,cAEA,MAAMG,GAAOC,EAAAA,EAAAA,KACb,OACE4B,EAAAA,GAAAC,cAAA,OACEtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAO6N,KAAMhQ,GAAWmC,EAAOulC,UAAW/nC,GACpEK,QAASA,GAETgC,EAAAA,GAAAC,cAAA,OAAKtC,UAAWwC,EAAOoG,KACrBvG,EAAAA,GAAAC,cAACsI,EAAAA,EAAM,CAAC5G,KAAMwZ,EAAY3S,KAAM4J,EAAYhE,SAAU8M,IACrDG,GACCrb,EAAAA,GAAAC,cAAA,OAAKtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOiiB,MAAO9G,GAAiBla,IAAKjD,EAAKkD,MAAQ,MAAQ,OACrF+Z,GAAapb,EAAAA,GAAAC,cAACoC,EAAAA,EAAI,CAACE,KAAM6Y,EAAWzd,UAAW6nC,IAC/CnqB,IAIN7T,GAAQxH,EAAAA,GAAAC,cAAA,KAAGtC,WAAWuC,EAAAA,EAAAA,GAAeC,EAAOqH,KAAMi+B,IAAiBj+B,K","sources":["webpack://TeleGPT/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://TeleGPT/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://TeleGPT/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://TeleGPT/./src/components/modals/common/TableAboutModal.tsx","webpack://TeleGPT/./src/components/common/pickers/PickerModal.tsx","webpack://TeleGPT/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://TeleGPT/./src/components/modals/stars/BalanceBlock.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://TeleGPT/./src/components/modals/stars/helpers/transaction.ts","webpack://TeleGPT/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://TeleGPT/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://TeleGPT/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://TeleGPT/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://TeleGPT/./src/hooks/animations/useTransitionActiveKey.ts","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://TeleGPT/./src/components/modals/paidReaction/StarSlider.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://TeleGPT/./src/components/modals/gift/GiftComposer.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://TeleGPT/./src/components/modals/gift/GiftItemPremium.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftItemStar.tsx","webpack://TeleGPT/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://TeleGPT/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://TeleGPT/./src/components/modals/gift/GiftModal.tsx","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://TeleGPT/./src/hooks/useDebouncedMemo.ts","webpack://TeleGPT/./src/hooks/usePeerSearch.ts","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.module.scss?be1f","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://TeleGPT/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://TeleGPT/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://TeleGPT/./src/components/modals/common/TableInfoModal.tsx","webpack://TeleGPT/./src/components/common/PeerBadge.module.scss?732c","webpack://TeleGPT/./src/components/common/PeerBadge.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +{formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption)) && perUserStarCount && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"sectionTitle\":\"FF8gm7MP\",\"tos\":\"Vu6blJk9\",\"logo\":\"sjhpNB8l\",\"logoBackground\":\"jjESKN3H\",\"headerHext\":\"xbpAOr37\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\n\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiStarsAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          <StarIcon type=\"gold\" size=\"middle\" />\n          {balance !== undefined ? formatStarsAmount(lang, balance) : '…'}\n          {withAddButton && (\n            <BadgeButton\n              className={styles.addStarsButton}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openStarsBalanceModal({})}\n            >\n              <Icon\n                className={styles.addStarsIcon}\n                name=\"add\"\n              />\n            </BadgeButton>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React, { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { buildStarsTransactionCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) return oldLang('StarsGiftReceived');\n  if (transaction.starGift) {\n    return isNegativeStarsAmount(transaction.stars) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n    && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { buildStarsTransactionCustomPeer, formatStarsTransactionAmount } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    stars,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (transaction.peer.type === 'peer') {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction.peer);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = transaction.starGift.title;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n        >\n          {formatStarsTransactionAmount(lang, stars)}\n        </span>\n        <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport { PAID_MESSAGES_PURPOSE } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarLogo from '../../../assets/icons/StarLogo.svg';\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, canBuyPremium, shouldForceHeight,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n  } = getActions();\n\n  const { balance, history, subscriptions } = starsBalanceState || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && starsBalanceState);\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <BalanceBlock balance={balance} className={styles.modalBalance} />\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n          <h2 className={styles.headerText}>\n            {starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          </h2>\n          <div className={styles.description}>\n            {renderText(\n              starsNeededText || oldLang('TelegramStarsInfo'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          {canBuyPremium && !areBuyOptionsShown && (\n            <Button\n              className={styles.starButton}\n              onClick={showBuyOptions}\n            >\n              {oldLang('Star.List.BuyMoreStars')}\n            </Button>\n          )}\n          {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n            <Button\n              isText\n              noForcedUpperCase\n              className={styles.starButton}\n              onClick={openStarsGiftingPickerModalHandler}\n            >\n              {oldLang('TelegramStarsGift')}\n            </Button>\n          )}\n          {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n            <StarTopupOptionList\n              starsNeeded={starsNeeded}\n              options={starsBalanceState.topupOptions}\n              onClick={handleBuyStars}\n            />\n          )}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.section}>\n              <Transition\n                name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const shouldForceHeight = Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(StarsBalanceModal));\n","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => !!media.duration);\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {disclaimerText && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"radialPattern\":\"UvhsGZLf\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: string;\n  className?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  className,\n}: OwnProps) => {\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={styles.transitionSlide}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {subtitle && (\n        <p className={styles.subtitle} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n          {subtitle}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import { useMemo, useRef } from '../../lib/teact/teact';\n\n/**\n * Use this hook to bind `<Transition />` animation to changes in the dependency array.\n * Use optional parameter `noAnimation` if you want to prevent the animation even if the dependency array changes.\n*/\nexport function useTransitionActiveKey(deps: unknown[], noAnimation?: boolean): number {\n  const activeKey = useRef(0);\n  let didUpdate = false;\n\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  useMemo(() => { activeKey.current += 1; didUpdate = true; }, deps);\n\n  if (noAnimation && didUpdate) activeKey.current -= 1;\n\n  return activeKey.current;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeStarsAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal, peer, canPlayAnimatedEmojis, topSticker, paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, stars, isGiftUpgrade, starGift,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && transaction.peer.type !== 'peer'\n        && buildStarsTransactionCustomPeer(transaction.peer)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId && getMessageLink(peer, undefined, giveawayPostId);\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker;\n    const avatarPeer = !photo ? (peer || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar peer={avatarPeer} webPhoto={photo} size=\"giant\" />\n        )}\n        {!sticker && (\n          <img\n            className={buildClassName(styles.starsBackground)}\n            src={StarsBackground}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {title && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, isNegativeStarsAmount(stars) ? styles.negative : styles.positive)}\n          >\n            {formatStarsTransactionAmount(lang, stars)}\n          </span>\n          <StarIcon type=\"gold\" size=\"middle\" />\n        </p>\n        {transaction.paidMessages && transaction.starRefCommision && paidMessageCommission\n        && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && !transaction.paidMessages) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeStarsAmount(stars) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    tableData.push([\n      peerLabel,\n      peerId ? { chatId: peerId } : toName || '',\n    ]);\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.stars.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.stars, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker, paidMessageCommission]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    const starCount = modal?.transaction.stars;\n    const starsGiftSticker = modal?.transaction.isGift && selectGiftStickerForStars(global, starCount?.amount);\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"avatarWrapper\":\"wuTMXDP9\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar peer={!photo ? peer : undefined} webPhoto={photo} size=\"giant\" />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <img\n          className={buildClassName(styles.starsBackground)}\n          src={StarsBackground}\n          alt=\"\"\n          draggable={false}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const floatingBadgeRef = useRef<HTMLDivElement>(null);\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />) }\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import type { ChangeEvent } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (!isStarGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    return {\n      id: -1,\n      chatId: '0',\n      isOutgoing: false,\n      senderId: currentUserId,\n      date: Math.floor(Date.now() / 1000),\n      content: {\n        action: {\n          mediaType: 'action',\n          type: 'starGift',\n          message: giftMessage?.length ? {\n            text: giftMessage,\n          } : undefined,\n          isNameHidden: shouldHideName || undefined,\n          starsToConvert: gift.starsToConvert,\n          canUpgrade: shouldPayForUpgrade || undefined,\n          alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n          gift,\n          peerId,\n          fromId: currentUserId,\n        },\n      },\n    } satisfies ApiMessage;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: [peerId],\n      currency: gift.currency,\n      amount: gift.amount,\n      option: gift,\n      message: giftMessage ? { text: giftMessage } : undefined,\n    });\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && gift.upgradeStars && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && gift.upgradeStars && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : formatCurrency(lang, gift.amount, gift.currency);\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && gift.availabilityRemains && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : gift.months}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiStarGiftRegular,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGiftRegular;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGiftRegular) => void;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({ gift, observeIntersection, onClick }: OwnProps) {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const [shouldPlay, play] = useFlag();\n\n  const {\n    stars,\n    isLimited,\n    isSoldOut,\n    sticker,\n  } = gift;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    onClick(gift);\n  });\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.container, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      <Button className={styles.buy} nonInteractive size=\"tiny\" color=\"stars\" withSparkleEffect pill fluid>\n        <Icon name=\"star\" className={styles.star} />\n        <div className={styles.amount}>\n          {stars}\n        </div>\n      </Button>\n      {isLimited && !isSoldOut && <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />}\n      {isSoldOut && <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />}\n    </div>\n  );\n}\n\nexport default memo(GiftItemStar);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"commonHeaderText\":\"ybZo03if\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGiftRegular;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n}) => {\n  const {\n    closeGiftModal,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const giftHeaderRef = useRef<HTMLHeadingElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const scrollerRef = useRef<HTMLDivElement>(null);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== 'XTR');\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n        && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption) => {\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && !!upgradeStars);\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.map((giftId) => {\n          const gift = starGiftsById[giftId];\n          return (\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    closeGiftModal();\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            size={AVATAR_SIZE}\n            peer={peer}\n          />\n          <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(styles.header, !shouldShowHeader && styles.hiddenHeader)}>\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={Number(isHeaderForStarGifts)}\n          slideClassName={styles.headerSlide}\n        >\n          <h2 className={styles.commonHeaderText}>\n            {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n          </h2>\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : 0}\n      >\n        {!isGiftScreen && renderMainScreen()}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return -2;\n  if (category === 'limited') return -1;\n  if (category === 'stock') return 0;\n  return category;\n}","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import React, {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"starAmountIcon\":\"_5guecUe\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId! });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isMenuOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AriaMoreButton')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        <Button\n          className={styles.modalCloseButton}\n          round\n          color=\"translucent-white\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {isOpen && uniqueGiftContextMenu}\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {description && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n            {canManage && <BadgeButton onClick={handleOpenUpgradeModal}>{lang('GiftInfoUpgradeBadge')}</BadgeButton>}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}<BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}<BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}<BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          // eslint-disable-next-line react/jsx-no-bind\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            // eslint-disable-next-line react/jsx-no-bind\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isOpen, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n      />\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      targetPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>{\n            lang('UniqueStatusWearTitle', {\n              gift: mockPeerWithStatus?.emojiStatus?.title,\n            })\n          }\n          </div>\n          <div className={styles.infoDescription}>{\n            lang('UniqueStatusBenefitsDescription')\n          }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React, {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const { closeGiftWithdrawModal, clearGiftWithdrawError, processStarGiftWithdrawal } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R extends any, D extends any[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"PvaNNycU\",\"giftPreview\":\"nCQxWKdu\",\"backdrop\":\"JCP9JNuS\",\"arrow\":\"p_1cyCau\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nimport styles from './GiftTransferModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={renderingSelectedPeer}\n              size={AVATAR_SIZE}\n              className={styles.avatar}\n            />\n          </div>\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import React, { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, addNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n    addNoPaidMessagesException({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import React, { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {label && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >{buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n"],"names":["memo","StarTopupOptionList","isActive","className","options","selectedStarOption","selectedStarCount","starsNeeded","onClick","oldLang","useOldLang","lang","useLang","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","useFlag","useEffect","renderingOptions","canExtend","useMemo","undefined","maxOption","reduce","max","option","stars","forceShowAll","result","currentStackedStarsCount","canExtendOptions","forEach","index","isExtended","push","starsCount","Math","min","isWide","length","React","createElement","buildClassName","styles","map","isOdd","isActiveOption","perUserStarCount","winner","winners","find","opt","users","perUserStars","wideOption","active","key","optionTop","formatInteger","stackedStars","dir","isRtl","Array","from","StarIcon","stackedStar","type","size","optionBottom","formatCurrency","amount","currency","renderText","Button","moreOptions","isText","noForcedUpperCase","Icon","iconDown","name","TableAboutModal","isOpen","listItemData","headerIconName","header","footer","buttonText","hasBackdrop","withSeparator","onClose","onButtonClick","contentClassName","Modal","hasAbsoluteCloseButton","absoluteCloseButtonColor","icon","title","subtitle","ListItem","isStatic","multiline","iconClassName","Separator","PickerModal","confirmButtonText","isConfirmDisabled","shouldAdaptToSearch","withFixedHeight","onConfirm","withPremiumGradient","modalProps","hasButton","Boolean","_extends","isSlim","headerClassName","children","color","disabled","withGlobal","global","modal","user","forUserId","selectUser","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","renderingModal","useCurrentOrPrev","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","userId","id","handleClose","bottomText","parts","split","SafeLink","url","text","modalDialog","content","main","onScroll","e","scrollTop","currentTarget","round","closeButton","ariaLabel","hiddenHeader","starHeaderText","headerInfo","Fragment","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","formatCurrencyAsString","code","description","getPeerTitle","section","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","hasCloseButton","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","webPhoto","status","statusEnded","statusPricing","star","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","isNegativeStarsAmount","customPeer","buildStarsTransactionCustomPeer","titleKey","starsAmount","nanos","SingleMediaThumb","boughtMedia","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","isLocked","slice","reverse","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","CUSTOM_PEER_PREMIUM","subtitleKey","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","formatDateTimeToString","negative","positive","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","history","all","transactions","starsBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","transactionTabs","tosText","handleLoadMoreTransactions","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","minimal","modalBalance","starButton","topupOptions","tos","list","sectionTitle","nextOffset","isLoading","loadMore","loadMoreIcon","container","Transition","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","deps","didUpdate","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","style","buildStyle","paidMessageCommission","appConfig","starsPaidMessageCommissionPermille","starCount","starsGiftSticker","selectGiftStickerForStars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","model","number","regularHeader","noLoop","percent","tableData","peerLabel","containerClassName","copyTextToClipboard","footerTextParts","renderingModalData","TableInfoModal","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","currentUser","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","fluid","GiftRibbon","observeIntersection","openGiftInfoModal","shouldPlay","isLimited","isSoldOut","useOnIntersect","entry","isIntersecting","withSparkleEffect","starGifts","idsByCategory","StarGiftCategoryList","onCategoryChanged","areLimitedStarGiftsDisallowed","starCategories","keys","category","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","GiftModal","closeGiftModal","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","allGifts","gifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","STARS_CURRENCY_CODE","set","baseGift","prev","observe","useIntersectionObserver","rootRef","throttleMs","isDisabled","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","handleCloseButtonClick","isBackButton","buttonClassName","headerSlide","commonHeaderText","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","filteredGiftIds","starGiftsContainer","GiftItemStar","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","renderingFromPeer","renderingTargetPeer","isTargetChat","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","hasConvertOption","isGiftUnique","canFocusUpgrade","upgradeMsgId","canManage","inputGift","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","SettingsMenuButton","isMenuOpen","renderFooterButton","isShiny","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","modalCloseButton","uniqueGift","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerName","ownerAddress","ownerId","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientId","openChat","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","shouldSkipModal","ConfirmDialog","confirmHandler","formatStarsAsText","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","models","attr","patterns","backdrops","random","getRandomAttributes","useInterval","attributes","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","onCheck","isCurrentUserPremium","selectIsCurrentUserPremium","GiftStatusInfoModal","closeGiftStatusInfoModal","setEmojiStatus","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","GIFT_STICKER_SIZE","REM","byKey","hasPassword","twoFaSettings","hint","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","giftPreview","arrow","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","placeholder","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","AVATAR_SIZE","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","useCallback","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","closeConfirmModal","handleTransfer","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","noDefaultTitle","confirmLabel","ChatRefundModal","closeChatRefundModal","addNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","headerAvatarPeer","handleOpenChat","clickArg","badgeIconClassName","textClassName","clickable"],"sourceRoot":""}