{"version":3,"file":"7768.f18f5b3845498b31c9d8.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/components/chatAssistant/component/guidance/guidance-carousel.tsx","webpack://telegram-t/./src/components/chatAssistant/component/guidance/guidance-wrapper.tsx","webpack://telegram-t/./src/components/chatAssistant/component/guidance/guidance-modal.tsx","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://telegram-t/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://telegram-t/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/chatAssistant/assets/lottieData/index.ts","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-entry-wrapper.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-entry-button.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/chatAssistant/multi-input.tsx","webpack://telegram-t/./src/components/chatAssistant/component/FloatingActionButton.tsx","webpack://telegram-t/./src/components/chatAssistant/component/InputText.tsx","webpack://telegram-t/./src/components/chatAssistant/component/TextArea.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/prompt.ts","webpack://telegram-t/./src/components/chatAssistant/rightPanel/selected-chats.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://telegram-t/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://telegram-t/./src/components/chatAssistant/global-summary/summary-header-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/global-summary/urgent-notification.tsx","webpack://telegram-t/./src/components/chatAssistant/global-summary/global-summary.tsx","webpack://telegram-t/./src/components/chatAssistant/global-summary/global-summary.module.scss?0db0","webpack://telegram-t/./src/components/chatAssistant/global-summary/GlobalSummaryWrapper.tsx","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/right/userPortrait/UserPortraitBasicCard.tsx","webpack://telegram-t/./src/components/right/userPortrait/UserPortraitBasicCardMenu.tsx","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupAvatar.tsx","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://telegram-t/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await requestGroupCallParticipants(groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, shouldCreateMessageIfNeeded, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (shouldCreateMessageIfNeeded && !currentMessage) {\n        actions.apiUpdate({\n          '@type': 'newMessage',\n          id: update.id,\n          chatId: update.chatId,\n          message: update.message,\n          poll: update.poll,\n          shouldForceReply,\n        });\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const params : SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n  || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().sendMessages({ sendParams });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    return message?.content.text!;\n  });\n  const { currentUserId } = global;\n  const userName = getUserFullName(selectUser(global, currentUserId!));\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n    userId: currentUserId!,\n    userName: userName!,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload!;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  // add user to db\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  users.forEach((user) => {\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('addNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('addNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.sendInlineBotApiResult({ ...params });\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const actions = getActions();\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    actions.showDialog({ data: { message: form.error || 'Error', hasErrorKey: true }, tabId });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const byId = buildCollectionByKey(result, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean) as string[];\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean) as string[];\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  global = getGlobal();\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});","import { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n    isUserPortraitShown: false,\n    isChatInfoShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), userId, chatId } = payload || {};\n  const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n  if (chatId && chatId !== currentChatId) {\n    actions.openChat({ id: chatId, tabId });\n  }\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isUserPortraitShown: true,\n    userPortraitUserId: userId,\n  }, tabId);\n  global = { ...global };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n  && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('toggleUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isUserPortraitShown = force !== undefined ? force : !selectTabState(global, tabId).isUserPortraitShown;\n\n  global = updateTabState(global, { isUserPortraitShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getTimestampableMedia } from '../../helpers';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = getTimestampableMedia(message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? getTimestampableMedia(replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n          && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useRef } from 'react';\nimport { Carousel } from 'antd';\nimport type { CarouselRef } from 'antd/es/carousel';\nimport cx from 'classnames';\n\nimport { CloseIcon } from '../../icons';\n\nimport './guidance.scss';\n\nconst CarouselItem = ({ className, children }:{ className:string;children?:React.ReactNode }) => {\n  return (\n    <div className={cx('guidance-carousel-item', className)}>\n      <div className=\"w-[42%] pl-[50px] pt-[5%] pb-[12%] h-full flex flex-col justify-center\">\n        {children}\n      </div>\n    </div>\n  );\n};\nconst GuidanceCarousel = ({ handleClose }:{ handleClose:()=>void }) => {\n  const carouselRef = useRef<CarouselRef>(null);\n  const handleNextClick = (step:number) => {\n    carouselRef.current?.goTo(step);\n    if (step === 4) {\n      handleClose();\n    }\n  };\n  return (\n    <div>\n      <div className=\"guidance-bubble\" />\n      <div className=\"absolute top-[10px] right-[10px] cursor-pointer text-[#A89E9E] z-10\" onClick={handleClose}>\n        <CloseIcon size={24} />\n      </div>\n      <Carousel className=\"guidance-carousel\" ref={carouselRef}>\n        <CarouselItem className=\"guidance-summary\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Chat Summary</div>\n          <div className=\"text-[14px]\">\n            Message Summarization uses AI to extract key points from IM chats and provide regular summaries, helping users stay updated.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(1)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-translation\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Translation & Grammar Check</div>\n          <div className=\"text-[14px]\">\n            Instant Translation: Real-time translation with auto language detection.\n            Error Detection: Spots spelling, grammar, and structure issues.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(2)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-meeting\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Meeting Scheduler</div>\n          <div className=\"text-[14px]\">\n            Automatically detects meeting chats, gathers details, and sends calendar invites—all within the conversation.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(3)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-actions\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Action Items</div>\n          <div className=\"text-[14px]\">\n            AI picks out tasks and follow-ups from chats in real time—no manual notes needed.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(4)}>Next</div>\n        </CarouselItem>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default GuidanceCarousel;\n","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  useEffect,\n  useRef,\n} from '../../../../lib/teact/teact';\n\nimport { injectComponent } from '../../../../lib/injectComponent';\nimport GuidanceCarousel from './guidance-carousel';\n\nconst injectMessageAI = injectComponent(GuidanceCarousel);\nconst GuidanceWrapper = ({ handleClose }:{ handleClose:()=>void }) => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (containerRef.current) {\n      injectMessageAI(containerRef.current, { handleClose });\n    }\n  }, [handleClose]);\n  return (\n    <div ref={containerRef} />\n  );\n};\n\nexport default GuidanceWrapper;\n","import React, { useState } from '../../../../lib/teact/teact';\n\nimport GuidanceWrapper from './guidance-wrapper';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Modal from '../../../ui/Modal';\n\nimport './guidance.scss';\n\nconst GuidanceModal = () => {\n  const telegptGuidance = localStorage.getItem('telegpt-guidance') === 'true';\n  const [isFirstIn, setIsFirstIn] = useState<Boolean>(!telegptGuidance);\n  const handleClose = useLastCallback(() => {\n    localStorage.setItem('telegpt-guidance', 'true');\n    setIsFirstIn(false);\n  });\n  if (!isFirstIn) {\n    return undefined;\n  }\n  return (\n    <Modal\n      isOpen\n      noBackdropClose\n      onClose={handleClose}\n      className=\"guidance-modal\"\n    >\n      <GuidanceWrapper handleClose={handleClose} />\n    </Modal>\n  );\n};\n\nexport default GuidanceModal;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            onSettingsScreenSelect(SettingsScreens.Folders);\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, onSettingsScreenSelect,\n    // activePresetTag, filterPresetTag,\n    // activeAITag, filterAITag,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n    } else {\n      setAiChatFoldersStep(AIChatFolderStep.classify);\n    }\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n      if (res === undefined || (res === true && aiChatFolders)) {\n        openRenderAiChatFoldersTip();\n      } else {\n        closeRenderAiChatFoldersTip();\n      }\n    });\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(async (\n    { loading, isShowTip } : { loading: boolean; isShowTip?: boolean },\n  ) => {\n    setAiChatFoldersLoading(loading);\n    const tipShowRes = await ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW);\n    if ((aiChatFolders || tipShowRes === undefined) && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)?.find(({ id }) => id === folderTabs?.[activeChatFolder]?.id);\n    const isFolder = activeFolder && !isInAllChatsFolder && !isInPresetFolder && !isInPresetFolder && !isInAIFolder;\n    const folderType = getFolderType();\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : folderType}\n        folderId={isFolder ? activeFolder?.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs![activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: account.emojiStatusId,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","/* eslint-disable max-len */\nimport { Modal } from 'antd';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFoldersFromUser, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from '../../chatAssistant/store';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFoldersFromUser();\n          hideTip(AIChatFolderStep.classify);\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => {},\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      eventEmitter.emit(Actions.UpdateAIChatFoldersApplying, {\n        loading: false,\n      });\n      ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading, isApply }: { loading: boolean; isApply: boolean }) => {\n    if (isApply) {\n      setAiChatFoldersLoading(loading);\n    } else {\n      const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n      if (isNext) {\n        setAiChatFoldersLoading(false);\n      } else {\n        setAiChatFoldersLoading(loading);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('AI Knowledge Base')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      ((status) => 'collectibleId' in status && status.documentId === sticker.id),\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent:GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?:boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setSharedSettingOption,\n    setGlobalSearchDate,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        {hasMenu ? (\n          <img src={AIMenuIcon} alt=\"ai-menu\" style={buildStyle('width: 24px;height: 24px;')} />\n        ) : (\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        )}\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\n// import { PRODUCTION_URL } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n// import buildClassName from '../../../util/buildClassName';\nimport { fireBaseAnalytics, UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\nimport { compareVersion } from '../../chatAssistant/utils/util';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\n// import useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  // const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n  const [shouldRenderUpdateButton, setShouldRenderUpdateButton] = useState(false);\n  const [webFireBase, setWebFireBase] = useState<{\n    force_update_required:boolean;\n    force_update_current_version:string;\n    force_update_store_url:string;\n  }>();\n\n  const handleFireBaseUpdate = (payload:any) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { webFireBase } = payload;\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { force_update_current_version } = webFireBase;\n      const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[]');\n      const compareRes = compareVersion(version, force_update_current_version);\n      if (compareRes === -1) {\n        setShouldRenderUpdateButton(true);\n        setWebFireBase(webFireBase);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n    eventEmitter.on(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    return () => {\n      eventEmitter.off(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    };\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  // const {\n  //   shouldRender: shouldRenderUpdateButton,\n  //   transitionClassNames: updateButtonClassNames,\n  // } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AIKonwledge);\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    onContentChange(LeftColumnContent.AITranslate);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    fireBaseAnalytics.deferUpdate(webFireBase?.force_update_current_version!);\n    window.location.reload();\n    // if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n    //   window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    // } else if (isElectronUpdateAvailable) {\n    //   window.electron?.installUpdate();\n    // } else {\n    //   window.location.reload();\n    // }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className=\"btn-update\"\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegpt')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGifts);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          setSettingsScreen(SettingsScreens.PrivacyMessages);\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import serenaWaiting from './serena-waiting.json';\nimport serenaWorking from './serena-working.json';\n\nconst waitBlob = new Blob([JSON.stringify(serenaWaiting)], { type: 'application/json' });\nconst serenaWaitUrl = URL.createObjectURL(waitBlob);\n\nconst workBlob = new Blob([JSON.stringify(serenaWorking)], { type: 'application/json' });\nconst serenaWorkUrl = URL.createObjectURL(workBlob);\n\nexport {\n  serenaWaitUrl,\n  serenaWorkUrl,\n};\n","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport RoomAIEntryButton from './room-ai-entry-button';\n\nimport './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string;\n}\nconst injectMessageAI = injectComponent(RoomAIEntryButton);\nconst RoomAIEntryWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    if (containerRef.current && chatId) {\n      injectMessageAI(containerRef.current, { ...props });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"room-ai-entry-wrapper\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIEntryWrapper));\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport type { DotLottie } from '@lottiefiles/dotlottie-react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomStorage from '../room-storage';\n\n// import Button from '../../ui/Button';\nimport './room-ai.scss';\n\nimport { serenaWaitUrl, serenaWorkUrl } from '../assets/lottieData/index';\n// import SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIEntryButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  // eslint-disable-next-line no-null/no-null\n  const [dotLottie, setDotLottie] = useState<DotLottie | null>(null);\n  const [isSummary, setIsSummary] = useState<boolean>(true);\n  const onClick = useCallback(() => {\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  }, [chatId]);\n  const updateUnreadCount = useCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  }, [chatId]);\n  const updateSummaryState = useCallback((param:{ chatId:string; state:boolean }) => {\n    if (param.chatId === chatId) {\n      setIsSummary(param.state);\n    }\n  }, [chatId]);\n  const intervalAnimate = useCallback(() => {\n    if (dotLottie && !isSummary) {\n      dotLottie.play();\n    }\n  }, [dotLottie, isSummary]);\n\n  useEffect(() => {\n    const interval = setInterval(intervalAnimate, 10000);\n    return () => clearInterval(interval);\n  }, [chatId, intervalAnimate]);\n\n  useEffect(() => {\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    const summaryState = RoomStorage.getRoomAISummaryState(chatId);\n    setUnreadCount(count);\n    setIsSummary(summaryState);\n    RoomStorage.summary(chatId);\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    eventEmitter.on(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n      eventEmitter.off(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    };\n  }, [chatId, updateSummaryState, updateUnreadCount]);\n\n  const dotLottieRefCallback = useCallback((dotLottie:DotLottie) => {\n    setDotLottie(dotLottie);\n  }, []);\n  const handleMouseEnter = useCallback(() => {\n    if (dotLottie) {\n      dotLottie?.play();\n    }\n  }, [dotLottie]);\n  return (\n    <div className=\"room-ai-entry-button\">\n      {isSummary ? (\n        <DotLottieReact\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWorkUrl}\n          loop\n          autoplay\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n        />\n      ) : (\n        <DotLottieReact\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWaitUrl}\n          loop={false}\n          autoplay={false}\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n          onMouseEnter={handleMouseEnter}\n        />\n      )}\n      {unreadCount > 0 && (\n        <div className=\"room-ai-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIEntryButton;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import type { FC } from 'react';\nimport React from 'react';\nimport { debounce } from 'lodash';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const handleClick = debounce(onClick, 500);\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    'w-[3.5rem] bg-[var(--color-primary)] h-[3.5rem] rounded-full flex items-center justify-center',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <button\n      className={buttonClassName}\n      disabled={disabled}\n      onClick={isShown && !disabled ? handleClick : undefined}\n      tabIndex={-1}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FloatingActionButton;\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './InputText.scss';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  type?: 'text' | 'number';\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  type = 'text',\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        type={type}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, [resizeHeight]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange, resizeHeight]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage, Switch } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { phone } = telegptSettings.telegptSettings;\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(phone);\n  const initialValues:IUrgentTopic = drawerParams || {\n    topic: '',\n    prompt: '',\n    is_call: false,\n    is_open: false,\n  };\n  const [form, setForm] = useState<IUrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev:IUrgentTopic) => {\n      prev.is_call = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.topic = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.prompt = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const number = e.currentTarget.value.trim();\n    setPhoneNumber(number);\n    if (number.trim().length === 0) {\n      setPhoneNumberError(false);\n    }\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.is_call && phoneNumber.length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    telegptSettings.updateUrgentTopic(form).then((res:any) => {\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n    if (form.is_call && phoneNumber.length > 0) {\n      telegptSettings.setSettingOption({\n        phone: phoneNumber,\n      });\n    }\n  }, [form, openDrawer, phoneNumber]);\n\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and content descriptions for which you need alerts. When a message contains these contents, an alert will be triggered.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topic}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <div className=\"mb-[24px]\">\n          <TextArea\n            className=\"!mb-[12px]\"\n            label=\"Topic Description\"\n            value={form.prompt}\n            noReplaceNewlines\n            error={descriptionError ? 'Please enter the topic description' : undefined}\n            onChange={handleTopicDescriptionChange}\n          />\n          <div className=\"text-[14px] text-[#767676]\">\n            Please describe the specific content or keywords that should trigger an alert. For example, if ‘Vitalik’ + ‘ETH’ + ‘sell’ appear, please notify me.\n          </div>\n        </div>\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch value={form.is_call} onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        {form.is_call && (\n          <InputText\n            label=\"Phone Number\"\n            type=\"number\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            error={phoneNumberError ? 'Please enter a valid phone number' : undefined}\n          />\n        )}\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport type { CheckboxChangeEvent } from 'antd';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './chat-picker-panel.scss';\n\nconst PickerChatItem = ({ id, isChecked, onChange }:{\n  id: string;\n  isChecked:boolean;\n  onChange:(e:CheckboxChangeEvent) => void;\n}) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const {\n    currentUserId,\n  } = global;\n  const peer:ApiPeer | undefined = selectPeer(global, id);\n  if (!peer) {\n    return undefined;\n  }\n\n  const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n  const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n  const realPeer = 'id' in peer ? peer : undefined;\n  const isUser = realPeer && isApiPeerUser(realPeer);\n  const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n  function getSubtitle() {\n    if (!peer) return undefined;\n    if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n    if (isApiPeerChat(peer)) {\n      return [getGroupStatus(lang, peer)];\n    }\n\n    const userStatus = selectUserStatus(global, peer.id);\n    return getUserStatus(lang, peer, userStatus);\n  }\n\n  function getTitle() {\n    if (customPeer) {\n      return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n    }\n\n    if (isSelf) {\n      return lang('SavedMessages');\n    }\n\n    return title;\n  }\n\n  const subtitle = getSubtitle() || '';\n  const specialTitle = getTitle();\n  return (\n    <Checkbox\n      value={id}\n      className=\"chat-picker-item rounded-[12px]\"\n      checked={isChecked}\n      onChange={onChange}\n    >\n      <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          clickOpenRoom={false}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)] flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group className=\"w-full\" value={selected}>\n          <div className=\"flex flex-col gap-[12px] w-full overflow-hidden\">\n            {ids.map((id) => {\n              const isChecked = selected.includes(id);\n              return (\n                <PickerChatItem\n                  id={id}\n                  isChecked={isChecked}\n                  onChange={(e:CheckboxChangeEvent) => {\n                    const checked = e.target.checked;\n                    setSelected((prev) => {\n                      if (checked) {\n                        return [...prev, id];\n                      } else {\n                        return prev.filter((item) => item !== id);\n                      }\n                    });\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const initialValues:ISummaryTemplate = drawerParams || {\n    topic: '',\n    prompt: '',\n  };\n  const [form, setForm] = useState(initialValues);\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    telegptSettings.updateSummarizeTemplate(form).then((res:any) => {\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n  }, [form, openDrawer]);\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topic = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topic = topic;\n      return { ...prev };\n    });\n    if (topic.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">Please enter the specific topic you want to summarize accurately and add a detailed description. The message summary service will show the content as per your needs.</p>\n      <InputText\n        label=\"Topic name\"\n        value={form.topic}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { SERVER_API_URL } from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport useOldLang from '../hook/useOldLang';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { languagePrompt } from '../prompt';\nimport { chatAIGenerate, getCurrentUserInfo } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { knowledgeEmbeddingStore } from '../vector-store';\n\nimport Avatar from '../component/Avatar';\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const { userId, userName } = getCurrentUserInfo();\n  const lang = useOldLang();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { messages, append } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    sendExtraMessageFields: true,\n    initialMessages: [{\n      id: '0',\n      role: 'system',\n      content: languagePrompt,\n    }],\n  });\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  useEffect(() => {\n    if (messages.length > 0) {\n      messages.forEach((message) => {\n        if (message.role === 'assistant') {\n          setReplyResponse(message.content);\n          adjustHeight();\n        }\n      });\n    }\n  }, [messages]);\n  const handleSmaryReply = async (message:ApiMessage) => {\n    if (message.content.text?.text) {\n      const vectorSearchResults = await knowledgeEmbeddingStore.similaritySearch({\n        query: message.content.text?.text,\n      });\n      type Metadata = { answer: string }; // Define the type for metadata\n      const similarResult = vectorSearchResults.similarItems[0] as { metadata: Metadata; score: number } | undefined;\n      if (similarResult && similarResult.score > 0.8) {\n        setReplyResponse(similarResult.metadata.answer);\n      } else {\n        chatAIGenerate({\n          data: {\n            messages: [\n              {\n                role: 'system',\n                content: '你是一个多语种智能助手。接收用户消息后，自动识别其使用的语言，并用相同的语言进行自然、得体的回复。你应该理解消息的语境，确保回复简洁、友好且符合语言习惯。',\n                id: '1',\n              },\n              {\n                role: 'user',\n                content: `请回复下面的消息: ${message.content.text?.text}`,\n                id: '2',\n              },\n            ],\n          },\n          onResponse: (response) => {\n            setReplyResponse(response);\n          },\n          onFinish: () => {\n            // eslint-disable-next-line no-console\n            console.log('Finish');\n          },\n        });\n      }\n    }\n\n    append({\n      role: 'user',\n      content: `请回复下面的消息: ${message.content.text?.text}`,\n    });\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const isUser = peer && isApiPeerUser(peer);\n    const chat = selectChat(global, chatId);\n    const title = peer && isUser ? getUserFullName(peer) : getChatTitle(lang, chat!);\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          {isUser ? (\n            <Avatar peer={peer} size={34} />\n          ) : (\n            <ChatAvatar chatId={chatId} size={34} />\n          )}\n\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {title}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Serena AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n{\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages:{ chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }:MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","/* eslint-disable max-len */\nexport const languagePrompt = `\n    [实时语言雷达]\n        1. 语言指纹扫描：自动检测输入文本的\n            - 主要语种(支持92种语言置信度识别)\n            - 方言特征(如粤语/川普/美式英语)\n            - 混合语言比例(中英混杂度>30%触发混合模式)\n    [语境翻译官]\n        2. 根据语言特征自动匹配：\n            - 正式场合 → 学术英语/商务日语\n            - 社交场景 → 网络韩语/缩略中文\n            - 创意表达 → 方言梗/谐音梗\n            - 情感交流 → 方言安慰语/俚语拥抱\n    [文化调色盘]\n        3. 语言风格增强模块：\n            - 中文：加入\"绝绝子\"/\"破防了\"等年度热词\n            - 日语：自动转换敬体/简体(根据用户资料)\n            - 英语：切换正式/俚语模式(识别slang词汇)\n            - 方言：加载地域特色表达库(如东北话\"忽悠\"→上海话\"捣糨糊\")\n    [混合语处理器]\n        4. 跨语言对话解决方案：\n            - 中英夹杂 → 智能补全(\"这个idea超酷\"→\"这个idea真的超有创意\")\n            - 方言转译 → 标准语+注释(\"侬晓得伐？→ 你知道吗？(上海话)\")\n            - 代码切换 → 无缝过渡(\"今天meeting讨论了KPI→今天开会讨论了KPI\")\n`;\n\nexport const UrgentMessageCheckPrompt = `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n    ## 总结重要或紧急消息的内容摘要(可包含发送者名称),非重要或者紧急消息直接过滤掉\n    ## 消息字段解释\n        - chatId: 房间ID\n        - messageId: 消息ID\n        - content: 消息内容\n        - senderName: 发送者名称\n    ## 输出格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式\n         \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            content: 内容摘要\"             \n                        }\n                    ]\n                <!-- json-end -->\n        \\`\\`\\`\n`;\n\nexport const DefaultUrgentTopic = {\n  id: 'default',\n  topicName: '默认紧急主题',\n  topicDescription: `\n    ## 判断消息是不是紧急消息\n    ## 判断消息是不是重要消息\n    ## 重要消息定义\n        - 明确消息中涉及任务分配、关键决策、风险提示、时间敏感信息或高价值信息的内容   \n    ## 重要消息关键词\n       - 任务分配：任务、负责、分配、完成、执行、提交、整理、分析、制定、确认\n       - 关键决策：决策、需要、决定、评估、选择、优先级\n       - 风险提示：风险、注意、警告、问题、潜在、影响\n       - 时间敏感：截止、时间、日期、尽快、立即、马上、今天、明天、本周、下周\n       - 高价值信息：投资机会、收益、增长、危机、重大、关键\n    ## 紧急消息定义\n       - 明确消息中涉及明确的截止时间、需要立即响应、突发事件或高优先级任务的内容\n    ## 紧急消息关键词\n       - 立即响应：立即、马上、立刻、紧急、紧急任务、紧急处理\n       - 时间要求：截止、时间、日期、尽快、今天、明天、本周、下周\n       - 高优先级：高优先级、优先、务必、必须、务必完成\n  `,\n  strongAlert: false,\n};\n\nexport const getIntelligentReplyByKnowledgePrompt = (knowledge:string) => {\n  return `\n    ## 角色设定\n        你是一个专业的智能知识管家，负责基于知识库内容进行检索回答。请严格遵守以下规则：\n    ## 知识库内容\n        ${knowledge}\n    ## 知识检索\n        - 使用精确匹配模式(无模糊扩展)\n        - 当相似度>95%时才返回知识库内容,否则回复的内容为空\n    ## 格式规范\n        ## 去除所有空格和换行符,确保 JSON 结构紧凑\n        ## 代码块应使用 Markdown 代码块包裹\n        ## 校验JSON结构,确保所有JSON数据都有 <!-- json-start --> 和 <!-- json-end --> 标记\n        ## 示例格式:\n            \\`\\`\\`json\n                <!-- json-start -->\n                    [\n                        {\n                            chatId: \"房间ID\",\n                            messageId: \"消息ID\",\n                            replyContent: \"回复的内容\"              \n                        }\n                    ]\n                <!-- json-end -->\n            \\`\\`\\`\n    ## 示例输出\n        \\`\\`\\`json\n            <!-- json-start -->\n                [\n                    {\n                        chatId: \"房间ID\",\n                        messageId: \"消息ID\",\n                        senderId: \"用户ID\",\n                        replyContent: \"Think of SendingNetwork as the swiss-army knife for decentralized and encrypted communications infrastructure. \"              \n                    }\n                ]\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n};\n\nexport const UserPortraitPrompt = `\n    你是一位金融行为分析师，擅长通过对话文本解析用户多维特征。请根据以下框架分析输入数据，输出包含基础信息、关系定位、资产行为及兴趣特征的结构化画像：\n    # 基础信息推断\n        ## 年龄定位\n            - 使用\"学生党/刚毕业\"→18-24岁\n            - 提及\"子女教育/房贷\"→35-50岁\n        ## 性别识别：\n            - 讨论\"母婴产品\"→女性\n            - 引用\"电竞/硬件参数\"→男性\n        ## 地域判断：\n            - 提到\"沪牌政策\"→上海用户\n            - 使用\"支付宝/微信支付\"→中国大陆用户\n    # 关系定位模型\n        ## 合作伙伴：\n            - 包含\"对赌协议/股权分配\"等关键词\n            - 对话中出现\"王总/李董\"等职称\n        ## 投资人：\n            - 讨论\"IRR/ROI\"等财务指标\n            - 提及\"LP/GP\"关系\n        ## 同事：\n            - 使用\"周报/OKR\"等业务术语\n            - 非正式称呼(\"老张/小李\")\n    # 资产行为分析\n        ## 加密货币特征\n            - 持有资产:识别BTC/ETH等代币提及次数\n            - 操作风格:\"短线操作\"→交易型,\"三年以上未动\"→囤积型\n        ## 风险偏好分级\n            - \"愿意承担波动\"→激进型(风险评分7-10)\n            - \"只要保本\"→保守型(风险评分1-3)\n    # 示例输出 \n         \\`\\`\\`json\n            <!-- json-start -->\n                 {\n                    \"basic_info\": {\n                      \"age_group\": \"25-34岁\",\n                      \"gender\": \"男\",\n                      \"region\": \"北美地区\",\n                      \"language\": \"中英双语\"\n                    },\n                    \"relationship\": {\n                      \"type\": \"战略合作伙伴\",\n                      \"engagement_level\": \"高价值(年合作超500万)\"\n                    },\n                    \"financial_behavior\": {\n                      \"assets\": {\n                        \"crypto_holdings\": [\"BTC\", \"LINK\"],\n                        \"investment_style\": \"波段交易(持仓周期7-30天)\",\n                        \"risk_profile\": \"进取型(历史最大回撤承受力25%)\"\n                      },\n                    },\n                  }\n            <!-- json-end -->\n        \\`\\`\\`\n`;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './selected-chats.scss';\n\ninterface Props {\n  selected: string[];\n  onOpenChatSelect:() => void;\n  onDelete: (id: string) => void;\n}\nexport const SelectedChats = (props: Props) => {\n  const { onOpenChatSelect, selected, onDelete } = props;\n  const lang = useOldLang();\n  const global = getGlobal();\n  const renderChatItem = (id: string) => {\n    const peer:ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n        <Icon\n          name=\"delete\"\n          className=\"chat-picker-del ml-auto cursor-pointer text-[18px] text-[#FF4D4F]\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => { onDelete(id); }}\n        />\n      </div>\n    );\n  };\n  return (\n    <div className=\"mt-[40px]\">\n      <h3 className=\"text-[18px] font-semibold\">Which chats do you care about？</h3>\n      <div\n        className=\"chat-picker-item flex cursor-pointer items-center gap-[8px] py-[10px] rounded-[12px]\"\n        onClick={onOpenChatSelect}\n      >\n        <div\n          className=\"flex items-center justify-center w-[40px] h-[40px] rounded-full bg-[var(--color-chat-active)] text-white\"\n        >\n          <Icon name=\"add\" />\n        </div>\n        <span>Add Chats</span>\n      </div>\n      {selected.length > 0 && (\n        <>\n          {selected.map((id) => renderChatItem(id))}\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { message as showMessage } from 'antd';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { getGlobal } from '../../../global';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { SelectedChats } from './selected-chats';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst SummaryItem = ({\n  template, selectedTemp, handleSelect, onDelete,\n}: {\n  template: ISummaryTemplate;\n  selectedTemp:string[];\n  onDelete: (id: string) => void;\n  handleSelect:(id: string) => void;\n}) => {\n  const { openDrawer } = useDrawerStore();\n  const global = getGlobal();\n  const { currentUserId } = global;\n  const handeleDeleteTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(template.id!);\n  };\n  const handleEditTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openDrawer(DrawerKey.CustomizationPrompt, template);\n  };\n  return (\n    <div\n      className={cx('urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]', {\n        '!bg-[var(--color-chat-active)] text-white': selectedTemp.includes(template.id!),\n      })}\n      onClick={() => handleSelect(template.id!)}\n    >\n      <div>{template.topic}</div>\n      {selectedTemp.includes(template.id!) && (\n        <Icon className=\"urgent-topic-item-check\" name=\"check\" />\n      )}\n      {template.user_id === currentUserId && (\n        <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n          <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n          <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AddSummaryTemplate = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAdd = () => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAdd}\n    >\n      <Icon name=\"add\" />\n      <span>Customization</span>\n    </div>\n  );\n};\n\nconst SummarizeTab = () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { curious_info, summary_chat_ids, curious_id } = telegptSettings.telegptSettings;\n  const selectSummaryChatIds = getIdsFromEntityTypes(summary_chat_ids);\n  const [summaryTemplate, setSummaryTemplate] = useState<ISummaryTemplate[]>(curious_info);\n  const [originSelectedTemp, setOriginSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedTemp, setSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedChats, setSelectedChats] = useState<string[]>(selectSummaryChatIds);\n  const { openDrawer } = useDrawerStore();\n\n  const actionsVisable = useMemo(() => {\n    return !isEqual(selectedTemp, originSelectedTemp);\n  }, [originSelectedTemp, selectedTemp]);\n\n  const handleTemplateSelect = useCallback((selectedId: string) => {\n    let newSelected: string[] = [];\n    if (selectedTemp.includes(selectedId)) {\n      newSelected = selectedTemp.filter((id) => id !== selectedId);\n    } else {\n      if (selectedTemp.length >= 3) {\n        showMessage.info('You can only select up to three topics.');\n        return;\n      }\n      newSelected = [...selectedTemp, selectedId];\n    }\n    setSelectedTemp(newSelected);\n  }, [selectedTemp]);\n\n  const handleSave = useCallback(() => {\n    telegptSettings.setSettingOption({\n      curious_id: selectedTemp,\n    });\n    setOriginSelectedTemp(selectedTemp);\n  }, [selectedTemp]);\n\n  const handleDelete = useCallback((id: string) => {\n    if (selectedTemp.includes(id)) {\n      const newSelectedTemp = selectedTemp.filter((item) => item !== id);\n      setSelectedTemp(newSelectedTemp);\n      setOriginSelectedTemp(newSelectedTemp);\n      telegptSettings.setSettingOption({\n        curious_id: newSelectedTemp,\n      });\n    }\n    // TODO: delete summary template\n    telegptSettings.deleteSummarizeTemplate(id).then((res:any) => {\n      if (res.code === 0) {\n        const newSummaryTemplate = summaryTemplate.filter((item) => item.id !== id);\n        setSummaryTemplate(newSummaryTemplate);\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  }, [selectedTemp, summaryTemplate]);\n\n  const handleOpenChatSelect = useCallback(() => {\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats,\n      onSave: (chats: string[]) => {\n        const entityTypes = buildEntityTypeFromIds(chats);\n        telegptSettings.setSettingOption({\n          summary_chat_ids: entityTypes,\n        });\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      },\n      onBack: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      },\n    });\n  }, [openDrawer, selectedChats]);\n\n  const handleDeleteSummaryChat = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    const entityTypes = buildEntityTypeFromIds(newSelected);\n    telegptSettings.setSettingOption({\n      summary_chat_ids: entityTypes,\n    });\n    setSelectedChats(newSelected);\n  }, [selectedChats]);\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text) mb-[24px]\">What are you curious about?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {summaryTemplate.map((item) => {\n            return (\n              <SummaryItem template={item} onDelete={handleDelete} selectedTemp={selectedTemp} handleSelect={handleTemplateSelect} />\n            );\n          })}\n          {summaryTemplate.length < 10 && (\n            <AddSummaryTemplate />\n          )}\n        </div>\n        <SelectedChats\n          onOpenChatSelect={handleOpenChatSelect}\n          selected={selectedChats}\n          onDelete={handleDeleteSummaryChat}\n        />\n      </div>\n      <FloatingActionButton\n        isShown={actionsVisable}\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\nexport default SummarizeTab;\n","/* eslint-disable @typescript-eslint/naming-convention */\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { SelectedChats } from './selected-chats';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: IUrgentTopic;onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id!);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topic}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>Add Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const { urgent_info, urgent_chat_ids } = telegptSettings.telegptSettings;\n  const selectUrgentChatIds = getIdsFromEntityTypes(urgent_chat_ids);\n  const [topics, setTopics] = useState<IUrgentTopic[]>(urgent_info);\n  const [selectedChats, setSelectedChats] = useState<string[]>(selectUrgentChatIds);\n  const { openDrawer } = useDrawerStore();\n  const handleDelete = useCallback((id: string) => {\n    const newSelected = selectedChats.filter((item) => item !== id);\n    const entityTypes = buildEntityTypeFromIds(newSelected);\n    telegptSettings.setSettingOption({\n      urgent_chat_ids: entityTypes,\n    });\n    setSelectedChats(newSelected);\n    urgentCheckTask.updateUrgentChats(newSelected);\n  }, [selectedChats]);\n\n  const handleOpenChatSelect = useCallback(() => {\n    openDrawer(DrawerKey.ChatPicker, {\n      selectedChats,\n      onSave: (chats: string[]) => {\n        const entityTypes = buildEntityTypeFromIds(chats);\n        telegptSettings.setSettingOption({\n          urgent_chat_ids: entityTypes,\n        });\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n        urgentCheckTask.updateUrgentChats(chats);\n      },\n      onCancel: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n      },\n      onBack: () => {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n      },\n    });\n  }, [openDrawer, selectedChats]);\n\n  const handeleDeleteTopic = (id:string) => {\n    telegptSettings.deleteUrgentTopic(id).then((res:any) => {\n      if (res.code === 0) {\n        setTopics(topics.filter((t) => t.id !== id));\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  };\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold mb-[24px]\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          {topics.length < 10 && <AddTopic />}\n        </div>\n      </div>\n      <SelectedChats\n        onOpenChatSelect={handleOpenChatSelect}\n        selected={selectedChats}\n        onDelete={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Summarize',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1 overflow-y-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[2.75rem] h-[2.75rem] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Customization');\n        break;\n      case DrawerKey.ChatPicker:\n        setTitle('Select chat');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem] w-[var(--right-column-width)]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<Icon name=\"arrow-left\" className=\"text-[26px]\" />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<Icon name=\"close\" className=\"text-[26px]\" />} onClick={onClose} />\n      )}\n      <div className=\"text-[1.25rem] font-[var(--font-weight-medium)] pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden w-[var(--right-column-width)]\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport React, { useCallback } from 'react';\n\nimport { telegptSettings } from '../api/user-settings';\nimport { SettingIcon } from '../icons';\n\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n    telegptSettings.getGptSettings();\n  }, [openDrawer]);\n\n  return (\n    <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n      <span className=\"text-[var(--color-text-secondary)]\">\n        <SettingIcon />\n      </span>\n      <span className=\"text-[16px] font-semibold\">Personalize</span>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","/* eslint-disable no-null/no-null */\nimport React, {\n  forwardRef,\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { orderBy } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport {\n  parseMessage2SummaryStoreMessage,\n  parseSummaryStoreMessage2Message,\n  type SummaryStoreMessage,\n} from '../store/summary-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\nimport { useDrawerStore } from './DrawerContext';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = forwardRef(() => {\n  const { isOpen } = useDrawerStore();\n  const { userId, userName } = getCurrentUserInfo();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [summaryMessages, setSummaryMessages] = useState<Message[]>([]);\n  const [viewMessages, setViewMessages] = useState<Message[] >([]);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({\n    lastTime: undefined,\n    hasMore: true,\n  });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    const sorted = orderBy(\n      [...messages, ...summaryMessages],\n      [(item:Message) => new Date(item.createdAt as Date).getTime()],\n      ['asc'],\n    );\n    setViewMessages(sorted);\n  }, [messages, summaryMessages]);\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, viewMessages, scrollToBottom]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setSummaryMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n  }, [setSummaryMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setSummaryMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 30)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setSummaryMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setSummaryMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setViewMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  useEffect(() => {\n    const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n    // 再次聚焦间隔20分钟触发一次总结\n    if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 20) {\n      globalSummaryTask.initSummaryChats(false);\n    }\n    RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    scrollLocked();\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      // setMessages((prev) => prev.filter((message) => message.id !== messageId));\n      // setSummaryMessages((prev) => prev.filter((message) => message.id !== messageId));\n      setViewMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [scrollLocked]);\n\n  const handleInputSubmit = useCallback((value:string) => {\n    scrollToBottom();\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    });\n  }, [append, scrollToBottom]);\n\n  useEffect(() => {\n    if (status === 'ready') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n  const className = buildClassName(\n    styles.globaSummaryBg,\n    'flex flex-col w-full h-full',\n    'global-summary-inner',\n    isOpen && 'right-panel-open',\n  );\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={className}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Serena\" />\n            <span className=\"text-[15px] font-semibold\">Serena AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={viewMessages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n});\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mykZ1IJ0\"};","/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { selectChat } from '../../../global/selectors';\nimport GlobalSummary from './global-summary';\n\nconst injectMessageAI = injectComponent(GlobalSummary);\nconst GlobalSummaryWrapper = () => {\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    if (containerRef.current) {\n      injected = injectMessageAI(containerRef.current, {});\n    }\n    return () => {\n      injected?.unmount();\n    };\n  }, []);\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global) => {\n    const memoSelectChat = (chatId: string) => {\n      return selectChat(global, chatId);\n    };\n    return {\n      memoSelectChat,\n    };\n  },\n)(GlobalSummaryWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>{lang('UserUpdatedName', {\n        user: chat.title,\n        time: formatPastDatetime(lang, nameChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>{lang('UserUpdatedPhoto', {\n        user: chat.title,\n        time: formatPastDatetime(lang, photoChangeDate),\n      }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && <span>{oldLang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { UserPortraitInfo } from '../../chatAssistant/store/user-portrait-store';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './UserPortrait.scss';\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  userId: string;\n  onClose: () => void;\n};\n\nexport const PortraitTagColors = [\n  '#E5D9FF',\n  '#CCD6FF',\n  '#B6FFCE',\n  '#FFD9D9',\n  '#FFD9FF',\n];\n\nconst UserPortraitBaseCard: FC<StateProps & OwnProps> = ({ userId, user, onClose }) => {\n//   const { loading, userPortraitInfo } = usePortrait({ userId });\n  const [portraitInfo, setPortraitInfo] = useState<UserPortraitInfo | undefined>(undefined);\n\n  const getPortraitInfo = useLastCallback(async () => {\n    const info = await ChataiStores.userPortrait?.getUserPortrait(\n      userId,\n    );\n    setPortraitInfo(info);\n  });\n\n  useEffect(() => {\n    getPortraitInfo();\n  }, [userId]);\n\n  const handlePortraitClick = useLastCallback(() => {\n    getActions().openUserPortrait({ userId });\n    onClose();\n  });\n\n  function renderBasicInfo() {\n    return (\n      <div className=\"border-b-[1px] border-[#F3F3F3] px-[12px] pb-[12px]\">\n        <div className=\"text-[20px] font-[700] mb-2\">Portrait</div>\n        <div className=\"text-[16px] font-[700] mb-2\">Basic Description</div>\n        <div className=\"flex flex-col gap-1\">\n          {user?.usernames?.[0]?.username && (\n            <div>\n              <span className=\"font-[600]\">Username: </span>\n              {user?.usernames?.[0]?.username}\n            </div>\n          )}\n          <div>\n            <span className=\"font-[600]\">Alias/Nickname: </span>\n            {user?.firstName} {user?.lastName}\n          </div>\n          {portraitInfo && (\n            <>\n              {portraitInfo.langs && (\n                <div>\n                  <span className=\"font-[600]\">Language: </span>\n                  {`${\n                    portraitInfo.langs?.[0]\n                      ? `${portraitInfo.langs?.[0]}(Primary)`\n                      : ''\n                  } ${\n                    portraitInfo.langs?.[1]\n                      ? `, ${portraitInfo.langs?.[1]}(Secondary)`\n                      : ''\n                  }`}\n                </div>\n              )}\n              {portraitInfo?.tags && portraitInfo?.tags?.length > 0 && (\n                <>\n                  <div>\n                    <span className=\"font-[600]\">Tags: </span>\n                  </div>\n                  <div className=\"flex flex-row flex-wrap items-center gap-2\">\n                    {portraitInfo?.tags?.map((tag, index) => (\n                      <div\n                        className=\"flex items-center justify-center px-2 rounded-[4px] h-[28px] text-[12px] font-[500] text-black\"\n                        style={`background: ${PortraitTagColors[index]}`}\n                      >\n                        {tag}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-[24rem]\">\n      {renderBasicInfo()}\n      <div\n        className=\"h-[42px] flex items-center justify-center text-[var(--color-primary)] text-[14px] font-semibold pt-[0.5rem] cursor-pointer\"\n        onClick={handlePortraitClick}\n      >\n        View details\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal((global, { userId }): StateProps => {\n    const user = userId\n      ? selectUser(global, userId)\n      : undefined;\n\n    return {\n      user,\n    };\n  })(UserPortraitBaseCard),\n);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect } from '../../../lib/teact/teact';\n\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport UserPortraitBasicCard from './UserPortraitBasicCard';\n\ntype OwnProps = {\n  menuRef?: React.RefObject<HTMLDivElement>;\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n};\nexport const UserPortraitBasicCardMenu:FC< OwnProps & MenuPositionOptions> = ({\n  menuRef,\n  isOpen,\n  userId,\n  onClose,\n  ...menuPositionOptions\n}) => {\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose);\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClose={onClose}\n      onCloseAnimationEnd={onClose}\n      className=\"PortraitMenu\"\n      withPortal\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      noCompact\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...menuPositionOptions}\n    >\n      {isOpen && <UserPortraitBasicCard userId={userId} onClose={onClose} />}\n    </Menu>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport { UserPortraitBasicCardMenu } from '../../right/userPortrait/UserPortraitBasicCardMenu';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps = {\n  avatarPeer?: ApiPeer;\n  forwardInfo?: {\n    hiddenUserName?: string;\n  };\n  handleAvatarClick: () => void;\n};\n\nconst SenderGroupAvatar: FC<OwnProps> = ({\n  avatarPeer,\n  forwardInfo,\n  handleAvatarClick,\n}) => {\n  const { openUserPortrait } = getActions();\n  const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n  // eslint-disable-next-line no-null/no-null\n  const triggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getMenuElement = useCallback(() => menuRef.current!, []);\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  return (\n    <div className=\"inline-block\" ref={ref}>\n      <ResponsiveHoverButton\n        round\n        className={buildClassName('!p-0 !w-auto !h-auto')}\n        color=\"translucent\"\n        onActivate={handleActivateSymbolMenu}\n      >\n        <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n        <Avatar\n          size=\"small\"\n          className={styles.senderAvatar}\n          peer={avatarPeer}\n          text={hiddenName}\n          onClick={avatarPeer ? handleAvatarClick : undefined}\n        />\n      </ResponsiveHoverButton>\n      <UserPortraitBasicCardMenu\n        isOpen={isSymbolMenuOpen}\n        onClose={closeSymbolMenu}\n        userId={avatarPeer?.id!}\n        anchor={contextMenuAnchor}\n        menuRef={menuRef}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n      />\n    </div>\n  )\n};\n\nexport default SenderGroupAvatar;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport {\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\n// import Avatar from '../../common/Avatar';\nimport SenderGroupAvatar from './SenderGroupAvatar';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n}) => {\n  const { openChat } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n  && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    withShouldRender: true,\n  });\n\n  // function renderAvatar() {\n  //   const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n  //   return (\n  //     <Avatar\n  //       size=\"small\"\n  //       className={styles.senderAvatar}\n  //       peer={avatarPeer}\n  //       text={hiddenName}\n  //       onClick={avatarPeer ? handleAvatarClick : undefined}\n  //     />\n  //   );\n  // }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {/* {renderAvatar()} */}\n          <SenderGroupAvatar handleAvatarClick={handleAvatarClick} avatarPeer={avatarPeer} forwardInfo={forwardInfo} />\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>{\n            message.isOutgoing\n              ? lang('ActionPaidOneMessageOutgoing', {\n                amount: formatStarsAsText(lang, amount),\n              })\n              : (() => {\n                const sender = selectSender(getGlobal(), message);\n                const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                return lang('ActionPaidOneMessageIncoming', {\n                  user: userTitle,\n                  amount: formatStarsAsText(lang, amount),\n                });\n              })()\n          }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{oldLang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n            && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  // eslint-disable-next-line react/no-unused-prop-types\n  userId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction RequirementToContactMessage({ patternColor, userName, paidMessagesStars }: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => { openStarsBalanceModal({}); });\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang('FirstMessageInPaidMessagesChat', {\n                user: userName,\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', userName), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo,\n  ApiMessage,\n  ApiRestrictionReason,\n  ApiTopic,\n} from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  autoTranslate?:boolean;\n  autoTranslateLanguage?:string;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  autoTranslate,\n  autoTranslateLanguage,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n  isAccountFrozen,\n  hasCustomGreeting,\n  isAppConfigLoaded,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestMessageTranslation,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  // useEffect(() => {\n  //   if (!autoTranslate) return;\n  //   requestChatTranslation({ chatId, toLanguageCode: autoTranslateLanguage });\n  // }, [autoTranslate, autoTranslateLanguage, chatId]);\n\n  useEffect(() => {\n    if (!autoTranslate) return;\n    messageIds?.forEach((messageId) => {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: autoTranslateLanguage });\n    });\n  }, [autoTranslate, autoTranslateLanguage, chatId, messageIds]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : paidMessagesStars && isPrivate && !hasMessages && !hasCustomGreeting ? (\n        <RequirementToContactMessage paidMessagesStars={paidMessagesStars} userId={chatId} />\n      ) : isContactRequirePremium && !hasMessages ? (\n        <RequirementToContactMessage userId={chatId} />\n      ) : (isBot || isNonContact) && !hasMessages ? (\n        <MessageListAccountInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          canShowAds={areAdsEnabled && isChannelChat}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderAccountInfo={isBot || isNonContact}\n          nameChangeDate={nameChangeDate}\n          photoChangeDate={photoChangeDate}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const { autoTranslate, autoTranslateLanguage } = global.settings.byKey;\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    return {\n      autoTranslate,\n      autoTranslateLanguage,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = renderingMessage && getMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    message ? getMediaDuration(message)! : 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useThumbnail from '../../../hooks/useThumbnail';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  // eslint-disable-next-line react/no-unused-prop-types\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = pinnedMessage && getMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import React, {\n  memo, useRef, useSignal,\n} from '../../lib/teact/teact';\nimport { setExtraStyles } from '../../lib/teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectCurrentMiddleSearch, selectTabState, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div ref={ref} className={buildClassName(styles.root, className)}>\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiMessage, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n  ThemeKey,\n  ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIEntryWrapper from '../chatAssistant/room-ai/room-ai-entry-wrapper';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting, {\n  ASK_MEETING_EMAIL, ASK_MEETING_TIME, ASK_MEETING_TIME_AND_EMAIL, MEETING_INVITATION_TIP,\n} from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/global-summary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }:{ message: ApiMessage }) => {\n    const isMeetingInitiator = message.isOutgoing;\n    const messageText = message.content.text?.text;\n    if (\n      messageText === ASK_MEETING_TIME_AND_EMAIL\n      || messageText === ASK_MEETING_TIME\n      || messageText === ASK_MEETING_EMAIL\n      || messageText === MEETING_INVITATION_TIP\n    ) {\n      return;\n    }\n    // 会议发起成功，清除会议事务\n    if (messageText?.includes('Event details') && messageText.includes('Meeting Invitation')) {\n      const existingMeetTask = ScheduleMeeting.get(chatId!);\n      if (existingMeetTask) {\n        existingMeetTask.cleanup();\n      }\n      return;\n    }\n    const scheduleMeeting = ScheduleMeeting.create({ chatId: message.chatId, isMeetingInitiator });\n    if (scheduleMeeting.timeout || message.isOutgoing || scheduleMeeting.isMeetingInitiator) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage({\n      messageId: message.id,\n      chatId: message.chatId,\n    });\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(message.chatId, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === message.chatId) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: message.chatId });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    ?? (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <RoomAIEntryWrapper\n              chatId={renderingChatId!}\n            />\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      getActions().openChat({ id: GLOBAL_SUMMARY_CHATID });\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'isWebAppsCloseConfirmationModalOpen' |\n'giftInfoModal' |\n'suggestedStatusModal' |\n'emojiStatusAccessModal' |\n'locationAccessModal' |\n'aboutAdsModal' |\n'giftUpgradeModal' |\n'monetizationVerificationModal' |\n'giftWithdrawModal' |\n'preparedMessageModal' |\n'sharePreparedMessageModal' |\n'giftStatusInfoModal' |\n'giftTransferModal' |\n'chatRefundModal' |\n'isFrozenAccountModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport {\n  createNewFeatureReminderMessage, generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const { scrollToBottom } = useScrollToBottom();\n\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n    scrollToBottom();\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleNewFeature = () => {\n    const newFeatureMessage: Message = createNewFeatureReminderMessage();\n    insertMessage(newFeatureMessage);\n  };\n\n  const handleActions = (payload:any) => {\n    const { action } = payload;\n    if (payload.chatId === chatId) {\n      switch (action) {\n        case 'summary':\n          handleSummarize();\n          break;\n        case 'schedule-meet':\n          handleScheduleMeeting();\n          break;\n        case 'todo':\n          handleActionItems();\n          break;\n        case 'new-feature':\n          handleNewFeature();\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    eventEmitter.on(Actions.RoomAIActions, handleActions);\n    return () => {\n      eventEmitter.off(Actions.RoomAIActions, handleActions);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summarize\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Schedule meeting\n      </div>\n      <div className={actionItemClassName} onClick={handleActionItems}>\n        ✅ To-do list\n      </div>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\nimport React, {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { searchPortrait } from '../../../util/userPortrait';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { sendGAEvent } from '../utils/analytics';\nimport { getCurrentUserInfo, getHitTools } from '../utils/chat-api';\nimport { getAuthState, isTokenValid } from '../utils/google-auth';\nimport { toolsEmbeddingStore } from '../vector-store';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport {\n  createGoogleLoginMessage, createGoogleMeetingMessage,\n  createRoomDescriptionMessage, createUserPortraitMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const { userId, userName } = getCurrentUserInfo();\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: chatId,\n    sendExtraMessageFields: true,\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message:Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage as UIMessage[]);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify(response),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n    }\n  }, [insertMessage, messages, setMessages]);\n\n  const updateToken = useCallback((payload:{ message:Message;token:string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if (status === 'ready' && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  const toolsHitCheck = (formMessage: Message) => {\n    getHitTools(formMessage.content).then((toolResults) => {\n      setIsLoading(false);\n      if (toolResults && toolResults.length > 0) {\n        toolResults.forEach((toolCall: any) => {\n          if (toolCall.toolName === 'checkIsCreateMeet') {\n            // TODO createMeet\n            const auth = getAuthState();\n            if (!auth || !isTokenValid(auth)) {\n              insertMessage(createGoogleLoginMessage());\n            } else {\n              insertMessage(createGoogleMeetingMessage());\n            }\n            sendGAEvent('google_meet');\n          } else if (toolCall.toolName === 'checkIsUserPortrait') {\n            const userName = toolCall.result?.keyword;\n            insertMessage(createUserPortraitMessage(userName));\n          } else if (toolCall.toolName === 'nullTool') {\n            // eslint-disable-next-line no-console\n            console.log('没有命中工具');\n            setMessages((prev) => prev.slice(0, prev.length - 1));\n            ChataiStores.message?.delMessage(formMessage.id);\n            append({\n              role: 'user',\n              content: formMessage.content,\n              id: uuidv4(),\n              createdAt: new Date(),\n            });\n          }\n        });\n      }\n    }).catch((error) => {\n      setIsLoading(false);\n      // eslint-disable-next-line no-console\n      console.log(error);\n    });\n  };\n\n  const handleInputSubmit = async (value: string) => {\n    scrollToBottom();\n    const newMessage:Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    setMessages((messages) => {\n      return [...messages, newMessage];\n    });\n    setIsLoading(true);\n    // local tool embending check\n    const vectorSearchResults = await toolsEmbeddingStore.similaritySearch({\n      query: value,\n      k: 10,\n    });\n    const matchs = vectorSearchResults.similarItems.filter((item:any) => item.score > 0.8);\n    if (matchs.length > 0 || searchPortrait(value)) {\n      toolsHitCheck(newMessage);\n    } else {\n      setIsLoading(false);\n      setMessages((prev) => prev.slice(0, prev.length - 1));\n      ChataiStores.message?.delMessage(newMessage.id);\n      append(newMessage);\n    }\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable teactn/no-unused-prop-types */\n/* eslint-disable react/no-unused-prop-types */\n\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../../../lib/injectComponent';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst injectMessageAI = injectComponent(RoomAI);\nconst RoomAIWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  const containerRef = useRef<HTMLDivElement | null>(null);\n  useEffect(() => {\n    let injected: { unmount: () => void } | undefined;\n    const timer = setTimeout(() => {\n      if (containerRef.current && chatId && chatId !== GLOBAL_SUMMARY_CHATID) {\n        injected = injectMessageAI(containerRef.current, { ...props });\n      }\n    }, 500); // 等动画走完再注入\n\n    return () => {\n      clearTimeout(timer);\n      injected?.unmount();\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Menu from '../../ui/Menu';\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [shouldPlay, play] = useFlag();\n\n  const lang = useLang();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const ribbonText = gift.isPinned && gift.gift.type === 'starGiftUnique'\n    ? lang('GiftSavedNumber', { number: gift.gift.number })\n    : totalIssued\n      ? lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) })\n      : undefined;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const handleOnIntersect = useLastCallback((entry: IntersectionObserverEntry) => {\n    if (entry.isIntersecting) play();\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift.gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift.gift]);\n\n  useOnIntersect(ref, observeIntersection, sticker ? handleOnIntersect : undefined);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.root, 'scroll-item')}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        play={shouldPlay}\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color=\"blue\"\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId,\n} from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const getGiftId = useLastCallback((gift: ApiSavedStarGift) => (\n    `${gift.date}-${gift.fromId}-${gift.gift.id}`\n  ));\n  const giftIds = useMemo(() => renderingGifts?.map(getGiftId), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map(getGiftId);\n    const newGiftIds = gifts.map(getGiftId);\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(oldLang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getGiftId(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getGiftId(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={oldLang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\n// Sometimes px values are rounded\nconst ROUNDING_COMPENSATION_PX = 1;\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight + ROUNDING_COMPENSATION_PX;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isUserPortrait?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n  UserPortrait,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  isUserPortrait,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return true;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isUserPortrait ? (\n    HeaderContent.UserPortrait\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        // eslint-disable-next-line react/jsx-no-bind\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Serena AI\" />\n              <h3 className=\"title\">{oldLang('Serena AI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      case HeaderContent.UserPortrait:\n        return <h3 className=\"title\">{oldLang('Portrait')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useMarkScrolled from '../../hooks/useMarkScrolled/useMarkScrolled';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport UserPortrait from './userPortrait/UserPortrait';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  userPortraitUserId?: string;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  userPortraitUserId,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n    toggleUserPortrait,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isUserPortrait = contentKey === RightColumnContent.UserPortrait;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useMarkScrolled({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserPortrait:\n        toggleUserPortrait({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n      case RightColumnContent.UserPortrait:\n        return userPortraitUserId && <UserPortrait userId={userPortraitUserId} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isUserPortrait={isUserPortrait}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const { userPortraitUserId } = selectTabState(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      userPortraitUserId,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport GuidanceModal from '../chatAssistant/component/guidance/guidance-modal';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      <GuidanceModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}"],"names":["silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","Promise","all","Object","values","map","sound","prevSrc","src","muted","volume","play","then","pause","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","async","fetchGroupCall","global","groupCall","selectIsCurrentUserFrozen","result","callApi","call","getGlobal","existingGroupCall","selectGroupCall","id","updateGroupCall","omit","undefined","isLoaded","participantsCount","setGlobal","requestGroupCallParticipants","nextOffset","offset","addActionHandler","actions","payload","force","tabId","getCurrentTabId","updateTabState","isCallPanelVisible","selectTabState","subscribed","chatId","chat","selectChat","peer","requestMasterAndJoinGroupCall","accessHash","selectActiveGroupCall","hasPublicUsername","Boolean","getMainUsername","inviteLink","selectChatFullInfo","canSelfUnmute","copyTextToClipboard","showNotification","message","key","username","inviteHash","fetchChatByUsername","langProvider","full","loadFullChat","requestMasterAndCallAction","action","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","window","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","userId","isVideo","selectUser","state","participantId","adminId","currentUserId","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","length","getTracks","forEach","track","stop","checkMicrophonePermission","catch","audio","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","filter","isOwn","peerId","reaction","type","unshift","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","byTabId","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","updateChatLastMessage","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","currentChatId","getMessageText","text","emoji","tabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","shouldCreateMessageIfNeeded","apiUpdate","clearMessageTranslation","keys","selectChatScheduledMessages","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","thread","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","actionText","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","selectPeer","isApiPeerChat","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","viewportIds","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","amount","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","userFullNames","userFullName","getUserFullName","oldTranslate","selectEditingMessage","setEditingId","cancelApiProgress","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","Array","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","fetchUnreadReactions","webPagePreview","selectPollFromMessage","shouldResetVoters","pollResults","voters","votes","vote","offsets","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","autoTranslateLanguage","settings","byKey","voice","mediaHash","getMediaHash","mediaLoader","fetch","blob","formData","FormData","append","audioToText","transcriptionText","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","autologinToken","autologinDomains","hostname","searchParams","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","userName","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","ChataiStores","addUser","name","firstName","lastName","phoneNumber","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","collator","Intl","Collator","sortedUsers","compare","isSelf","contact","addContact","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","replaceIsWebAppModalOpen","value","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","allowPaidStars","resultId","scheduleDate","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","price","balance","stars","openStarsBalanceModal","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","hasErrorKey","sendStarPaymentForm","directInfo","formId","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","slug","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","idsByCategoryName","stock","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","starsCategory","starGifts","idsByCategory","shouldRefresh","currentGifts","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","newGifts","replacePeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","loadPeerSavedGifts","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","interactionLocalId","availableReaction","aroundAnimation","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","isChatAIShown","nextProfileTab","lastIsChatInfoShown","isUserPortraitShown","userPortraitUserId","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","renderMessageSummaryHtml","lang","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","statefulContent","getMessageStatefulContent","getMessageSummaryDescription","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","getMessageSummaryText","copyHtmlToClipboard","addTabStateResetterAction","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","getTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftStatusInfoModal","giftTransferModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","shouldRemove","removeGroupCall","isCallNotEmpty","participants","groupCallId","participant","updateGroupCallParticipant","playGroupCallSound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","totalAmount","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","CarouselItem","children","React","cx","injectMessageAI","injectComponent","GuidanceCarousel","handleClose","carouselRef","useRef","handleNextClick","goTo","onClick","CloseIcon","Carousel","ref","GuidanceWrapper","containerRef","useEffect","createElement","GuidanceModal","telegptGuidance","getItem","isFirstIn","setIsFirstIn","useState","useLastCallback","setItem","Modal","noBackdropClose","onClose","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","UnreadCounter","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","updateAppBadge","formatIntegerCompact","AIKnowledge","Loading","AITranslate","ArchivedChats","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","menuItems","useMemo","Fragment","MenuItem","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","LeftSearch","ActiveTag","folderType","setActiveTag","item","currentTag","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","aiChatFolders","onDelete","xmlns","height","fill","d","PRESET_TAGS","PresetTagModal","activeTag","tagList","PRESET_FOLDER_ID","getAITags","dialogStyle","onClickTag","withGlobal","folderInvitesById","archived","archivedStories","sessions","orderedFolderIds","shouldSkipHistoryAnimations","isStoryRibbonShown","filterAIFolder","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","ChatFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","useFlag","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","res","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","loading","isShowTip","tipShowRes","eventEmitter","on","Actions","UpdateAIChatFoldersApplying","off","placeholderRef","shouldRenderPlaceholder","noMountTransition","getFolderType","shouldRenderFolders","renderCurrentTab","activeFolder","isFolder","ChatList","canDisplayArchive","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","AIChatFoldersTip","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","ConnectionStatusOverlay","Spinner","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","account","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","animationLevel","attachBots","selectTheme","canInstall","accountsTotalLimit","LeftSideMenuItems","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","onSelectAIKnowledge","onSelectAITranslate","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","aiChatFoldersLoading","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","emit","confirm","onOk","deleteAiChatFoldersFromUser","hideTip","onCancel","updateAIChatFoldersLoading","isApply","UpdateSettingAIChatFoldersLoading","IS_MULTIACCOUNT_SUPPORTED","AIKnowledgeIcon","alt","style","buildStyle","AITranslateIcon","AIChatFolderIcon","checked","disabled","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","StatusButton","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","LeftMainHeader","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","AIMenuIcon","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchRelevant","GlobalSearch","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","AI","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","ShowTransition","isCustom","TRANSITION_RENDER_COUNT","closeTimeout","LeftMain","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","setShouldRenderUpdateButton","webFireBase","setWebFireBase","handleFireBaseUpdate","force_update_current_version","UPDATE_DEFER_KEY","compareVersion","UpdateFirebaseConfig","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","fireBaseAnalytics","deferUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewerAsync","MediaViewer","ReactionPicker","MessageListHistoryHandler","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","waitBlob","Blob","serenaWaiting","serenaWaitUrl","createObjectURL","workBlob","serenaWorking","serenaWorkUrl","openChatAIWithInfo","setUnreadCount","dotLottie","setDotLottie","isSummary","setIsSummary","RoomStorage","updateRoomAIData","updateUnreadCount","updateSummaryState","intervalAnimate","interval","getRoomAIUnreadCount","summaryState","getRoomAISummaryState","summary","UpdateRoomAIUnreadCount","UpdateRoomAISummaryState","dotLottieRefCallback","DotLottieReact","autoplay","viewportPinnedIds","lastFocusedId","clampIndex","PureMultimodalInput","setMessages","handleInputSubmit","textareaRef","useWindowSize","adjustHeight","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","finalValue","submitForm","AITextarea","target","rows","autoFocus","onKeyDown","toast","StopButton","SendButton","input","MultiInput","prevProps","nextProps","PureStopButton","sanitizeUIMessages","StopIcon","PureSendButton","FloatingActionButton","handleClick","buttonClassName","InputText","success","readOnly","inputMode","maxLength","teactExperimentControlled","onInput","onKeyPress","onBlur","onPaste","labelText","fullClassName","htmlFor","TextArea","maxLengthIndicator","noReplaceNewlines","resizeHeight","element","requestMutation","requestForcedReflow","newHeight","useLayoutEffect","textarea","currentTarget","previousSelectionEnd","selectionEnd","AddTopicPanel","telegptSettings","openDrawer","drawerParams","useDrawerStore","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","setPhoneNumber","initialValues","prompt","is_call","is_open","setForm","handleTopicNameChange","topicName","prev","handleTopicDescriptionChange","topicDescription","handlePhoneNumberChange","handleSave","updateUrgentTopic","DrawerKey","PersonalizeSettings","showMessage","setSettingOption","Switch","PickerChatItem","isChecked","customPeer","realPeer","isUser","getGroupStatus","getUserStatus","getSubtitle","specialTitle","Checkbox","isSavedMessages","clickOpenRoom","ChatPickerPanel","getOrderedIds","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","onSave","Input","Group","CustomizationPromptPanel","titleError","setTitleError","promptError","setPromptError","updateSummarizeTemplate","Message","getCurrentUserInfo","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","setIsLoading","useChat","api","SERVER_API_URL","sendExtraMessageFields","initialMessages","role","handleInput","handleReply","handleFocusMessage","Skeleton","paragraph","renderMessage","formatTimestamp","ChatAvatar","cn","similarResult","knowledgeEmbeddingStore","similaritySearch","similarItems","score","answer","chatAIGenerate","onResponse","onFinish","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","relevantMessages","listData","ErrorBoundary","MessagePanel","SelectedChats","onOpenChatSelect","renderChatItem","SummaryItem","template","selectedTemp","handleSelect","user_id","CustomizationPrompt","AddSummaryTemplate","handleAdd","SummarizeTab","curious_info","summary_chat_ids","curious_id","selectSummaryChatIds","getIdsFromEntityTypes","summaryTemplate","setSummaryTemplate","originSelectedTemp","setOriginSelectedTemp","setSelectedTemp","setSelectedChats","actionsVisable","isEqual","handleTemplateSelect","selectedId","newSelected","handleDelete","newSelectedTemp","deleteSummarizeTemplate","newSummaryTemplate","handleOpenChatSelect","ChatPicker","entityTypes","buildEntityTypeFromIds","handleDeleteSummaryChat","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","UrgentAlertTab","urgent_info","urgent_chat_ids","selectUrgentChatIds","setTopics","urgentCheckTask","updateUrgentChats","deleteUrgentTopic","t","selectedTabIndex","setSelectedTabIndex","hasBackDrawer","HeaderButton","drawerKey","setTitle","handleBack","OriginalMessages","RightPanel","closeDrawer","rightPanelContent","setRightPanelContent","RightHeader","SummaryHeaderActions","handleShowRightPanel","getGptSettings","SettingIcon","UrgentNotification","contextHolder","useNotification","msg","parsedMessage","padding","SerenaLogoPath","DangerIcon","notificationUrgentMessage","GlobalSummary","forwardRef","notificationMessage","setNotificationMessage","summaryMessages","setSummaryMessages","viewMessages","setViewMessages","pageInfo","setPageInfo","lastTime","scrollToBottom","scrollLocked","isScrollLock","useScrollToBottom","GLOBAL_SUMMARY_CHATID","orderBy","createdAt","getTime","handleLoadMore","resolve","getMessages","localChatAiMessages","parseSummaryStoreMessage2Message","handleAddSummaryMessage","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","lastFocusTime","getRoomLastFocusTime","globalSummaryTask","initSummaryChats","deleteMessage","delMessage","uuidv4","msgs","parseMessage2SummaryStoreMessage","storeMessages","SerenaPath","Messages","loadMore","memoSelectChat","GlobalSummaryWrapper","injected","unmount","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ScrollDownButton","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","FloatingActionButtons","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","margin","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","ContactGreeting","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","MessageListAccountInfo","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","OptimizedVideo","canPlay","disablePictureInPicture","playsInline","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","PortraitTagColors","UserPortraitBaseCard","portraitInfo","setPortraitInfo","getPortraitInfo","userPortrait","getUserPortrait","handlePortraitClick","openUserPortrait","langs","UserPortraitBasicCardMenu","menuRef","menuPositionOptions","markMouseInside","useMouseInside","withPortal","noCompact","UserPortraitBasicCard","SenderGroupAvatar","avatarPeer","handleAvatarClick","hiddenName","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","contextMenuAnchor","setContextMenuAnchor","triggerRef","getTriggerElement","getMenuElement","getRootElement","closest","getLayout","shouldAvoidNegativePosition","handleActivateSymbolMenu","triggerEl","getBoundingClientRect","ResponsiveHoverButton","onActivate","anchor","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","SenderGroupContainer","appearanceOrder","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarRef","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","MessageAppendix","MessageListContent","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","ICON_SIZE","NoMessages","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","runDebouncedForScroll","autoTranslate","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","MessageList","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","requestMessageTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","useInterval","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","RequirementToContactMessage","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","AudioPlayer","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","getMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","getMediaDuration","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RippleEffect","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","PinnedMessageNavigation","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","HeaderPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","MiddleHeader","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isTablet","isDesktop","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","HeaderActions","canExpandActions","sponsoredMessage","BotAdPane","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","BotVerificationPane","markBotVerificationInfoShown","markAsShowed","iconId","ChatReportPane","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","onCheck","chargedPaidMessageStars","PaidMessageChargePane","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","MiddleHeaderPanes","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","isSerena","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","handleAnalyticsMessage","isMeetingInitiator","messageText","ASK_MEETING_TIME_AND_EMAIL","ASK_MEETING_TIME","ASK_MEETING_EMAIL","MEETING_INVITATION_TIP","existingMeetTask","ScheduleMeeting","cleanup","scheduleMeeting","create","timeout","meetingMentionMessage","createMeetingMentionMessage","storeMessage","parseMessage2StoreMessage","AddRoomAIMessage","IntentionToScheduleMeeting","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","offsetWidth","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","RoomAIEntryWrapper","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","FrozenAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","actionItemClassName","RoomActions","insertMessage","handleScheduleMeeting","scheduleGoogleMeeting","handleSummarize","summaryRoomMessage","handleActionItems","generateRoomActionItems","handleActions","handleNewFeature","newFeatureMessage","createNewFeatureReminderMessage","RoomAIActions","domValue","RoomAIInput","RoomAIInner","tokenRef","CHATAI_IDB_STORE","newMessages","initDate","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleCreateCalendarSuccess","createGoogleLoginMessage","mergeMesssage","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","rightPanelBg","formMessage","toolsEmbeddingStore","searchPortrait","getHitTools","toolResults","toolCall","toolName","auth","getAuthState","isTokenValid","sendGAEvent","keyword","createUserPortraitMessage","RoomAI","timer","localContactIds","isSearching","NewChatMembersProgress","AddChatMembers","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","SavedGift","shouldPlay","canManage","totalIssued","getTotalGiftAvailability","ribbonText","total","handleOnIntersect","CUSTOM_PEER_HIDDEN","getStickerFromGift","radialPatternBackdrop","backdrop","pattern","getGiftAttributes","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","AnimatedIconFromSticker","noLoop","nonInteractive","GiftRibbon","GiftMenuItems","PreviewMedia","idPrefix","isProtected","useIsIntersecting","getMessageMediaThumbDataUri","transitionClassNames","useMediaTransitionDeprecated","decoding","formatMediaDuration","TABS","shouldWarnAboutSvg","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","similarChannels","similarBots","limitSimilarPeers","commonChatIds","Profile","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","getGiftId","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","realTimeAssistants","isColumnOpen","isChatAI","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","isUserPortrait","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","chatType","handleSwitchRealTimeAssistant","setShouldSkipTransition","contentKey","ChatAI","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","UserPortrait","renderingContentKey","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","RightColumn","toggleChatInfo","toggleChatAIInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","toggleUserPortrait","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useMarkScrolled","selector","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","StoryViewerAsync","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","DialogsAsync","Dialogs","processedHashes","downloadedHashes","DownloadManager","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","GameModal","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","NotificationsAsync","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","ConfettiContainer","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","left","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","FILTER_ID","waveInfo","WaveContainer","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadBundle","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","ModalContainer","stickerSetShortName","SnapEffectContainer","UnreadCount","passcodeSettings","LockScreen","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","useShowTransitionDeprecated","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}