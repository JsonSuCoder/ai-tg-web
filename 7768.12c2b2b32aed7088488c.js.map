{"version":3,"file":"7768.12c2b2b32aed7088488c.js","mappings":"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","sources":["webpack://TeleGPT/./src/global/helpers/meta.ts","webpack://TeleGPT/./src/util/PopupManager.ts","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-input.tsx","webpack://TeleGPT/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://TeleGPT/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://TeleGPT/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://TeleGPT/./src/global/actions/ui/stars.ts","webpack://TeleGPT/./src/components/payment/PaymentModal.async.tsx","webpack://TeleGPT/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://TeleGPT/./src/global/actions/api/twoFaSettings.ts","webpack://TeleGPT/./src/global/actions/api/bots.ts","webpack://TeleGPT/./src/util/payments/stripe.ts","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-button.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-actions.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.module.scss?0db0","webpack://TeleGPT/./src/global/actions/api/stars.ts","webpack://TeleGPT/./src/global/actions/ui/messages.ts","webpack://TeleGPT/./src/hooks/usePreventPinchZoomGesture.ts","webpack://TeleGPT/./src/components/main/HistoryCalendar.async.tsx","webpack://TeleGPT/./src/global/actions/ui/chats.ts","webpack://TeleGPT/./src/components/middle/helpers/groupMessages.ts","webpack://TeleGPT/./src/global/actions/api/symbols.ts","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://TeleGPT/./src/components/main/Main.tsx","webpack://TeleGPT/./src/components/middle/hooks/useContainerHeight.ts","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://TeleGPT/./src/components/middle/PinnedMessageNavigation.tsx","webpack://TeleGPT/./src/components/main/SafeLinkModal.async.tsx","webpack://TeleGPT/./src/global/actions/ui/calls.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-panel.tsx","webpack://TeleGPT/./src/components/main/premium/GiveawayModal.async.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://TeleGPT/./src/util/updateIcon.ts","webpack://TeleGPT/./src/components/main/NewContactModal.async.tsx","webpack://TeleGPT/./src/global/reducers/reactions.ts","webpack://TeleGPT/./src/global/actions/ui/statistics.ts","webpack://TeleGPT/./src/components/payment/ReceiptModal.async.tsx","webpack://TeleGPT/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://TeleGPT/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://TeleGPT/./src/components/main/visualEffects/WaveContainer.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/GlobalSummaryWrapper.tsx","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.tsx","webpack://TeleGPT/./src/hooks/useResize.ts","webpack://TeleGPT/./src/components/left/search/LeftSearch.async.tsx","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://TeleGPT/./src/components/left/main/ContactList.async.tsx","webpack://TeleGPT/./src/components/left/main/AccountMenuItems.tsx","webpack://TeleGPT/./src/global/actions/ui/users.ts","webpack://TeleGPT/./src/components/right/CreateTopic.async.tsx","webpack://TeleGPT/./src/components/middle/hooks/usePinnedMessage.ts","webpack://TeleGPT/./src/global/actions/ui/credits.ts","webpack://TeleGPT/./src/components/middle/MiddleColumn.tsx","webpack://TeleGPT/./src/components/middle/ScrollDownButton.tsx","webpack://TeleGPT/./src/components/left/ConnectionStatusOverlay.tsx","webpack://TeleGPT/./src/components/main/GameModal.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/customization-prompt-panel.tsx","webpack://TeleGPT/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://TeleGPT/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://TeleGPT/./src/components/calls/ActiveCallHeader.async.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/users.ts","webpack://TeleGPT/./src/hooks/useNativeCopySelectedMessages.ts","webpack://TeleGPT/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://TeleGPT/./src/global/actions/ui/misc.ts","webpack://TeleGPT/./src/global/reducers/bots.ts","webpack://TeleGPT/./src/global/actions/api/messages.ts","webpack://TeleGPT/./src/components/middle/ReactorListModal.async.tsx","webpack://TeleGPT/./src/components/common/SeenByModal.async.tsx","webpack://TeleGPT/./src/components/right/PollResults.async.tsx","webpack://TeleGPT/./src/components/calls/phone/PhoneCall.async.tsx","webpack://TeleGPT/./src/global/actions/ui/passcode.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/add-topic-panel.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/upgrade/UpgradeButton.tsx","webpack://TeleGPT/./src/hooks/useCacheBuster.ts","webpack://TeleGPT/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/settings.ts","webpack://TeleGPT/./src/components/left/main/LeftMain.tsx","webpack://TeleGPT/./src/components/right/statistics/Statistics.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/InviteButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/summary-header-actions.tsx","webpack://TeleGPT/./src/global/actions/ui/account.ts","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/message-panel.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/messages.ts","webpack://TeleGPT/./src/components/middle/MessageList.tsx","webpack://TeleGPT/./src/components/common/StickerSetModal.async.tsx","webpack://TeleGPT/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://TeleGPT/./src/components/middle/ContactGreeting.tsx","webpack://TeleGPT/./src/global/actions/api/stories.ts","webpack://TeleGPT/./src/components/middle/MiddleHeader.tsx","webpack://TeleGPT/./src/components/left/settings/Settings.async.tsx","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCard.tsx","webpack://TeleGPT/./src/components/right/userPortrait/UserPortraitBasicCardMenu.tsx","webpack://TeleGPT/./src/global/actions/api/management.ts","webpack://TeleGPT/./src/components/main/BotTrustModal.async.tsx","webpack://TeleGPT/./src/components/left/aiKnowledge/AIKnowledge.async.tsx","webpack://TeleGPT/./src/global/actions/ui/middleSearch.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/chat-picker-panel.tsx","webpack://TeleGPT/./src/util/requestQuery.ts","webpack://TeleGPT/./src/hooks/useMessageMediaMetadata.ts","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/multi-input.tsx","webpack://TeleGPT/./src/global/actions/api/accounts.ts","webpack://TeleGPT/./src/components/left/aiTranslate/AITranslate.async.tsx","webpack://TeleGPT/./src/components/right/GifSearch.async.tsx","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai.tsx","webpack://TeleGPT/./src/components/left/main/LeftMainHeader.tsx","webpack://TeleGPT/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-attachments-modal.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredMessage.tsx","webpack://TeleGPT/./src/global/actions/api/payments.ts","webpack://TeleGPT/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://TeleGPT/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://TeleGPT/./src/components/right/hooks/useProfileState.ts","webpack://TeleGPT/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://TeleGPT/./src/components/common/UnreadCounter.tsx","webpack://TeleGPT/./src/components/middle/hooks/useScrollHooks.ts","webpack://TeleGPT/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://TeleGPT/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://TeleGPT/./src/global/actions/api/users.ts","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://TeleGPT/./src/components/right/AddChatMembers.tsx","webpack://TeleGPT/./src/components/main/DeleteFolderDialog.async.tsx","webpack://TeleGPT/./src/global/actions/ui/globalSearch.ts","webpack://TeleGPT/./src/components/right/RightColumn.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/global-summary.tsx","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://TeleGPT/./src/components/left/main/ChatFolders.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/preset-modal.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/calls.ts","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/personalized-settings.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-carousel.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-wrapper.tsx","webpack://TeleGPT/./src/components/right/Profile.tsx","webpack://TeleGPT/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://TeleGPT/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/right-header.tsx","webpack://TeleGPT/./src/components/common/DeleteMessageModal.async.tsx","webpack://TeleGPT/./src/global/actions/ui/mediaViewer.ts","webpack://TeleGPT/./src/components/middle/panes/AudioPlayer.tsx","webpack://TeleGPT/./src/components/main/DownloadManager.tsx","webpack://TeleGPT/./src/components/right/hooks/useProfileViewportIds.ts","webpack://TeleGPT/./src/components/middle/panes/BotVerificationPane.tsx","webpack://TeleGPT/./src/util/updatePageTitle.ts","webpack://TeleGPT/./src/components/middle/panes/ChatReportPane.tsx","webpack://TeleGPT/./src/components/common/gift/SavedGift.module.scss?4193","webpack://TeleGPT/./src/components/common/gift/SavedGift.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/symbols.ts","webpack://TeleGPT/./src/components/story/StoryViewer.async.tsx","webpack://TeleGPT/./src/components/middle/MessageListContent.tsx","webpack://TeleGPT/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://TeleGPT/./src/components/chatAssistant/component/FloatingActionButton.tsx","webpack://TeleGPT/./src/global/actions/api/reactions.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/chats.ts","webpack://TeleGPT/./src/components/chatAssistant/assets/lottieData/index.ts","webpack://TeleGPT/./src/components/common/PreviewMedia.tsx","webpack://TeleGPT/./src/global/actions/apiUpdaters/misc.ts","webpack://TeleGPT/./src/components/middle/message/SenderGroupContainer.tsx","webpack://TeleGPT/./src/global/actions/ui/bots.ts","webpack://TeleGPT/./src/global/actions/ui/reactions.ts","webpack://TeleGPT/./src/components/middle/ChatLanguageModal.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/global-summary/urgent-notification.tsx","webpack://TeleGPT/./src/components/middle/NoMessages.tsx","webpack://TeleGPT/./src/global/actions/api/statistics.ts","webpack://TeleGPT/./src/components/middle/RequirementToContactMessage.tsx","webpack://TeleGPT/./src/components/common/AboutMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/right/hooks/useTransitionFixes.ts","webpack://TeleGPT/./src/components/main/DraftRecipientPicker.async.tsx","webpack://TeleGPT/./src/global/actions/ui/stickerSearch.ts","webpack://TeleGPT/./src/components/middle/message/SenderGroupAvatar.tsx","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-entry-wrapper.tsx","webpack://TeleGPT/./src/components/middle/search/MiddleSearch.async.tsx","webpack://TeleGPT/./src/components/middle/MessageListAccountInfo.tsx","webpack://TeleGPT/./src/util/getIsAppUpdateNeeded.ts","webpack://TeleGPT/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://TeleGPT/./src/hooks/useConnectionStatus.ts","webpack://TeleGPT/./src/hooks/window/useBrowserOnline.ts","webpack://TeleGPT/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/ai-chatfolders/active-tag.tsx","webpack://TeleGPT/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/rooms-tab.tsx","webpack://TeleGPT/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://TeleGPT/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://TeleGPT/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://TeleGPT/./src/components/modals/ModalContainer.tsx","webpack://TeleGPT/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://TeleGPT/./src/components/modals/boost/BoostModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://TeleGPT/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://TeleGPT/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://TeleGPT/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://TeleGPT/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://TeleGPT/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://TeleGPT/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://TeleGPT/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/map/MapModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://TeleGPT/./src/components/modals/credits/CreditsModal.async.tsx","webpack://TeleGPT/./src/components/modals/inviteCode/InviteCodeModal.async.tsx","webpack://TeleGPT/./src/components/modals/inviteFriends/InviteFriendsModal.async.tsx","webpack://TeleGPT/./src/components/modals/membership/PayPackageModal.async.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://TeleGPT/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://TeleGPT/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://TeleGPT/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://TeleGPT/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://TeleGPT/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://TeleGPT/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://TeleGPT/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://TeleGPT/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://TeleGPT/./src/components/left/main/LeftSideMenuItems.tsx","webpack://TeleGPT/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://TeleGPT/./src/global/actions/api/middleSearch.ts","webpack://TeleGPT/./src/components/left/ArchivedChats.async.tsx","webpack://TeleGPT/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://TeleGPT/./src/components/calls/group/GroupCall.async.tsx","webpack://TeleGPT/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/Spinner.tsx","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://TeleGPT/./src/components/right/EditTopic.async.tsx","webpack://TeleGPT/./src/components/middle/hooks/useStickyDates.ts","webpack://TeleGPT/./src/components/chatAssistant/room-ai/room-ai-wrapper.tsx","webpack://TeleGPT/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://TeleGPT/./src/components/right/RightHeader.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/urgent-alert-tab.tsx","webpack://TeleGPT/./src/components/right/management/Management.async.tsx","webpack://TeleGPT/./src/components/right/statistics/BoostStatistics.tsx","webpack://TeleGPT/./src/components/main/LockScreen.tsx","webpack://TeleGPT/./src/components/left/NewChatButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/rightPanel/surmarize-tab.tsx","webpack://TeleGPT/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://TeleGPT/./src/components/left/main/StatusButton.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/TextArea.tsx","webpack://TeleGPT/./src/components/main/Dialogs.async.tsx","webpack://TeleGPT/./src/components/left/LeftColumn.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/guidance/guidance-modal.tsx","webpack://TeleGPT/./src/global/actions/api/sync.ts","webpack://TeleGPT/./src/components/main/Notifications.async.tsx","webpack://TeleGPT/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://TeleGPT/./src/components/main/LockScreen.module.scss?8252","webpack://TeleGPT/./src/global/actions/apiUpdaters/payments.ts","webpack://TeleGPT/./src/global/actions/ui/stories.ts","webpack://TeleGPT/./src/components/middle/MessageListHistoryHandler.tsx","webpack://TeleGPT/./src/components/middle/FloatingActionButtons.tsx","webpack://TeleGPT/./src/components/middle/hooks/useMessageObservers.ts","webpack://TeleGPT/./src/components/left/newChat/NewChat.async.tsx","webpack://TeleGPT/./src/components/right/StickerSearch.async.tsx","webpack://TeleGPT/./src/components/chatAssistant/component/InputText.tsx","webpack://TeleGPT/./src/global/actions/api/globalSearch.ts","webpack://TeleGPT/./src/global/actions/ui/payments.ts","webpack://TeleGPT/./src/bundles/main.ts"],"sourcesContent":["import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import { IS_ANDROID, IS_IOS } from './browser/windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened.location.href = url;\n      this.preOpened.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import React from '@teact';\nimport { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","/* eslint-disable no-null/no-null */\n/* eslint-disable consistent-return */\n/* eslint-disable @typescript-eslint/no-use-before-define */\n/* eslint-disable max-len */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-console */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../../lib/utils';\nimport { AITextarea } from '../component/AITextarea';\nimport { Button } from '../component/button';\nimport { StopIcon } from '../icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue:string)=>void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(200, Math.max(90, textareaRef.current.scrollHeight + 2))}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '90px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      adjustHeight();\n    }\n    // Only run once after hydration\n    // eslint-disable-next-line react-hooks/exhaustive-deps, react-hooks-static-deps/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Ask me about your chats...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[90px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-row items-center justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const RoomAIInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#B27AFF] text-[24px]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { InlineBotSettings } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig?.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { DotLottie } from '@lottiefiles/dotlottie-react';\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport RoomStorage from '../room-storage';\n\n// import Button from '../../ui/Button';\nimport './room-ai.scss';\n\nimport { serenaWaitUrl, serenaWorkUrl } from '../assets/lottieData/index';\n// import SerenaLogoPath from '../assets/serena.png';\n\ninterface OwnProps {\n  chatId: string;\n}\n\nconst RoomAIEntryButton = (props: OwnProps) => {\n  const { chatId } = props;\n  const { openChatAIWithInfo } = getActions();\n  const [unreadCount, setUnreadCount] = useState(0);\n  // eslint-disable-next-line no-null/no-null\n  const [dotLottie, setDotLottie] = useState<DotLottie | null>(null);\n  const [isSummary, setIsSummary] = useState<boolean>(false);\n  const containerRef = useRef<HTMLDivElement>(undefined);\n  const onClick = useCallback((e: React.MouseEvent) => {\n    // 检查是否正在拖拽，如果是则阻止点击\n    const wrapper = e.currentTarget.closest('.room-ai-entry-wrapper');\n    if (wrapper && wrapper.getAttribute('data-dragging') === 'true') {\n      e.preventDefault();\n      e.stopPropagation();\n      return;\n    }\n\n    openChatAIWithInfo({ chatId });\n    RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    setUnreadCount(0);\n  }, [chatId, openChatAIWithInfo]);\n  const updateUnreadCount = useCallback((param:{ chatId:string; count:number }) => {\n    if (param.chatId === chatId) {\n      setUnreadCount(param.count);\n    }\n  }, [chatId]);\n  const updateSummaryState = useCallback((param:{ chatId:string; state:boolean }) => {\n    if (param.chatId === chatId) {\n      setIsSummary(param.state);\n    }\n  }, [chatId]);\n  const intervalAnimate = useCallback(() => {\n    if (dotLottie && !isSummary) {\n      dotLottie.play();\n    }\n  }, [dotLottie, isSummary]);\n\n  useEffect(() => {\n    const interval = setInterval(intervalAnimate, 10000);\n    return () => clearInterval(interval);\n  }, [chatId, intervalAnimate]); useEffect(() => {\n    eventEmitter.on(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n    eventEmitter.on(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    const count = RoomStorage.getRoomAIUnreadCount(chatId);\n    const summaryState = RoomStorage.getRoomAISummaryState(chatId);\n    setUnreadCount(count);\n    setIsSummary(summaryState);\n    RoomStorage.summary(chatId);\n    return () => {\n      eventEmitter.off(Actions.UpdateRoomAIUnreadCount, updateUnreadCount);\n      eventEmitter.off(Actions.UpdateRoomAISummaryState, updateSummaryState);\n    };\n  }, [chatId, updateSummaryState, updateUnreadCount]);\n\n  const dotLottieRefCallback = useCallback((dotLottie:DotLottie) => {\n    setDotLottie(dotLottie);\n  }, []);\n\n  const handleMouseEnter = useCallback(() => {\n    if (dotLottie) {\n      dotLottie?.play();\n    }\n  }, [dotLottie]);\n  // 确保当 isSummary 为 true 时动画播放\n  useEffect(() => {\n    if (isSummary && dotLottie) {\n      dotLottie.play();\n    }\n  }, [isSummary, dotLottie]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"room-ai-entry-button\"\n\n    >\n      {isSummary ? (\n        <DotLottieReact\n          key=\"serenaWork\"\n          className=\"w-[62px] h-[62px]\"\n          src={serenaWorkUrl}\n          loop\n          autoplay\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n        />\n      ) : (\n        <DotLottieReact\n          key=\"serenaWait\"\n          className=\"w-[60px] h-[60px]\"\n          src={serenaWaitUrl}\n          loop={false}\n          autoplay={false}\n          dotLottieRefCallback={dotLottieRefCallback}\n          onClick={onClick}\n          onMouseEnter={handleMouseEnter}\n        />\n      )}\n      {unreadCount > 0 && (\n        <div className=\"room-ai-unread-count\">{unreadCount}</div>\n      )}\n    </div>\n  );\n};\nexport default RoomAIEntryButton;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { Popover } from 'antd';\nimport { getActions } from '../../../global';\n\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport {\n  createNewFeatureReminderMessage, generateRoomActionItems, scheduleGoogleMeeting, summaryRoomMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\n\nconst actionItemClassName = 'py-[6px] px-[12px] border-[1px] border-[#E4E4E4] rounded-[8px] whitespace-nowrap cursor-pointer dark:border-[#292929]';\n\ninterface OwnProps {\n  chatId: string | undefined;\n  insertMessage: (message: Message) => void;\n  setIsLoading: (isLoading: boolean) => void;\n}\nconst RoomActions = ({ chatId, insertMessage, setIsLoading }:OwnProps) => {\n  const { scrollToBottom } = useScrollToBottom();\n\n  const handleScheduleMeeting = () => {\n    setIsLoading(true);\n    scheduleGoogleMeeting(insertMessage, () => setIsLoading(false));\n    scrollToBottom();\n  };\n\n  const handleSummarize = () => {\n    if (chatId) {\n      setIsLoading(true);\n      summaryRoomMessage(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleMediaSummarize = () => {\n    const { openRoomAttachmentsModal } = getActions();\n    openRoomAttachmentsModal();\n  };\n\n  const handleActionItems = () => {\n    if (chatId) {\n      setIsLoading(true);\n      generateRoomActionItems(chatId, insertMessage, () => setIsLoading(false));\n      scrollToBottom();\n    }\n  };\n\n  const handleNewFeature = () => {\n    const newFeatureMessage: Message = createNewFeatureReminderMessage();\n    insertMessage(newFeatureMessage);\n  };\n\n  const handleActions = (payload:any) => {\n    const { action } = payload;\n    if (payload.chatId === chatId) {\n      switch (action) {\n        case 'summary':\n          handleSummarize();\n          break;\n        case 'schedule-meet':\n          handleScheduleMeeting();\n          break;\n        case 'todo':\n          handleActionItems();\n          break;\n        case 'new-feature':\n          handleNewFeature();\n          break;\n        default:\n          break;\n      }\n    }\n  };\n\n  useEffect(() => {\n    eventEmitter.on(Actions.RoomAIActions, handleActions);\n    return () => {\n      eventEmitter.off(Actions.RoomAIActions, handleActions);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId]);\n\n  const popoverContent = (\n    <div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleSummarize}\n      >\n        🧠 Chat Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleMediaSummarize}\n      >\n        📁 Media/File Summary\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleScheduleMeeting}\n      >\n        📅 Schedule meeting\n      </div>\n      <div\n        className=\"px-3 py-2 rounded-[8px] hover:bg-gray-100 dark:hover:bg-[#2a2a2a] cursor-pointer flex items-center gap-2 text-[14px]\"\n        onClick={handleActionItems}\n      >\n        ✅ Action Items\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"flex flex-row gap-[6px] mb-[8px] px-[12px] w-full overflow-x-auto scrollbar-none text-[14px] text-[var(--color-text)]\">\n      <div className={actionItemClassName} onClick={handleSummarize}>\n        🧠 Chat Summary\n      </div>\n      <div className={actionItemClassName} onClick={handleScheduleMeeting}>\n        📅 Meeting\n      </div>\n      <Popover\n        content={popoverContent}\n        trigger=\"click\"\n        placement=\"bottomLeft\"\n        overlayClassName=\"room-actions-popover\"\n      >\n        <div className={actionItemClassName}>\n          🚀 All\n        </div>\n      </Popover>\n    </div>\n  );\n};\n\nexport default RoomActions;\n","// extracted by mini-css-extract-plugin\nexport default {\"globaSummaryBg\":\"mykZ1IJ0\"};","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  RESALE_GIFTS_LIMIT,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n\n  if (!result || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const oldGifts = selectTabState(global, tabId).savedGifts.giftsByPeerId[peerId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig?.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line @stylistic/max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeRoomAttachmentsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isRoomAttachmentsModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    isChatAIShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatAIWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatAIShown: true,\n    isUserPortraitShown: false,\n    isChatInfoShown: false,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n});\n\naddActionHandler('openUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), userId, chatId } = payload || {};\n  const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n  if (chatId && chatId !== currentChatId) {\n    actions.openChat({ id: chatId, tabId });\n  }\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isUserPortraitShown: true,\n    userPortraitUserId: userId,\n  }, tabId);\n  global = { ...global };\n  setGlobal(global);\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCreditsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    creditsModal: { isOpen: true },\n  }, tabId);\n});\n\naddActionHandler('closeCreditsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    creditsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openInviteFriendsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteFriendsModal: { isOpen: true },\n  }, tabId);\n});\n\naddActionHandler('closeInviteFriendsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteFriendsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openInviteCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteCodeModal: { isOpen: true },\n  }, tabId);\n});\n\naddActionHandler('closeInviteCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    inviteCodeModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import '../../global/actions/all';\n\nimport React from '@teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport GuidanceModal from '../chatAssistant/component/guidance/guidance-modal';\nimport RoomAttachmentsModal from '../chatAssistant/room-ai/room-attachments-modal';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n  isRoomAttachmentsModalOpen?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n  isRoomAttachmentsModalOpen,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    closeRoomAttachmentsModal,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable({ isAvailable: true });\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable({ isAvailable: false });\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  const handleRoomAttachmentsModalClose = useLastCallback(() => {\n    closeRoomAttachmentsModal();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, Boolean(IS_ELECTRON));\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n      {isRoomAttachmentsModalOpen && (\n        <RoomAttachmentsModal isOpen={Boolean(isRoomAttachmentsModalOpen)} onClose={handleRoomAttachmentsModalClose} />\n      )}\n      <GuidanceModal />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n      isRoomAttachmentsModalOpen: selectTabState(global).isRoomAttachmentsModalOpen,\n    };\n  },\n)(Main));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { CallSound } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport safePlay from '../../../util/safePlay';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line @stylistic/max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nfunction requestGroupCallParticipants(\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  return callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: {\n      key: 'LinkCopied',\n    },\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.oldTranslate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: 'Sorry, your browser doesn\\'t support group calls',\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload;\n\n  if (!sounds?.[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void requestGroupCallParticipants(groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.oldTranslate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.oldTranslate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.oldTranslate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","\n/* eslint-disable @typescript-eslint/no-shadow */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport type { MessagePanelPayload } from './message-panel';\n\nimport AddTopicPanel from './add-topic-panel';\nimport ChatPickerPanel from './chat-picker-panel';\nimport CustomizationPromptPanel from './customization-prompt-panel';\nimport MessagePanel from './message-panel';\nimport PersonalizeSettings from './personalized-settings';\nimport RightHeader from './right-header';\n\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './right-panel.scss';\n\nexport const RightPanel = () => {\n  const {\n    isOpen, drawerKey, drawerParams, closeDrawer,\n  } = useDrawerStore();\n  const [rightPanelContent, setRightPanelContent] = useState<React.ReactElement | null>(null);\n\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setRightPanelContent(<PersonalizeSettings />);\n        break;\n      case DrawerKey.OriginalMessages:\n        setRightPanelContent(<MessagePanel relevantMessages={(drawerParams as MessagePanelPayload)?.relevantMessages} />);\n        break;\n      case DrawerKey.CustomizationPrompt:\n        setRightPanelContent(<CustomizationPromptPanel />);\n        break;\n      case DrawerKey.ChatPicker:\n        setRightPanelContent(<ChatPickerPanel />);\n        break;\n      case DrawerKey.AddTopicPanel:\n        setRightPanelContent(<AddTopicPanel />);\n        break;\n      default:\n        setRightPanelContent(null);\n    }\n  }, [drawerKey, drawerParams]);\n\n  return (\n    <div className={cx('summary-panel-container', {\n      'summary-panel-open': isOpen,\n    })}\n    >\n      <RightHeader drawerKey={drawerKey} onClose={closeDrawer} />\n      <div className=\"flex-1 overflow-hidden w-[var(--right-column-width)]\">\n        {rightPanelContent}\n      </div>\n    </div>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React from '@teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import React from '@teact';\nimport { injectComponent } from '../injectComponent';\nimport GlobalSummary from './global-summary';\nconst GlobalSummaryWrapper = () => {\n  const containerRef = injectComponent({\n    component: GlobalSummary,\n  });\n  return (\n    <div className=\"flex w-full h-full overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default GlobalSummaryWrapper;\n\n","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport UpgradeButton from '../../chatAssistant/component/upgrade/UpgradeButton';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n                <UpgradeButton />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { ActionReturnType } from '../../types';\n\nimport {\n  addActionHandler,\n  setGlobal,\n} from '../../index';\n\naddActionHandler('updateSubscriptionInfo', (global, actions, payload): ActionReturnType => {\n  const { subscriptionType,\n    creditBalance,\n    createdAt,\n    subscriptionExpiresAt } = payload;\n\n  // Update global credits state\n  global = {\n    ...global,\n    subscriptionInfo: {\n      subscriptionType,\n      creditBalance,\n      createdAt,\n      subscriptionExpiresAt,\n    },\n  };\n  setGlobal(global);\n  return global;\n});\n","import React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic, ApiMessage } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_ANDROID,\n  IS_ELECTRON,\n  IS_IOS,\n  IS_SAFARI,\n  IS_TRANSLATION_SUPPORTED,\n  MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport RoomAIEntryWrapper from '../chatAssistant/room-ai/room-ai-entry-wrapper';\nimport { createMeetingMentionMessage } from '../chatAssistant/room-ai/room-ai-utils';\nimport { ChataiStores } from '../chatAssistant/store';\nimport { parseMessage2StoreMessage } from '../chatAssistant/store/messages-store';\nimport ScheduleMeeting, {\n  ASK_MEETING_EMAIL, ASK_MEETING_TIME, ASK_MEETING_TIMEZONE, MEETING_INVITATION_TIP,\n} from '../chatAssistant/utils/schedule-meeting';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport GlobalSummaryWrapper from '../chatAssistant/global-summary/GlobalSummaryWrapper';\nimport eventEmitter, { Actions } from '../chatAssistant/lib/EventEmitter';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  isSerena?: boolean;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  isSerena,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleAnalyticsMessage = useLastCallback(({ message }: { message: ApiMessage }) => {\n    const messageText = message.content.text?.text;\n    if (\n      messageText === ASK_MEETING_TIMEZONE\n      || messageText === ASK_MEETING_TIME\n      || messageText === ASK_MEETING_EMAIL\n      || messageText === MEETING_INVITATION_TIP\n    ) {\n      return;\n    }\n    if (ScheduleMeeting.get(chatId!)) {\n      return;\n    }\n    const meetingMentionMessage = createMeetingMentionMessage({\n      messageId: message.id,\n      chatId: message.chatId,\n      senderId: message.senderId,\n      messageText,\n    });\n    ChataiStores?.message?.storeMessage(parseMessage2StoreMessage(message.chatId, [meetingMentionMessage])[0]);\n    // TODO: add meeting time confirm message and open ai room\n    if (chatId === message.chatId) {\n      eventEmitter.emit(Actions.AddRoomAIMessage, meetingMentionMessage);\n      getActions().openChatAIWithInfo({ chatId: message.chatId });\n    }\n  });\n  useEffect(() => {\n    eventEmitter.on(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n    return () => eventEmitter.off(Actions.IntentionToScheduleMeeting, handleAnalyticsMessage);\n  }, []);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {isSerena && <GlobalSummaryWrapper />}\n      {\n        Boolean(renderingChatId && renderingThreadId && !isSerena) && (\n          <>\n            <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n              <MiddleHeaderPanes\n                key={renderingChatId}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <MiddleHeader\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                messageListType={renderingMessageListType!}\n                isComments={isComments}\n                isMobile={isMobile}\n                getCurrentPinnedIndex={getCurrentPinnedIndex}\n                getLoadingPinnedId={getLoadingPinnedId}\n                onFocusPinnedMessage={handleFocusPinnedMessage}\n              />\n              <Transition\n                name={resolveTransitionName(\n                  'slide',\n                  animationLevel,\n                  shouldSkipHistoryAnimations || !withInterfaceAnimations,\n                )}\n                activeKey={currentTransitionKey}\n                shouldCleanup\n                cleanupExceptionKey={cleanupExceptionKey}\n                isBlockingAnimation\n                onStop={handleSlideTransitionStop}\n              >\n                <MessageList\n                  key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                  chatId={renderingChatId!}\n                  threadId={renderingThreadId!}\n                  type={renderingMessageListType!}\n                  isComments={isComments}\n                  canPost={renderingCanPost!}\n                  onScrollDownToggle={setIsScrollDownShown}\n                  onNotchToggle={setIsNotchShown}\n                  isReady={isReady}\n                  isContactRequirePremium={isContactRequirePremium}\n                  paidMessagesStars={paidMessagesStars}\n                  withBottomShift={withMessageListBottomShift}\n                  withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                  onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n                />\n                <div className={footerClassName}>\n                  {renderingCanPost && (\n                    <Composer\n                      type=\"messageList\"\n                      chatId={renderingChatId!}\n                      threadId={renderingThreadId!}\n                      messageListType={renderingMessageListType!}\n                      dropAreaState={dropAreaState}\n                      onDropHide={handleHideDropArea}\n                      isReady={isReady}\n                      isMobile={isMobile}\n                      editableInputId={EDITABLE_INPUT_ID}\n                      editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                      inputId=\"message-input-text\"\n                    />\n                  )}\n                  {isPinnedMessageList && canUnpin && (\n                    <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                      <Button\n                        size=\"tiny\"\n                        fluid\n                        color=\"secondary\"\n                        className=\"composer-button unpin-all-button\"\n                        onClick={handleOpenUnpinModal}\n                      >\n                        <Icon name=\"unpin\" />\n                        <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                      </Button >\n                    </div >\n                  )\n                  }\n                  {\n                    canShowOpenChatButton && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          color=\"secondary\"\n                          className=\"composer-button open-chat-button\"\n                          onClick={handleOpenChatFromSaved}\n                        >\n                          <span>{oldLang('SavedOpenChat')}</span>\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMessagingDisabled && (\n                      <div className={messagingDisabledClassName}>\n                        <div className=\"messaging-disabled-inner\">\n                          <span>\n                            {composerRestrictionMessage}\n                          </span>\n                        </div>\n                      </div>\n                    )\n                  }\n                  {\n                    (\n                      isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                    ) && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingShouldSendJoinRequest && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleSubscribeClick}\n                        >\n                          {oldLang('ChannelJoinRequest')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanStartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleStartBot}\n                        >\n                          {oldLang('BotStart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanRestartBot && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleRestartBot}\n                        >\n                          {oldLang('BotRestart')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  {\n                    isMobile && renderingCanUnblock && (\n                      <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                        <Button\n                          size=\"tiny\"\n                          fluid\n                          ripple\n                          className=\"composer-button join-subscribe-button\"\n                          onClick={handleUnblock}\n                        >\n                          {oldLang('Unblock')}\n                        </Button >\n                      </div >\n                    )\n                  }\n                  <MessageSelectToolbar\n                    messageListType={renderingMessageListType}\n                    isActive={isSelectModeActive}\n                    canPost={renderingCanPost}\n                  />\n                  <SeenByModal isOpen={isSeenByModalOpen} />\n                  <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                  <ReactorListModal isOpen={isReactorListModalOpen} />\n                  {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n                </div >\n              </Transition >\n              <RoomAIEntryWrapper chatId={chatId} />\n              <FloatingActionButtons\n                withScrollDown={renderingIsScrollDownShown}\n                canPost={renderingCanPost}\n                withExtraShift={withExtraShift}\n              />\n            </div >\n            <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n          </>\n        )\n      }\n      {\n        chatId && (\n          <UnpinAllMessagesModal\n            isOpen={isUnpinModalOpen}\n            chatId={chatId}\n            pinnedMessagesCount={pinnedMessagesCount}\n            onClose={closeUnpinModal}\n            onUnpin={handleUnpinAllMessages}\n          />\n        )\n      }\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div >\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    const isSerena = chatId === GLOBAL_SUMMARY_CHATID;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      isSerena,\n      shouldBlockSendInMonoforum,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst CustomizationPromptPanel = () => {\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [titleError, setTitleError] = useState(false);\n  const [promptError, setPromptError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:ISummaryTemplate = drawerParams || {\n    topic: '',\n    prompt: '',\n  };\n  const [form, setForm] = useState(initialValues);\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTitleError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setPromptError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateSummarizeTemplate(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 0,\n        });\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n    });\n  }, [form, openDrawer]);\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topic = e.currentTarget.value;\n    setForm((prev) => {\n      prev.topic = topic;\n      return { ...prev };\n    });\n    if (topic.trim().length) {\n      setTitleError(false);\n    }\n  }, []);\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const prompt = e.currentTarget.value;\n    setForm((prev) => {\n      prev.prompt = prompt;\n      return { ...prev };\n    });\n    if (prompt.trim().length) {\n      setPromptError(false);\n    }\n  }, []);\n  return (\n    <div className=\"h-full flex flex-col px-[18px]\">\n      <p className=\"text-[14px] text-[#666666]\">\n        Enter a topic you want AI to track and summarize. Add details so summaries are more accurate and relevant.\n      </p>\n      <InputText\n        label=\"Topic name\"\n        value={form.topic}\n        onChange={handleTopicNameChange}\n        error={titleError ? 'Please enter the topic name' : undefined}\n      />\n      <TextArea\n        label=\"Topic description\"\n        value={form.prompt}\n        noReplaceNewlines\n        error={promptError ? 'Please enter the topic description' : undefined}\n        onChange={handleTopicDescriptionChange}\n      />\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default CustomizationPromptPanel;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('toggleChatAIInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatAIShown = force !== undefined ? force : !selectTabState(global, tabId).isChatAIShown;\n\n  global = updateTabState(global, { isChatAIShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('toggleUserPortrait', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isUserPortraitShown = force !== undefined ? force : !selectTabState(global, tabId).isUserPortraitShown;\n\n  global = updateTabState(global, { isUserPortraitShown }, tabId);\n  global = { ...global };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload.isAvailable),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n\naddActionHandler('closePayPackageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    payPackageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPayPackageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payPackageModal: { isOpen: true },\n  }, tabId);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport { audioToText } from '../../../components/chatAssistant/utils/chat-api';\nimport {\n  getIsSavedDialog,\n  getMediaHash,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  // replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('saveReplyDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, draft, isLocalOnly,\n  } = payload;\n\n  saveDraft({\n    global, chatId, threadId, draft, isLocalOnly,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudioByOpenai', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n  const { autoTranslateLanguage = 'en' } = global.settings.byKey;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const voice = message?.content?.voice;\n  if (!voice) return;\n\n  const mediaHash = getMediaHash(voice, 'download');\n  if (!mediaHash) return;\n\n  await mediaLoader.fetch(mediaHash, 0);\n  const blobUrl = mediaLoader.getFromMemory(mediaHash);\n  if (!blobUrl) return;\n\n  const response = await fetch(blobUrl);\n  const blob = await response.blob();\n\n  const formData = new FormData();\n\n  formData.append(\n    'file',\n    blob,\n    'audio.ogg',\n  );\n  formData.append('language', autoTranslateLanguage);\n\n  const result = await audioToText(formData);\n\n  const transcriptionId = `${chat?.id}-${messageId}`;\n\n  callApi('transcribeAudioByOpenai', { transcriptionId, transcriptionText: result.text });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  // global = replaceSettings(global, {\n  //   translationLanguage: toLanguageCode,\n  // });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessagesByTencent', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n  const texts = messageIds.map((messageId) => {\n    const message = selectChatMessage(global, chatId, messageId);\n    // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain\n    return message?.content.text!;\n  });\n  const { currentUserId } = global;\n  const userName = getUserFullName(selectUser(global, currentUserId!));\n\n  callApi('translateTextByTencent', {\n    chat,\n    messageIds,\n    text: texts,\n    toLanguageCode,\n    userId: currentUserId!,\n    userName: userName!,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","\n/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage, Switch } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { telegptSettings } from '../api/user-settings';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport InputText from '../component/InputText';\nimport Spinner from '../component/Spinner';\nimport TextArea from '../component/TextArea';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst AddTopicPanel = () => {\n  const { phone } = telegptSettings.telegptSettings;\n  const filterPhone = phone.replace(/^\\+\\d+\\s*/, \"\").replace(/\\s/g, \"\");\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const [topicError, setTopicError] = useState(false);\n  const [descriptionError, setDescriptionError] = useState(false);\n  const [phoneNumberError, setPhoneNumberError] = useState(false);\n  const [phoneNumber, setPhoneNumber] = useState(filterPhone);\n  const [isLoading, setIsLoading] = useState(false);\n  const initialValues:IUrgentTopic = drawerParams || {\n    topic: '',\n    prompt: '',\n    is_call: false,\n    is_open: false,\n  };\n  const [form, setForm] = useState<IUrgentTopic>(initialValues);\n  const strongAlertChange = (checked:boolean) => {\n    setForm((prev:IUrgentTopic) => {\n      prev.is_call = checked;\n      return { ...prev };\n    });\n    if (!checked) {\n      setPhoneNumberError(false);\n    }\n  };\n\n  const handleTopicNameChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const topicName = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.topic = topicName;\n      return { ...prev };\n    });\n    if (topicName.trim().length) {\n      setTopicError(false);\n    }\n  }, []);\n\n  const handleTopicDescriptionChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const topicDescription = e.currentTarget.value;\n    setForm((prev:IUrgentTopic) => {\n      prev.prompt = topicDescription;\n      return { ...prev };\n    });\n    if (topicDescription.trim().length) {\n      setDescriptionError(false);\n    }\n  }, []);\n\n  const handlePhoneNumberChange = useCallback((e: React.FormEvent<HTMLInputElement>) => {\n    const number = e.currentTarget.value.trim();\n    setPhoneNumber(number);\n    if (number.trim().length === 0) {\n      setPhoneNumberError(false);\n    }\n  }, []);\n\n  const handleSave = useCallback(() => {\n    if (form.topic.trim().length === 0) {\n      setTopicError(true);\n      return;\n    }\n    if (form.prompt.trim().length === 0) {\n      setDescriptionError(true);\n      return;\n    }\n    if (form.is_call && phoneNumber.length === 0) {\n      setPhoneNumberError(true);\n      return;\n    }\n    setIsLoading(true);\n    telegptSettings.updateUrgentTopic(form).then((res:any) => {\n      setIsLoading(false);\n      if (res.code === 0) {\n        openDrawer(DrawerKey.PersonalizeSettings, {\n          activeKey: 1,\n        });\n        if (form.is_call && phoneNumber.length > 0) {\n          telegptSettings.setSettingOption({\n            phone: phoneNumber,\n          });\n        }\n      } else {\n        showMessage.info('save failed');\n      }\n    }).catch(() => {\n      showMessage.info('save failed');\n      setIsLoading(false);\n    });\n  }, [form, openDrawer, phoneNumber]);\n\n  return (\n    <div className=\"urgent-topic-edit h-full overflow-hidden px-[18px] flex flex-col\">\n      <div className=\"h-full overflow-y-auto flex-1\">\n        <div className=\"text-[14px] text-[#666666] mb-[24px]\">\n          Please set the topics and descriptions for which you want alerts. When a message contains these keywords, you’ll be notified.\n        </div>\n        <InputText\n          label=\"Topic Name\"\n          value={form.topic}\n          onChange={handleTopicNameChange}\n          error={topicError ? 'Please enter the topic name' : undefined}\n        />\n        <div className=\"mb-[24px]\">\n          <TextArea\n            className=\"!mb-[12px]\"\n            label=\"Topic Description\"\n            value={form.prompt}\n            noReplaceNewlines\n            error={descriptionError ? 'Please enter the topic description' : undefined}\n            onChange={handleTopicDescriptionChange}\n          />\n          <div className=\"text-[14px] text-[#767676]\">\n            Please describe the specific content or keywords that should trigger an alert. For example, if ‘Vitalik’ + ‘ETH’ + ‘sell’ appear, please notify me.\n          </div>\n        </div>\n        <div className=\"mb-[24px]\">\n          <div className=\"flex items-center justify-between px-[14px] py-[10px] bg-[var(--color-chat-hover)] rounded-[6px] mb-[12px]\">\n            <span className=\"text-[var(--color-text)]\">Enable strong alerts</span>\n            <Switch value={form.is_call} onChange={strongAlertChange} />\n          </div>\n          <span className=\"text-[14px] text-[#767676]\">\n            Once enabled, these types of messages will trigger a phone alert.\n          </span>\n        </div>\n        {form.is_call && (\n          <InputText\n            label=\"Phone Number\"\n            type=\"number\"\n            value={phoneNumber}\n            onChange={handlePhoneNumberChange}\n            error={phoneNumberError ? 'Please enter a valid phone number' : undefined}\n          />\n        )}\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default AddTopicPanel;\n","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport './UpgradeButton.scss';\nconst UpgradeButton = () => {\n  const handleUpgrade = (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    getActions().openPayPackageModal();\n  };\n  return (\n    <div className=\"upgrade-button\" onClick={handleUpgrade}>\n      Upgrade\n    </div>\n  );\n};\n\nexport default memo(UpgradeButton);\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { fireBaseAnalytics, UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\nimport { compareVersion } from '../../chatAssistant/utils/util';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n// import useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  // isAppUpdateAvailable?: boolean;\n  // isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  // isAppUpdateAvailable,\n  // isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  // const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n  const [shouldRenderUpdateButton, setShouldRenderUpdateButton] = useState(false);\n  const [webFireBase, setWebFireBase] = useState<{\n    force_update_required: boolean;\n    force_update_current_version: string;\n    force_update_store_url: string;\n  }>();\n\n  const handleFireBaseUpdate = (payload: any) => {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { webFireBase } = payload;\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      const { force_update_current_version } = webFireBase;\n      const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n      const compareRes = compareVersion(version, force_update_current_version);\n      if (compareRes === -1) {\n        setShouldRenderUpdateButton(true);\n        setWebFireBase(webFireBase);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  };\n\n  useEffect(() => {\n    // window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n    eventEmitter.on(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    return () => {\n      eventEmitter.off(Actions.UpdateFirebaseConfig, handleFireBaseUpdate);\n    };\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  // const {\n  //   shouldRender: shouldRenderUpdateButton,\n  //   transitionClassNames: updateButtonClassNames,\n  // } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectAIKonwledge = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AIKonwledge });\n  });\n\n  const handleSelectAITranslate = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.AITranslate });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    fireBaseAnalytics.deferUpdate(webFireBase?.force_update_current_version!);\n    // window.location.reload();\n    if (webFireBase?.force_update_store_url!) {\n      window.location.href = webFireBase?.force_update_store_url!;\n    } else {\n      window.location.reload();\n    }\n\n    // if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n    //   window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    // } else if (isElectronUpdateAvailable) {\n    //   window.electron?.installUpdate();\n    // } else {\n    //   window.location.reload();\n    // }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onSelectAIKnowledge={handleSelectAIKonwledge}\n        onSelectAITranslate={handleSelectAITranslate}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className=\"btn-update\"\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegpt')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import React, { memo } from 'react';\nimport { getActions } from '../../../global';\n\nimport './InviteButton.scss';\n\nimport InviteGif from '../assets/invite/invite-gift.png';\nconst InviteButton = () => {\n  const handleInviteFriendsClick = () => {\n    getActions().openInviteFriendsModal();\n  };\n  return (\n    <div className=\"invite-button\" onClick={handleInviteFriendsClick}>\n      <img className=\"w-[20px] h-[20px]\" src={InviteGif} alt=\"\" />\n      <span className=\"text-[12px] font-medium\">Invite</span>\n    </div>\n  );\n};\n\nexport default memo(InviteButton);\n","import React, { useCallback } from 'react';\n\nimport { telegptSettings } from '../api/user-settings';\nimport { SettingIcon } from '../icons';\n\nimport InviteButton from '../component/InviteButton';\nimport { DrawerKey, useDrawerStore } from './DrawerContext';\n\nconst SummaryHeaderActions = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleShowRightPanel = useCallback(() => {\n    openDrawer(DrawerKey.PersonalizeSettings);\n    telegptSettings.getGptSettings();\n  }, [openDrawer]);\n\n  return (\n    <div className=\"flex items-center gap-[16px]\">\n      <InviteButton />\n      <div className=\"cursor-pointer flex flex-row gap-[6px] items-center\" onClick={handleShowRightPanel}>\n        <span className=\"text-[var(--color-text-secondary)]\">\n          <SettingIcon />\n        </span>\n        <span className=\"text-[16px] font-semibold\">Personalize</span>\n      </div>\n    </div>\n  );\n};\nexport default SummaryHeaderActions;\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","/* eslint-disable no-console */\n/* eslint-disable max-len */\n/* eslint-disable no-null/no-null */\n/* eslint-disable @typescript-eslint/no-shadow */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Skeleton } from 'antd';\nimport { getActions, getGlobal } from '../../../global';\n\nimport { type ApiMessage, MESSAGE_DELETED } from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport { updateChatMessage } from '../../../global/reducers/messages';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport { selectChatMessage } from '../../../global/selectors/messages';\nimport { callApi } from '../../../api/gramjs';\nimport useOldLang from '../hook/useOldLang';\nimport { ArrowRightIcon, SendIcon } from '../icons';\nimport { autoReply } from '../utils/chat-api';\nimport { cn, formatTimestamp } from '../utils/util';\nimport { getBestKnowledgeMatch } from '../utils/knowledge-match';\n\nimport Avatar from '../component/Avatar';\nimport ChatAvatar from '../component/ChatAvatar';\nimport ErrorBoundary from '../ErrorBoundary';\n\nimport './message-panel.scss';\n\nimport ChatAILogoPath from '../assets/cgat-ai-logo.png';\n\nconst Message = ({ chatId, messageId }: { chatId: string; messageId: number }) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const chat = selectChat(global, chatId);\n  const [message, setMessage] = useState<ApiMessage | undefined>(undefined);\n  const [showSmartReply, setShowSmartReply] = useState(false);\n  const [replyResponse, setReplyResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const textareaRef = useRef<HTMLTextAreaElement>(undefined);\n  const { updateDraftReplyInfo, sendMessage, clearDraft } = getActions();\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight + 2}px`;\n    }\n  };\n  const { focusMessage } = getActions();\n  useEffect(() => {\n    if (messageId) {\n      const message = selectChatMessage(global, chatId, Number(messageId));\n      if (message) {\n        setMessage(message);\n        setIsLoading(false);\n      } else if (chat) {\n        callApi('fetchMessage', { chat, messageId }).then((result) => {\n          if (result) {\n            if (result === MESSAGE_DELETED) {\n              setMessage(undefined);\n            } else if (result.message.content.text?.text) {\n              setMessage(result.message);\n              updateChatMessage(global, chat.id, messageId, result.message);\n            }\n          }\n          setIsLoading(false);\n        }).catch(() => {\n          setIsLoading(false);\n        });\n      }\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatId, messageId]);\n  const handleSmaryReply = async (message: ApiMessage) => {\n    if (message.content.text?.text) {\n      const bestMatch = await getBestKnowledgeMatch(message.content.text.text);\n      if (bestMatch && bestMatch.score > 0.8) {\n        setReplyResponse(bestMatch.answer);\n      } else {\n        autoReply({\n          message: message.content.text?.text,\n          message_id: message.id,\n        }).then((res) => {\n          setReplyResponse(res.data.reply);\n        }).catch(() => {\n          console.log('error');\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      adjustHeight();\n    }\n  }, []);\n  const handleInput = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setReplyResponse(e.target.value);\n    adjustHeight();\n  };\n\n  const handleReply = () => {\n    updateDraftReplyInfo({\n      replyToMsgId: message?.id,\n      replyToPeerId: undefined,\n    });\n    setTimeout(() => {\n      sendMessage({\n        messageList: {\n          chatId,\n          threadId: -1,\n          type: 'thread',\n        },\n        text: replyResponse,\n      });\n    });\n    setReplyResponse('');\n    setShowSmartReply(false);\n    setTimeout(() => { clearDraft({ chatId, isLocalOnly: true }); });\n  };\n\n  const handleFocusMessage = () => {\n    if (messageId) {\n      focusMessage({\n        chatId, messageId: Number(messageId),\n      });\n    }\n  };\n\n  const renderMessage = () => {\n    if (!message || !message.content.text?.text) {\n      return (\n        <div className=\"text-[15px] text-[#979797]\">\n          Message Deleted\n        </div>\n      );\n    }\n    const text = message.content.text?.text;\n    const date = formatTimestamp(message.date * 1000);\n    const senderId = message.senderId;\n    const peer = senderId ? selectUser(global, senderId) : undefined;\n    const isUser = peer && isApiPeerUser(peer);\n    const chat = selectChat(global, chatId);\n    const title = peer && isUser ? getUserFullName(peer) : getChatTitle(lang, chat!);\n    return (\n      <>\n        <div className=\"flex flex-row items-center mb-[12px]\">\n          {isUser ? (\n            <Avatar peer={peer} size={34} />\n          ) : (\n            <ChatAvatar chatId={chatId} size={34} />\n          )}\n\n          <span className=\"text-[16px] font-semibold mr-[8px] ml-[12px] flex-1 whitespace-nowrap overflow-hidden text-ellipsis\">\n            {title}\n          </span>\n          <span className=\"text-[#979797] text-[13px]\">{date}</span>\n        </div>\n        <div className=\"text-[15px] relative flex flex-row items-end justify-between\">\n          <div className=\"w-full\">{text}</div>\n          <div className={cn('right-panel-message-actions flex items-center flex-row justify-end gap-[4px]', {\n            '!flex': showSmartReply,\n          })}\n          >\n            <div\n              className=\"w-[15px] h-[15px] cursor-pointer\"\n              onClick={() => { setShowSmartReply(true); handleSmaryReply(message); }}\n            >\n              <img src={ChatAILogoPath} alt=\"ai-reply\" className=\"w-full h-full\" />\n            </div>\n            <div\n              className=\"text-[#9F9F9F] cursor-pointer\"\n              onClick={handleFocusMessage}\n              aria-label=\"Smart Reply\"\n            >\n              <ArrowRightIcon size={16} />\n            </div>\n          </div>\n        </div>\n        {showSmartReply ? (\n          <div>\n            <div className=\"flex flex-row items-center gap-[6px]\">\n              <img className=\"w-[15px] h-[15px]\" src={ChatAILogoPath} alt=\"MingcuteaiIcon\" />\n              <span className=\"text-[14px] text-[#757575]\">Reply suggested by Tely AI</span>\n            </div>\n            <div className=\"flex flex-row items-end gap-[12px]\">\n              <textarea\n                ref={textareaRef}\n                className=\"w-full py-[8px] px-[12px] border border-[#7949FF] rounded-[8px] mt-[12px] resize-none leading-[18px]\"\n                placeholder=\"Type your reply here...\"\n                rows={1}\n                value={replyResponse}\n                onChange={handleInput}\n              />\n              <button\n                className=\"w-[36px] h-[36px] bg-[#8C59D0] flex items-center justify-center text-white rounded-full flex-shrink-0\"\n                aria-label=\"Send message\"\n                onClick={handleReply}\n              >\n                <SendIcon size={15} />\n              </button>\n            </div>\n          </div>\n        ) : null}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"right-panel-message-item pb-[20px] pt-[16px] border-solid border-b-[1px] border-[rgba(0,0,0,0.1)] px-[18px]\">\n      {isLoading ? (\n        <Skeleton active paragraph={{ rows: 2 }} />\n      ) : (\n        renderMessage()\n      )}\n    </div>\n  );\n};\n\nconst CustomVirtualList = ({\n  relevantMessages,\n}:\n  {\n    relevantMessages: { chatId: string; messageIds: number[] }[];\n  }) => {\n  const listData = relevantMessages.flatMap((item) => item.messageIds.map((messageId) => ({\n    chatId: item.chatId,\n    messageId,\n  })));\n  return (\n    <div className=\"h-full overflow-y-auto\">\n      {listData.map((item) => {\n        return (\n          <ErrorBoundary>\n            <Message chatId={item.chatId} messageId={item.messageId} />\n          </ErrorBoundary>\n        );\n      })}\n    </div>\n  );\n};\n\nexport interface MessagePanelPayload {\n  relevantMessages: { chatId: string; messageIds: number[] }[];\n}\nconst MessagePanel = ({ relevantMessages }: MessagePanelPayload) => {\n  return (\n    <div className=\"h-full\">\n      {relevantMessages.length > 0 && (\n        <CustomVirtualList relevantMessages={relevantMessages} />\n      )}\n    </div>\n  );\n};\n\nexport default MessagePanel;\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type { FC } from '@teact';\nimport React from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom.ts';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  autoTranslate?: boolean;\n  autoTranslateLanguage?: string;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  ContactGreeting,\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  autoTranslate,\n  autoTranslateLanguage,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  // canTranslate,\n  // translationLanguage,\n  // shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestMessageTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  // useEffect(() => {\n  //   if (!shouldAutoTranslate || !canTranslate) return;\n  //   requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  // }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useEffect(() => {\n    if (!autoTranslate) return;\n    messageIds?.forEach((messageId) => {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: autoTranslateLanguage });\n    });\n  }, [autoTranslate, autoTranslateLanguage, chatId, messageIds]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const { autoTranslate, autoTranslateLanguage } = global.settings.byKey;\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      autoTranslate,\n      autoTranslateLanguage,\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const { isDesktop } = useAppLayout();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import React from '@teact';\n/* eslint-disable max-len */\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { UserPortraitInfo } from '../../chatAssistant/store/user-portrait-store';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport { ChataiStores } from '../../chatAssistant/store';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './UserPortrait.scss';\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\ntype OwnProps = {\n  userId: string;\n  onClose: () => void;\n};\n\nexport const PortraitTagColors = [\n  '#E5D9FF',\n  '#CCD6FF',\n  '#B6FFCE',\n  '#FFD9D9',\n  '#FFD9FF',\n];\n\nconst UserPortraitBaseCard: FC<StateProps & OwnProps> = ({ userId, user, onClose }) => {\n//   const { loading, userPortraitInfo } = usePortrait({ userId });\n  const [portraitInfo, setPortraitInfo] = useState<UserPortraitInfo | undefined>(undefined);\n\n  const getPortraitInfo = useLastCallback(async () => {\n    const info = await ChataiStores.userPortrait?.getUserPortrait(\n      userId,\n    );\n    setPortraitInfo(info);\n  });\n\n  useEffect(() => {\n    getPortraitInfo();\n  }, [userId]);\n\n  const handlePortraitClick = useLastCallback(() => {\n    getActions().openUserPortrait({ userId });\n    onClose();\n  });\n\n  function renderBasicInfo() {\n    return (\n      <div className=\"border-b-[1px] border-[#F3F3F3] px-[12px] pb-[12px]\">\n        <div className=\"text-[20px] font-[700] mb-2\">Portrait</div>\n        <div className=\"text-[16px] font-[700] mb-2\">Basic Description</div>\n        <div className=\"flex flex-col gap-1\">\n          {user?.usernames?.[0]?.username && (\n            <div>\n              <span className=\"font-[600]\">Username: </span>\n              {user?.usernames?.[0]?.username}\n            </div>\n          )}\n          <div>\n            <span className=\"font-[600]\">Alias/Nickname: </span>\n            {user?.firstName} {user?.lastName}\n          </div>\n          {portraitInfo && (\n            <>\n              {portraitInfo.langs && (\n                <div>\n                  <span className=\"font-[600]\">Language: </span>\n                  {`${\n                    portraitInfo.langs?.[0]\n                      ? `${portraitInfo.langs?.[0]}(Primary)`\n                      : ''\n                  } ${\n                    portraitInfo.langs?.[1]\n                      ? `, ${portraitInfo.langs?.[1]}(Secondary)`\n                      : ''\n                  }`}\n                </div>\n              )}\n              {portraitInfo?.tags && portraitInfo?.tags?.length > 0 && (\n                <>\n                  <div>\n                    <span className=\"font-[600]\">Tags: </span>\n                  </div>\n                  <div className=\"flex flex-row flex-wrap items-center gap-2\">\n                    {portraitInfo?.tags?.map((tag, index) => (\n                      <div\n                        className=\"flex items-center justify-center px-2 rounded-[4px] h-[28px] text-[12px] font-[500] text-black\"\n                        style={`background: ${PortraitTagColors[index]}`}\n                      >\n                        {tag}\n                      </div>\n                    ))}\n                  </div>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"w-[24rem]\">\n      {renderBasicInfo()}\n      <div\n        className=\"h-[42px] flex items-center justify-center text-[var(--color-primary)] text-[14px] font-semibold pt-[0.5rem] cursor-pointer\"\n        onClick={handlePortraitClick}\n      >\n        View details\n      </div>\n    </div>\n  );\n};\n\nexport default memo(\n  withGlobal((global, { userId }): StateProps => {\n    const user = userId\n      ? selectUser(global, userId)\n      : undefined;\n\n    return {\n      user,\n    };\n  })(UserPortraitBaseCard),\n);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport UserPortraitBasicCard from './UserPortraitBasicCard';\n\ntype OwnProps = {\n  menuRef?: React.RefObject<HTMLDivElement|undefined>;\n  isOpen: boolean;\n  userId: string;\n  onClose: () => void;\n};\nexport const UserPortraitBasicCardMenu:FC< OwnProps & MenuPositionOptions> = ({\n  menuRef,\n  isOpen,\n  userId,\n  onClose,\n  ...menuPositionOptions\n}) => {\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose);\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClose={onClose}\n      onCloseAnimationEnd={onClose}\n      className=\"PortraitMenu\"\n      withPortal\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      noCompact\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...menuPositionOptions}\n    >\n      {isOpen && <UserPortraitBasicCard userId={userId} onClose={onClose} />}\n    </Menu>\n  );\n};\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AIKnowledge';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AIKnowledgeAsync: FC<OwnProps> = (props) => {\n  const AIKnowledge = useModuleLoader(Bundles.Extra, 'AIKnowledge');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AIKnowledge ? <AIKnowledge {...props} /> : <Loading />;\n};\n\nexport default AIKnowledgeAsync;\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport type { CheckboxChangeEvent } from 'antd';\nimport { Checkbox, Input } from 'antd';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiChatType, ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle, getGroupStatus, getUserFullName, getUserStatus,\n} from '../../../global/helpers';\nimport { filterPeersByQuery, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectPeer,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport sortChatIds from '../../common/helpers/sortChatIds';\nimport useOldLang from '../hook/useOldLang';\n\nimport Avatar from '../component/Avatar';\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './chat-picker-panel.scss';\n\nconst PickerChatItem = ({ id, isChecked, onChange }:{\n  id: string;\n  isChecked:boolean;\n  onChange:(e:CheckboxChangeEvent) => void;\n}) => {\n  const global = getGlobal();\n  const lang = useOldLang();\n  const {\n    currentUserId,\n  } = global;\n  const peer:ApiPeer | undefined = selectPeer(global, id);\n  if (!peer) {\n    return undefined;\n  }\n\n  const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n  const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n  const realPeer = 'id' in peer ? peer : undefined;\n  const isUser = realPeer && isApiPeerUser(realPeer);\n  const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n  function getSubtitle() {\n    if (!peer) return undefined;\n    if (peer.id === currentUserId) return [lang('SavedMessagesInfo')];\n    if (isApiPeerChat(peer)) {\n      return [getGroupStatus(lang, peer)];\n    }\n\n    const userStatus = selectUserStatus(global, peer.id);\n    return getUserStatus(lang, peer, userStatus);\n  }\n\n  function getTitle() {\n    if (customPeer) {\n      return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n    }\n\n    if (isSelf) {\n      return lang('SavedMessages');\n    }\n\n    return title;\n  }\n\n  const subtitle = getSubtitle() || '';\n  const specialTitle = getTitle();\n  return (\n    <Checkbox\n      value={id}\n      className=\"chat-picker-item rounded-[12px]\"\n      checked={isChecked}\n      onChange={onChange}\n    >\n      <div className=\"flex-1 flex flex-row items-center gap-[12px] px-[12px] py-[10px] hover:bg-[var(--color-chat-hover)] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          clickOpenRoom={false}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center text-[var(--color-text)] flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap\">{specialTitle}</div>\n          <div>{subtitle}</div>\n        </div>\n      </div>\n    </Checkbox>\n  );\n};\n\nconst ChatPickerPanel = () => {\n  const global = getGlobal();\n  const orderedIds = React.useMemo(() => getOrderedIds(ALL_FOLDER_ID) || [], []);\n  const { drawerParams } = useDrawerStore();\n  const selectedChats = drawerParams?.selectedChats || [];\n  const [selected, setSelected] = useState<string[]>(selectedChats);\n  const [search, setSearch] = useState('');\n  const filter:ApiChatType[] = useMemo(() => ['channels', 'chats', 'users', 'groups'], []);\n\n  const ids = useMemo(() => {\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: orderedIds,\n        query: search,\n      }),\n      undefined,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [filter, global, orderedIds, search]);\n\n  const handleSave = useCallback(() => {\n    drawerParams?.onSave(selected);\n  }, [drawerParams, selected]);\n  return (\n    <div className=\"h-full px-[20px] flex flex-col text-[var(--color-text)]\">\n      <Input placeholder=\"Search\" onChange={(e) => setSearch(e.target.value)} />\n      <div className=\"flex-1 overflow-y-auto\">\n        <Checkbox.Group className=\"w-full\" value={selected}>\n          <div className=\"flex flex-col gap-[12px] w-full overflow-hidden\">\n            {ids.map((id) => {\n              const isChecked = selected.includes(id);\n              return (\n                <PickerChatItem\n                  id={id}\n                  isChecked={isChecked}\n                  onChange={(e:CheckboxChangeEvent) => {\n                    const checked = e.target.checked;\n                    setSelected((prev) => {\n                      if (checked) {\n                        return [...prev, id];\n                      } else {\n                        return prev.filter((item) => item !== id);\n                      }\n                    });\n                  }}\n                />\n              );\n            })}\n          </div>\n        </Checkbox.Group>\n      </div>\n      <FloatingActionButton\n        isShown\n        onClick={handleSave}\n      >\n        <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default ChatPickerPanel;\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","/* eslint-disable no-null/no-null */\n\nimport React, { useState } from 'react';\nimport {\n  type Dispatch,\n  memo,\n  type SetStateAction,\n  useCallback,\n  useEffect,\n  useRef,\n} from 'react';\nimport type { UseChatHelpers } from '@ai-sdk/react';\nimport type {\n  Message,\n} from 'ai';\nimport cx from 'classnames';\nimport { toast } from 'sonner';\nimport { useLocalStorage, useWindowSize } from 'usehooks-ts';\n\nimport { sanitizeUIMessages } from '../../lib/utils';\nimport { AITextarea } from './component/AITextarea';\nimport { Button } from './component/button';\nimport { StopIcon } from './icons';\n\nfunction PureMultimodalInput({\n  status,\n  stop,\n  setMessages,\n  handleInputSubmit,\n  className,\n}: {\n  status: UseChatHelpers['status'];\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n  handleInputSubmit: (inputValue: string) => void;\n  className?: string;\n}) {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  const { width } = useWindowSize();\n\n  const adjustHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      const height = Math.min(200, Math.max(45, textareaRef.current.scrollHeight + 2));\n      textareaRef.current.style.height = `${height}px`;\n    }\n  };\n\n  const resetHeight = () => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = '45px';\n    }\n  };\n\n  const [localStorageInput, setLocalStorageInput] = useLocalStorage(\n    'input',\n    '',\n  );\n\n  const [inputValue, setInputValue] = useState('');\n\n  useEffect(() => {\n    if (textareaRef.current) {\n      const domValue = textareaRef.current.value;\n      // Prefer DOM value over localStorage to handle hydration\n      const finalValue = domValue || localStorageInput || '';\n      // setInput(finalValue);\n      setInputValue(finalValue);\n      if (finalValue) {\n        adjustHeight();\n      }\n    }\n    // Only run once after hydration\n  }, [localStorageInput]);\n\n  useEffect(() => {\n    setLocalStorageInput(inputValue);\n  }, [inputValue, setLocalStorageInput]);\n\n  const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setInputValue(event.target.value);\n    adjustHeight();\n  };\n\n  const submitForm = useCallback(() => {\n    if (!inputValue) {\n      return;\n    }\n    handleInputSubmit(inputValue);\n    setInputValue('');\n    setLocalStorageInput('');\n    resetHeight();\n\n    if (width && width > 768) {\n      textareaRef.current?.focus();\n    }\n  }, [handleInputSubmit, inputValue, setLocalStorageInput, width]);\n\n  return (\n    <div className=\"relative w-full flex flex-col gap-4\">\n      <AITextarea\n        ref={textareaRef}\n        placeholder=\"Send a message...\"\n        value={inputValue}\n        onChange={handleInput}\n        className={cx(\n          'h-[45px] overflow-y-auto border-[#7D40FF] resize-none rounded-2xl !text-base pb-10 focus-visible:!ring-0 !ring-offset-0 dark:border-[#2F2F2F]',\n          className,\n        )}\n        rows={2}\n        // autoFocus\n        onKeyDown={(event) => {\n          if (event.key === 'Enter' && !event.shiftKey) {\n            event.preventDefault();\n\n            if (status !== 'ready') {\n              toast.error('Please wait for the model to finish its response!');\n            } else {\n              submitForm();\n            }\n          }\n        }}\n      />\n\n      <div className=\"absolute bottom-0 right-0 p-2 w-fit flex flex-col justify-end\">\n        {status === 'submitted' ? (\n          <StopButton stop={stop} setMessages={setMessages} />\n        ) : (\n          <SendButton\n            input={inputValue}\n            submitForm={submitForm}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport const MultiInput = memo(\n  PureMultimodalInput,\n  (prevProps, nextProps) => {\n    if (prevProps.status !== nextProps.status) return false;\n\n    return true;\n  },\n);\n\nfunction PureStopButton({\n  stop,\n  setMessages,\n}: {\n  stop: () => void;\n  setMessages: Dispatch<SetStateAction<Array<Message>>>;\n}) {\n  return (\n    <Button\n      className=\"rounded-full p-1.5 h-fit border dark:border-zinc-600\"\n      onClick={(event) => {\n        event.preventDefault();\n        stop();\n        setMessages((messages) => sanitizeUIMessages(messages));\n      }}\n    >\n      <StopIcon size={14} />\n    </Button>\n  );\n}\n\nconst StopButton = memo(PureStopButton);\n\nfunction PureSendButton({\n  submitForm,\n  input,\n}: {\n  submitForm: () => void;\n  input: string;\n}) {\n  return (\n    <Button\n      className=\"!px-0 !py-0 !w-[24px] !h-[24px] !bg-transparent \"\n      onClick={(event) => {\n        event.preventDefault();\n        submitForm();\n      }}\n      disabled={input.length === 0}\n    >\n      {/* <ArrowUpIcon size={14} /> */}\n      <i className=\"icon icon-send text-[#000000] text-[24px] dark:text-[#AAAAAA]\" />\n    </Button>\n  );\n}\n\nconst SendButton = memo(PureSendButton, (prevProps, nextProps) => {\n  if (prevProps.input !== nextProps.input) return false;\n  return true;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '@teact';\n\nimport type { OwnProps } from './AITranslate';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst AITranslateAsync: FC<OwnProps> = (props) => {\n  const AITranslate = useModuleLoader(Bundles.Extra, 'AITranslate');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AITranslate ? <AITranslate {...props} /> : <Loading />;\n};\n\nexport default AITranslateAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","/* eslint-disable @typescript-eslint/require-await */\n/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useRef, useState,\n} from 'react';\nimport type { Message } from '@ai-sdk/react';\nimport { useChat } from '@ai-sdk/react';\nimport type { UIMessage } from 'ai';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getActions } from '../../../global';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport { CHATAI_IDB_STORE } from '../../../util/browser/idb';\nimport buildClassName from '../../../util/buildClassName';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport { parseMessage2StoreMessage, parseStoreMessage2Message } from '../store/messages-store';\nimport { getCurrentUserInfo } from '../utils/chat-api';\nimport { getApihHeaders } from '../utils/telegpt-fetch';\nimport RoomActions from './room-actions';\n// import RoomAIDescription from './room-ai-des';\nimport { RoomAIInput } from './room-ai-input';\nimport {\n  createGoogleLoginMessage, createGoogleMeetingMessage,\n  createRoomDescriptionMessage, createUpgradeTipMessage,\n} from './room-ai-utils';\n\nimport './room-ai.scss';\nimport styles from './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIInner = (props: StateProps) => {\n  const { showNotification } = getActions();\n  const { chatId } = props;\n  const { userId, userName } = getCurrentUserInfo();\n  const [pageInfo, setPageInfo] = useState<{\n    lastTime: number | undefined;\n    hasMore: boolean;\n  }>({ lastTime: undefined, hasMore: true });\n  const [isLoading, setIsLoading] = useState(false);\n  const tokenRef = useRef<string | null>(null);\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat?userId=${userId}&userName=${userName}&platform=web`,\n    id: chatId,\n    sendExtraMessageFields: true,\n    onError: (error) => {\n      try {\n        const data = JSON.parse(error.message);\n        if (data.code === 102 || data.code === 103) {\n          const upgradeTip = createUpgradeTipMessage();\n          setMessages((prev) => [...prev, upgradeTip]);\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('error.message is not JSON:', error.message);\n      }\n    },\n  });\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, messages, scrollToBottom]);\n\n  useEffect(() => {\n    CHATAI_IDB_STORE.get('google-token').then((token) => {\n      if (token) {\n        tokenRef.current = token as string;\n      }\n    });\n  }, []);\n\n  const handleAddSummaryMessage = useCallback((message: Message) => {\n    setMessages((prev) => {\n      const index = prev.findIndex((item) => item.id === message.id);\n      if (index !== -1) {\n        const newMessages = [...prev];\n        newMessages[index] = message;\n        return newMessages;\n      }\n      return [...prev, message];\n    });\n  }, [setMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    return () => {\n      eventEmitter.off(Actions.AddRoomAIMessage, handleAddSummaryMessage);\n    };\n  }, [handleAddSummaryMessage]);\n\n  const initDate = useCallback(() => {\n    setMessages([]);\n    setPageInfo({ lastTime: undefined, hasMore: true });\n  }, [setMessages]);\n\n  useEffect(() => {\n    if (chatId) {\n      initDate();\n      ChataiStores.message?.getMessages(chatId, undefined, 10)?.then((res) => {\n        if (res.messages.length > 0) {\n          const localChatAiMessages = parseStoreMessage2Message(res.messages);\n          setMessages(localChatAiMessages);\n        } else {\n          const roomDescription = createRoomDescriptionMessage(chatId);\n          setMessages([roomDescription]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n      });\n      RoomStorage.updateRoomAIData(chatId, 'unreadCount', 0);\n    }\n  }, [chatId, initDate, setMessages]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      if (chatId) {\n        ChataiStores.message?.getMessages(chatId, pageInfo?.lastTime, 10)?.then((res) => {\n          if (res.messages) {\n            const localChatAiMessages = parseStoreMessage2Message(res.messages);\n            setMessages((prev) => [...localChatAiMessages, ...prev]);\n          }\n          setPageInfo({\n            lastTime: res.lastTime,\n            hasMore: res.hasMore,\n          });\n          resolve();\n        });\n      }\n    });\n  }, [chatId, pageInfo?.lastTime, scrollLocked, setMessages]);\n\n  const insertMessage = useCallback((message: Message) => {\n    setMessages((prev) => [...prev, message]);\n  }, [setMessages]);\n\n  const handleCreateCalendarSuccess = useCallback((payload: any) => {\n    const { message, response } = payload;\n    if (response?.error) {\n      showNotification({\n        message: response.error?.message || 'Create Calendar Failed',\n      });\n      if (response.error?.code === 401 || response.error?.code === 403) {\n        ChataiStores.message?.delMessage(message?.id);\n        const newMessage = messages.filter((item) => item.id !== message?.id);\n        setMessages(newMessage);\n        insertMessage(createGoogleLoginMessage());\n      }\n    } else {\n      ChataiStores.message?.delMessage(message?.id);\n      const newMessage = messages.filter((item) => item.id !== message?.id);\n      const appendMessage = [\n        {\n          id: uuidv4(),\n          role: 'assistant',\n          content: 'I\\'ll send the meeting invitation shortly. Please check your inbox in the next few minutes.',\n          createdAt: new Date(),\n          parts: [],\n        }, {\n          id: uuidv4(),\n          role: 'assistant',\n          content: JSON.stringify({\n            chatId,\n            eventData: response,\n          }),\n          createdAt: new Date(),\n          annotations: [{\n            type: 'google-event-detail',\n          }],\n        },\n      ];\n      const mergeMesssage = [...newMessage, ...appendMessage];\n      setMessages(mergeMesssage as UIMessage[]);\n    }\n  }, [chatId, insertMessage, messages, setMessages]);\n\n  const updateToken = useCallback((payload: { message: Message; token: string }) => {\n    const { message, token } = payload;\n    tokenRef.current = token;\n    if (message) {\n      ChataiStores.message?.delMessage(message.id);\n      setMessages((prev) => prev.filter((item) => item.id !== message.id));\n    }\n  }, [setMessages]);\n\n  const handleGoogleAuthSuccess = useCallback(() => {\n    insertMessage(createGoogleMeetingMessage());\n  }, [insertMessage]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n    eventEmitter.on(Actions.UpdateGoogleToken, updateToken);\n    eventEmitter.on(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    return () => {\n      eventEmitter.off(Actions.CreateCalendarSuccess, handleCreateCalendarSuccess);\n      eventEmitter.off(Actions.UpdateGoogleToken, updateToken);\n      eventEmitter.off(Actions.GoogleAuthSuccess, handleGoogleAuthSuccess);\n    };\n  }, [handleCreateCalendarSuccess, handleGoogleAuthSuccess, updateToken]);\n\n  useEffect(() => {\n    if ((status === 'ready' || status === 'error') && chatId) {\n      const msgs = parseMessage2StoreMessage(chatId, messages);\n      ChataiStores.message?.storeMessages([...msgs]);\n    }\n  }, [messages, status, chatId]);\n\n  const handleInputSubmit = async (value: string) => {\n    scrollToBottom();\n    const newMessage: Message = {\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    };\n    // setMessages((messages) => {\n    //   return [...messages, newMessage];\n    // });\n    append(newMessage, {\n      headers: getApihHeaders(),\n    });\n  };\n  const deleteMessage = useCallback((messageId: string) => {\n    ChataiStores.message?.delMessage(messageId).then(() => {\n      setMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [setMessages]);\n  return (\n    <div className={buildClassName(styles.rightPanelBg, 'right-panel-chat-ai')}>\n      <Messages\n        className=\"chat-ai-output-wrapper flex-1\"\n        isLoading={isLoading}\n        status={status}\n        messages={messages}\n        deleteMessage={deleteMessage}\n        loadMore={handleLoadMore}\n        hasMore={pageInfo.hasMore}\n        chatId={chatId!}\n      />\n      <div>\n        <RoomActions setIsLoading={(status) => setIsLoading(status)} insertMessage={insertMessage} chatId={chatId} />\n        <form className=\"flex mx-auto px-[12px] pb-4  gap-2 w-full\">\n          <RoomAIInput\n            status={status}\n            stop={stop}\n            setMessages={setMessages}\n            handleInputSubmit={handleInputSubmit}\n          />\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst RoomAI = memo(RoomAIInner, (prevProps, nextProps) => {\n  if (prevProps.chatId !== nextProps.chatId) return false;\n  return true;\n});\n\nexport default RoomAI;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { GlobalSearchContent, LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport AIMenuIcon from '../../chatAssistant/assets/ai-menu.png';\nimport { UPDATE_DEFER_KEY } from '../../chatAssistant/utils/firebase_analytics';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\nimport { getSubscriptionInfo } from '../../chatAssistant/utils/telegpt-api';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    currentContent: GlobalSearchContent | undefined;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  currentContent,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n    updateSubscriptionInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      const handleTrigger = () => {\n        onTrigger();\n        getSubscriptionInfo().then((res) => {\n          if (res.code === 0) {\n            updateSubscriptionInfo({\n              subscriptionType: res.data.subscriptionType,\n              creditBalance: res.data.creditBalance,\n              createdAt: res.data.createdAt,\n              subscriptionExpiresAt: res.data.subscriptionExpiresAt,\n            });\n          }\n        });\n      };\n      return (\n        <Button\n          round\n          ripple={hasMenu && !isMobile}\n          size=\"smaller\"\n          color=\"translucent\"\n          className={isOpen ? 'active' : ''}\n\n          onClick={hasMenu ? handleTrigger : () => onReset()}\n          ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n        >\n          <div className={buildClassName(\n            'animated-menu-icon',\n            !hasMenu && 'state-back',\n            shouldSkipTransition && 'no-animation',\n          )}\n          />\n        </Button>\n      )\n    };\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const withStoryToggler = !isSearchFocused\n    && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const [version] = JSON.parse(localStorage.getItem(UPDATE_DEFER_KEY) || '[\"0.0.0\",0]');\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          // footer={`${APP_NAME} ${versionString}`}\n          footer={`TeleGPT ${version || ''}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onSelectAIKnowledge={onSelectAIKnowledge}\n            onSelectAITranslate={onSelectAITranslate}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        {currentContent === GlobalSearchContent.AI && !hasMenu ? (\n          <div className=\"text-[16px] font-semibold flex flex-row justify-center items-center flex-1\">AI Search</div>\n        ) : (\n          <SearchInput\n            inputId=\"telegram-search-input\"\n            resultsItemSelector=\".LeftSearch .ListItem-button\"\n            className={buildClassName(\n              (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n              shouldHideSearch && 'SearchInput--hidden',\n            )}\n            value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n            focused={isSearchFocused}\n            isLoading={isLoading || connectionStatusPosition === 'minimized'}\n            spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n            spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n            placeholder={searchInputPlaceholder}\n            autoComplete=\"off\"\n            canClose={Boolean(globalSearchChatId || searchDate)}\n            onChange={onSearchQuery}\n            onReset={onReset}\n            onFocus={handleSearchFocus}\n            onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n            onEnter={handleSearchEnter}\n          >\n            {searchContent}\n            <StoryToggler\n              canShow={withStoryToggler}\n            />\n          </SearchInput>\n        )}\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate, currentContent,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      currentContent,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiUser,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type {\n  ProfileTabType, SharedMediaType,\n} from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport {\n  getMessageDocument,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectCurrentSharedMediaSearch,\n  selectIsRightColumnShown,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport {\n  checkIsUrl,\n  documentSummary, photoSummary, videoSummary, webPageSummary,\n} from '../utils/ai-analyse-message';\n\nimport useCacheBuster from '../../../hooks/useCacheBuster';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useTransitionFixes from '../../right/hooks/useTransitionFixes';\n\nimport Document from '../../common/Document';\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\n\nimport './room-attachments-modal.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  chatId: string;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  isSavedDialog?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n];\n\nconst RoomAttachmentsModal: FC<OwnProps & StateProps> = ({\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  isChatProtected,\n  nextProfileTab,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    searchSharedMediaMessages,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    arr.push(...TABS);\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [lang]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveTab(index);\n  }, []);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n\n  // 简化版的viewport管理，只处理media、documents、links\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  // 直接使用foundIds作为viewportIds\n  const viewportIds = foundIds;\n  const getMore = useLastCallback(() => {\n    if (searchSharedMediaMessages) {\n      searchSharedMediaMessages();\n    }\n  });\n  const isFirstTab = resultType === 'media';\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    const message = messagesById?.[messageId];\n    if (message) {\n      const {\n        photo, document, webPage, text, video,\n      } = message.content;\n      const isUrl = checkIsUrl(text?.text);\n      if (photo) {\n        photoSummary(message);\n      } else if (webPage || isUrl) {\n        webPageSummary(message);\n      } else if (document) {\n        documentSummary(message);\n      } else if (video) {\n        videoSummary(message);\n      }\n      onClose();\n    }\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  function renderContent() {\n    if (!viewportIds || !messagesById) {\n      const noSpinner = isFirstTab;\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && <Spinner />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n\n              onClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              message={messagesById[id]}\n              observeIntersection={observeIntersectionForMedia}\n              canAutoLoad\n              autoLoadFileMaxSizeMb={SHARED_MEDIA_SLICE}\n\n              onSelect={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              onlyWebPage\n              observeIntersection={observeIntersectionForMedia}\n\n              onMessageClick={() => handleSelectMedia(id)}\n            />\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  // 弹窗未打开时不渲染组件内容，避免执行内部逻辑\n  if (!isOpen) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"room-attachments-modal\"\n      title=\"Select a file\"\n      hasCloseButton\n    >\n      <div\n        ref={containerRef}\n        className=\"profile-container\"\n      >\n        <div className=\"shared-media\">\n          <div\n            className={buildClassName(\n              'profile-content-wrapper',\n              'no-selection',\n            )}\n          >\n            <div className=\"shared-media-wrapper\">\n              <div className=\"shared-media-header\">\n                {tabs.length > 1 && (\n                  <TabList\n                    tabs={tabs}\n                    activeTab={activeKey}\n                    onSwitchTab={handleSwitchTab}\n                  />\n                )}\n\n              </div>\n              <Transition\n                ref={transitionRef}\n                name=\"slide\"\n                activeKey={activeKey}\n                renderCount={tabs.length}\n                className=\"shared-media-transition\"\n                onStart={applyTransitionFix}\n                onStop={handleTransitionStop}\n              >\n                <InfiniteScroll\n                  className=\"shared-media-list\"\n                  items={viewportIds}\n                  onLoadMore={getMore}\n                  cacheBuster={cacheBuster}\n                  noScrollRestore={activeTab !== activeKey}\n                  noFastList\n                >\n                  {renderContent()}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const chat = selectChat(global, chatId!);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n    const messagesById = selectChatMessages(global, chatId!);\n    const { nextProfileTab } = selectTabState(global);\n    const isRightColumnShown = selectIsRightColumnShown(global);\n\n    return {\n      chatId: chatId!,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      chatsById: global.chats.byId,\n      usersById: global.users.byId,\n      userStatusesById: global.users.statusesById,\n      isRightColumnShown,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab,\n    };\n  },\n)(RoomAttachmentsModal));\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency: isTon ? 'TON' : 'XTR', tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === 'TON';\n\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency: isTon ? 'TON' : 'XTR',\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, shouldSkipModal: true, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import React from '@teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(HeaderPinnedMessage));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React from '@teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { ChataiStores } from '../../../components/chatAssistant/store';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  // add contacts to db\n  sortedUsers.forEach((user) => {\n    ChataiStores.contact?.addContact({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n    ChataiStores.user?.addUser({\n      id: user.id,\n      name: `${user?.firstName || ''} ${user?.lastName || ''}`,\n      phoneNumber: user.phoneNumber,\n    });\n  });\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { FC } from '@teact';\nimport React from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport RoomAIWrapper from '../chatAssistant/room-ai/room-ai-wrapper';\nimport { GLOBAL_SUMMARY_CHATID } from '../chatAssistant/variables';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport UserPortrait from './userPortrait/UserPortrait';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n  userPortraitUserId?: string;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n  userPortraitUserId,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleChatAIInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n    openChatAIWithInfo,\n    toggleUserPortrait,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isChatAI = contentKey === RightColumnContent.ChatAI;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isUserPortrait = contentKey === RightColumnContent.UserPortrait;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.ChatAI:\n        toggleChatAIInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.UserPortrait:\n        toggleUserPortrait({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic\n    ),\n    onBack: () => close(false),\n  });\n\n  useEffect(() => {\n    if (renderingContentKey === -1 && chatId && !shouldCloseRightColumn && chatId !== GLOBAL_SUMMARY_CHATID) {\n      openChatAIWithInfo({ chatId });\n    }\n  }, [chatId, renderingContentKey, shouldCloseRightColumn, threadId]);\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.ChatAI:\n        return <RoomAIWrapper chatId={chatId} threadId={threadId} onClose={close} />;\n      case RightColumnContent.UserPortrait:\n        return userPortraitUserId && <UserPortrait userId={userPortraitUserId} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  if (chatId === GLOBAL_SUMMARY_CHATID) {\n    return undefined;\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isChatAI={isChatAI}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          isUserPortrait={isUserPortrait}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    const { userPortraitUserId } = selectTabState(global);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n      userPortraitUserId,\n    };\n  },\n)(RightColumn));\n","/* eslint-disable no-null/no-null */\nimport React from 'react';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { useChat } from '@ai-sdk/react';\nimport type { Message } from 'ai';\nimport { orderBy } from 'lodash';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { SERVER_API_URL } from '../../../config';\nimport eventEmitter, { Actions } from '../lib/EventEmitter';\nimport buildClassName from '../../../util/buildClassName';\nimport { globalSummaryTask } from '../ai-task/global-summary-task';\nimport { useScrollToBottom } from '../hook/use-scroll-to-bottom';\nimport { Messages } from '../messages';\nimport { MultiInput } from '../multi-input';\nimport { RightPanel } from '../rightPanel/right-panel';\nimport { createUpgradeTipMessage } from '../room-ai/room-ai-utils';\nimport RoomStorage from '../room-storage';\nimport { ChataiStores } from '../store';\nimport {\n  parseMessage2SummaryStoreMessage,\n  parseSummaryStoreMessage2Message,\n  type SummaryStoreMessage,\n} from '../store/summary-store';\nimport { getApihHeaders } from '../utils/telegpt-fetch';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\nimport SummaryHeaderActions from './summary-header-actions';\nimport { createGlobalIntroduceMessage } from './summary-utils';\nimport UrgentNotification from './urgent-notification';\n\nimport ErrorBoundary from '../ErrorBoundary';\nimport { useDrawerStore } from './DrawerContext';\n\nimport './global-summary.scss';\nimport styles from './global-summary.module.scss';\n\nimport SerenaPath from '../assets/serena.png';\n\nconst GlobalSummary = () => {\n  const { isOpen } = useDrawerStore();\n  const [notificationMessage, setNotificationMessage] = useState<Message | null>(null);\n  const [summaryMessages, setSummaryMessages] = useState<Message[]>([]);\n  const [viewMessages, setViewMessages] = useState<Message[]>([]);\n  const [pageInfo, setPageInfo] = useState<{ lastTime: number | undefined; hasMore: boolean }>({\n    lastTime: undefined,\n    hasMore: true,\n  });\n  const {\n    scrollToBottom, scrollLocked, isScrollLock,\n  } = useScrollToBottom();\n  const {\n    messages, setMessages, append, stop, status,\n  } = useChat({\n    api: `${SERVER_API_URL}/chat`,\n    id: GLOBAL_SUMMARY_CHATID,\n    sendExtraMessageFields: true,\n    onError: (error) => {\n      try {\n        const data = JSON.parse(error.message);\n        if (data.code === 102 || data.code === 103) {\n          const upgradeTip = createUpgradeTipMessage();\n          setMessages((prev) => [...prev, upgradeTip]);\n        }\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('error.message is not JSON:', error.message);\n      }\n    },\n  });\n\n  useEffect(() => {\n    const sorted = orderBy(\n      [...messages, ...summaryMessages],\n      [(item: Message) => new Date(item.createdAt as Date).getTime()],\n      ['asc'],\n    );\n    setViewMessages(sorted);\n  }, [messages, summaryMessages]);\n\n  useEffect(() => {\n    if (!isScrollLock) {\n      scrollToBottom();\n    }\n  }, [isScrollLock, viewMessages, scrollToBottom]);\n\n  const handleLoadMore = useCallback(() => {\n    scrollLocked();\n    return new Promise<void>((resolve) => {\n      ChataiStores.summary?.getMessages(pageInfo?.lastTime, 10)?.then((res) => {\n        if (res.messages) {\n          const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n          setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n        }\n        setPageInfo({\n          lastTime: res.lastTime,\n          hasMore: res.hasMore,\n        });\n        resolve();\n      });\n    });\n  }, [pageInfo?.lastTime, scrollLocked, setSummaryMessages]);\n\n  const handleAddSummaryMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n  }, [setSummaryMessages]);\n\n  const handleAddUrgentMessage = useCallback((message: SummaryStoreMessage) => {\n    setSummaryMessages((prev) => [...prev, message]);\n    setNotificationMessage(message);\n  }, [setSummaryMessages]);\n\n  const getSummaryHistory = useCallback(() => {\n    ChataiStores.summary?.getMessages(undefined, 30)?.then((res) => {\n      if (res.messages.length > 0) {\n        const localChatAiMessages = parseSummaryStoreMessage2Message(res.messages);\n        setSummaryMessages((prev) => [...localChatAiMessages, ...prev]);\n      } else {\n        const globalIntroduce = createGlobalIntroduceMessage();\n        setSummaryMessages([globalIntroduce]);\n      }\n      setPageInfo({\n        lastTime: res.lastTime,\n        hasMore: res.hasMore,\n      });\n    });\n  }, [setSummaryMessages]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.AddUrgentMessage, handleAddUrgentMessage);\n    eventEmitter.on(Actions.AddSummaryMessage, handleAddSummaryMessage);\n    eventEmitter.on(Actions.ChatAIStoreReady, getSummaryHistory);\n    return () => {\n      eventEmitter.off(Actions.AddUrgentMessage, handleAddUrgentMessage);\n      eventEmitter.off(Actions.AddSummaryMessage, handleAddSummaryMessage);\n      eventEmitter.off(Actions.ChatAIStoreReady, getSummaryHistory);\n      setViewMessages([]);\n    };\n  }, [getSummaryHistory, handleAddSummaryMessage, handleAddUrgentMessage]);\n\n  useEffect(() => {\n    if (ChataiStores.summary) {\n      getSummaryHistory();\n    }\n  }, [getSummaryHistory]);\n\n  useEffect(() => {\n    const lastFocusTime = RoomStorage.getRoomLastFocusTime(GLOBAL_SUMMARY_CHATID);\n    // 再次聚焦间隔6小时触发一次总结\n    if (lastFocusTime && lastFocusTime < Date.now() - 1000 * 60 * 60 * 6) {\n      globalSummaryTask.initSummaryChats(false);\n    }\n    RoomStorage.updateRoomAIData(GLOBAL_SUMMARY_CHATID, 'lastFocusTime', new Date().getTime());\n  }, []);\n\n  const deleteMessage = useCallback((messageId: string) => {\n    scrollLocked();\n    ChataiStores.summary?.delMessage(messageId).then(() => {\n      // setMessages((prev) => prev.filter((message) => message.id !== messageId));\n      // setSummaryMessages((prev) => prev.filter((message) => message.id !== messageId));\n      setViewMessages((prev) => prev.filter((message) => message.id !== messageId));\n    });\n  }, [scrollLocked]);\n\n  const handleInputSubmit = useCallback((value: string) => {\n    scrollToBottom();\n    append({\n      role: 'user',\n      content: value,\n      id: uuidv4(),\n      createdAt: new Date(),\n    }, {\n      headers: getApihHeaders(),\n    });\n  }, [append, scrollToBottom]);\n\n  useEffect(() => {\n    if (status === 'ready' || status === 'error') {\n      const msgs = parseMessage2SummaryStoreMessage(messages);\n      ChataiStores.summary?.storeMessages(msgs);\n    }\n  }, [messages, status]);\n  const className = buildClassName(\n    styles.globaSummaryBg,\n    'flex flex-col w-full h-full',\n    'global-summary-inner',\n    isOpen && 'right-panel-open',\n  );\n\n  return (\n    <ErrorBoundary>\n      <div className=\"flex flex-row w-full\">\n        <div className={className}>\n          <div className=\"h-[56px] w-full px-[20px] flex items-center bg-[var(--color-background)]\">\n            <img className=\"w-[40px] h-[40px] rounded-full mr-[12px]\" src={SerenaPath} alt=\"Tely AI\" />\n            <span className=\"text-[15px] font-semibold\">Tely AI</span>\n            <div className=\"flex items-center ml-auto gap-[20px]\">\n              <SummaryHeaderActions />\n            </div>\n          </div>\n          <div className=\"flex-1 flex flex-col overflow-hidden\">\n            <Messages\n              className=\"px-[15%] flex-1\"\n              status={status}\n              messages={viewMessages}\n              deleteMessage={deleteMessage}\n              loadMore={handleLoadMore}\n              hasMore={pageInfo.hasMore}\n              chatId={GLOBAL_SUMMARY_CHATID}\n            />\n            <div className=\"mb-[26px] px-[15%]\">\n              <MultiInput\n                status={status}\n                setMessages={setMessages}\n                stop={stop}\n                handleInputSubmit={handleInputSubmit}\n              />\n            </div>\n          </div>\n        </div>\n        <RightPanel />\n      </div>\n      <UrgentNotification message={notificationMessage} />\n    </ErrorBoundary>\n\n  );\n};\n\nexport default memo(GlobalSummary);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef ,useState ,useCallback} from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  AI_FOLDER_ID, AI_FOLDER_TITLE, ALL_FOLDER_ID, PRESET_FOLDER_ID,\n  PRESET_FOLDER_TITLE, UNREAD_FOLDER_ID, UNREAD_FOLDER_TITLE,\n} from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport ActiveTag from '../../chatAssistant/ai-chatfolders/active-tag';\nimport AIChatFoldersTip, { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport PresetTagModal from '../../chatAssistant/ai-chatfolders/preset-modal';\nimport { filterAITag, filterPresetTag } from '../../chatAssistant/ai-chatfolders/tag-filter';\nimport { filterAIFolder } from '../../chatAssistant/ai-chatfolders/util';\nimport {\n  ChataiStores, GLOBAL_AI_TAG, GLOBAL_AICHATFOLDERS_TIP_SHOW, GLOBAL_PRESET_TAG,\n} from '../../chatAssistant/store';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n  aiChatFolders?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n  aiChatFolders,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen\n  } = getActions();\n   // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>();\n  const [shouldRenderPresetTagModal, openRenderPresetTagModal, closeRenderPresetTagModal] = useFlag();\n  const [activePresetTag, setActivePresetTag] = useState<string[]>([]);\n  const [activeAITag, setActiveAITag] = useState<string[]>([]);\n  const [shouldRenderAiChatFoldersTip, openRenderAiChatFoldersTip, closeRenderAiChatFoldersTip] = useFlag();\n\n  const [aiChatFoldersStep, setAiChatFoldersStep] = useState<AIChatFolderStep>(AIChatFolderStep.classify);\n  const [aiChatFoldersloading, setAiChatFoldersLoading] = useState<boolean>(false);\n\n  \n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const presetChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: PRESET_FOLDER_ID,\n      title: { text: PRESET_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const unreadChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: UNREAD_FOLDER_ID,\n      title: { text: UNREAD_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const AIChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: AI_FOLDER_ID,\n      title: { text: AI_FOLDER_TITLE },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, []);\n\n  const displayedFolders = useMemo(() => {\n    const chatFolders = Object.values(chatFoldersById);\n    return orderedFolderIds\n      ? orderedFolderIds?.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n        if (id === PRESET_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === PRESET_FOLDER_TITLE)\n        ) {\n          return presetChatsFolder;\n        }\n        if (id === UNREAD_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === UNREAD_FOLDER_TITLE)\n        ) {\n          return unreadChatsFolder;\n        }\n        if (id === AI_FOLDER_ID\n          && !chatFolders.find((o) => o?.title?.text === AI_FOLDER_TITLE)\n        ) {\n          return AIChatsFolder;\n        }\n        return chatFoldersById?.[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds, JSON.stringify(orderedFolderIds),\n    presetChatsFolder, unreadChatsFolder, AIChatsFolder]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n  const isInPresetFolder = displayedFolders?.findIndex((folder) => folder.id === PRESET_FOLDER_ID) === activeChatFolder;\n  const isInUnreadFolder = displayedFolders?.findIndex((folder) => folder.id === UNREAD_FOLDER_ID) === activeChatFolder;\n  const isInAIFolder = displayedFolders?.findIndex((folder) => folder.id === AI_FOLDER_ID) === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n      let badgeCount = folderCountersById[id]?.chatsCount;\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } if (id === PRESET_FOLDER_ID || id === UNREAD_FOLDER_ID || id === AI_FOLDER_ID) {\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n        if (id === PRESET_FOLDER_ID) {\n          badgeCount = filterPresetTag(folderUnreadChatsCountersById[id])?.length;\n        } else if (id === AI_FOLDER_ID) {\n          badgeCount = filterAITag(folderUnreadChatsCountersById[id])?.length;\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n    if (folderTabs![index].id === PRESET_FOLDER_ID || folderTabs![index].id === AI_FOLDER_ID) {\n      openRenderPresetTagModal();\n    } else {\n      closeRenderPresetTagModal();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  useEffect(() => {\n    ChataiStores.general?.get(GLOBAL_PRESET_TAG)?.then((res) => {\n      setActivePresetTag(res ?? []);\n    });\n    ChataiStores.general?.get(GLOBAL_AI_TAG)?.then((res) => {\n      setActiveAITag(res ?? []);\n    });\n  }, []);\n\n  useEffect(() => {\n    const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n    if (isNext) {\n      setAiChatFoldersStep(AIChatFolderStep.apply);\n    } else {\n      setAiChatFoldersStep(AIChatFolderStep.classify);\n    }\n    ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW)?.then((res) => {\n      if (res === undefined || (res === true && aiChatFolders)) {\n        openRenderAiChatFoldersTip();\n      } else {\n        closeRenderAiChatFoldersTip();\n      }\n    });\n  }, [aiChatFoldersloading, shouldRenderAiChatFoldersTip, aiChatFolders]);\n\n  const updateAIChatFoldsLoading = useCallback(async (\n    { loading, isShowTip } : { loading: boolean; isShowTip?: boolean },\n  ) => {\n    setAiChatFoldersLoading(loading);\n    const tipShowRes = await ChataiStores.general?.get(GLOBAL_AICHATFOLDERS_TIP_SHOW);\n    if ((aiChatFolders || tipShowRes === undefined) && isShowTip) {\n      openRenderAiChatFoldersTip();\n    }\n  }, [aiChatFolders]);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateAIChatFoldersApplying, updateAIChatFoldsLoading);\n    };\n  }, [updateAIChatFoldsLoading]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n    function getFolderType() {\n    if (isInAllChatsFolder) {\n      return 'all';\n    } else if (isInPresetFolder) {\n      return 'preset';\n    } else if (isInUnreadFolder) {\n      return 'unread';\n    } else if (isInAIFolder) {\n      return 'ai';\n    } else {\n      return 'folder';\n    }\n  }\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        activeTag={shouldRenderFolders\n          ? (folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag) : []}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      {shouldRenderAiChatFoldersTip && aiChatFoldersStep === AIChatFolderStep.apply\n        && (\n          <AIChatFoldersTip\n            loading={aiChatFoldersloading}\n            step={aiChatFoldersStep}\n            onClose={closeRenderAiChatFoldersTip}\n          />\n        )}\n      {shouldRenderFolders && shouldRenderPresetTagModal && (\n        <PresetTagModal\n          activeTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder].id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n          isOpen={shouldRenderPresetTagModal}\n          onClose={closeRenderPresetTagModal}\n          folderId={folderTabs![activeChatFolder].id}\n        />\n      )}\n      {shouldRenderFolders && (\n        <ActiveTag\n          folderType={getFolderType()}\n          tags={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? activePresetTag : activeAITag}\n          setActiveTag={folderTabs![activeChatFolder]?.id === PRESET_FOLDER_ID ? setActivePresetTag : setActiveAITag}\n        />\n      )}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    let orderedFolderIds = global.chatFolders.orderedIds;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const { aiChatFolders } = selectSharedSettings(global);\n    if (aiChatFolders !== true) {\n      orderedFolderIds = filterAIFolder(orderedFolderIds);\n    }\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n      aiChatFolders,\n    };\n  },\n)(ChatFolders));\n","/* eslint-disable */\nimport { PRESET_FOLDER_ID } from \"../../../config\";\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo, useMemo } from \"../../../lib/teact/teact\";\nimport type { FC } from \"../../../lib/teact/teact\";\nimport buildClassName from \"../../../util/buildClassName\";\nimport Modal from \"../../ui/Modal\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\nimport { getAITags } from \"./tag-filter\"\ninterface IProps {\n  activeTag: string[];\n  setActiveTag: (tag: string[]) => void;\n  isOpen: boolean;\n  onClose: () => void;\n  folderId?: number;\n}\nconst PRESET_TAGS = [\n  \"Public Chain\",\n  \"DeFi\",\n  \"NFT/GameFi\",\n  \"Wallets & Tools\",\n  \"DAO\",\n  \"Layer2\",\n  \"Security & Audits\",\n  \"Fundraising & Investment\",\n  \"Meme\",\n  \"Launchpad/IDO\",\n  \"KOL & Community Growth\",\n  \"Legal & Compliance\",\n];\n\n\n\nconst PresetTagModal: FC<IProps> = ({\n  folderId,\n  activeTag,\n  setActiveTag,\n  isOpen,\n  onClose,\n}) => {\n  const tagList = useMemo(() => {\n    return folderId === PRESET_FOLDER_ID ? PRESET_TAGS : getAITags();\n  }, [folderId, getAITags]);\n\n  function onClickTag(tag: string) {\n    let currentTag = activeTag;\n    if (currentTag.indexOf(tag) >= 0) {\n      // remove tag\n      currentTag = currentTag.filter((item) => item !== tag);\n    } else {\n      // add tag\n      currentTag = [...currentTag, tag];\n    }\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(folderId === PRESET_FOLDER_ID ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG, currentTag);\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderId === PRESET_FOLDER_ID ? 'activePresetTag' : 'activeAITag']: currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n\n    onClose?.();\n  }\n\n  if (tagList?.length === 0) {\n    return null;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      dialogStyle=\"max-width: 400px; max-height: 600px; position: absolute; left: 100px; top: 70px;\"\n    >\n      <div className=\"m-[-10px]\">\n        <div className=\"text-[#676B74] text-[12px] font-[600] mb-2\">{folderId === PRESET_FOLDER_ID ? 'Industry': 'AI Tags'}</div>\n        <div className=\"flex flex-row flex-wrap gap-2 my-2\">\n          {tagList.map((tag) => (\n            <div\n              className={buildClassName(\n                \"rounded-[6px] px-2 py-2 font-[500] text-[13px] hover:opacity-80 cursor-pointer\",\n                activeTag.indexOf(tag) >= 0\n                  ? \"bg-[var(--color-aichatfolders-tag-bg-active)] text-[#fff]\"\n                  : \"bg-[var(--color-aichatfolders-tag-bg)] text-[var(--color-aichatfolders-tag-text)]\"\n              )}\n              onClick={() => onClickTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PresetTagModal);\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","/* eslint-disable no-console */\n/* eslint-disable react/jsx-no-bind */\nimport React, { useState } from 'react';\n\nimport type { TabWithProperties } from '../component/TabList';\n\nimport SummarizeTab from './surmarize-tab';\nimport UrgentAlertTab from './urgent-alert-tab';\n\nimport TabList from '../component/TabList';\nimport { useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './personalized-settings.scss';\n\nconst PersonalizeSettings = () => {\n  const { drawerParams } = useDrawerStore();\n  const [selectedTabIndex, setSelectedTabIndex] = useState(drawerParams?.activeKey || 0);\n  const transactionTabs: TabWithProperties[] = [\n    {\n      title: 'Chat Summary',\n    },\n    {\n      title: 'Urgent Alert',\n    },\n  ];\n  const renderContent = () => {\n    switch (selectedTabIndex) {\n      case 0:\n        return <SummarizeTab />;\n      case 1:\n        return <UrgentAlertTab />;\n      default:\n        return undefined;\n    }\n  };\n  return (\n    <div className=\"flex flex-col h-full w-full\">\n      <TabList\n        activeTab={selectedTabIndex}\n        tabs={transactionTabs}\n        onSwitchTab={setSelectedTabIndex}\n      />\n      <div className=\"pt-[20px] flex-1 overflow-y-auto\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n};\n\nexport default PersonalizeSettings;\n","/* eslint-disable no-null/no-null */\n\nimport React, { useRef } from 'react';\nimport { Carousel } from 'antd';\nimport type { CarouselRef } from 'antd/es/carousel';\nimport cx from 'classnames';\n\nimport { CloseIcon } from '../../icons';\n\nimport './guidance.scss';\n\nconst CarouselItem = ({ className, children }: { className: string; children?: React.ReactNode }) => {\n  return (\n    <div className={cx('guidance-carousel-item', className)}>\n      <div className=\"w-[42%] pl-[50px] pt-[5%] pb-[12%] h-full flex flex-col justify-center\">\n        {children}\n      </div>\n    </div>\n  );\n};\nconst GuidanceCarousel = ({ handleClose }: { handleClose: () => void }) => {\n  const carouselRef = useRef<CarouselRef>(null);\n  const handleNextClick = (step: number) => {\n    carouselRef.current?.goTo(step);\n    if (step === 4) {\n      handleClose();\n    }\n  };\n  return (\n    <div>\n      <div className=\"guidance-bubble\" />\n      <div className=\"absolute top-[10px] right-[10px] cursor-pointer text-[#A89E9E] z-10\" onClick={handleClose}>\n        <CloseIcon size={24} />\n      </div>\n      <Carousel className=\"guidance-carousel\" ref={carouselRef}>\n        <CarouselItem className=\"guidance-summary\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Chat Summary</div>\n          <div className=\"text-[14px]\">\n            Message Summarization uses AI to extract key points from IM chats and provide regular summaries, helping users stay updated.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(1)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-translation\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Translation & Grammar Check</div>\n          <div className=\"text-[14px]\">\n            Instant Translation: Real-time translation with auto language detection.\n            Error Detection: Spots spelling, grammar, and structure issues.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(2)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-meeting\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Meeting Scheduler</div>\n          <div className=\"text-[14px]\">\n            Automatically detects meeting chats, gathers details, and sends calendar invites—all within the conversation.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(3)}>Next</div>\n        </CarouselItem>\n        <CarouselItem className=\"guidance-actions\">\n          <div className=\"text-[45px] font-bold leading-[44px] mb-[20px]\">Action Items</div>\n          <div className=\"text-[14px]\">\n            AI picks out tasks and follow-ups from chats in real time—no manual notes needed.\n          </div>\n          <div className=\"guidance-carousel-next\" onClick={() => handleNextClick(4)}>Next</div>\n        </CarouselItem>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default GuidanceCarousel;\n","import React from '../../../../lib/teact/teact';\n\nimport { injectComponent } from '../../injectComponent';\nimport GuidanceCarousel from './guidance-carousel';\n\nconst GuidanceWrapper = ({ handleClose }: { handleClose: () => void }) => {\n  const containerRef = injectComponent({\n    component: GuidanceCarousel,\n    props: {\n      handleClose,\n    },\n  });\n  return (\n    <div ref={containerRef} />\n  );\n};\n\nexport default GuidanceWrapper;\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutSvg,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (!gifts || !prevGifts) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n    const isSpinner = noContent && !noSpinner;\n\n    return (\n      <Transition activeKey={isSpinner ? 0 : 1} name=\"fade\">\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </Transition>\n    );\n  }\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active.${resultType}-list`;\n  const itemSelector = `${activeListSelector} > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const peerGifts = selectTabState(global).savedGifts.giftsByPeerId[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ApiMessage } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: OldLangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport cx from 'classnames';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\ninterface Props {\n  drawerKey: DrawerKey | undefined;\n  onClose: () => void;\n}\n\nconst hasBackDrawer = [\n  DrawerKey.CustomizationPrompt,\n  DrawerKey.AddTopicPanel,\n  DrawerKey.ChatPicker,\n];\n\nconst HeaderButton = ({ icon, className, onClick }:{ icon:React.ReactNode;className?:string;onClick:()=>void }) => {\n  return (\n    <div\n      className={cx('flex items-center justify-center cursor-pointer w-[2.75rem] h-[2.75rem] rounded-full text-[var(--color-text-secondary)] hover:bg-[var(--color-interactive-element-hover)]', className)}\n      onClick={onClick}\n    >\n      {icon}\n    </div>\n  );\n};\nconst RightHeader = (props: Props) => {\n  const { drawerKey, onClose } = props;\n  const [title, setTitle] = useState('');\n  const { openDrawer, drawerParams } = useDrawerStore();\n  const handleBack = useCallback(() => {\n    if (drawerParams?.onBack) {\n      drawerParams.onBack();\n    } else {\n      openDrawer(DrawerKey.PersonalizeSettings, {\n        activeKey: drawerKey === DrawerKey.CustomizationPrompt ? 0 : 1,\n      });\n    }\n  }, [drawerKey, drawerParams, openDrawer]);\n  useEffect(() => {\n    switch (drawerKey) {\n      case DrawerKey.PersonalizeSettings:\n        setTitle('Personalized settings');\n        break;\n      case DrawerKey.OriginalMessages:\n        setTitle('Original Messages');\n        break;\n      case DrawerKey.CustomizationPrompt:\n      case DrawerKey.AddTopicPanel:\n        setTitle('Add Topics');\n        break;\n      case DrawerKey.ChatPicker:\n        setTitle('Select chat');\n        break;\n      default:\n        setTitle('');\n    }\n  }, [handleBack, drawerKey]);\n  return (\n    <div className=\"h-[56px] flex items-center relative py-[0.5rem] px-[0.8125rem] w-[var(--right-column-width)]\">\n      {drawerKey && hasBackDrawer.includes(drawerKey) ? (\n        <HeaderButton icon={<Icon name=\"arrow-left\" className=\"text-[26px]\" />} onClick={handleBack} />\n      ) : (\n        <HeaderButton icon={<Icon name=\"close\" className=\"text-[26px]\" />} onClick={onClose} />\n      )}\n      <div className=\"text-[1.25rem] font-[var(--font-weight-medium)] pl-[1.375rem]\">{title}</div>\n    </div>\n  );\n};\n\nexport default RightHeader;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): StateProps => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","import { IS_ELECTRON } from './browser/windowEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import React from '@teact';\nimport { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): StateProps => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import React from '@teact';\nimport type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type { FC } from 'react';\nimport React from 'react';\nimport { debounce } from 'lodash';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './FloatingActionButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  className?: string;\n  disabled?: boolean;\n  onClick: () => void;\n  children: React.ReactNode;\n};\n\nconst FloatingActionButton: FC<OwnProps> = ({\n  isShown,\n  className,\n  disabled,\n  onClick,\n  children,\n}) => {\n  const handleClick = debounce(onClick, 500);\n\n  const buttonClassName = buildClassName(\n    'FloatingActionButton',\n    'w-[3.5rem] bg-[var(--color-primary)] h-[3.5rem] rounded-full flex items-center justify-center',\n    isShown && 'revealed',\n    className,\n  );\n\n  return (\n    <button\n      className={buttonClassName}\n      disabled={disabled}\n      onClick={isShown && !disabled ? handleClick : undefined}\n      tabIndex={-1}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default FloatingActionButton;\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import serenaWaiting from './serena-waiting.json';\nimport serenaWorking from './serena-working.json';\n\nconst waitBlob = new Blob([JSON.stringify(serenaWaiting)], { type: 'application/json' });\nconst serenaWaitUrl = URL.createObjectURL(waitBlob);\n\nconst workBlob = new Blob([JSON.stringify(serenaWorking)], { type: 'application/json' });\nconst serenaWorkUrl = URL.createObjectURL(workBlob);\n\nexport {\n  serenaWaitUrl,\n  serenaWorkUrl,\n};\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\nimport SenderGroupAvatar from './SenderGroupAvatar';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {/* {renderAvatar()} */}\n           <SenderGroupAvatar handleAvatarClick={handleAvatarClick} avatarPeer={avatarPeer} forwardInfo={forwardInfo} />\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","\n/* eslint-disable no-null/no-null */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport type { CSSProperties } from 'react';\nimport React, { useEffect } from 'react';\nimport type { Message } from 'ai';\nimport { notification } from 'antd';\n\nimport DangerIcon from '../assets/danger.png';\nimport SerenaLogoPath from '../assets/serena.png';\n\nconst UrgentNotification = ({ message }:{ message:Message | null }) => {\n  const [api, contextHolder] = notification.useNotification();\n  const notificationUrgentMessage = (msg: Message) => {\n    const parsedMessage = JSON.parse(msg.content);\n    if (parsedMessage && typeof parsedMessage === 'object' && parsedMessage.length > 0) {\n      parsedMessage.forEach((item:any) => {\n        api.open({\n          style: { padding: '12px 20px' } as CSSProperties,\n          message: (\n            <div className=\"flex flex-row gap-[12px]\">\n              <img className=\"w-[52px] h-[52px] rounded-full\" src={SerenaLogoPath} alt=\"\" />\n              <div>\n                <div className=\"flex flex-row items-center gap-[8px] mb-[10px]\">\n                  <img src={DangerIcon} alt=\"\" className=\"w-[26px] h-[26px]\" />\n                  <span className=\"text-[20px] text-[#FF543D] font-bold\">Urgent Alert</span>\n                </div>\n                <div className=\"text-[18px] font-semibold line-clamp-2 overflow-hidden text-ellipsis\">{item.content}</div>\n              </div>\n            </div>\n          ),\n        });\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (message) {\n      notificationUrgentMessage(message);\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [message]);\n  return (\n    <>\n      { contextHolder }\n      <span />\n    </>\n  );\n};\n\nexport default UrgentNotification;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  useCallback,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport { UserPortraitBasicCardMenu } from '../../right/userPortrait/UserPortraitBasicCardMenu';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps = {\n  avatarPeer?: ApiPeer;\n  forwardInfo?: {\n    hiddenUserName?: string;\n  };\n  handleAvatarClick: () => void;\n};\n\nconst SenderGroupAvatar: FC<OwnProps> = ({\n  avatarPeer,\n  forwardInfo,\n  handleAvatarClick,\n}) => {\n  const { openUserPortrait } = getActions();\n  const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [contextMenuAnchor, setContextMenuAnchor] = useState<IAnchorPosition | undefined>(undefined);\n  const triggerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getMenuElement = useCallback(() => menuRef.current!, []);\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true, shouldAvoidNegativePosition: true }));\n\n  const handleActivateSymbolMenu = useLastCallback(() => {\n    openSymbolMenu();\n    const triggerEl = triggerRef.current;\n    if (!triggerEl) return;\n    const { x, y } = triggerEl.getBoundingClientRect();\n    setContextMenuAnchor({ x, y });\n  });\n\n  return (\n    <div className=\"inline-block\" ref={ref}>\n      <ResponsiveHoverButton\n        round\n        className={buildClassName('!p-0 !w-auto !h-auto')}\n        color=\"translucent\"\n        onActivate={handleActivateSymbolMenu}\n      >\n        <div ref={triggerRef} className=\"symbol-menu-trigger\" />\n        <Avatar\n          size=\"small\"\n          className={styles.senderAvatar}\n          peer={avatarPeer}\n          text={hiddenName}\n          onClick={avatarPeer ? handleAvatarClick : undefined}\n        />\n      </ResponsiveHoverButton>\n      <UserPortraitBasicCardMenu\n        isOpen={isSymbolMenuOpen}\n        onClose={closeSymbolMenu}\n        userId={avatarPeer?.id!}\n        anchor={contextMenuAnchor}\n        menuRef={menuRef}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n      />\n    </div>\n  )\n};\n\nexport default SenderGroupAvatar;\n","/* eslint-disable @stylistic/max-len */\n/* eslint-disable no-null/no-null */\nimport React from '@teact'\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport buildStyle from '../../../util/buildStyle';\nimport RoomAIEntryButton from './room-ai-entry-button';\n\nimport './room-ai.module.scss';\n\ninterface StateProps {\n  chatId: string;\n}\n\nconst RoomAIEntryWrapper = (props: StateProps) => {\n  const { chatId } = props;\n  // const containerRef = useRef<HTMLDivElement>();\n  const [isDragging, setIsDragging] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 224, // 14rem = 224px (14 * 16)\n  });\n  const dragStartRef = useRef({\n    x: 0,\n    y: 0,\n    startX: 0,\n    startY: 0,\n  });\n  const hasDraggedRef = useRef(false);\n  const isDraggingRef = useRef(false);\n  const positionRef = useRef(position);\n\n  // 同步position到ref\n  useEffect(() => {\n    positionRef.current = position;\n  }, [position]);\n\n  // 同步isDragging到ref\n  useEffect(() => {\n    isDraggingRef.current = isDragging;\n  }, [isDragging]);\n\n  // 从localStorage加载位置\n  const loadPosition = useCallback(() => {\n    const savedPosition = localStorage.getItem('room-ai-position');\n    if (savedPosition) {\n      const pos = JSON.parse(savedPosition);\n      setPosition(pos);\n    } else {\n      // 设置默认位置：右侧16px，底部224px\n      const defaultX = -16; // max(1rem, env(safe-area-inset-right)) ≈ 16px\n      setPosition({ x: defaultX, y: 224 });\n    }\n  }, []);\n\n  // 保存位置到localStorage\n  const savePosition = useCallback((pos: { x: number; y: number }) => {\n    localStorage.setItem('room-ai-position', JSON.stringify(pos));\n  }, []);\n\n  const longPressTimerRef = useRef<number | null>(null);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging) return;\n\n    hasDraggedRef.current = true;\n    const deltaX = e.clientX - dragStartRef.current.x;\n    const deltaY = e.clientY - dragStartRef.current.y;\n\n    const newPosition = {\n      x: dragStartRef.current.startX + deltaX,\n      y: dragStartRef.current.startY - deltaY, // 修正Y轴方向：鼠标向下移动时减少Y值\n    };\n\n    // 边界限制\n    const containerWidth = 62;\n    const containerHeight = 62;\n    const minX = -window.innerWidth + containerWidth; // 左边界\n    const maxX = 0; // 右边界\n    const minY = 0; // 距离底部最小距离（贴底）\n    const maxY = window.innerHeight - containerHeight; // 距离底部最大距离（贴顶）\n\n    newPosition.x = Math.max(minX, Math.min(maxX, newPosition.x));\n    newPosition.y = Math.max(minY, Math.min(maxY, newPosition.y));\n\n    setPosition(newPosition);\n  }, [isDragging]);\n\n  const handleMouseUp = useCallback(() => {\n    // 清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n\n    // 只有在真正拖拽时才保存位置\n    if (isDragging) {\n      if (hasDraggedRef.current) {\n        savePosition(positionRef.current);\n      }\n    }\n    setIsDragging(false);\n\n    // 延迟重置拖拽标记，防止立即触发点击事件\n    setTimeout(() => {\n      hasDraggedRef.current = false;\n    }, 100);\n  }, [isDragging, savePosition]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    hasDraggedRef.current = false;\n    dragStartRef.current = {\n      x: e.clientX,\n      y: e.clientY,\n      startX: position.x,\n      startY: position.y,\n    };\n\n    // 设置长按定时器，150ms后开始拖拽\n    longPressTimerRef.current = window.setTimeout(() => {\n      setIsDragging(true);\n    }, 150);\n  }, [position]);\n\n  const handleMouseLeave = useCallback(() => {\n    // 鼠标离开时清除长按定时器\n    if (longPressTimerRef.current) {\n      clearTimeout(longPressTimerRef.current);\n      longPressTimerRef.current = null;\n    }\n  }, []);\n\n  const handleClick = useCallback((e: React.MouseEvent) => {\n    // 如果刚刚完成拖拽，阻止点击事件\n    if (hasDraggedRef.current || isDragging) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, [isDragging]);\n\n  // 添加全局鼠标事件监听\n  useEffect(() => {\n    document.addEventListener('mousemove', handleMouseMove);\n    document.addEventListener('mouseup', handleMouseUp);\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n      document.removeEventListener('mouseup', handleMouseUp);\n    };\n  }, [isDragging, handleMouseMove, handleMouseUp]);\n\n  useEffect(() => {\n    loadPosition();\n  }, [loadPosition]);\n  const containerRef = injectComponent({\n    component: RoomAIEntryButton,\n    props: {\n      chatId,\n    },\n  });\n\n  return (\n    <div\n      className=\"room-ai-entry-wrapper\"\n      ref={containerRef}\n      data-dragging={isDragging}\n      style={buildStyle(`right: ${-position.x}px; bottom: ${position.y}px; cursor: ${isDragging ? 'grabbing' : 'grab'}; userSelect: none`)}\n      onMouseDown={handleMouseDown}\n      onMouseLeave={handleMouseLeave}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIEntryWrapper));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","/* eslint-disable */\nimport { getGlobal, setGlobal } from \"../../../global\";\nimport React, { memo } from \"../../../lib/teact/teact\";\nimport { FolderType } from \"../../left/main/ChatList\";\nimport { ChataiStores, GLOBAL_AI_TAG, GLOBAL_PRESET_TAG } from \"../store\";\n\nconst ActiveTag = ({\n  folderType,\n  tags,\n  setActiveTag,\n}: {\n  folderType: FolderType;\n  tags: string[];\n  setActiveTag: (tag: string[]) => void;\n}) => {\n  function onDelete(tag: string) {\n    const currentTag = tags.filter((item) => item !== tag);\n    setActiveTag(currentTag);\n\n    let global = getGlobal();\n    ChataiStores.general?.set(\n      folderType === \"preset\" ? GLOBAL_PRESET_TAG : GLOBAL_AI_TAG,\n      currentTag\n    );\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        aiChatFolders: {\n          ...global.chatFolders.aiChatFolders,\n          [folderType === \"preset\" ? \"activePresetTag\" : \"activeAITag\"]:\n            currentTag,\n        },\n      },\n    };\n    setGlobal(global);\n  }\n\n  if ((folderType === \"preset\" || folderType === \"ai\") && tags?.length) {\n    return (\n      <div className=\"flex flex-row flex-wrap items-center gap-2 px-2 pt-3\">\n        {tags.map((item) => {\n          return (\n            <div className=\"bg-[var(--color-aichatfolders-tag-bg)] h-[27px] leading-[27px] text-[13px] font-[500] text-[var(--color-aichatfolders-tag-text)] rounded-[6px] px-2 relative\">\n              {item}\n              <div\n                className=\"absolute top-[-4px] right-[-4px] w-[12px] h-[12px] flex items-center justify-center bg-[var(--color-aichatfolders-tag-bg-active)] rounded-full cursor-pointer hover:opacity-80 border-[1px] border-[var(--color-aichatfolders-tag-border)]\"\n                onClick={() => onDelete(item)}\n              >\n                <CloseIcon/>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default memo(ActiveTag);\n\nconst CloseIcon = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width={8} height={8} fill=\"none\" className=\"scale-[0.8]\">\n    <path\n      fill=\"#fff\"\n      d=\"M4 4.7 1.55 7.15a.474.474 0 0 1-.35.137.474.474 0 0 1-.35-.137.474.474 0 0 1-.138-.35c0-.142.046-.258.138-.35L3.3 4 .85 1.55a.474.474 0 0 1-.138-.35A.474.474 0 0 1 1.2.713c.143 0 .26.045.35.137L4 3.3 6.45.85A.474.474 0 0 1 6.8.712a.474.474 0 0 1 .487.487.474.474 0 0 1-.136.35L4.7 4l2.45 2.45a.474.474 0 0 1 .137.35.474.474 0 0 1-.137.35.474.474 0 0 1-.35.138.474.474 0 0 1-.35-.137L4 4.7Z\"\n    />\n  </svg>\n);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","/* eslint-disable max-len */\nimport React, { useState } from 'react';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport {\n  getChatTitle,\n  getGroupStatus,\n  getUserFullName,\n  getUserStatus,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer, selectUserStatus } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport useOldLang from '../hook/useOldLang';\nimport { GLOBAL_SUMMARY_CHATID } from '../variables';\n\nimport Avatar from '../component/Avatar';\nimport Icon from '../component/Icon';\n\nimport './rooms-tab.scss';\nimport './selected-chats.scss';\n\ninterface Props {\n  title: string;\n  ignoredIds: string[];\n  onIgnored: (id: string) => void;\n  onUnIgnored: (id: string) => void;\n}\n\nexport const RoomsTab = (props: Props) => {\n  const {\n    title,\n    ignoredIds,\n    onIgnored,\n    onUnIgnored,\n  } = props;\n  const orderedIds = React.useMemo(() => {\n    const ids = getOrderedIds(ALL_FOLDER_ID) || [];\n    return ids.filter((id) => id !== GLOBAL_SUMMARY_CHATID);\n  }, []);\n  const unIgnoreIds = orderedIds.filter((id) => !ignoredIds.includes(id));\n  const [activeTab, setActiveTab] = useState<'summary' | 'ignored'>('summary');\n  const lang = useOldLang();\n  const global = getGlobal();\n\n  const renderRoomItem = (\n    id: string,\n    isIgnored: boolean,\n  ) => {\n    const peer: ApiPeer | undefined = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n    const customPeer = 'isCustomPeer' in peer ? peer : undefined;\n    const realPeer = 'id' in peer ? peer : undefined;\n    const isUser = realPeer && isApiPeerUser(realPeer);\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const title = realPeer && (isUser ? getUserFullName(realPeer) : getChatTitle(lang, realPeer));\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(lang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return getUserStatus(lang, peer, userStatus);\n    }\n\n    function getTitle() {\n      if (customPeer) {\n        return (customPeer as CustomPeer)?.title || lang((customPeer as CustomPeer)?.titleKey!);\n      }\n\n      if (isSelf) {\n        return lang('SavedMessages');\n      }\n\n      return title;\n    }\n\n    const subtitle = getSubtitle() || '';\n    const specialTitle = getTitle();\n\n    return (\n      <div className=\"chat-picker-item flex-1 flex flex-row items-center gap-[12px] py-[10px] rounded-[12px]\">\n        <Avatar\n          peer={peer}\n          isSavedMessages={isSelf}\n          size=\"medium\"\n        />\n        <div className=\"flex flex-col gap-[4px] justify-center flex-1 overflow-hidden\">\n          <div className=\"overflow-hidden overflow-ellipsis whitespace-nowrap font-medium\">{specialTitle}</div>\n          <div className=\"text-[var(--color-text-secondary)] text-sm\">{subtitle}</div>\n        </div>\n        {isIgnored ? (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#5493F2] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onUnIgnored(id)}\n          >\n            Stop Ignoring\n          </div>\n        ) : (\n          <div\n            className=\"chat-picker-item-btn text-white text-sm bg-[#FF5757] w-auto px-[5px] h-[26px] rounded-[6px] flex items-center justify-center\"\n            onClick={() => onIgnored(id)}\n          >\n            <Icon name=\"eye-crossed\" />\n            Ignore\n          </div>\n        )}\n\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"summary-rooms-tab mt-[20px]\">\n      <div className=\"tabs-container\">\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'summary'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('summary')}\n        >\n          {title}\n        </button>\n        <button\n          className={`font-medium text-base ${\n            activeTab === 'ignored'\n              ? 'text-[var(--color-text)] active'\n              : 'text-[var(--color-text-secondary)] '\n          }`}\n          onClick={() => setActiveTab('ignored')}\n        >\n          Ignored Chats\n        </button>\n      </div>\n\n      {activeTab === 'summary' ? (\n        <div>\n          {unIgnoreIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {unIgnoreIds.map((id) => renderRoomItem(id, false))}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>\n          {ignoredIds.length > 0 && (\n            <div className=\"mt-[16px] space-y-[8px]\">\n              {ignoredIds.map((id) => renderRoomItem(id, true))}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import React from '@teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport CreditsModal from './credits/CreditsModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteCodeModal from './inviteCode/InviteCodeModal.async';\nimport InviteFriendsModal from './inviteFriends/InviteFriendsModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport PayPackageModal from './membership/PayPackageModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'creditsModal' |\n  'inviteCodeModal' |\n  'inviteFriendsModal' |\n  'payPackageModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  creditsModal: CreditsModal,\n  inviteCodeModal: InviteCodeModal,\n  inviteFriendsModal: InviteFriendsModal,\n  payPackageModal: PayPackageModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CreditsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CreditsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CreditsModal = useModuleLoader(Bundles.Extra, 'CreditsModal', !modal?.isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreditsModal ? <CreditsModal {...props} /> : undefined;\n};\n\nexport default CreditsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteCodeModalAsync: FC<OwnProps> = (props) => {\n  const InviteCodeModal = useModuleLoader(Bundles.Extra, 'InviteCodeModal');\n\n  return InviteCodeModal ? <InviteCodeModal {...props} /> : undefined;\n};\n\nexport default InviteCodeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteFriendsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteFriendsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteFriendsModal = useModuleLoader(Bundles.Extra, 'InviteFriendsModal', !modal?.isOpen);\n\n  return InviteFriendsModal ? <InviteFriendsModal {...props} /> : undefined;\n};\n\nexport default InviteFriendsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PayPackageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PayPackageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PayPackageModal = useModuleLoader(Bundles.Extra, 'PayPackageModal', !modal?.isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PayPackageModal ? <PayPackageModal {...props} /> : undefined;\n};\n\nexport default PayPackageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import React from '@teact';\nimport { Modal } from 'antd';\nimport { memo, useMemo, useCallback, useState, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal, getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_ELECTRON } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { AIChatFolderStep } from '../../chatAssistant/ai-chatfolders/ai-chatfolders-tip';\nimport { deleteAiChatFoldersFromUser, hideTip } from '../../chatAssistant/ai-chatfolders/util';\nimport { aiChatFoldersTask } from '../../chatAssistant/ai-task/ai-chatfolders-task';\nimport AIChatFolderIcon from '../../chatAssistant/assets/ai-chat-folder.png';\nimport InviteGiftIcon from '../../chatAssistant/assets/invite/invite-gift.png';\nimport AIKnowledgeIcon from '../../chatAssistant/assets/ai-knowledge.png';\nimport AITranslateIcon from '../../chatAssistant/assets/ai-translate.png';\nimport { ChataiStores, GLOBAL_AICHATFOLDERS_TIP_SHOW } from '../../chatAssistant/store';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport eventEmitter, { Actions } from '../../chatAssistant/lib/EventEmitter';\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\nimport Icon from '../../common/icons/Icon';\n\ntype OwnProps = {\n  onSelectAIKnowledge: NoneToVoidFunction;\n  onSelectAITranslate: NoneToVoidFunction;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  currentUser?: ApiUser;\n  accountsTotalLimit: number;\n  aiChatFolders?: boolean;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings' | 'subscriptionInfo'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  aiChatFolders,\n  subscriptionInfo,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n  onSelectAIKnowledge,\n  onSelectAITranslate,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n    openCreditsModal,\n    openInviteFriendsModal,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleCreditsClick = useLastCallback(() => {\n    openCreditsModal();\n  });\n\n  const handleInviteFriendsClick = useLastCallback(() => {\n    openInviteFriendsModal();\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const [aiChatFoldersLoading, setAiChatFoldersLoading] = useState<boolean>(false);\n  const handleSwitchAIChatFolders = useLastCallback(async (e: React.SyntheticEvent<HTMLElement>) => {\n    if (aiChatFoldersLoading) return;\n    e.stopPropagation();\n    const isOpen = !aiChatFolders;\n    if (!isOpen) {\n      Modal.confirm({\n        title: 'Are you sure?',\n        content: 'This will hide all AI chat folders, but you can enable this feature again.',\n        onOk: async () => {\n          setAiChatFoldersLoading(true);\n          setSharedSettingOption({ aiChatFolders: isOpen });\n          // delete ai chat folders\n          await deleteAiChatFoldersFromUser();\n          hideTip(AIChatFolderStep.classify);\n          setAiChatFoldersLoading(false);\n        },\n        onCancel: () => { },\n      });\n    } else {\n      setAiChatFoldersLoading(true);\n      setSharedSettingOption({ aiChatFolders: isOpen });\n      await aiChatFoldersTask.applyChatFolder();\n      eventEmitter.emit(Actions.UpdateAIChatFoldersApplying, {\n        loading: false,\n      });\n      ChataiStores.general?.set(GLOBAL_AICHATFOLDERS_TIP_SHOW, false);\n      setAiChatFoldersLoading(false);\n    }\n  });\n\n  const updateAIChatFoldersLoading = useCallback(({ loading, isApply }: { loading: boolean; isApply: boolean }) => {\n    if (isApply) {\n      setAiChatFoldersLoading(loading);\n    } else {\n      const isNext = getGlobal().chatFolders.nextAiChatFolders?.length;\n      if (isNext) {\n        setAiChatFoldersLoading(false);\n      } else {\n        setAiChatFoldersLoading(loading);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    eventEmitter.on(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    return () => {\n      eventEmitter.off(Actions.UpdateSettingAIChatFoldersLoading, updateAIChatFoldersLoading);\n    };\n  }, [updateAIChatFoldersLoading]);\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n       <MenuItem\n        onClick={handleCreditsClick}\n      >\n        <div className='pl-[1.25rem] pr-[0.75rem] w-full flex items-center justify-between'>\n          <span>{oldLang('Credits')}</span>\n          {subscriptionInfo?.creditBalance && (\n           <>\n             <div className='flex items-center'>\n              <span className='text-[13px] font-semibold text-[#037EE5]'>{subscriptionInfo?.creditBalance}</span>\n              <Icon name='arrow-right' className='mr-0' />\n             </div>\n           </>\n          )}\n        </div>\n      </MenuItem>\n      <MenuSeparator />\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIKnowledgeIcon} alt=\"ai-knowledge\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAIKnowledge}\n      >\n        {oldLang('Quick Replies')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AITranslateIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={onSelectAITranslate}\n      >\n        {oldLang('AI Translate')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={InviteGiftIcon} alt=\"ai-translate\" style={buildStyle('width: 24px;height: 24px;max-width: 24px;')} />}\n        onClick={handleInviteFriendsClick}\n      >\n        {oldLang('Invite Friends')}\n      </MenuItem>\n      <MenuItem\n        customIcon={<img className=\"icon\" src={AIChatFolderIcon} alt=\"ai-chat-folders\" style={buildStyle('width: 24px;height: 24px;max-width: 24px; padding:3px;')} />}\n        onClick={handleSwitchAIChatFolders}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('AI Chat Folders')}</span>\n        <label className={buildClassName('Switcher no-animation', aiChatFoldersLoading ? 'disabled' : '')} title=\"\">\n          <input\n            type=\"checkbox\"\n            id=\"aiChatFolders\"\n            checked={aiChatFolders === true}\n            disabled\n          />\n          <span className=\"widget\" />\n        </label>\n        {aiChatFoldersLoading && (\n          <Spinner\n            className=\"w-[18px] h-[18px] ml-2\"\n            color={theme === 'dark' ? 'white' : 'black'}\n          />\n        )}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,subscriptionInfo\n    } = global;\n    const { animationLevel, aiChatFolders } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n      aiChatFolders,\n      subscriptionInfo\n    };\n  },\n)(LeftSideMenuItems));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from 'react';\nimport React from 'react';\nimport cx from 'classnames';\n\nimport './Spinner.scss';\n\nconst Spinner: FC<{\n  color?: 'blue' | 'white' | 'black' | 'green' | 'gray' | 'yellow';\n  backgroundColor?: 'light' | 'dark';\n  className?: string;\n}> = ({\n  color = 'blue',\n  backgroundColor,\n  className,\n}) => {\n  return (\n    <div className={cx(\n      'Spinner-GPT', className, color, backgroundColor && 'with-background', backgroundColor && `bg-${backgroundColor}`,\n    )}\n    >\n      <div className=\"Spinner__inner\" />\n    </div>\n  );\n};\n\nexport default Spinner;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport { injectComponent } from '../injectComponent';\nimport RoomAI from './room-ai';\n\ninterface StateProps {\n  chatId: string | undefined;\n}\nconst RoomAIWrapper = (props: StateProps) => {\n  const containerRef = injectComponent({\n    component: RoomAI,\n    props,\n  });\n  return (\n    <div className=\"chat-ai-room flex overflow-hidden\" ref={containerRef} />\n  );\n};\n\nexport default memo(withGlobal(\n  (global, { chatId }): StateProps => {\n    return {\n      chatId,\n    };\n  },\n)(RoomAIWrapper));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport SerenaLogoPath from '../chatAssistant/assets/serena.png';\nimport { AISettingIcon, RealTimeAIIcon } from '../chatAssistant/utils/icons';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isChatAI?:boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  isUserPortrait?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?:boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n  realTimeAssistants?: { [key: string]: boolean };\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  ChatAI,\n  UserPortrait,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isChatAI,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  isUserPortrait,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  realTimeAssistants,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n    setSharedSettingOption,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const realTimeAssistantById = useMemo(() => {\n    const chatType = chatId && isUserId(chatId) ? 'user' : 'chat';\n    if (chatId && realTimeAssistants?.[chatId] !== undefined) {\n      return realTimeAssistants[chatId];\n    } else if (chatType === 'user') {\n      return true;\n    } else {\n      return false;\n    }\n  }, [chatId, realTimeAssistants]);\n\n  const handleSwitchRealTimeAssistant = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    if (!chatId) return;\n    e.stopPropagation();\n    setSharedSettingOption({\n      realTimeAssistants: {\n        ...realTimeAssistants,\n        [chatId]: !realTimeAssistantById,\n      },\n    });\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isChatAI ? HeaderContent.ChatAI  : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : isUserPortrait ? (\n    HeaderContent.UserPortrait\n  ) : HeaderContent.ChatAI; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  const AISettingMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"\"\n      >\n        <AISettingIcon />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeLimited: !shouldIncludeLimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.ChatAI:\n        return (\n          <div className=\"header chat-ai-header w-full flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <img className=\"rounded-full\" src={SerenaLogoPath} alt=\"Tely AI\" />\n              <h3 className=\"title\">{oldLang('Tely AI')}</h3>\n            </div>\n            <DropdownMenu\n              trigger={AISettingMenuButton}\n              positionX=\"right\"\n              autoClose={false}\n            >\n              <div className=\"p-2\">\n                <MenuItem\n                  customIcon={(\n                    <div className=\"mr-[10px] mb-[40px]\">\n                      <RealTimeAIIcon />\n                    </div>\n                  )}\n                  onClick={handleSwitchRealTimeAssistant}\n                >\n                  <div>\n                    <div className=\"flex items-center justify-between\">\n                      Real-time Assistant\n                      <label className=\"Switcher no-animation\" title=\"\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"realTimeAssistantById\"\n                          checked={realTimeAssistantById === true}\n                          disabled\n                        />\n                        <span className=\"widget\" />\n                      </label>\n                    </div>\n                    <div className=\"mt-2 text-[12px] text-[#666666] leading-[15px] ml-[-35px]\">\n                      When enabled, the assistant will monitor <br /> chats in real time to assist you.\n                    </div>\n                  </div>\n                </MenuItem>\n              </div>\n            </DropdownMenu>\n          </div>\n        );\n      case HeaderContent.UserPortrait:\n        return <h3 className=\"title\">{oldLang('Portrait')}</h3>;\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    const { realTimeAssistants } = selectSharedSettings(global);\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n      realTimeAssistants,\n    };\n  },\n)(RightHeader);\n","/* eslint-disable no-console */\n\nimport React, { useCallback, useState } from 'react';\nimport { message as showMessage } from 'antd';\n\nimport type { IUrgentTopic } from '../api/user-settings';\n\nimport { urgentCheckTask } from '../ai-task/urgent-check-task';\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport Icon from '../component/Icon';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nimport './urgent-alert-tab.scss';\n\nconst TopicItem = ({ topic, onDelete }: { topic: IUrgentTopic; onDelete: (id: string) => void }) => {\n  const { openDrawer } = useDrawerStore();\n  const handeleDeleteTopic = () => {\n    onDelete(topic.id!);\n  };\n  const handleEditTopic = () => {\n    openDrawer(DrawerKey.AddTopicPanel, topic);\n  };\n  return (\n    <div className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]\">\n      <div>{topic.topic}</div>\n      <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n        <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n        <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n      </div>\n    </div>\n  );\n};\nconst AddTopic = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAddTopic = () => {\n    console.log('add topic');\n    openDrawer(DrawerKey.AddTopicPanel);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAddTopic}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst UrgentAlertTab = () => {\n  const { urgent_info, ignored_urgent_chat_ids } = telegptSettings.telegptSettings;\n  const selectUrgentChatIds = getIdsFromEntityTypes(ignored_urgent_chat_ids);\n  const [topics, setTopics] = useState<IUrgentTopic[]>(urgent_info);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(selectUrgentChatIds);\n\n  const handeleDeleteTopic = (id: string) => {\n    telegptSettings.deleteUrgentTopic(id).then((res: any) => {\n      if (res.code === 0) {\n        setTopics(topics.filter((t) => t.id !== id));\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  };\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...ignoredIds, id];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_urgent_chat_ids: entityTypes,\n      });\n      urgentCheckTask.updateUrgentChats(newSelected);\n    }, [ignoredIds],\n  );\n  return (\n    <div className=\"h-full overflow-auto px-[18px]\">\n      <div>\n        <h3 className=\"text-[18px] font-semibold mb-[24px]\">What types of messages require Alert?</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {topics.map((topic) => {\n            return <TopicItem topic={topic} onDelete={handeleDeleteTopic} />;\n          })}\n          {topics.length < 10 && <AddTopic />}\n        </div>\n      </div>\n      <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Urgent\" />\n    </div>\n  );\n};\n\nexport default UrgentAlertTab;\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import React from '@teact';\nimport { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","/* eslint-disable react/jsx-no-bind */\n/* eslint-disable no-null/no-null */\n/* eslint-disable max-len */\nimport React, {\n  useCallback, useMemo, useState,\n} from 'react';\nimport { message as showMessage } from 'antd';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { getGlobal } from '../../../global';\n\nimport type { ISummaryTemplate } from '../api/user-settings';\n\nimport { buildEntityTypeFromIds, getIdsFromEntityTypes, telegptSettings } from '../api/user-settings';\nimport { RoomsTab } from './rooms-tab';\n\nimport FloatingActionButton from '../component/FloatingActionButton';\nimport Icon from '../component/Icon';\nimport Spinner from '../component/Spinner';\nimport { DrawerKey, useDrawerStore } from '../global-summary/DrawerContext';\n\nconst SummaryItem = ({\n  template, selectedTemp, handleSelect, onDelete,\n}: {\n  template: ISummaryTemplate;\n  selectedTemp:string[];\n  onDelete: (id: string) => void;\n  handleSelect:(id: string) => void;\n}) => {\n  const { openDrawer } = useDrawerStore();\n  const global = getGlobal();\n  const { currentUserId } = global;\n  const handeleDeleteTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    onDelete(template.id!);\n  };\n  const handleEditTopic = (e:React.MouseEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    openDrawer(DrawerKey.CustomizationPrompt, template);\n  };\n  return (\n    <div\n      className={cx('urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center justify-between gap-[24px]', {\n        '!bg-[var(--color-chat-active)] text-white': selectedTemp.includes(template.id!),\n      })}\n      onClick={() => handleSelect(template.id!)}\n    >\n      <div>{template.topic}</div>\n      {selectedTemp.includes(template.id!) && (\n        <Icon className=\"urgent-topic-item-check\" name=\"check\" />\n      )}\n      {template.user_id === currentUserId && (\n        <div className=\"urgent-topic-item-actions flex flex-row gap-[8px]\">\n          <Icon name=\"edit\" className=\"text-[14px] cursor-pointer\" onClick={handleEditTopic} />\n          <Icon name=\"close\" className=\"text-[14px] cursor-pointer\" onClick={handeleDeleteTopic} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst AddSummaryTemplate = () => {\n  const { openDrawer } = useDrawerStore();\n  const handleAdd = () => {\n    openDrawer(DrawerKey.CustomizationPrompt);\n  };\n  return (\n    <div\n      className=\"urgent-topic-item px-[20px] py-[12px] leading-[24px] bg-[var(--color-chat-hover)] rounded-[8px] flex flex-row items-center gap-[8px] text-[var(--color-chat-active)] cursor-pointer\"\n      onClick={handleAdd}\n    >\n      <Icon name=\"add\" />\n      <span>New Topic</span>\n    </div>\n  );\n};\n\nconst SummarizeTab = () => {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  const { curious_info, ignored_summary_chat_ids, curious_id } = telegptSettings.telegptSettings;\n  const ignoredChatIds = getIdsFromEntityTypes(ignored_summary_chat_ids);\n  const [summaryTemplate, setSummaryTemplate] = useState<ISummaryTemplate[]>(curious_info);\n  const [originSelectedTemp, setOriginSelectedTemp] = useState<string[]>(curious_id);\n  const [selectedTemp, setSelectedTemp] = useState<string[]>(curious_id);\n  const [ignoredIds, setIgnoredIds] = useState<string[]>(ignoredChatIds);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const actionsVisable = useMemo(() => {\n    return !isEqual(selectedTemp, originSelectedTemp);\n  }, [originSelectedTemp, selectedTemp]);\n\n  const handleTemplateSelect = useCallback((selectedId: string) => {\n    let newSelected: string[] = [];\n    if (selectedTemp.includes(selectedId)) {\n      newSelected = selectedTemp.filter((id) => id !== selectedId);\n    } else {\n      if (selectedTemp.length >= 3) {\n        showMessage.info('You can only select up to three topics.');\n        return;\n      }\n      newSelected = [...selectedTemp, selectedId];\n    }\n    setSelectedTemp(newSelected);\n  }, [selectedTemp]);\n\n  const handleSave = useCallback(() => {\n    setIsLoading(true);\n    telegptSettings.setSettingOption({\n      curious_id: selectedTemp,\n    }, () => {\n      setIsLoading(false);\n      setOriginSelectedTemp(selectedTemp);\n    });\n  }, [selectedTemp]);\n\n  const handleDelete = useCallback((id: string) => {\n    if (selectedTemp.includes(id)) {\n      const newSelectedTemp = selectedTemp.filter((item) => item !== id);\n      setSelectedTemp(newSelectedTemp);\n      setOriginSelectedTemp(newSelectedTemp);\n      telegptSettings.setSettingOption({\n        curious_id: newSelectedTemp,\n      });\n    }\n    // TODO: delete summary template\n    telegptSettings.deleteSummarizeTemplate(id).then((res:any) => {\n      if (res.code === 0) {\n        const newSummaryTemplate = summaryTemplate.filter((item) => item.id !== id);\n        setSummaryTemplate(newSummaryTemplate);\n      } else {\n        showMessage.info('delete failed');\n      }\n    }).catch(() => {\n      showMessage.info('delete failed');\n    });\n  }, [selectedTemp, summaryTemplate]);\n\n  const handleIgnored = useCallback(\n    (id: string) => {\n      const newSelected = [...new Set([...ignoredIds, id])];\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n  const handleUnIgnored = useCallback(\n    (id: string) => {\n      const newSelected = ignoredIds.filter((item) => item !== id);\n      setIgnoredIds(newSelected);\n      const entityTypes = buildEntityTypeFromIds(newSelected);\n      telegptSettings.setSettingOption({\n        ignored_summary_chat_ids: entityTypes,\n      });\n    }, [ignoredIds],\n  );\n\n  return (\n    <div className=\"h-full overflow-hidden relative\">\n      <div className=\"h-full flex flex-col px-[18px] overflow-auto\">\n        <h3 className=\"text-[18px] font-semibold text-[var(--color-text) mb-[24px]\">Topic Preferences</h3>\n        <div className=\"flex flex-col gap-[10px]\">\n          {summaryTemplate.map((item) => {\n            return (\n              <SummaryItem template={item} onDelete={handleDelete} selectedTemp={selectedTemp} handleSelect={handleTemplateSelect} />\n            );\n          })}\n          {summaryTemplate.length < 10 && (\n            <AddSummaryTemplate />\n          )}\n        </div>\n        <RoomsTab ignoredIds={ignoredIds} onIgnored={handleIgnored} onUnIgnored={handleUnIgnored} title=\"Chats for Summary\" />\n      </div>\n      <FloatingActionButton\n        isShown={actionsVisable}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" className=\"text-white text-[1.5rem]\" />\n        )}\n\n      </FloatingActionButton>\n    </div>\n  );\n};\nexport default SummarizeTab;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from 'react';\nimport React, {\n  memo, useCallback, useLayoutEffect, useRef,\n} from 'react';\n\nimport { requestForcedReflow, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  let textareaRef = useRef<HTMLTextAreaElement>(undefined);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  const resizeHeight = useCallback((element: HTMLTextAreaElement) => {\n    requestMutation(() => {\n      element.style.height = '0';\n      requestForcedReflow(() => {\n        const newHeight = element.scrollHeight;\n        return () => {\n          element.style.height = `${newHeight}px`;\n        };\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    resizeHeight(textarea);\n  }, [resizeHeight]);\n\n  const handleChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const target = e.currentTarget;\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = target.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      target.value = target.value.replace(/\\n/g, ' ');\n      target.selectionEnd = previousSelectionEnd;\n    }\n    resizeHeight(target);\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange, resizeHeight]);\n\n  return (\n    <div className={fullClassName}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import React from '@teact';\nimport type {\n  ElementRef\n} from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport AIKnowledge from './aiKnowledge/AIKnowledge.async';\nimport AITranslate from './aiTranslate/AITranslate.async';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { debounce } from '../../util/schedulers';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n  Settings,\n  Archived,\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AIKnowledge,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  AITranslate,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  const debouncedSetGlobalSearchQuery = useMemo(() => debounce((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, 200, false, true), [setGlobalSearchQuery]);\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n    case LeftColumnContent.AIKonwledge:\n      contentType = ContentType.AIKnowledge;\n      break;\n    case LeftColumnContent.AITranslate:\n      contentType = ContentType.AITranslate;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      debouncedSetGlobalSearchQuery(query);\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.AIKnowledge:\n        return (\n          <AIKnowledge onReset={handleReset} />\n        );\n      case ContentType.AITranslate:\n        return (\n          <AITranslate onReset={handleReset} />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            // isAppUpdateAvailable={isAppUpdateAvailable}\n            // isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import React, { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { getMyInvitation } from '../../utils/telegpt-api';\nimport GuidanceWrapper from './guidance-wrapper';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Modal from '../../../ui/Modal';\n\nimport './guidance.scss';\n\nconst GuidanceModal = () => {\n  const telegptGuidance = localStorage.getItem('telegpt-guidance') === 'true';\n  const [isFirstIn, setIsFirstIn] = useState<boolean>(!telegptGuidance);\n\n  const checkInvitationStatus = useLastCallback(async () => {\n    const { openInviteCodeModal } = getActions();\n\n    try {\n      // 先从localStorage获取受邀信息\n      const cachedInvitation = localStorage.getItem('user-invitation');\n      if (cachedInvitation) {\n        const invitation = JSON.parse(cachedInvitation);\n        if (invitation && invitation.inviteCode) {\n          return; // 已有受邀信息，无需打开弹窗\n        }\n      }\n\n      // 调用API获取受邀状态\n      const invitationData = await getMyInvitation();\n      const invitationInfo = invitationData.data;\n\n      // 存储到localStorage\n      localStorage.setItem('user-invitation', JSON.stringify(invitationInfo));\n\n      // 如果受邀信息为空，打开邀请码提交弹窗\n      if (!invitationInfo) {\n        openInviteCodeModal();\n      }\n    } catch (error) {\n      // eslint-disable-next-line no-console\n      console.error('Failed to check invitation status:', error);\n      // 如果API调用失败，也打开邀请码弹窗\n      openInviteCodeModal();\n    }\n  });\n\n  useEffect(() => {\n    if (!isFirstIn) {\n    // 检测用户受邀状态\n      checkInvitationStatus();\n    }\n  }, [isFirstIn]);\n\n  const handleClose = useLastCallback(async () => {\n    localStorage.setItem('telegpt-guidance', 'true');\n    setIsFirstIn(false);\n\n    // 检测用户受邀状态\n    await checkInvitationStatus();\n  });\n\n  if (!isFirstIn) {\n    return undefined;\n  }\n  return (\n    <Modal\n      isOpen\n      noBackdropClose\n      onClose={handleClose}\n      className=\"guidance-modal\"\n    >\n      <GuidanceWrapper handleClose={handleClose} />\n    </Modal>\n  );\n};\n\nexport default GuidanceModal;\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import React from '@teact';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from 'react';\nimport React, { memo } from 'react';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport './InputText.scss';\n\ntype OwnProps = {\n  ref?: React.RefObject<HTMLInputElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  tabIndex?: number;\n  teactExperimentControlled?: boolean;\n  type?: 'text' | 'number';\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  onInput?: (e: React.FormEvent<HTMLInputElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLInputElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLInputElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLInputElement>) => void;\n};\n\nconst InputText: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  type = 'text',\n  inputMode,\n  maxLength,\n  tabIndex,\n  teactExperimentControlled,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n}) => {\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <input\n        ref={ref}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        type={type}\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={onChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n        teactExperimentControlled={teactExperimentControlled}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(InputText);\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      giftsByPeerId: {\n        [peerId]: tabState.savedGifts.giftsByPeerId[peerId],\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["addTabStateResetterAction","name","key","addActionHandler","global","actions","payload","tabId","getCurrentTabId","updateTabState","undefined","SHOULD_PRE_OPEN","IS_IOS","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","window","open","blur","url","location","href","focus","popup","cancelPreOpen","close","FALLBACK_PANE_STATE","height","MiddleHeaderPanes","className","chatId","threadId","messageListType","chat","userFullInfo","getCurrentPinnedIndex","getLoadingPinnedId","isAudioPlayerRendered","isMiddleSearchOpen","withRightColumnAnimation","onFocusPinnedMessage","settings","isDesktop","useAppLayout","getAudioPlayerState","setAudioPlayerState","useSignal","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isPinnedMessagesFullWidth","isFirstRenderRef","useRef","shouldRender","ref","useShowTransition","isOpen","withShouldRender","noMountTransition","useEffectOnce","current","useSignalEffect","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","reduce","acc","state","middleColumn","document","getElementById","applyAnimationState","setExtraStyles","React","buildClassName","styles","root","root_withRightColumnAnimation","AudioPlayer","isFullWidth","onPaneStateChange","isHidden","MAIN_THREAD_ID","isForum","GroupCallTopPane","ChatReportPane","canAddContact","canBlockContact","canReportSpam","isAutoArchived","BotVerificationPane","peerId","PaidMessageChargePane","HeaderPinnedMessage","shouldHide","BotAdPane","memo","withGlobal","audioPlayer","selectTabState","selectChat","selectUserFullInfo","audioChatId","messageId","audioMessageId","audioMessage","selectChatMessage","Boolean","selectCurrentMiddleSearch","selectCanAnimateRightColumn","PureMultimodalInput","status","stop","setMessages","handleInputSubmit","textareaRef","width","useWindowSize","useEffect","adjustHeight","style","Math","min","max","scrollHeight","localStorageInput","setLocalStorageInput","useLocalStorage","inputValue","setInputValue","useState","domValue","value","submitForm","useCallback","AITextarea","placeholder","onChange","event","target","cx","rows","autoFocus","onKeyDown","shiftKey","preventDefault","toast","error","StopButton","SendButton","input","RoomAIInput","prevProps","nextProps","PureStopButton","Button","onClick","messages","sanitizeUIMessages","StopIcon","size","PureSendButton","disabled","length","props","PrivacySettingsNoticeModal","useModuleLoader","Bundles","Extra","StoryStatistics","Loading","ForwardRecipientPicker","originData","originStarsPayment","originReaction","originGift","topup","closeStarsBalanceModal","starsPayment","sendPaidReaction","forcedAmount","amount","sendStarGift","selectIsCurrentUserFrozen","openFrozenAccountModal","isGiftRecipientPickerOpen","starsGiftingPickerModal","message","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","currency","STARS_CURRENCY_CODE","starBalance","stars","balance","balanceNeeded","clearStarPayment","loadStarStatus","starsBalanceModal","showNotification","langProvider","actionText","action","icon","selectStarsPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","starsGiftModal","content","type","starGift","uniqueGift","giftReceiverId","isOutgoing","currentUserId","inputGift","savedId","fromId","gift","date","starsToConvert","isNameHidden","isUnsaved","isSaved","id","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","transferStars","openGiftInfoModal","recipientId","giftInfoModal","giftResalePriceComposerModal","giftWithdrawModal","emojiStatus","giftStatusInfoModal","tabState","errorKey","giftTransferModal","PaymentModal","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","calculateMiddleFooterTransforms","windowWidth","canPost","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","leftColumnWidth","rightColumnWidth","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","async","result","callApi","getGlobal","replaceSettings","hasPassword","updateTwoFaSettings","hint","setGlobal","currentPassword","onSuccess","isLoading","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","GAMEE_URL","TOP_PEERS_REQUEST_COOLDOWN","runDebouncedForSearch","debounce","cb","botFatherId","gameePopups","isWepAppOpened","webApp","openedWebApps","webApps","getWebAppKey","checkIfOpenOrActivate","botId","requestUrl","webAppName","webAppForCheck","activateWebAppIfOpen","loadAttachBots","hash","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","searchInlineBot","username","inlineBotData","query","offset","selectUser","shouldReplaceSettings","replaceInlineBotsIsLoading","replaceInlineBotSettings","results","newInlineBotData","inlineBots","byUsername","currentIds","Set","map","data","newResults","filter","has","help","cacheTime","Date","now","isGallery","switchPm","switchWebview","canLoadMore","nextOffset","concat","sendBotCommand","command","replyInfo","sendAs","lastMessageId","text","answerCallbackButton","isGame","showDialog","openUrl","openGame","accessHash","alert","isError","includes","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","oldTranslate","openPollModal","isQuiz","user","phoneNumber","firstName","lastName","userId","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectCurrentChat","currentMessageList","selectCurrentMessageList","resetDraftReplyInfo","clearWebPagePreview","selectChatLastMessageId","selectDraft","selectSendAs","selectBot","removeBlockedUser","lastRequestedAt","topInlineBots","getServerTime","ids","userIds","topBotApps","inlineBot","botSender","openChatWithDraft","getMainUsername","queryId","isSilent","scheduledAt","allowPaidStars","resultId","scheduleDate","draftReplyInfo","selectMessageReplyInfo","starsForOneMessage","getPeerStarsForMessage","params","sendInlineBotApiResult","localId","title","variables","count","options","pluralValue","formatStarsAsText","getTranslationFn","shouldUseCustomIcon","force","Object","keys","forEach","resetInlineBot","param","fullInfo","isBlocked","startParam","currentUser","contact","mediaType","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","newActiveApp","appName","addWebAppToOpenList","isFromBotMenu","isFullscreen","peer","selectPeer","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","mode","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","users","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","openThread","botUser","actionPayload","description","about","langCode","selectSharedSettings","language","updateManagementProgress","ManagementProgress","InProgress","updateUser","updateUserFullInfo","bio","Complete","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","openChat","botUrl","appConfig","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","getStripeError","openChatAIWithInfo","getActions","unreadCount","setUnreadCount","dotLottie","setDotLottie","isSummary","setIsSummary","containerRef","e","wrapper","currentTarget","closest","getAttribute","stopPropagation","RoomStorage","updateRoomAIData","updateUnreadCount","updateSummaryState","intervalAnimate","play","interval","setInterval","clearInterval","eventEmitter","on","Actions","UpdateRoomAIUnreadCount","UpdateRoomAISummaryState","getRoomAIUnreadCount","summaryState","getRoomAISummaryState","summary","off","dotLottieRefCallback","handleMouseEnter","DotLottieReact","src","serenaWorkUrl","loop","autoplay","serenaWaitUrl","onMouseEnter","actionItemClassName","RoomActions","insertMessage","setIsLoading","scrollToBottom","useScrollToBottom","handleScheduleMeeting","scheduleGoogleMeeting","handleSummarize","summaryRoomMessage","handleActionItems","generateRoomActionItems","handleActions","handleNewFeature","newFeatureMessage","createNewFeatureReminderMessage","RoomAIActions","popoverContent","handleMediaSummarize","openRoomAttachmentsModal","Popover","trigger","placement","overlayClassName","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","Promise","all","isTon","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","TON_CURRENCY_CODE","ton","updateStarsBalance","isInbound","isOutbound","byId","buildCollectionByKey","gifts","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","values","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","push","starGifts","idsByCategory","resaleGifts","giftId","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","limit","RESALE_GIFTS_LIMIT","chats","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","updateUsers","updateChats","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","currentFilter","replacePeerSavedGifts","byTabId","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","shouldUnsave","requestInputGift","getRequestInputSavedStarGift","oldGifts","savedGifts","giftsByPeerId","g","areInputSavedGiftsEqual","inputSavedGift","openStarsBalanceModal","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","isPinned","newPinnedGifts","slug","inputSavedGifts","slice","price","requestSavedGift","reloadPeerSavedGifts","FOCUS_DURATION","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","POLL_RESULT_OPEN_DELAY_MS","VERSION_NOTIFICATION_DURATION","SERVICE_NOTIFICATIONS_MAX_AMOUNT","blurTimeout","copyTextForMessages","messageIds","lang","chatMessages","selectChatScheduledMessages","selectChatMessages","selectAllowedMessageActionsSlow","canCopy","sort","message1","message2","resultHtml","resultText","isChatChannel","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","join","scrollOffset","replaceThreadParam","replaceTabThreadParam","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","canEdit","targetIndexDelta","selectIsViewportNewest","replyToMsgId","chatMessageKeys","newIndex","indexOf","toString","Number","threadInfo","selectThreadInfo","updateDraftReplyInfo","replyToPeerId","quoteText","focusMessage","origin","volume","playbackRate","isMuted","timestamp","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","isSavedDialog","getIsSavedDialog","pinnedMessageIds","selectPinnedIds","String","noHighlight","noForumTopicPanel","replyStack","selectReplyStack","pop","focusLastMessage","groupedId","groupedChatId","replyMessageId","isResizingContainer","shouldReplaceHistory","quote","quoteOffset","scrollTargetPosition","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","forceOnHeavyAnimation","direction","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","loadViewportMessages","shouldForceRender","onLoaded","shouldPreventComposerAnimation","fromChatId","replyingMessage","isShareMessageModalShown","storyId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","forwardMessages","toChatId","noAuthors","noCaptions","selectedMessages","forwardableMessageIds","selectCanForwardMessage","openForwardMenu","media","getMediaHash","cancelMessageMediaDownload","mediaHashes","originMessage","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","exitMessageSelectMode","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","split","serviceNotifications","find","version","SERVICE_NOTIFICATIONS_USER_ID","parseHtmlAsFormattedText","versionNotification","createServiceNotification","maxId","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","reportAdModal","reportModal","sections","closeReportAdModal","closeReportModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","isRoomAttachmentsModalOpen","randomId","additionalInfo","canReport","sponsorInfo","aboutAdsModal","preparedMessageModal","sharePreparedMessageModal","args","pendingSendArgs","starsForSendMessage","metaViewport","querySelector","defaultViewportContent","allowedZoomViewportContent","usePreventPinchZoomGesture","isDisabled","setAttribute","IS_PWA","addEventListener","preventEvent","removeEventListener","HistoryCalendar","shouldReplaceLast","premiumModal","promo","hideEffectInComposer","closeStoryViewer","closeStarsTransactionModal","closeGiftInfoModal","activeReactions","closeMiddleSearch","isStatisticsShown","monetizationStatistics","boostStatistics","contentToBeScheduled","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","isChatAIShown","nextProfileTab","lastIsChatInfoShown","isUserPortraitShown","currentChatId","userPortraitUserId","files","requestedDraft","chatCreation","newChatMembersProgress","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","toLanguageCode","updateRequestedChatTranslation","chatInviteModal","creditsModal","inviteFriendsModal","inviteCodeModal","GROUP_INTERVAL_SECONDS","isAlbum","messageOrAlbum","groupMessages","firstUnreadId","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","index","currentDateGroup","currentSenderGroup","isInAlbum","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","paidMedia","extendedMedia","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","senderId","paidMessageStars","suggestedPostInfo","postAuthorTitle","isActionMessage","inlineButtons","ADDED_SETS_THROTTLE","ADDED_SETS_THROTTLE_CHUNK","searchThrottled","throttle","loadRecentStickers","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","set","packs","currentEmoji","updateStickerSet","forEmoji","emoji","rebuildStickersForEmoji","searchGifs","botUsername","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","customEmojis","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","i","pause","favorite","favoriteStickers","premium","greeting","sticker","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","documentId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","selectIsCurrentUserPremium","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","resultIds","searchWords","unshift","updateStickerSearch","config","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","APP_OUTDATED_TIMEOUT_MS","CALL_BUNDLE_LOADING_DELAY_MS","DEBUG_isLogged","Main","isMobile","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","isStoryViewerOpen","isForwardModalOpen","hasNotifications","hasDialogs","activeGroupCallId","safeLinkModalUrl","isHistoryCalendarOpen","shouldSkipHistoryAnimations","limitReached","openedCustomEmojiSetIds","isServiceChatReady","withInterfaceAnimations","wasTimeFormatSetManually","addedCustomEmojiIds","isPhoneCallActive","newContactUserId","newContactByPhoneNumber","openedGame","gameTitle","isRatePhoneCallModalOpen","botTrustRequestBot","requestedAttachBotInChat","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","isPaymentModalOpen","isReceiptModalOpen","isReactionPickerOpen","isCurrentUserPremium","deleteFolderDialog","isMasterTab","noRightColumnAnimation","isSynced","isAccountFrozen","isAppConfigLoaded","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","updateIsOnline","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadStickerSets","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadFavoriteStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadConfig","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","toggleLeftColumn","loadRecentEmojiStatuses","loadUserCollectibleStatuses","loadTopReactions","loadRecentReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadAuthorizations","loadPeerColors","loadSavedReactionTags","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadPasswordInfo","loadBotFreezeAppeal","loadAllChats","loadAllStories","loadAllHiddenStories","closeRoomAttachmentsModal","loadContentSettings","DEBUG","console","log","useLang","useTimeout","loadBundle","Calls","leftColumnRef","useInterval","removeUpdateAvailableListener","ElectronEvent","UPDATE_AVAILABLE","isAvailable","removeUpdateErrorListener","UPDATE_ERROR","isOnline","listType","BASE_EMOJI_KEYWORD_LANG","ignoreCache","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","link","parsedLocationHash","parseLocationHash","useLayoutEffect","container","parentNode","childElementCount","addExtraClass","noCloseTransition","prefix","willAnimateLeftColumnRef","forceUpdate","useForceUpdate","useSyncEffect","prevIsLeftColumnOpen","requestNextMutation","body","classList","toggle","endHeavyAnimation","beginHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","useFullscreenStatus","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","useLastCallback","isBlurred","handleFocus","INACTIVE_MARKER","updateIcon","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","handleRoomAttachmentsModalClose","useBackgroundMode","useBeforeUnload","LeftColumn","MiddleColumn","RightColumn","MediaViewer","StoryViewer","DraftRecipientPicker","Notifications","Dialogs","noUi","ModalContainer","SafeLinkModal","StickerSetModal","onClose","stickerSetShortName","CustomEmojiSetsModal","GroupCall","groupCallId","ActiveCallHeader","isActive","NewContactModal","isByPhoneNumber","GameModal","DownloadManager","ConfettiContainer","IS_WAVE_TRANSFORM_SUPPORTED","WaveContainer","SnapEffectContainer","PhoneCall","UnreadCount","isForAppBadge","RatePhoneCallModal","BotTrustModal","AttachBotRecipientPicker","MessageListHistoryHandler","PremiumMainModal","GiveawayModal","StarsGiftingPickerModal","PremiumLimitReachedModal","ReceiptModal","DeleteFolderDialog","folder","ReactionPicker","DeleteMessageModal","RoomAttachmentsModal","GuidanceModal","isLeftColumnShown","historyCalendarSelectedAt","notifications","dialogs","newContact","ratingPhoneCall","giveawayModal","payment","limitReachedModal","gameMessage","game","selectPerformanceSettingsValue","selectCanAnimateInterface","selectChatFolder","selectIsMediaViewerOpen","selectIsStoryViewerOpen","selectIsForwardModalOpen","selectIsReactionPickerOpen","selectIsServiceChatReady","groupCalls","phoneCall","receipt","useContainerHeight","isComposerVisible","getContainerHeight","setContainerHeight","handleResize","entry","contentRect","useResizeObserver","currentNormalHeight","dataset","normalHeight","containerHeight","prevContainerHeight","drawRect","x","y","radius","PinnedMessageNavigation","markupParams","useMemo","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","muted","then","currentTime","joinAudio","Audio","connectingAudio","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","groupCall","call","existingGroupCall","selectGroupCall","updateGroupCall","omit","isLoaded","participantsCount","requestGroupCallParticipants","isCallPanelVisible","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","inviteLink","selectChatFullInfo","canSelfUnmute","inviteHash","full","loadFullChat","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","toggleGroupCallPanel","createAudioElement","checkNavigatorUserMediaPermissions","selectChatGroupCall","leaveGroupCall","rejoin","safePlay","isVideo","participantId","adminId","silence","ctx","oscillator","createOscillator","dst","createMediaStreamDestination","start","MediaStream","assign","stream","getAudioTracks","enabled","AudioContext","webkitAudioContext","srcObject","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","checkMicrophonePermission","catch","audio","RightPanel","drawerKey","drawerParams","closeDrawer","useDrawerStore","rightPanelContent","setRightPanelContent","DrawerKey","PersonalizeSettings","OriginalMessages","MessagePanel","relevantMessages","CustomizationPrompt","CustomizationPromptPanel","ChatPicker","ChatPickerPanel","AddTopicPanel","RightHeader","asUnread","querySelectorAll","replace","subtractXForEmojiInteraction","windowSize","get","addMessageReaction","userReactions","isInSavedMessages","selectIsChatWithSelf","currentReactions","reactions","areTags","currentSendAs","updateReactionCount","recentReactions","isOwn","reaction","addedDate","updateChatMessage","updateUnreadReactions","update","updateChat","monetizationVerificationModal","updateVerifyMonetizationModal","PremiumRequiredPlaceholder","userName","useOldLang","openPremiumModal","handleOpenPremiumModal","Link","isPrimary","getUserFirstOrLastName","UnpinAllMessagesModal","FILTER_ID","waveInfo","wave","waves","setWaves","addWave","newWave","prevWaves","startX","startY","overlaySize","top","left","startTime","lastWaveTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","scale","xChannelSelector","yChannelSelector","removeSvgDefinition","teactFastList","buildStyle","onAnimationEnd","w","GlobalSummaryWrapper","injectComponent","component","GlobalSummary","isBot","sponsoredMessage","viewSponsored","clickSponsored","openAboutAdsModal","renderingSponsoredMessage","useCurrentOrPrev","useHeaderPane","withResizeObserver","onStateChange","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","shouldSkipModal","handleAboutClick","peerColor","photo","onMouseDown","onContextMenu","getApiPeerColorClass","info","BadgeButton","aboutAd","renderTextWithEntities","entities","Avatar","avatar","SponsoredMessageContextMenuContainer","anchor","triggerRef","onCloseAnimationEnd","selectSponsoredMessage","useResize","elementRef","onResize","onReset","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","useFlag","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","requestMutation","widthPx","setProperty","handleMouseUp","remove","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","initResize","add","resetResize","LeftSearch","ContactList","NOTIFICATION_DURATION","AccountMenuItems","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","duration","newAccountUrl","freeIndex","getAccountSlotUrl","entries","slot","arr","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","color","emojiStatusId","hasSeparator","MenuItem","customIcon","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","UpgradeButton","MenuSeparator","rel","updateUserSearch","globalUserIds","localUserIds","fetchingStatus","closeNewContactDialog","suggestedStatusModal","CreateTopic","viewportPinnedIds","lastFocusedId","usePinnedMessage","pinnedIds","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","useDerivedSignal","currentPinnedIndex","pinnedLength","clampIndex","handleIntersectPinnedMessage","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","shouldCancelWaiting","loadingPinnedId","newPinnedIndex","unique","focusedMessageId","selectFocusedMessageId","pinnedIndexAboveFocused","findIndex","maxViewportPinnedId","handleFocusPinnedMessage","listedIds","selectListedIds","isMessageLoaded","selectOutlyingListByMessageId","currentIndex","cycleRestrict","subscriptionType","creditBalance","createdAt","subscriptionExpiresAt","subscriptionInfo","isImage","item","kind","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","LAYER_ANIMATION_DURATION_MS","isComments","isPrivate","isPinnedMessageList","currentUserBannedRights","defaultBannedRights","pinnedMessagesCount","customBackground","backgroundColor","patternColor","isRightColumnShown","isBackgroundBlurred","hasActiveMiddleSearch","isSelectModeActive","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","animationLevel","currentTransitionKey","isChannel","arePeerSettingsLoaded","canSubscribe","canStartBot","canRestartBot","activeEmojiInteractions","shouldJoinToSend","shouldSendJoinRequest","shouldLoadFullChat","canUnpin","canUnblock","canShowOpenChatButton","isContactRequirePremium","topics","paidMessagesStars","freezeAppealChat","isSerena","shouldBlockSendInMonoforum","openPreviousChat","unpinAllMessages","loadUser","loadPeerSettings","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isTablet","oldLang","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","prevTransitionKey","usePreviousDeprecated","cleanupExceptionKey","isReady","handleCssTransitionEnd","handleSlideTransitionStop","useIsReady","captureEscKeyListener","visualViewport","isFixNeeded","documentElement","clientHeight","requestMeasure","offsetTop","scrollTo","handleAnalyticsMessage","messageText","ASK_MEETING_TIMEZONE","ASK_MEETING_TIME","ASK_MEETING_EMAIL","MEETING_INVITATION_TIP","ScheduleMeeting","meetingMentionMessage","createMeetingMentionMessage","ChataiStores","storeMessage","parseMessage2StoreMessage","emit","AddRoomAIMessage","IntentionToScheduleMeeting","n","handleDragEnter","items","dataTransfer","shouldDrawQuick","IS_SAFARI","Array","from","every","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","background","withTransition","customBgImage","customBgColor","blurred","withRightColumn","draggable","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","FrozenAccountPlaceholder","footerClassName","useHistoryBack","onBack","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","withExtraShift","onTransitionEnd","onMouseUp","onDoubleClick","onDragEnter","MiddleHeader","Transition","resolveTransitionName","activeKey","shouldCleanup","isBlockingAnimation","onStop","MessageList","onScrollDownToggle","onNotchToggle","withBottomShift","withDefaultBg","onIntersectPinnedMessage","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","EDITABLE_INPUT_CSS_SELECTOR","inputId","dir","isRtl","fluid","Icon","ripple","MessageSelectToolbar","SeenByModal","ReactorListModal","IS_TRANSLATION_SUPPORTED","ChatLanguageModal","RoomAIEntryWrapper","FloatingActionButtons","withScrollDown","MiddleSearch","onUnpin","activeEmojiInteraction","EmojiInteractionAnimation","teactOrderKey","selectTheme","selectThemeValues","messageLists","selectIsInSelectMode","isUserId","chatFullInfo","editingId","selectEditingId","isMessageThread","isCommentsInfo","fromChannelId","topic","selectTopic","getCanPostInChat","isBotNotStarted","selectIsChatBotNotStarted","isMainThread","isChatSuperGroup","isNotJoined","joinRequests","isMonoforum","isJoinToSend","isJoinRequest","isUserBlocked","selectIsUserBlocked","isChatGroup","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","selectIsMonoforumAdmin","selectTopics","ANONYMOUS_USER_ID","isCreator","isUserRightBanned","getHasAdminRight","userFull","selectPeerPaidMessagesStars","GLOBAL_SUMMARY_CHATID","withAnimations","setIsReady","willSwitchMessageList","propertyName","ScrollDownButton","ariaLabelLang","onReadAll","round","ariaLabel","formatIntegerCompact","Menu","autoClose","positionX","positionY","ConnectionStatusOverlay","connectionStatus","connectionStatusText","Spinner","PLAY_GAME_ACTION_INTERVAL","closeGame","sendMessageAction","useSendMessageAction","handleMessage","JSON","parse","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","openDrawer","titleError","setTitleError","promptError","setPromptError","initialValues","prompt","form","setForm","handleSave","trim","telegptSettings","updateSummarizeTemplate","res","showMessage","handleTopicNameChange","prev","handleTopicDescriptionChange","InputText","label","TextArea","noReplaceNewlines","FloatingActionButton","isShown","updateStatusesOnFullyIdle","throttleWithFullyIdle","replaceUserStatuses","statusesById","pendingStatusUpdates","deleteContact","translations","byChatId","localUser","areStoriesHidden","updatePeerStoriesHidden","loadFullUser","targetUserFullInfo","botInfo","menuButton","commands","copyMessagesByIds","handleCopy","getMessageIdsForSelectedText","useHotkeys","MessageStatistics","APP_VERSION_URL","FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION","MAX_STORED_EMOJIS","notificationInterval","management","screen","nextScreen","getIsTablet","statistics","currentMessageId","currentStoryId","currentMessage","currentStory","recentEmojis","newEmojis","newStickers","s","order","isCustomEmoji","notification","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","splice","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","existingErrorIndex","err","selectedAt","rest","confetti","lastConfettiTime","currentLastTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","byKey","shouldPaidMessageAutoApprove","emoticon","effect","availableEffectById","currentEffect","effectAnimationId","effectId","requestEffectInComposer","saveEffectInDraft","initialSection","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","fetch","response","getIsAppUpdateNeeded","isAppUpdateAvailable","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","NOTIFICATION_INTERVAL","prevIsScreenLocked","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","setPageTitleInstant","PAGE_TITLE","newUnread","messageList","passcode","isScreenLocked","currentChat","getChatTitle","setPageTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","ONLINE_TIMEOUT","addCallback","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","payPackageModal","inlineBotSettings","updateWebApp","webAppUpdate","currentTabState","originalWebApp","updatedValue","updatedWebAppKey","webAppKey","isMoreAppsTabActive","activeWebAppKey","modalState","makeActive","openModalIfNotOpen","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isModalOpen","removeActiveWebAppFromOpenList","removeWebAppFromOpenList","skipClosingConfirmation","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","clearOpenedWebApps","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","hasOpenedWebApps","hasOpenedMoreThanOneWebApps","replaceWebAppModalState","replaceIsWebAppModalOpen","AUTOLOGIN_TOKEN_KEY","uploadProgressCallbacks","Map","runDebouncedForMarkRead","loadWithBudget","areAllLocal","isOutlying","isBudgetPreload","offsetId","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","isDeletedUser","newDraft","isLocal","draftDate","executeForwardMessages","sendParams","toThreadId","messagePriceInStars","isToMainThread","fromChat","toChat","a","b","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","messageSlices","maxForwardedCount","splitMessagesForForwarding","forwardParams","wasDrafted","forwardedLocalMessagesSlice","sendMessageOrReduceLocal","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","Forwards","realChatId","isDeleted","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","updateListedIds","outlyingList","areSortedArraysIntersecting","removeOutlyingList","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","updateThreadInfo","messagesCount","loadMessage","replyOriginForId","MESSAGE_DELETED","replyMessage","findClosestIndex","sourceIds","indexForDirection","to","areSomeLocal","isApiPeerChat","localMessage","sendMessage","currentMessageKey","rafPromise","progressCallback","attachment","progress","messageKey","updateUploadByMessageKey","delete","sendMessagesWithNotification","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","localForwards","firstMessage","firstSendParam","storySendMessage","isStoryReply","isReaction","titleKey","getMessageKey","fetchUnreadMentions","addUnreadMentions","checkIfVoiceMessagesAllowed","noVoiceMessages","moveReplyToNewDraft","currentDraft","onError","isRestricted","selectIsChatRestricted","isLocalMessageId","onTickEnd","selectRealLastReadId","threadUpdate","isDeleting","updateThreadUnreadFromForwardedMessage","storyPeerId","selectCurrentViewedStory","isForwarding","draftSuggestedPostInfo","storyReplyInfo","messageReplyInfo","suggestedPostPrice","suggestedPostCurrency","suggestedPostAmount","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isPending","isInvertedMedia","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","MAX_MEDIA_FILES_FOR_ALBUM","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userFullNames","userFullName","getUserFullName","selectEditingMessage","setEditingId","todo","cancelApiProgress","isMessageLocal","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","selectSavedDialogIdFromMessage","messageSuggestedPost","futureMin","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","deleteMessages","dismissAction","isArray","dismissNotification","selectEditingScheduledId","activeChat","folders","chatFolders","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","option","MESSAGE_ID_REQUIRED_ERROR","oldSections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","minId","selectFirstUnreadId","lastReadInboxMessageId","readCount","countSortedIds","newTopicUnreadCount","updateTopic","shouldFetchUnreadReactions","fetchUnreadReactions","webPagePreview","webPagePreviewId","webPage","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","messageUpdate","updateWithLocalMedia","poll","selectPollFromMessage","shouldResetVoters","votes","vote","offsets","updateScheduledMessages","updatePeerFullInfo","hasScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","autoTranslateLanguage","voice","mediaHash","mediaLoader","blobUrl","blob","formData","FormData","append","audioToText","transcriptionText","newCustomEmojiIds","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","updateSponsoredMessage","random","isMedia","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","ignoreDeepLinks","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","urlAuthDomains","requestLinkUrlAuth","match","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","currentThreadId","newReplyInfo","replyToTopId","selectReplyCanBeSentToChat","closeMediaViewer","selectForwardsContainVoiceMessages","selectForwardsCanBeSentToChat","showAllowedMessageTypesNotification","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","texts","SEND_VIEWS_TIMEOUT","viewsIncrementTimeout","idsToIncrementViews","incrementViews","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","updateQuickReplyMessages","updateQuickReplies","quickReplies","quickReplyId","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","getAttachmentType","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","cId","clear","sendWebAppEvent","eventData","supportedFilters","peerTypes","PollResultsAsync","PollResults","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","phone","filterPhone","topicError","setTopicError","descriptionError","setDescriptionError","phoneNumberError","setPhoneNumberError","setPhoneNumber","is_call","is_open","topicName","topicDescription","handlePhoneNumberChange","updateUrgentTopic","setSettingOption","Switch","checked","openPayPackageModal","useCacheBuster","cacheBuster","setCacheBuster","updateNotifyDefaults","peerType","addNotifyException","notifySettings","TRANSITION_RENDER_COUNT","LeftColumnContent","BUTTON_CLOSE_DELAY_MS","closeTimeout","LeftMain","searchQuery","searchDate","isClosingSearch","contactsFilter","shouldSkipTransition","foldersDispatch","isForumPanelOpen","onSearchQuery","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderUpdateButton","setShouldRenderUpdateButton","webFireBase","setWebFireBase","handleFireBaseUpdate","force_update_current_version","getItem","UPDATE_DEFER_KEY","compareVersion","UpdateFirebaseConfig","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","ChatList","isForumPanelVisible","isMouseInside","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectAIKonwledge","AIKonwledge","handleSelectAITranslate","AITranslate","handleSelectContacts","Contacts","handleSelectArchived","Archived","handleUpdateClick","fireBaseAnalytics","deferUpdate","force_update_store_url","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseLeave","LeftMainHeader","shouldHideSearch","onSelectSettings","onSelectContacts","onSelectArchived","onSelectAIKnowledge","onSelectAITranslate","renderCount","shouldWrap","wrapExceptionKey","ChatFolders","shouldHideFolderTabs","GlobalSearch","badge","ForumPanel","onOpenAnimationStart","NewChatButton","onNewPrivateChat","onNewChannel","onNewGroup","Statistics","InviteButton","handleInviteFriendsClick","openInviteFriendsModal","InviteGif","alt","SummaryHeaderActions","handleShowRightPanel","getGptSettings","SettingIcon","isFrozenAccountModalOpen","days","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","Message","setMessage","showSmartReply","setShowSmartReply","replyResponse","setReplyResponse","handleInput","handleReply","handleFocusMessage","Skeleton","active","paragraph","renderMessage","formatTimestamp","isUser","ChatAvatar","cn","bestMatch","getBestKnowledgeMatch","score","answer","autoReply","message_id","reply","handleSmaryReply","ChatAILogoPath","ArrowRightIcon","SendIcon","CustomVirtualList","listData","ErrorBoundary","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","VIDEO_PROCESSING_NOTIFICATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","areDeepEqual","localPaidReaction","r","localAmount","localIsPrivate","localPeerId","addPaidReaction","startActiveReaction","containerId","hasUnreadReactionsForMessageInChat","unreadReactions","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","notifyAboutMessage","isScheduled","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","getMessageReplyInfo","selectThreadByMessage","updateListedAndViewportIds","savedDialogId","isUnreadChatNotLoaded","candidateGlobal","addViewportId","updateChatLastMessage","currentLastMessageId","selectTopicFromMessage","updateChatLastMessageId","findLastMessage","deleteParticipantHistory","deleteThread","threadIdsToUpdate","deleteTopic","deletePeerPhoto","requestChatUpdate","idsSet","newLastMessage","loadTopicById","isAnimatingAsSnap","selectCanAnimateSnapEffect","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","newLastSavedDialogMessage","requestSavedDialogUpdate","deleteScheduledMessages","deleteChatScheduledMessages","scheduledMessages","shouldForceReply","getStoryReplyInfo","isForumTopic","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyData","updatePoll","replaceWebPage","reportDeliveryUntilDate","reportMessageDelivery","selectIsChatListed","loadTopChats","lastMessage","addMessages","getMessageText","animatedEffect","selectScheduledIds","threadScheduledIds","isFromNew","clearMessageTranslation","updateQuickReplyMessage","deleteQuickReplyMessages","deleteQuickReply","newScheduledMessageId","fileUploads","byMessageKey","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","newPinnedIds","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","removeChatFromChatLists","channelId","pollId","pollUpdate","updatePollVote","isBought","invoice","paidMediaUpdate","transcriptions","sendingState","updateMessageTranslations","Content","MESSAGE_REACTIONS_POLLING_INTERVAL","MESSAGE_COMMENTS_POLLING_INTERVAL","MESSAGE_FACT_CHECK_UPDATE_INTERVAL","MESSAGE_STORY_POLLING_INTERVAL","BOTTOM_THRESHOLD","UNREAD_DIVIDER_TOP","SCROLL_DEBOUNCE","MESSAGE_ANIMATION_DURATION","BOTTOM_FOCUS_MARGIN","SELECT_MODE_ANIMATION_DURATION","UNREAD_DIVIDER_CLASS","runDebouncedForScroll","autoTranslate","isChatLoaded","isChannelChat","isGroupChat","isChannelWithAvatars","isChatMonoforum","isSystemBotChat","isAnonymousForwards","isNonContact","nameChangeDate","photoChangeDate","isViewportNewest","restrictionReasons","isEmptyThread","focusingId","hasLinkedChat","noMessageSendingAnimation","isServiceNotificationsChat","channelJoinInfo","isChatProtected","hasCustomGreeting","monoforumChannelId","setScrollOffset","loadSponsoredMessages","loadMessageReactions","loadPeerStoriesByIds","loadFactChecks","requestMessageTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorIdRef","anchorTopRef","listItemElementsRef","memoFirstUnreadIdRef","memoUnreadDividerBeforeIdRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","areMessagesLoaded","useNativeCopySelectedMessages","messageGroups","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","storyDataList","storiesByPeerIds","storyIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","useStickyDates","handleScroll","focusedMessage","parentElement","scrollTop","prevContainerHeightRef","offsetHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","element","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevMessageIds","prevIsViewportNewest","lastItemElement","firstUnreadElement","getMessageHtmlId","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","contains","removeExtraClass","requestForcedReflow","bottomOffset","isAtBottom","isAlreadyFocusing","shouldScrollToBottom","isBackgroundModeActive","animateScroll","margin","forceDuration","isResized","unreadDivider","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","restartCurrentScrollAnimation","useEffectWithPrevDeps","prevIsSelectModeActive","noAvatars","shouldRenderGreeting","isGroupChatJustCreated","isEmptyTopic","hasMessages","Restricted","PremiumRequired","ContactGreeting","NoMessages","AccountInfo","StarsRequired","onScroll","preventMessageInputBlur","RequirementToContactMessage","MessageListAccountInfo","MessageListContent","canShowAds","shouldRenderAccountInfo","noAppearanceAnimation","selectCurrentMessageIds","selectActiveRestrictionReasons","selectChatLastMessage","withLastMessageWhenPreloading","chatBot","businessIntro","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","translationLanguage","areProfilesShown","isSystemBot","isAnonymousForwardsChat","linkedChatId","joinInfo","selectIsChatProtected","defaultStickers","lastUnreadMessageId","loadGreetingStickers","randomIndex","handleStickerSelect","StickerView","shouldLoop","explainer","INFINITE_LOOP_MARKER","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","expireDate","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","lastReadStoryId","isFullyLoaded","profileIds","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","peerIds","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","loadPeerStories","shouldAddToRecent","previousReaction","sentReaction","updateSentStoryReaction","stopActiveReaction","isForPast","isForFuture","BACK_BUTTON_INACTIVE_TIME","EMOJI_STATUS_SIZE","SEARCH_LONGTAP_THRESHOLD","typingStatus","isSyncing","isFetchingDifference","emojiStatusSticker","emojiStatusSlug","openThreadWithInfo","openStickerSet","updateMiddleSearch","openUniqueGiftBySlug","isBackButtonActive","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","handleOpenChat","handleLongPressMouseDown","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","threshold","setBackButtonActive","handleUserStatusClick","fromUserId","handleChannelStatusClick","handleBackClick","messageInput","isAudioPlayerActive","isAudioPlayerRendering","useConnectionStatus","renderBackButton","asClose","withUnreadCounter","UnreadCounter","useElectronDrag","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderActions","canExpandActions","selectThreadParam","PortraitTagColors","UserPortraitBaseCard","portraitInfo","setPortraitInfo","getPortraitInfo","userPortrait","getUserPortrait","handlePortraitClick","openUserPortrait","usernames","langs","tags","tag","UserPortraitBasicCardMenu","menuRef","menuPositionOptions","markMouseInside","useMouseInside","_extends","withPortal","noCompact","UserPortraitBasicCard","updateManagement","isUsernameAvailable","checkedUsername","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","isRevoked","admin","invites","revokedInvites","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","AIKnowledge","resetMiddleSearch","updateSharedMediaSearchType","PickerChatItem","isChecked","isSelf","customPeer","realPeer","getGroupStatus","getUserStatus","getSubtitle","specialTitle","Checkbox","clickOpenRoom","getOrderedIds","ALL_FOLDER_ID","selectedChats","selected","setSelected","search","setSearch","sorted","sortChatIds","filterPeersByQuery","filterChatIdsByType","onSave","Input","Group","buildQueryString","LOGO_DIMENSIONS","MINIMAL_SIZE","makeGoodArtwork","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","getCoverSize","thumbnailSizes","AVATAR_FULL_DIMENSIONS","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","useAsync","buildMediaMetadata","artwork","Stars","finalValue","MultiInput","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","GifSearchAsync","GifSearch","chargedPaidMessageStars","openChatRefundModal","handleRefund","formatStarsAsIcon","asFont","messageStarIcon","containerClassName","messageStars","withMarkdown","withNodes","isText","noForcedUpperCase","pill","peerFullInfo","RoomAIInner","getCurrentUserInfo","pageInfo","setPageInfo","lastTime","tokenRef","scrollLocked","isScrollLock","useChat","api","SERVER_API_URL","sendExtraMessageFields","upgradeTip","createUpgradeTipMessage","CHATAI_IDB_STORE","token","handleAddSummaryMessage","newMessages","initDate","getMessages","localChatAiMessages","parseStoreMessage2Message","roomDescription","createRoomDescriptionMessage","handleLoadMore","handleCreateCalendarSuccess","delMessage","createGoogleLoginMessage","mergeMesssage","uuidv4","role","parts","annotations","updateToken","handleGoogleAuthSuccess","createGoogleMeetingMessage","CreateCalendarSuccess","UpdateGoogleToken","GoogleAuthSuccess","msgs","storeMessages","deleteMessage","rightPanelBg","Messages","loadMore","headers","getApihHeaders","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","globalSearchChatId","currentContent","isMessageListOpen","isConnectionStatusMinimized","areChatsLoaded","canSetPasscode","setGlobalSearchDate","setSharedSettingOption","setGlobalSearchChatId","lockScreen","searchMessagesGlobal","updateSubscriptionInfo","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","hasMenu","selectedSearchDate","formatDateToString","connectionStatusPosition","handleLockScreenHotkey","IS_APP","MainButton","onTrigger","handleTrigger","getSubscriptionInfo","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","shouldResetResultsByType","isSearchRelevant","isSearchFocused","searchInputPlaceholder","IS_BETA","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","DropdownMenu","footer","forceOpen","transformOriginX","IS_MAC_OS","LeftSideMenuItems","onBotMenuOpened","onBotMenuClosed","GlobalSearchContent","AI","SearchInput","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","autoComplete","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","minDate","globalSearch","listIds","selectCanSetPasscode","TABS","foundIds","mediaSearchType","setSharedMediaSearchType","searchSharedMediaMessages","transitionRef","tabs","tab","initialTab","activeTab","setActiveTab","handleSwitchTab","renderingActiveTab","tabType","resultType","getMore","isFirstTab","applyTransitionFix","releaseTransitionFix","useTransitionFixes","resetCacheBuster","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","handleTransitionStop","handleSelectMedia","isUrl","checkIsUrl","photoSummary","webPageSummary","documentSummary","videoSummary","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","TabList","onSwitchTab","InfiniteScroll","onLoadMore","noScrollRestore","noFastList","noSpinner","NothingFound","Media","isProtected","observeIntersection","getMessageDocument","withDate","smaller","canAutoLoad","autoLoadFileMaxSizeMb","SHARED_MEDIA_SLICE","onSelect","WebLink","onlyWebPage","onMessageClick","renderContent","currentType","resultsByType","selectCurrentSharedMediaSearch","chatsById","usersById","userStatusesById","INTERSECTION_DEBOUNCE_MS","SponsoredMessage","observeIntersectionForLoading","observeIntersectionForPlaying","isDownloading","canAutoLoadMedia","canAutoPlayMedia","hideSponsored","openMediaViewer","contentRef","shouldObserve","debounceMs","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","MediaViewerOrigin","isSponsoredMessage","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","PeerColorWrapper","Photo","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","isRectangular","MessageAppendix","SponsoredContextMenuContainer","activeDownloads","selectActiveDownloads","downloadableMedia","getIsDownloading","selectCanAutoLoadMedia","selectCanAutoPlayMedia","LOCAL_BOOST_COOLDOWN","sendStripeCredentials","publishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","credentials","Authorization","json","setStripeCardInfo","setPaymentStep","PaymentStep","Checkout","sendSmartGlocalCredentials","publicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","descriptionKey","setSmartGlocalCardInfo","validateRequestedInfo","inputInvoice","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","Shipping","payInputStarInvoice","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","handlePaymentFormError","formPrice","totalAmount","openPriceConfirmModal","originalAmount","newAmount","directInfo","formId","sendStarPaymentForm","saveInfo","selectPaymentInputInvoice","updatePayment","isExtendedMedia","shouldHideName","shouldUpgrade","months","openStarsTransactionFromReceipt","setReceipt","nativeProvider","selectProviderPublishableKey","selectProviderPublicToken","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","forUserId","giftModal","forPeerId","starsGiftOptions","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","cooldownUntil","giftCodeModal","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","closeGiftWithdrawModal","TRANSITION_DURATION","PROGRAMMATIC_SCROLL_TIMEOUT_MS","runThrottledForScroll","isScrollingProgrammatically","useProfileState","profileState","onProfileStateChange","allowAutoScrollToTabs","handleStopAutoScrollToTabs","prevTabType","tabsEl","getStateFromTabType","prevProfileState","ProfileState","Profile","tabListEl","maxDistance","determineProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","MAX_LENGTH","SHOW_LOADER_DELAY","EMOJI_SIZE","topMessageSender","clickBotInlineButton","pinMessage","loadPinnedMessages","useDerivedState","pinnedMessageId","pinnedMessage","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","useMessageMediaHash","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","shouldForceOpen","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","fullWidth","mini","loading","pinListIcon","pinListIconHidden","ConfirmDialog","confirmLabel","confirmHandler","noHover","pictogramTransition","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","pinnedThumb","pinnedThumbImage","playsInline","disablePictureInPicture","MediaSpoiler","isVisible","renderPictogram","withMedia","AnimatedCounter","renderText","messageTextTransition","MessageSummary","truncateLength","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","renderKeyboardButtonText","selectForwardedSender","firstPinnedMessage","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","FAB_THRESHOLD","NOTCH_THRESHOLD","CONTAINER_HEIGHT_DEBOUNCE","TOOLS_FREEZE_TIMEOUT","useScrollHooks","loadMoreBackwards","loadMoreForwards","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","toggleScrollTools","fabTrigger","fabOffsetTop","scrollBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","withHistoryTriggers","useOnIntersect","observeIntersectionForFab","freeze","freezeForFab","unfreeze","unfreezeForFab","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","CONFETTI_COLORS","STAR_PATH","Path2D","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","fill","restore","beginPath","ellipse","prevConfettiTime","hideTimeout","containerStyle","containerWidth","leftSide","randomX","PROFILE_PHOTOS_FIRST_LOAD_LIMIT","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","topPeers","contactList","addUserStatuses","getCompareString","collator","Intl","Collator","sortedUsers","compare","addContact","addUser","commonChats","selectUserCommonChats","chatIds","updateUserCommonChats","shouldRefundCharged","starsAmount","chatRefundModal","starsToRefund","shouldSharePhoneNumber","updateChatMutedState","isContact","isPreload","updatePeerPhotosIsLoading","photos","nextOffsetId","updatePeerPhotos","newPhotos","currentSearchQuery","userSearch","updateUserSearchFetchingStatus","accountResultIds","globalResultIds","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","AddChatMembers","members","onNextStep","localContactIds","isSearching","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","filteredIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","allowMultiple","withStatus","itemInputType","NewChatMembersProgress","BotApps","PublicPosts","checkSearchPostsFlood","globalResults","localResults","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","ManagementScreens","blurSearchInput","searchInput","isChatSelected","nextManagementScreen","toggleChatInfo","toggleChatAIInfo","toggleManagement","setStickerSearchQuery","setGifSearchQuery","closePollResults","addChatMembers","setNewChatMembersDialogState","setEditingExportedInvite","toggleStatistics","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","closeBoostStatistics","setShouldCloseRightColumn","closeMonetizationStatistics","toggleUserPortrait","setProfileState","managementScreen","setManagementScreen","Initial","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isProfile","ChatInfo","isChatAI","ChatAI","isManagement","Management","isStatistics","isMessageStatistics","isStoryStatistics","isBoostStatistics","BoostStatistics","isMonetizationStatistics","MonetizationStatistics","isStickerSearch","StickerSearch","isGifSearch","isPollResults","isAddingChatMembers","AddingMembers","isCreatingTopic","isEditingTopic","EditTopic","isUserPortrait","UserPortrait","isOverlaying","setShouldSkipTransition","renderingContentKey","useScrollNotch","selector","shouldScrollUp","Closed","forceSyncOnIOs","ChatPrivacyType","Discussion","GroupPermissions","GroupType","ChatAdministrators","ChannelSubscribers","GroupMembers","Invites","Reactions","JoinRequests","ChannelRemovedUsers","GroupUserPermissionsCreate","GroupRemovedUsers","GroupUserPermissions","NewDiscussionGroup","ChatAdminRights","ChatNewAdminRights","GroupAddAdmins","GroupRecentActions","EditInvite","InviteInfo","handleSelectChatMember","memberId","isPromoted","handleAppendingChatMembers","currentScreen","onScreenSelect","onChatMemberSelect","RoomAIWrapper","prevChatId","prevThreadId","isColumnOpen","areActiveChatsLoaded","selectAreActiveChatsLoaded","selectRightColumnContentKey","notificationMessage","setNotificationMessage","summaryMessages","setSummaryMessages","viewMessages","setViewMessages","getTime","parseSummaryStoreMessage2Message","handleAddUrgentMessage","getSummaryHistory","globalIntroduce","createGlobalIntroduceMessage","AddUrgentMessage","AddSummaryMessage","ChatAIStoreReady","lastFocusTime","getRoomLastFocusTime","globalSummaryTask","initSummaryChats","parseMessage2SummaryStoreMessage","globaSummaryBg","SerenaPath","UrgentNotification","SAVED_MESSAGES_HOTKEY","FIRST_FOLDER_INDEX","chatFoldersById","orderedFolderIds","activeChatFolder","maxFolders","maxChatLists","folderInvitesById","maxFolderInvites","hasArchivedChats","hasArchivedStories","isStoryRibbonShown","sessions","aiChatFolders","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","shouldRenderPresetTagModal","openRenderPresetTagModal","closeRenderPresetTagModal","activePresetTag","setActivePresetTag","activeAITag","setActiveAITag","shouldRenderAiChatFoldersTip","openRenderAiChatFoldersTip","closeRenderAiChatFoldersTip","aiChatFoldersStep","setAiChatFoldersStep","AIChatFolderStep","classify","aiChatFoldersloading","setAiChatFoldersLoading","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","isStoryRibbonClosing","scrollToTop","activeList","behavior","allChatsFolder","MEMO_EMPTY_ARRAY","excludedChatIds","presetChatsFolder","PRESET_FOLDER_ID","PRESET_FOLDER_TITLE","unreadChatsFolder","UNREAD_FOLDER_ID","UNREAD_FOLDER_TITLE","AIChatsFolder","AI_FOLDER_ID","AI_FOLDER_TITLE","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","isInPresetFolder","isInUnreadFolder","isInAIFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","folderId","unreadChatIds","folderCountersById","folderTabs","canShareFolder","selectCanShareFolder","contextActions","badgeCount","chatsCount","handler","isChatList","Folders","filterPresetTag","filterAITag","destructive","noCustomEmojiPlayback","noTitleAnimations","isBadgeActive","notificationsCount","isNotInFirstFolderRef","handleKeyDown","ctrlKey","digit","general","GLOBAL_PRESET_TAG","GLOBAL_AI_TAG","isNext","nextAiChatFolders","apply","GLOBAL_AICHATFOLDERS_TIP_SHOW","updateAIChatFoldsLoading","isShowTip","tipShowRes","UpdateAIChatFoldersApplying","placeholderRef","shouldRenderPlaceholder","renderCurrentTab","activeFolder","isFolder","folderType","isMainList","canDisplayArchive","activeTag","shouldRenderFolders","StoryRibbon","contextRootElementSelector","AIChatFoldersTip","PresetTagModal","setActiveTag","ActiveTag","archived","orderedPeerIds","archivedStories","storyViewer","isRibbonShown","filterAIFolder","PRESET_TAGS","tagList","getAITags","dialogStyle","currentTag","onClickTag","shouldRemove","removeGroupCall","isCallNotEmpty","participants","participant","updateGroupCallParticipant","playGroupCallSound","hangUp","needRating","selectPhoneCallUser","notifyAboutCall","selectedTabIndex","setSelectedTabIndex","SummarizeTab","UrgentAlertTab","CarouselItem","children","GuidanceCarousel","handleClose","carouselRef","handleNextClick","goTo","CloseIcon","Carousel","GuidanceWrapper","HIDDEN_RENDER_DELAY","INTERSECTION_THROTTLE","monoforumChannel","pinnedStoryIds","archiveStoryIds","storyByIds","hasCommonChatsTab","hasStoriesTab","hasMembersTab","hasPreviewMediaTab","hasGiftsTab","botPreviewMedia","areMembersHidden","canAddMembers","canDeleteMembers","commonChatIds","adminMembersById","shouldWarnAboutSvg","similarChannels","similarBots","limitSimilarPeers","isTopicInfo","loadMoreMembers","loadCommonChats","openAudioPlayer","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","deletingUserId","setDeletingUserId","profileId","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","noProfileInfo","useProfileViewportIds","searchMessages","loadStories","loadMoreGifts","groupChatMembers","usePeerStoriesPolling","throttleMs","handleNewMemberDialogOpen","handleSelectPreviewMedia","standaloneMedia","PreviewMedia","mediaIndex","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","MEMBERS_SLICE","noScrollRestoreOnTop","renderProfileInfo","shouldRestoreHeight","noContent","isSpinner","forceRenderHiddenMembers","isViewportIdsEmpty","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","nonInteractive","noLoop","MediaStory","isArchive","onDateClick","AudioOrigin","onPlay","getSenderName","ListItem","adminMember","forceShowSelf","avatarSize","SavedGift","renderSpinnerOrContent","DeleteMemberModal","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isGroup","isChatAdmin","isForbidden","canViewMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","commonChatsCount","hasPreviewMedia","hasPinnedStories","starGiftCount","peerGifts","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","hasBackDrawer","HeaderButton","setTitle","handleBack","isAvatarView","withDynamicLoading","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","Inline","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","REGULAR_PLAYBACK_RATE","DEFAULT_FAST_PLAYBACK_RATE","mediaDuration","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","closeAudioPlayer","renderingMessage","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","playPause","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","renderAudio","renderVoice","RangeSlider","bold","onHide","onMouseEnterBackdrop","renderPlaybackRateMenuItem","currentRate","isSelected","selectMessageMediaDuration","GLOBAL_UPDATE_DEBOUNCE","processedHashes","downloadedHashes","cancelMediaHashDownloads","runDebounced","useRunDebounced","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","ApiMediaFormat","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","useInfiniteScrollForLoadableItems","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","useInfiniteScrollForSharedMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useInfiniteScroll","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","MESSAGE_SEARCH_SLICE","BOT_VERIFICATION_ICON_SIZE","DISPLAY_DURATION_MS","wasShown","botVerification","markBotVerificationInfoShown","markAsShowed","CustomEmoji","iconId","selectPeerFullInfo","nextTitle","setWindowTitle","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","confirmIsDestructive","onCheck","GIFT_STICKER_SIZE","fromPeer","hasAdminRights","currentUserEmojiStatus","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","getTriggerElement","getRootElement","getMenuElement","getLayout","avatarPeer","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","radialPattern","backgroundColors","patternIcon","topIcon","stickerWrapper","shouldPreloadPreview","hiddenGift","priceBadge","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","star","GiftRibbon","GiftMenuItems","StoryViewerAsync","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","areDatesClickable","observeIntersectionForReading","useMessageObservers","renderPaidMessageAction","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","tableData","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","MiniTable","messageCountToAnimate","messageGroup","flat","appearanceIndex","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","appearanceOrder","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","withAvatar","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","firstMessageId","SenderGroupContainer","calculateSenderGroups","SCHEDULED_WHEN_ONLINE","formatHumanDate","buttonClassName","tabIndex","INTERACTION_RANDOM_OFFSET","interactionLocalId","availableReaction","aroundAnimation","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effectReactions","startSize","isReversed","interactions","timestamps","selectDefaultReaction","toggleReaction","isInSaved","isInDocumentGroup","documentGroupFirstMessageId","getUserReactions","hasReaction","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","paidReaction","resetLocalPaidReactions","currentActiveReactions","newActiveReactions","newMessageActiveReactions","defaultReaction","reactors","interaction","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","getReactionKey","newTag","TYPING_STATUS_CLEAR_DELAY","INVALIDATE_FULL_CHAT_FIELDS","localChat","prevIsForum","lastReadOutboxMessageId","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","currentTypingStatus","isFromScheduled","hasMention","hasUnreadMention","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","pinnedId","updateChatListType","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","loadChatJoinRequests","replacePinnedTopicIds","loadTopics","isForumAsMessages","photoId","replacePeerPhotos","waitBlob","Blob","serenaWaiting","createObjectURL","workBlob","serenaWorking","idPrefix","useIsIntersecting","transitionClassNames","useMediaTransitionDeprecated","decoding","stopEvent","formatMediaDuration","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","oldOrder","newOrder","reorderStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","receiver","canShowSender","originSender","isRepliesChat","updateInsertingPeerIdMention","messageSender","markShown","MESSAGE_APPEARANCE_DELAY","isAvatarPeerUser","handleMention","handleAvatarClick","avatarRef","contextMenu","canMention","shouldRenderContextMenu","avatarContainer","SenderGroupAvatar","ownProps","forceSenderName","isAnonymousOwnMessage","shouldSkipConfirmation","openWebAppsCloseConfirmationModal","miniAppsCachedPosition","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","callAttachBot","emojiStatusAccessModal","locationAccessModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","contextHolder","useNotification","msg","parsedMessage","padding","SerenaLogoPath","DangerIcon","notificationUrgentMessage","ICON_SIZE","renderScheduled","renderSavedMessages","renderGroup","renderTopic","TopicIcon","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","closeMonetizationVerificationModal","handleGetMoreStars","inner","iconsContainer","Unlock","animatedUnlock","commentsIcon","starIcon","starIconContainer","Sparkles","preset","AboutMonetizationModal","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","stickerSearch","hiddenName","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","setContextMenuAnchor","shouldAvoidNegativePosition","handleActivateSymbolMenu","triggerEl","ResponsiveHoverButton","onActivate","senderAvatar","isDragging","setIsDragging","setPosition","dragStartRef","hasDraggedRef","isDraggingRef","positionRef","loadPosition","savedPosition","savePosition","setItem","longPressTimerRef","deltaX","deltaY","clientY","newPosition","minX","innerWidth","maxY","innerHeight","RoomAIEntryButton","isLoadingFullUser","phoneCodeList","phoneCountry","registrationMonth","getCountryCodeByIso","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","securityNameInfo","time","formatPastDatetime","securityPhotoInfo","chatDescription","isoToEmoji","iso2","defaultName","formatRegistrationMonth","linkInfo","AvatarList","chatInfo","botBackground","OptimizedVideo","canPlay","forceAspectRatio","botInfoDescription","botInfoTitle","chatBackground","chatInfoTitle","chatInfoSubtitle","textColor","keyClassName","isVerified","chatNotVerified","verifiedTitle","countryList","phoneCodes","APP_VERSION_REGEX","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","test","localeCompare","numeric","sensitivity","twoFaSettings","ConnectionStatus","hasMiddleHeader","setIsOnline","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","StatusPickerMenu","onDelete","MediaViewerAsync","RoomsTab","ignoredIds","onIgnored","onUnIgnored","unIgnoreIds","renderRoomItem","isIgnored","modal","AgeVerificationModal","MODALS","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","CreditsModal","InviteCodeModal","InviteFriendsModal","PayPackageModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","priceConfirmModal","PriceConfirmModalAsync","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","canInstall","attachBots","accountsTotalLimit","updatePerformanceSettings","openChatByUsername","openCreditsModal","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleCreditsClick","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","aiChatFoldersLoading","handleSwitchAIChatFolders","aiChatFoldersTask","applyChatFolder","confirm","onOk","deleteAiChatFoldersFromUser","hideTip","onCancel","updateAIChatFoldersLoading","isApply","UpdateSettingAIChatFoldersLoading","IS_MULTIACCOUNT_SUPPORTED","AIKnowledgeIcon","AITranslateIcon","InviteGiftIcon","AIChatFolderIcon","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","noAnimation","Toggle","isCharIcon","WEB_VERSION_BASE","getPromptInstall","MEDIA_PRELOAD_OFFSET","searchSharedMedia","resultChatId","totalCount","newFoundIds","updateSharedMediaSearchResults","selectCurrentChatMediaSearchSegment","currentMediaMessageId","isInsideSortedArrayRange","currentSegment","segments","segment","calcChatMediaSearchAddOffset","calcChatMediaSearchOffsetId","calcLoadMoreDirection","currentSegmentFoundIdsCount","idIndexInSegment","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","halfMediaCount","preloadOffset","lastMediaIndex","calcLoadingState","newFoundIdsCount","searchChatMedia","chatMediaSearchParams","CHAT_MEDIA_SLICE","setChatMediaSearchLoading","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","currentSearch","savedTag","isHashtag","shouldReuseParams","offsetRate","nextOffsetRate","offsetPeerId","nextOffsetPeerId","offsetPeer","fetchingQuery","hashtag","getSearchResultKey","hasTagChanged","updateMiddleSearchResults","cleanQuery","requestedQuery","currentResults","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","ArchivedChats","lovelyChartPromise","LovelyChart","ensureLovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","section","StatisticsOverview","isToncoin","textBottom","integerTonPart","decimalTonPart","toFixed","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","monetization","DEBOUNCE","STICKY_TOP","markIsScrolled","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","RoomAI","COLUMN_ANIMATION_DURATION","HeaderContent","stickerSearchQuery","gifSearchQuery","isEditingInvite","canViewStatistics","isInsideTopic","canEditTopic","canEditBot","giftProfileFilter","canUseGiftFilter","canUseGiftAdminFilter","realTimeAssistants","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimited","shouldIncludeUnlimitedGifts","shouldIncludeLimited","shouldIncludeLimitedGifts","shouldIncludeUnique","shouldIncludeUniqueGifts","shouldIncludeDisplayed","shouldIncludeDisplayedGifts","shouldIncludeHidden","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","handleDeleteInviteClick","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","realTimeAssistantById","chatType","handleSwitchRealTimeAssistant","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","PrimaryLinkMenuButton","AISettingMenuButton","AISettingIcon","isBackButton","autoFocusSearch","SAVED_FOLDER_ID","RealTimeAIIcon","renderHeaderContent","selectCurrentStickerSearch","selectCurrentGifSearch","getCanManageTopic","getCanAddContact","selectCanManage","selectCanUseGiftProfileFilter","selectCanUseGiftProfileAdminFilter","TopicItem","handleEditTopic","handeleDeleteTopic","AddTopic","handleAddTopic","urgent_info","ignored_urgent_chat_ids","selectUrgentChatIds","getIdsFromEntityTypes","setTopics","setIgnoredIds","deleteUrgentTopic","t","handleIgnored","newSelected","entityTypes","buildEntityTypeFromIds","urgentCheckTask","updateUrgentChats","handleUnIgnored","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","giveawayBoostsPerPremium","loadMoreBoosters","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","selectIsGiveawayGiftsPurchaseAvailable","LockScreen","isLocked","passcodeSettings","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","useShowTransitionDeprecated","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","menuItems","SummaryItem","template","selectedTemp","handleSelect","user_id","AddSummaryTemplate","handleAdd","curious_info","ignored_summary_chat_ids","curious_id","ignoredChatIds","summaryTemplate","setSummaryTemplate","originSelectedTemp","setOriginSelectedTemp","setSelectedTemp","actionsVisable","isEqual","handleTemplateSelect","selectedId","handleDelete","newSelectedTemp","deleteSummarizeTemplate","newSummaryTemplate","EFFECT_DURATION_MS","collectibleStatuses","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","delay","until","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","success","readOnly","inputMode","maxLength","maxLengthIndicator","onInput","onKeyPress","onBlur","onPaste","labelText","fullClassName","resizeHeight","textarea","previousSelectionEnd","selectionEnd","htmlFor","DialogsAsync","ContentType","RENDER_COUNT","RESET_TRANSITION_DELAY_MS","settingsScreen","isFirstChatFolderActive","nextFoldersAction","isChatOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","debouncedSetGlobalSearchQuery","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","EditProfile","General","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","prevSettingsScreenRef","usePrevious","NewChat","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","withSwipeControl","leftColumn","isArchivedRibbonShown","selectIsForumPanelOpen","telegptGuidance","isFirstIn","setIsFirstIn","checkInvitationStatus","openInviteCodeModal","cachedInvitation","invitation","inviteCode","invitationInfo","getMyInvitation","noBackdropClose","RELEASE_STATUS_TIMEOUT","releaseStatusTimeout","loadAndReplaceMessages","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","loadTopMessages","newCurrentChatId","currentChatMessages","topicLastMessages","resultMessageIds","messagesThreadInfos","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","shouldCloseChatOnError","threads","updateThread","preloadTopChatMessages","initFolderManager","whenFirstBatchDone","authState","sync","NotificationsAsync","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","isSinglePeer","isSingleStory","storyList","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","lastViewedByPeerId","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","areStoriesBlocked","updatedViews","view","closeChat","MessageHistoryRecord","createLocationHash","FOCUS_MARGIN","mentionsCount","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","messageElements","lastMessageElement","revealed","hideScrollDown","noComposer","noExtraShift","transformDown","unread","shouldShowCount","INTERSECTION_THROTTLE_FOR_READING","INTERSECTION_THROTTLE_FOR_MEDIA","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freezeForReading","unfreezeForReading","mentionIds","reactionIds","scheduledToUpdateViews","shouldUpdateViews","albumMainId","hasUnreadReaction","StickerSearchAsync","teactExperimentControlled","context","maxDate","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","localTopics","totalTopicsCount","tryParseDeepLink","getMessageByPublicLink","getMessageByPrivateLink","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","selectChatByUsername","getChatGroupOrChannelMessage","internalChannelId","toChannelId","searchResult","sponsoredResult","timestampPlusDay","shouldCheckFetchingMessagesStatus","popularBotApps","botApps","searchFlood","processOriginStarsPayment","clearPayment","prevFilter","updatedFilter","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen"],"sourceRoot":""}