{"version":3,"file":"6930.1ef8094763d6ef0b451e.js","mappings":"wtBACA,SAAgB,YAAc,WAAW,QAAU,WAAW,KAAO,WAAW,WAAa,WAAW,KAAO,WAAW,eAAiB,WAAW,YAAc,WAAW,QAAU,WAAW,OAAS,WAAW,eAAiB,WAAW,aAAe,WAAW,YAAc,WAAW,OAAS,WAAW,OAAS,WAAW,cAAgB,Y,oFCoN/V,GAAeA,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAqB,CAACC,GAAUC,YAG3C,CACLC,KAHWD,GAAOE,WAAYC,EAAAA,EAAAA,KAAWJ,EAAQC,EAAME,gBAAaE,IADpDN,CAtK8BO,EAChDL,QACAC,WAEA,MAAM,oBACJK,EAAmB,YAAEC,EAAW,gBAAEC,IAChCC,EAAAA,EAAAA,MACEC,GAAYC,EAAAA,EAAAA,MAEZC,EAASC,QAAQb,GAAOY,QAExBE,GAAiBC,EAAAA,EAAAA,GAAiBf,GAElCgB,GAAUC,EAAAA,EAAAA,MAETC,EAAgBC,IAAqBC,EAAAA,EAAAA,OACrCC,EAAgBC,IAAmBF,EAAAA,EAAAA,KAAS,IAEnDG,EAAAA,EAAAA,IAAU,KACHX,GACHU,GAAgB,IAEjB,CAACV,IAEJ,MAAMY,GAAeC,EAAAA,EAAAA,GAAgB,KACnC,MAAMC,EAAShB,EAAUiB,QACzB,GAAKD,GACDd,EAAQ,CACV,MAAM,IACJgB,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,GAChBL,EAAOM,cAAc,kBAAmBC,wBAC5CzB,EAAgB,CACdoB,MACAC,OACAC,QACAC,SACAG,WAAW,GAEf,KAGFX,EAAAA,EAAAA,IAAU,KACJT,GAAgBqB,aAClBX,KAED,CAACV,EAAgBU,IAEpB,MAAMY,GAAcX,EAAAA,EAAAA,GAAiBY,IAC9BvB,IAELK,EAAkBkB,GAEhB9B,EADEN,EACU,CACVqC,KAAM,YACNC,OAAQtC,EAAKuC,GACbC,MAAOJ,EAAOI,MACdC,SAAUL,EAAOK,SACjBC,OAAQN,EAAOM,QAGL,CACVL,KAAM,QACNG,MAAOJ,EAAOI,MACdC,SAAUL,EAAOK,SACjBC,OAAQN,EAAOM,YAWfC,GAAcnB,EAAAA,EAAAA,GAAgB,KAClCnB,MAaIuC,GAAaC,EAAAA,EAAAA,IAAQ,KACzB,MACMC,EADO/B,EAAQ,qCACFgC,MAAM,UACzB,MAAO,CACLD,EAAM,GACNE,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CACPC,IAAKnC,EAAQ,gBACboC,KAAMpC,EAAQ,4CAEhB+B,EAAM,KAEP,CAAC/B,IAEJ,OACEiC,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJC,WAAWC,EAAAA,EAAAA,GAAeC,EAAOC,aACjCC,iBAAkBF,EAAOG,QACzBjD,UAAWA,EACXkD,QAAM,EACNC,QAASjB,EACThC,OAAQA,GAERqC,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOM,KAAM,iBAAkBC,SA1ClE,SAAsBC,GACpB,MAAM,UAAEC,GAAcD,EAAEE,cAExB5C,EAAgB2C,GAAa,IAC/B,GAuCMhB,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLC,OAAK,EACLC,KAAK,UACLf,UAAWE,EAAOc,YAClBC,MAAM,cACNC,QAASA,IAAMlE,IACfmE,UAAWzD,EAAQ,UAEnBiC,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,WAEb1B,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOoB,OAAQvD,GAAkBmC,EAAOqB,eACrE5B,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,EAAOsB,gBACZ9D,EAAPf,EAAe,iBAA4B,wBAGhDgD,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOuB,YACpB9E,EACCgD,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACLX,KArII,IAsIJY,KAAMhF,EACNqD,UAAWE,EAAO0B,SAEpBjC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO2B,eAAgBC,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,KAGjFtC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOgC,KAAMJ,IAAKK,EAAUH,IAAI,GAAGC,WAAW,IAC9DtC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO2B,eAAgBC,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,MAIrFtC,EAAAA,GAAAA,cAAA,MAAIK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOkC,WAAYlC,EAAOmC,SAhExD7E,GAAgBqB,YACXlC,GAAO2F,EAAAA,EAAAA,GAAW5E,EAAQ,kCAC/B6E,EAAAA,EAAAA,IAAuB3E,EAAgByB,OAAQzB,EAAgBwB,SAAU1B,EAAQ8E,OAAQ,CAAC,qBACxFF,EAAAA,EAAAA,GAAW5E,EAAQ,oBAAqBE,GAAgBuB,OAAQ,CAAC,oBAGzDzB,EAAPf,EAAe,iBAA4B,uBA6D9CgD,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,EAAOuC,aAClB9F,GAAO2F,EAAAA,EAAAA,GACN5E,EAAQ,2BAA2BgF,EAAAA,EAAAA,IAAahF,EAASf,IAAQ,CAAC,oBAChEe,EAAQ,gCAEdiC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOyC,SACrBhD,EAAAA,GAAAA,cAACiD,EAAAA,EAAmB,CAClBC,QAASrF,GAAgBsF,iBACzB5B,QAASpC,IAEXa,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO6C,eACpBxD,S,sEC5Mb,MC0GA,GAAehD,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAsBC,IACxC,MACEuG,OAAO,QACLC,GACD,cACDC,GACEzG,EAEJ,MAAO,CACL0G,QAAS1G,EAAO2G,aAAaD,QAC7BE,cAAeJ,EAAQK,OACvBC,gBAAiBN,EAAQO,SACzBN,kBAZgB1G,CAxEuCiH,EACzDnG,SACA4F,gBACAG,gBACAE,kBACAJ,cAEA,MAAM,6BAAEO,EAA4B,mBAAEC,IAAuBxG,EAAAA,EAAAA,MAEvDO,GAAUC,EAAAA,EAAAA,MAETiG,EAAaC,IAAkB/F,EAAAA,EAAAA,IAAiB,IAEjDgG,GAAmBtE,EAAAA,EAAAA,IAAQ,KAC/B,MAAMuE,GAAYC,EAAAA,EAAAA,MAAYC,MAAMC,KAC9BC,GAAcC,EAAAA,EAAAA,IAAO,IACrBjB,GAAW,MACXE,GAAiB,MACjBE,GAAmB,KAGnBc,GAAkBC,EAAAA,EAAAA,IAAmB,CACzCC,IAAKJ,EAAaK,MAAOZ,EAAa5E,KAAM,SAG9C,OAAOyF,EAAAA,EAAAA,GAAYJ,EAAgBK,OAAQxF,IACzC,MAAMvC,EAAOoH,EAAU7E,GAEvB,SAAKvC,GAIGA,EAAKgI,YACPC,EAAAA,EAAAA,IAAUjI,KAAUkI,EAAAA,EAAAA,IAAclI,IACnCuC,IAAOgE,GAAiBhE,IAAO4F,EAAAA,SAErC,CAAC5B,EAAeU,EAAaT,EAASE,EAAeE,IAElDwB,GAA8B5G,EAAAA,EAAAA,GAAiB6G,IAC/CA,GAAeC,SACjBtB,EAAmB,CAAE/G,UAAWoI,IAChCtB,OAIJ,OACE/D,EAAAA,GAAAA,cAACuF,EAAAA,EAAW,CACVlF,UDjFiB,WCkFjB1C,OAAQA,EACRiD,QAASmD,EACTyB,MAAOzH,EAAQ,kBACf0H,gBAAc,EACdC,qBAAmB,EACnBC,iBAAe,EACfC,kBAAmB7H,EAAQ,YAC3B8H,QAAS9B,GAET/D,EAAAA,GAAAA,cAAC8F,EAAAA,EAAU,CACTzF,UD5FyI,WC6FzI0F,QAAS5B,EACT6B,YAAa/B,EACbgC,kBAAmBlI,EAAQ,UAC3BmI,eAAgBhC,EAChBiC,cAAY,EACZC,oBAAkB,EAClBC,YAAU,EACVC,mBAAoBlB,Q,4HCpG5B,SAAgB,KAAO,WAAW,QAAU,WAAW,WAAa,WAAW,KAAO,WAAW,UAAY,WAAW,QAAU,WAAW,YAAc,WAAW,aAAe,WAAW,KAAO,WAAW,IAAM,WAAW,YAAc,WAAW,oBAAsB,WAAW,WAAa,WAAW,eAAiB,WAAW,SAAW,WAAW,YAAc,WAAW,YAAc,WAAW,OAAS,WAAW,eAAiB,WAAW,QAAU,WAAW,aAAe,WAAW,YAAc,WAAW,eAAiB,WAAW,aAAe,WAAW,aAAe,WAAW,YAAc,WAAW,YAAc,WAAW,cAAgB,WAAW,aAAe,WAAW,WAAa,WAAW,eAAiB,WAAW,cAAgB,WAAW,aAAe,WAAW,WAAa,WAAW,uBAAyB,WAAW,cAAgB,WAAW,kBAAoB,WAAW,aAAe,WAAW,cAAgB,WAAW,KAAO,WAAW,WAAa,WAAW,YAAc,WAAW,SAAW,WAAW,aAAe,YCyEpkC,GAAexI,EAAAA,EAAAA,IAjDM2J,EAAGC,UAASnG,YAAWoG,oBAC1C,MAAMC,GAAOC,EAAAA,EAAAA,MAEP,sBACJC,IACEpJ,EAAAA,EAAAA,MAgCJ,OACEwC,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOsG,aAAcxG,IAClDL,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOuG,aACrB9G,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,EAAOwG,aAAcL,EAAK,iBAC3C1G,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOyG,eACpBR,GAAS/G,WAAawH,EAAAA,IAZ3BjH,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,iBACEvE,IAAZqJ,GAAwBU,EAAAA,EAAAA,IAA4BV,EAAQ9G,OAAQ8G,EAAQ/G,UAAY,KAvB3FO,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9H,KAAK,OAAO+B,KAAK,gBACdjE,IAAZqJ,GAAyBA,EAAQ/G,WAAa2H,EAAAA,KAC3CC,EAAAA,EAAAA,IAAkBX,EAAMF,GAAW,IACtCC,GACCzG,EAAAA,GAAAA,cAACsH,EAAAA,EAAW,CACVjH,UAAWE,EAAOgH,eAClBhG,QAASA,IAAMqF,EAAsB,CAAC,IAEtC5G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,EAAOiH,aAClB9F,KAAK,e,qCC5CnB,SAAgB,KAAO,WAAW,KAAO,WAAW,OAAS,WAAW,cAAgB,WAAW,OAAS,WAAW,MAAQ,WAAW,YAAc,WAAW,SAAW,WAAW,aAAe,WAAW,YAAc,WAAW,QAAU,WAAW,iBAAmB,YCgGpR,GAAe9E,EAAAA,EAAAA,IA/De6K,EAAGC,mBAC/B,MAAM,2BAAEC,IAA+BnK,EAAAA,EAAAA,OACjC,OACJoK,EAAM,QAAEC,EAAO,MAAEC,EAAK,YAAEC,EAAW,MAAEvC,EAAK,MAAEwC,GAC1CN,EACEhB,GAAO1I,EAAAA,EAAAA,KAEPgE,GAAOiG,EAAAA,EAAAA,GAbf,SAA4BL,GAC1B,OAAQ9K,IACNoL,EAAAA,EAAAA,KAAWpL,EAAQ8K,EAEvB,CAS2BO,CAAmBP,IAEtCzI,GAAcX,EAAAA,EAAAA,GAAgB,KAClCmJ,EAA2B,CAAED,mBAG/B,IAAK1F,EACH,OAGF,MAAMoG,EAAaN,EAAQO,KAAKC,MAAQ,IAClCC,GAAgBC,EAAAA,EAAAA,GAA2B,IAARV,EAAcpB,EAAK7D,MAAM,EAAM,QAExE,OACE7C,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOkI,KAAMlH,QAASpC,GACpCa,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOmI,SACrB1I,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CAACX,KAAK,SAASY,KAAMA,IAC5BhC,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9G,UAAWE,EAAOoI,iBAAkBtJ,KAAK,OAAO+B,KAAK,WAEjEpB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOqI,MACrB5I,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,EAAOiF,QAAQ7C,EAAAA,EAAAA,IAAWI,EAAAA,EAAAA,IAAa2D,EAAM1E,IAAS,KACpEwD,GACCxF,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,EAAOsI,UAClBb,GAAShI,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CAAC+G,SAAUd,EAAO5G,KAAK,WACvCuB,EAAAA,EAAAA,GAAW6C,IAGhBxF,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,EAAOuC,aAClB4D,EACC0B,EAAa,2BACTL,EAAc,2BAA6B,0BAC/CQ,KAINvI,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOwI,QACnBhB,GAAeK,EACfpI,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOyI,aACpBtC,EAAK0B,EAAa,iCAAmC,qCAGxDpI,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO0I,eACrBjJ,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9G,UAAWE,EAAO2I,KAAM7J,KAAK,OAAO+B,KAAK,aACnDpB,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,EAAOb,SACrByJ,EAAAA,EAAAA,IAActB,EAAQnI,UAG3BM,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO6I,cAAe1C,EAAK,8C,0BC/EhD,SAAS2C,EAAoBtL,EAAoB2I,EAAc4C,GACpE,GAAIA,EAAYC,aACd,OAAO7C,EACL,yBACA,CAAE8C,MAAOF,EAAYC,cACrB,CACEE,WAAW,EACXC,YAAaJ,EAAYC,eAK/B,GAAID,EAAYK,aACd,OAAOC,EAAiBN,EAAY5J,QAChCgH,EAAK,2BACLA,EAAK,+BAEX,GAAI4C,EAAYO,cACd,OAAOnD,EAAK,0BAGd,GAAI4C,EAAYQ,iBACd,OAAO/L,EAAQ,6BAA6BgM,EAAAA,EAAAA,IAAcT,EAAYQ,mBAExE,GAAIR,EAAYU,cAAe,OAAOjM,EAAQ,4BAC9C,GAAIuL,EAAYW,cAAe,OAAOlM,EAAQ,qBAC9C,GAAIuL,EAAYY,mBAAoB,OAAOZ,EAAY9D,OAASzH,EAAQ,4BACxE,GAAIuL,EAAYa,WAAY,OAAOpM,EAAQ,sBAC3C,GAAIuL,EAAYc,eAAgB,OAAOrM,EAAQ,8BAC/C,GAAIuL,EAAYe,SAAU,OAAOtM,EAAQ,iBACzC,GAAIuL,EAAYgB,OACd,OAAIhB,EAAY5J,OAAOD,WAAawH,EAAAA,IAC3BP,EAAK,mBAEP3I,EAAQ,qBAEjB,GAAIuL,EAAYiB,SACd,OAAOX,EAAiBN,EAAY5J,QAAU3B,EAAQ,wBAA0BA,EAAQ,uBAG1F,MAAMyM,EAAclB,EAAYtH,OAAQyI,EAAAA,EAAAA,IAAoBnB,KACvDoB,EAAAA,EAAAA,IAAgCpB,SAAiBnM,EAEtD,OAAIqN,EAAmBA,EAAWhF,OAASzH,EAAQyM,EAAWG,UAEvDrB,EAAY9D,KACrB,CAOO,SAASoE,EAAiBgB,GAC/B,OAAIA,EAAenL,WAAa2H,EAAAA,KANIyD,EAOLD,GANflL,OAAemL,EAAYnL,OAAS,EAC7CmL,EAAYC,MAAQ,EAOpBF,EAAelL,OAAS,EAT1B,IAA+BmL,CAUtC,C,kDCnEA,UAAgB,KAAO,WAAW,QAAU,WAAW,MAAQ,WAAW,MAAQ,WAAW,UAAY,WAAW,WAAa,WAAW,WAAa,WAAW,WAAa,WAAW,OAAS,WAAW,KAAO,WAAW,OAAS,YCoE3O,SAASE,IAAiB,YACxBC,EAAW,MACXC,EAAK,UACL5K,IAMA,MAAM6K,EAASF,EAAYG,OAASH,EAAYhD,MAC1CoD,GAAYC,EAAAA,EAAAA,IAAaH,EAAO,aAChCI,GAAQC,EAAAA,EAAAA,IAAiBL,GAEzBM,GAAYC,EAAAA,GAAAA,GAASL,GAE3B,OACEpL,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,GAAO+K,WAAiBnO,IAAV8N,GAAuB,2BAA2BA,IAAS5K,IACrGiL,GAAStL,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOmL,OAAQvJ,IAAKmJ,EAAOjJ,IAAI,KACxDmJ,GAAaxL,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOoL,KAAMxJ,IAAKqJ,EAAWnJ,IAAI,KAGrE,CAEA,UAAezF,EAAAA,EAAAA,IAnEQgP,EACrBV,QAAO7K,YAAWwL,uBAAsBtK,cAExC,MAAMiI,EAAQsC,KAAKC,IAAIb,EAAM5F,OAAQuG,EALX,EADR,GAOZG,EAAW,cAAed,EAAM,GACtC,OACElL,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GACTC,GAAOkI,KACPlI,GAAO,YAAYiJ,KACnBqC,GAAwBtL,GAAOmI,QAC/BrI,GAEF4L,IAAI,MACJ1K,QAASA,GAER2J,EAAMgB,MAAM,EAAG1C,GAAO2C,UAAUC,IAAI,CAACC,EAAMC,EAAGC,KAC7C,MAAMC,EAAYD,EAAIjH,OAASgH,EAAI,EACnC,MAAO,cAAeD,EACpBrM,EAAAA,GAAAA,cAACyM,GAAAA,EAAY,CACXpM,UAAWE,GAAO+K,MAClBoB,WAAS,EACT7N,MAAOwN,EAAKxN,MACZC,OAAQuN,EAAKvN,OACb6N,aAAcN,EAAKO,WAAWC,UAGhC7M,EAAAA,GAAAA,cAAC+K,GAAgB,CACf1K,WAAWC,EAAAA,EAAAA,GAAeuL,GAAwBW,EAAY,GAAKjM,GAAOuM,WAC1E9B,YAAaqB,EACbpB,MAAOuB,MAIZR,GACChM,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOiJ,OACrBxJ,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,eACVwJ,EAAM5F,OAAS,EAAI4F,EAAM5F,OAAS,OC7D7C,IAAgB,KAAO,WAAW,KAAO,WAAW,MAAQ,WAAW,OAAS,WAAW,MAAQ,WAAW,YAAc,WAAW,KAAO,WAAW,SAAW,WAAW,SAAW,WAAW,QAAU,WAAW,iBAAmB,WAAW,qBAAuB,WAAW,YAAc,YC0MxS,IAAe1I,EAAAA,EAAAA,IAxJcmQ,EAAGzD,cAAajJ,gBAC3C,MAAM,0BAAE2M,IAA8BxP,EAAAA,EAAAA,OAChC,KACJyP,EAAI,OACJvN,EAAM,MACNsI,EACAhG,KAAMkL,EAAe,cACrBjD,EAAa,mBACbC,GACEZ,EACE5C,GAAOC,EAAAA,EAAAA,KACP5I,GAAUC,EAAAA,EAAAA,KAEV4J,EAAkC,SAAzBsF,EAAgB7N,KAAkB6N,EAAgB3N,QAAKpC,EAChE6E,GAAOiG,EAAAA,EAAAA,GApBf,SAA4BL,GAC1B,OAAQ9K,GACN8K,GAASM,EAAAA,EAAAA,KAAWpL,EAAQ8K,QAAUzK,CAE1C,CAgB2BgQ,CAAmBvF,IACtC2C,EAAWjB,EAAYiB,SACvB6C,EAAkC,mBAAnB7C,GAAUlL,KACzBgO,EAAc9C,IAAY+C,EAAAA,EAAAA,IAAmB/C,GAE7CgD,GAAO1N,EAAAA,EAAAA,IAAQ,KACnB,IACIiD,EACAiG,EACAyE,EAHAhI,EAAQ6D,EAAoBtL,EAAS2I,EAAM4C,GAK/C,IAAKmB,EAAAA,EAAAA,IAAoBnB,GAGlB,CACL,MAAMkB,GAAaE,EAAAA,EAAAA,IAAgCpB,GACnD9D,EAAQgF,EAAWhF,OAASzH,EAAQyM,EAAWG,UAC/C7H,EAAc/E,EAAQyM,EAAWiD,aACjCD,EAAahD,CACf,MAPE1H,EAAcd,IAAQe,EAAAA,EAAAA,IAAahF,EAASiE,GAC5CwL,EAAaxL,GAAQ0L,EAAAA,GAqCvB,OA7BIpE,EAAYU,eAAgD,mBAA/BV,EAAYiB,UAAUlL,OACrDyD,EAAc4D,EAAK,aAAc,CAAElB,MAAO8D,EAAYiB,SAAS/E,MAAOmI,OAAQrE,EAAYiB,SAASoD,UAGjGrE,EAAYK,cAA+C,mBAA/BL,EAAYiB,UAAUlL,OACpDyD,EAAc4D,EAAK,aAAc,CAAElB,MAAO8D,EAAYiB,SAAS/E,MAAOmI,OAAQrE,EAAYiB,SAASoD,UAGjGrE,EAAYO,gBACdrE,EAAQ6D,EAAoBtL,EAAS2I,EAAM4C,GAC3CxG,OAAc3F,GAGZmM,EAAYtB,QACdwF,OAAarQ,GAGXmM,EAAYsE,WACd7E,EAAShL,EAAQ,kBAGfuL,EAAYuE,YACd9E,EAAShL,EAAQ,gBAGfuL,EAAYwE,YACd/E,EAAShL,EAAQ,iBAGZ,CACLyH,QACA1C,cACA0K,aACAzE,WAED,CAAChL,EAAS2I,EAAM1E,EAAMsH,IAEnByE,GAAiBlO,EAAAA,EAAAA,IAAQ,KAC7B,GAAIuN,EAAc,CAChB,MAAM,SAAEY,IAAaC,EAAAA,EAAAA,IAAkB1D,GACjC2D,EAAmB,CAACF,EAAUG,YAAaH,EAAUI,WAE3D,OACEpO,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UAAWE,GAAO+N,qBAClBJ,iBAAkBA,IAEpBlO,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBlO,UAAWE,GAAO8M,YAClBmB,QAASnB,EACTjM,KA9Fc,GA+FdqN,MAAM,IAId,CAEA,OAAIpB,EAEArN,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBlO,UAAWE,GAAO8M,YAClBmB,QAASnB,EACTjM,KA1GgB,GA2GhBqN,MAAM,IAKRxE,EACKjK,EAAAA,GAAAA,cAAC4L,GAAc,CAACV,MAAOjB,EAAe4B,sBAAoB,IAIjE7L,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CAACX,KAAK,SAAS0H,SAAUd,EAAOhG,KAAMuL,EAAKC,aACjD5P,QAAQsM,IACPlK,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9G,UAAWE,GAAOoI,iBAAkBtJ,KAAK,OAAO+B,KAAK,YAIpE,CAACgM,EAAcnD,EAAejC,EAAOuF,EAAKC,WAAYtD,EAAoBK,EAAU8C,IAEjFlO,GAAcX,EAAAA,EAAAA,GAAgB,KAClCwO,EAA0B,CAAE1D,kBAGxBoF,EAAmB9E,EAAiBlK,GAAUa,GAAOoO,SAAWpO,GAAOqO,SAE7E,OACE5O,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOkI,KAAMpI,GAAYkB,QAASpC,GAC/Da,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOmI,SACpBqF,GAEH/N,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOqI,MACrB5I,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,GAAOiF,OAAQ+H,EAAK/H,OAClC+H,EAAKzK,aACJ9C,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,GAAOuC,cAAcH,EAAAA,EAAAA,GAAW4K,EAAKzK,cAErD9C,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,GAAO0M,OAClB4B,EAAAA,EAAAA,IAA8B,IAAP5B,EAAalP,EAAQ8E,MAAM,GAClD0K,EAAKxE,QAAU,OAAOwE,EAAKxE,YAGhC/I,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOf,OACrBQ,EAAAA,GAAAA,cAAA,QACEK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOb,OAAQgP,KAExCI,EAAAA,EAAAA,IAA6BpI,EAAMhH,IAErCA,EAAOD,WAAa2H,EAAAA,KAAuBpH,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9G,UAAWE,GAAO2I,KAAM7J,KAAK,OAAO+B,KAAK,aAC9F1B,EAAOD,WAAawH,EAAAA,KAAqBjH,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,UAAUrB,UAAWqO,QCxJ5EK,GAAoB,CAAC,MAAO,UAAW,YACvCC,GAA0C,CAC9C,uBACA,4BACA,6BAEIC,GAAyB,uBAuW/B,IAAerS,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YAKF,CACLmS,kBALwBnS,GAAO0C,WAAawH,EAAAA,IAC1CrJ,QAAQd,EAAOqS,KAAKC,SAASC,KAAKC,aAAahK,QAC/C1H,QAAQd,EAAO0C,OAAO4P,SAASC,KAAKC,aAAahK,QAInDiK,kBAAmBzS,EAAO0C,MAC1BgQ,gBAAiB1S,EAAOqS,IACxBM,gBAAgBC,EAAAA,EAAAA,KAA+B5S,GAC/C6S,WAAY7S,EAAO8S,WAAWD,YAAcE,EAAAA,IAC5CC,YAAahT,EAAO8S,WAAWE,aAAeC,EAAAA,IAC9CC,gBAAgBC,EAAAA,EAAAA,GAAqBnT,GAAQkT,iBAb/BnT,CAtVMqT,EACxBnT,QAAOwS,oBAAmBC,kBAAiBC,gBAAeP,oBAAmBS,aAAYG,cAAaE,qBAEtG,MAAM,uBACJG,EAAsB,sBAAEC,EAAqB,uBAAEC,EAAsB,4BAAEC,EAA2B,YAAEhT,EAAW,QAC/GiT,IACE/S,EAAAA,EAAAA,MAEEiC,EAAW1C,GAAO0C,UAAY2H,EAAAA,IAC9BoJ,EAAe/Q,IAAawH,EAAAA,IAAoBuI,EAAkBD,GAClE,QAAE/I,EAAO,QAAE4I,GAAYoB,GAAgB,CAAC,GACxC,cAAEC,GAAmBhR,IAAa2H,EAAAA,KAAuBmI,GAAsB,CAAC,EAEhFxR,GAAUC,EAAAA,EAAAA,KACV0I,GAAOC,EAAAA,EAAAA,MAENvI,EAAgBC,IAAmBF,EAAAA,EAAAA,KAAS,IAC5CuS,EAAkBC,IAAuBxS,EAAAA,EAAAA,IAAS,IAClDyS,EAAoBC,EAAgBC,IAAkBC,EAAAA,EAAAA,KAEvDpT,GAASC,QAAQb,IAAUwS,GAAqBC,KAEhD,mBACJwB,GAAkB,eAAEC,GAAc,WAAEC,GAAU,MAAEC,IAC9CpU,GAAS,CAAC,EAERqU,GAAkBJ,IAAsBC,IAAkBC,IAAcC,GAExEE,GAA2BL,IAAoBM,MAAMC,SAASC,aAC/DR,IAAoBS,kBAAkBC,qBAAqBhS,QAC3DuR,IAAgBvR,QAChBwR,IAAYS,KAAKnS,OACjB2R,IAAOS,cACNC,GAAcR,GAA2BA,IAA4B7K,GAAS9G,QAAU,QAAKvC,EAC7F2U,IAAkBjS,EAAAA,EAAAA,IAAQ,KAC9B,MAAM/C,GAASuH,EAAAA,EAAAA,MAEf,GAAI4M,GAAgB,CAClB,MAAMc,GAAUC,EAAAA,EAAAA,KAAWlV,EAAQmU,GAAegB,QAClD,IAAKF,EAAS,OACd,OAAOhU,EAAQ,4BAA4BmU,EAAAA,EAAAA,IAAanU,EAASgU,GACnE,CAEA,GAAIf,GAAoB,CACtB,MAAMmB,EAAMnB,GAAmBM,MAAMc,OAAQlV,EAAAA,EAAAA,KAAWJ,EAAQkU,GAAmBM,KAAKc,YAASjV,EACjG,IAAKgV,EAAK,OACV,OAAOpU,EAAQ,mBAAmBsU,EAAAA,EAAAA,IAAgBF,GACpD,CAEA,GAAIjB,GAAY,CACd,MAAMlP,GAAO9E,EAAAA,EAAAA,KAAWJ,EAAQoU,GAAWtJ,QAC3C,IAAK5F,EAAM,OACX,OAAOjE,EAAQ,uBAAuBgF,EAAAA,EAAAA,IAAa2D,EAAM1E,GAC3D,CAEA,MAvEyB,SAuErBmP,IAAOmB,QACFvU,EAAQ,uBAGboT,IAAOmB,UAAYC,EAAAA,IACd7L,EAAK,uCAAmCvJ,EAAW,CACxDqV,cAAc,EACd/I,WAAW,SAHf,GAQC,CAACwH,GAAgBD,GAAoBE,GAAYC,IAAOmB,QAAS5L,EAAM3I,IAEpE0U,GAAkB7U,QAAQwR,GAASC,KAAKC,aAAahK,SAAW8L,IAChEsB,IAAwBtB,GAExBuB,IAAc9S,EAAAA,EAAAA,IAAQ,KAC1B,MAAM+S,EAAmBxD,GAASC,KAAKC,aAAahK,QAAU,EAC9D,OAAwB,GAApBsN,EACK,UAEe,GAApBA,EACK,WAEe,GAApBA,EACK,QAEF,SACN,CAACxD,GAASC,KAAKC,aAAahK,SAEzBuN,IAAuChT,EAAAA,EAAAA,IAAQ,IAC5CmP,GAAsB5C,IAAK0G,IAAG,CACnCtN,MAAOkB,EAAKoM,MAEb,CAACpM,KAEJpI,EAAAA,EAAAA,IAAU,KACHX,KACHU,GAAgB,GAChBsS,EAAoB,GACpBG,MAED,CAACnT,MAEJW,EAAAA,EAAAA,IAAU,KACJ8S,GACFP,IAIFC,KACC,CAACM,KAEJ,MAAM2B,IAAUlT,EAAAA,EAAAA,IAAQ,KACtB,IAAKlC,GAAQ,OAEb,MACMmC,EADO/B,EAAQ,qCACFgC,MAAM,UACzB,MAAO,CACLD,EAAM,GACNE,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKnC,EAAQ,gBAAiBoC,KAAMpC,EAAQ,4CACtD+B,EAAM,KAEP,CAACnC,GAAQI,IAyFNiV,IAA6BxU,EAAAA,EAAAA,GAAgB,KACjD4R,EAAsB,CACpB/Q,KAAM0P,GAAkB2B,GACxBuC,MAAOxT,IAAawH,EAAAA,QAIlBiM,IAA8B1U,EAAAA,EAAAA,GAAgB,KAClD6R,MAGI8C,IAAqC3U,EAAAA,EAAAA,GAAgB,KACzD8R,EAA4B,CAAC,KAGzB8C,IAAiB5U,EAAAA,EAAAA,GAAiBY,IACtC9B,EAAY,CACV+B,KAAM,QACNG,MAAOJ,EAAOI,MACdC,SAAUL,EAAOK,SACjBC,OAAQN,EAAOM,WAIb2T,IAAiB7U,EAAAA,EAAAA,GAAgB,KACrC+R,EAAQ,CAAErQ,IAAK4P,EAAawD,iBAAiB,MAG/C,OACEtT,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJC,WAAWC,EAAAA,EAAAA,GAAeC,EAAOkI,MAAOyG,IAAsB0B,GAAsBrQ,EAAOgT,SAC3F5V,OAAQA,GACRiD,QAASuP,EACTqD,YAAa,mBAAmBb,MAEhC3S,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOM,KAAM,iBAAkBC,SAzClE,SAAsBC,GACpB,MAAM,UAAEC,GAAcD,EAAEE,cAExB5C,EAAgB2C,GAAa,IAC/B,GAsCMhB,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLC,OAAK,EACLC,KAAK,UACLf,UAAWE,EAAOc,YAClBC,MAAM,cACNC,QAASA,IAAM4O,IACf3O,UAAWkF,EAAK,UAEhB1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,WAEZjC,IAAawH,EAAAA,KAAqBjH,EAAAA,GAAAA,cAACuG,EAAY,CAACC,QAASA,EAASnG,UAAWE,EAAOkT,eACrFzT,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOoB,OAAQvD,GAAkBmC,EAAOqB,eACrE5B,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,EAAOsB,gBACnB9D,EAAQ,mBAGbiC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOyC,SACpBvD,IAAawH,EAAAA,IAhGSyM,MAC7B,MAAMC,GAAYzM,EAAAA,EAAAA,IAA4BV,GAAS9G,QAAU,EAAGuH,EAAAA,KACpE,OACEjH,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC4T,EAAAA,EAAe,CACdC,MAAM,mBACNvS,MAAM,OACNkE,MAAOkB,EAAK,eACZ5D,YAAa4D,EAAK,uBAClBoN,YAAanW,KAEfqC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOwT,qBACrB/T,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOyT,YACrBhU,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,UAAUrB,UAAWE,EAAO0T,iBACtCN,GAEF/V,QAAQ+R,IACP3P,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,EAAO2T,UACrB,MAAKtR,EAAAA,EAAAA,KACJuR,EAAAA,EAAAA,GAAgB3N,GAAS9G,QAAU,EAAGiQ,GAAY,GAClD,MACAjJ,EAAK7D,UAKb7C,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLb,UAAWE,EAAO6T,YAClB7S,QAAS8R,GACTgB,OAAK,GAEJ3N,EAAK,6BAiE4BgN,GA1ItC1T,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC4T,EAAAA,EAAe,CACdC,MAAM,eACNvS,MAAM,OACNkE,MAAOqM,GAAc9T,EAAQ,mBAAoBsT,IAA4BtT,EAAQ,iBACrF+E,aAAaH,EAAAA,EAAAA,GACXmP,IAAmB/T,EAAQ,qBAC3B,CAAC,kBAAmB,UAEtB+V,YAAanW,KAEd8R,IAAkBmB,GACjB5Q,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLb,UAAWE,EAAO+T,WAClB/S,QAASsP,EACTwD,OAAK,GAEJtW,EAAQ,2BAGZ0R,IAAkBmB,GAAsB8B,IACvC1S,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLqT,QAAM,EACNC,mBAAiB,EACjBnU,UAAWE,EAAO+T,WAClBD,OAAK,EACL9S,QAAS4R,IAERpV,EAAQ,sBAGZ6S,GAAsBrB,GAAmBkF,cACxCzU,EAAAA,GAAAA,cAACiD,EAAAA,EAAmB,CAClB4O,YAAaA,GACb3O,QAASqM,EAAkBkF,aAC3BlT,QAAS6R,OAyGZxC,GACC5Q,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOmU,KACpB3B,IAGJtT,IAAawH,EAAAA,KACZjH,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOoU,MACpBjO,EAAK,iBAGT+L,IAAmB7U,QAAQ6S,GAAemE,KAAKtP,SAC9CtF,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOyC,SACrBhD,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,EAAOsU,cAAe9W,EAAQ,wBAC7CiC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOkQ,eACpBA,GAAemE,KAAKxI,IAAK1E,GACxB1H,EAAAA,GAAAA,cAACyH,EAAqB,CACpBqL,IAAKpL,EAAanI,GAClBmI,aAAcA,KAGjB+I,GAAeqE,YACd9U,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLqT,QAAM,EACNQ,SAAUtE,EAAcuE,UACxB5T,KAAK,UACLoT,mBAAiB,EACjBnU,UAAWE,EAAO0U,SAClB1T,QAAS2R,IAETlT,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,OAAOrB,UAAWE,EAAO2U,eACnCnX,EAAQ,gCAMlB0U,IACCzS,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO4U,WACrBnV,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO6U,aACrBpV,EAAAA,GAAAA,cAACqV,EAAAA,GAAU,CACT3T,MAAM4T,EAAAA,EAAAA,GAAsB,iBAAkBtF,OAAgB7S,EAAWuJ,EAAK6O,OAC9EC,UAAW9E,EACX+E,YAAazG,GAAsB1J,OACnCoQ,qBAAmB,EACnBrV,UAAWE,EAAOoV,YAElB3V,EAAAA,GAAAA,cAAC4V,EAAAA,EAAc,CACbC,WAAY7C,GACZ8C,MAAO1G,IAAUL,GAAkB2B,KAAoBpB,aACvDyG,uBAAwB,IAAIxV,EAAOM,OACnCmV,aAAc,IAAI/G,KAClB5O,UAAWE,EAAO+O,aAClB2G,YAAU,EACVC,sBAAoB,GAEnB9G,IAAUL,GAAkB2B,KAAoBpB,aAAalD,IAAK9C,GACjEtJ,EAAAA,GAAAA,cAAC+M,GAAoB,CACnB+F,IAAK,GAAGxJ,EAAY/J,MAAM+J,EAAYsE,WACtCtE,YAAaA,EACbjJ,UAAW4O,SAMrBjP,EAAAA,GAAAA,cAACmW,EAAAA,EAAO,CACN9V,UAAWE,EAAO6V,KAClBC,aAAc9V,EAAO+V,IACrBC,UAAW7F,EACX0F,KAAMvD,GACN2D,YAAa7F,U,oDChW3B,MAwKA,IAAe/T,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAMoV,EAAMpV,GAAOuU,MAAMc,OAAQlV,EAAAA,EAAAA,KAAWJ,EAAQC,EAAMuU,KAAKc,YAASjV,EAElEsZ,EAAoD,YAA9B1Z,GAAO2Z,cAAcrX,KAAqBtC,EAAM2Z,kBAAevZ,EACrFwZ,EAAUF,GACZG,EAAAA,EAAAA,KAAkB9Z,EAAQ2Z,EAAoBxE,OAAQwE,EAAoBI,gBAAa1Z,EACrF2Z,EAAOL,GAAsBzE,EAAAA,EAAAA,KAAWlV,EAAQ2Z,EAAoBxE,aAAU9U,EAC9E4Z,EAAcJ,GAASjW,QAAQsW,UAErC,MAAO,CACL7E,MACA5C,kBAAmBzS,EAAO0C,MAC1ByX,iBAAkBF,EAAcJ,OAAUxZ,EAC1C+Z,cAAeH,EAAcD,OAAO3Z,IAdtBN,CAxKKsa,EACvBpa,QACAoV,MACA5C,oBACA0H,mBACAC,oBAEA,MAAM,uBAAEE,EAAsB,sBAAExQ,EAAqB,oBAAEyQ,IAAwB7Z,EAAAA,EAAAA,OACxEwX,EAAWsC,EAAaC,IAAiBxG,EAAAA,EAAAA,KAC1CpT,EAASC,QAAQb,GAAO2Z,cAAgBnH,GAExCiI,GAAYC,EAAAA,GAAAA,GAAY1a,GACxBc,EAAiBd,GAASya,GAE1B,KAAElG,EAAI,iBAAEG,GAAqB5T,GAAkB,CAAC,EAChD6B,EAAS4R,GAAMC,SAASC,aAAeC,GAAkBC,qBAAqBhS,OAC9EgY,EAAoB9Z,QAAQ0T,GAAMC,QAAQrH,oBAC1CyN,GAAmBlG,GAAkBC,oBAErC1J,EAAQsJ,GAAMtJ,MAEdjK,GAAUC,EAAAA,EAAAA,KACV0I,GAAOC,EAAAA,EAAAA,MAEbrI,EAAAA,EAAAA,IAAU,KACHX,GACH4Z,KAED,CAAC5Z,IAEJ,MAAMia,GAAkB/X,EAAAA,EAAAA,IAAQ,KAC9B,IAAKhC,GAAgB6Y,aACnB,MAAO,GAGT,MAAMmB,GAAUxF,EAAAA,EAAAA,IAAgBF,GAC1B2F,EAAY/Z,EAAQ,kCAAmC2B,GAE7D,GAAIuX,EAAkB,CACpB,MAAMhN,EAAgBgN,EAAiBvW,QAAQsW,UAAW/M,cACpD8N,EAAe9N,EAAc+N,MAAO9M,IAAWA,EAAM+M,UACrDC,EAAejO,EAAc+N,MAAO9M,GAAUtN,QAAQsN,EAAM+M,WAE5DE,EAA2Bpa,EAAfga,EAAuB,wBACrCG,EAAuB,wBACb,QAFoDjO,EAAc3E,QAI1E8S,GAAelG,EAAAA,EAAAA,IAAanU,EAASmZ,GAC3C,OAAOnZ,EAAQ,4BAA6B,CAACoa,EAAWC,EAAcN,GACxE,CAEA,OAAIrG,EACK/K,EAAK,qBAAsB,CAChCoQ,KAAMrF,EAAiBjM,MACvB9F,UACC,CACD+J,WAAW,EACX+I,cAAc,EACd9I,YAAahK,IAIbgY,EACKhR,EAAK,wBAAyB,CACnChF,KAAM4P,EAAK9L,MACX9F,SACAyS,IAAK0F,GACJ,CACDnO,YAAahK,IAIV3B,EAAQ,sBAAuB,CAACuT,EAAM9L,MAAOqS,EAASC,KAC5D,CACDja,GAAgB6Y,aAAcvE,EAAKpU,EAAS2B,EAAQuX,EAAkBxF,EAAkBiG,EAAmBpG,EAC3G4F,EAAexQ,IAGX2R,GAAiBxY,EAAAA,EAAAA,IAAQ,KAC7B,GAAI4R,EACF,OAAO/K,EAAK,qBAAsB,CAChC4R,KAAMtY,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKwG,EAAK,0BAA2BvG,KAAMuG,EAAK,iCAC/D,CACD+C,WAAW,KAKd,CAACgI,EAAkB/K,IAEhB6R,GAAmB1Y,EAAAA,EAAAA,IAAQ,KAC/B,GAAK4R,EAIL,OAAO+G,EAAAA,EAAAA,IAAwB/G,IAC9B,CAACA,IAEEgH,GAAgBja,EAAAA,EAAAA,GAAgB,KACpC,MAAMgI,EAAU+I,GAAmB/I,aACpBrJ,IAAXuC,QAAoCvC,IAAZqJ,IAIxB9G,EAAS8G,EAAQ9G,OACnBkH,EAAsB,CACpBoK,mBAAoBjU,KAKxBsa,EAAoB,CAAC,GACrBC,QAGF,OACEtX,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJK,iBAAkBF,EAAOmY,eACzB/a,OAAQA,EACRgb,wBAAsB,EACtBhY,QAAM,EACNC,QAASwW,GAETpX,EAAAA,GAAAA,cAACuG,EAAY,CAACC,QAAS+I,GAAmB/I,QAASnG,UAAWE,EAAOkT,eACrEzT,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOqY,cAAe3M,IAAKlO,EAAQwX,MAAQ,MAAQ,OAChE0B,EACCjX,EAAAA,GAAAA,cAAC4L,GAAc,CAACV,MAAO+L,EAAiBvW,QAAQsW,UAAW/M,gBACzDsO,EACFvY,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CAAC1B,UAAWE,EAAOsY,aAAc7W,KAAMuW,EAAkBnX,KAAK,UACrEpB,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9H,KAAK,OAAO+B,KAAK,WAAWf,UAAWE,EAAOuY,cAG1D9Y,EAAAA,GAAAA,cAAC+Y,GAAAA,EAAS,CACR/W,KAAOgG,OAAc7K,EAANgV,EACf6G,eAAgBhR,EAChBiR,WAAW,QACXC,UAAU,OACVC,WAAWhQ,EAAAA,EAAAA,IAAczJ,GACzB0Z,eAAgB7Y,EAAO8Y,YACvBhZ,UAAWE,EAAOsY,eAGtB7Y,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAO+Y,uBAAwBnX,IAAKC,EAAiBC,IAAI,GAAGC,WAAW,KAEzFtC,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,EAAOkC,YACA1E,EAAnBwa,EAA2B,sBAAiC,8BAE9DZ,GAAmB3X,EAAAA,GAAAA,cAACuZ,GAAAA,EAAQ,CAAClZ,UAAWE,EAAOiZ,QAAS5R,OAAQ0J,GAAMc,QACvEpS,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,EAAOuC,cACpBH,EAAAA,EAAAA,GAAWiV,EAAiB,CAAC,kBAAmB,WAEnD5X,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACb,UAAWE,EAAOkZ,cAAerY,KAAK,UAAUG,QAASkX,EAAezD,UAAWA,GACxFtO,EAAKgR,EAAoB,+BAAiC,WAAY,CACrEhY,QAAQga,EAAAA,GAAAA,IAAkBhT,EAAMhH,EAAS,CAAEia,QAAQ,KAClD,CACDlQ,WAAW,KAGd7L,QAAQya,IACPrY,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,EAAOqZ,WAAYrZ,EAAOwG,cACtDsR,O,sFCjNX,MCwHA,IAAezb,EAAAA,EAAAA,IA/EUid,EACvBC,iBACAC,oBACAC,mBACAxU,QACAqD,WACAoR,eACA5Z,YACA6Z,kBAEA,MAAM,SACJC,IACE3c,EAAAA,EAAAA,MAEEkJ,GAAOC,EAAAA,EAAAA,MACNyT,EAASC,EAAWC,IAAevJ,EAAAA,EAAAA,KACpCyE,GAAY+E,EAAAA,GAAAA,GAAuB,CAACT,EAAgBC,EAAmBC,IACvEQ,EAAgBT,GAAmBU,UAEnCC,GAAwB7a,EAAAA,EAAAA,IAAQ,KACpC,MAAM8a,EAAiB,CAACZ,EAAkB5L,YAAa4L,EAAkB3L,WACnEwM,EAAeb,EAAkBa,aAEvC,OACE5a,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UDlEqE,WCmErE6N,iBAAkByM,EAClBC,aAAcA,EACdC,YAAab,EAAiBxL,WAGjC,CAACuL,EAAmBC,IAEvB,OACEha,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GD3EG,WC2EyBD,IAC1CL,EAAAA,GAAAA,cAACqV,EAAAA,GAAU,CACThV,UD7EsI,WC8EtIya,gBAAgBxa,EAAAA,EAAAA,GAAe,mBD9EoI,YC+EnKkV,UAAWA,EACXuF,UAAW,EACXrZ,KAAK,sBAEJgZ,EACD1a,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBlO,UDrF4G,WCsF5GmO,QAASsL,EAAetL,QACxBpN,KAhDW,IAiDX4Z,QAASZ,EACTa,aAAeC,GAAAA,QAA2B/d,EAAZkd,EAC9Bc,aAAeD,GAAAA,QAA6B/d,EAAdmd,KAGjC9U,GAASxF,EAAAA,GAAAA,cAAA,MAAIK,UD7F0K,YC6FhJmF,GACvC5H,QAAQiL,IACP7I,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GDhG+L,WCgG/J2Z,GDhGH,YCiGxCmB,OAAOC,EAAAA,GAAAA,GAAWb,GAAiB,UAAUA,KAC7CjZ,QAASA,KACH0Y,GACFE,EAAS,CAAE5a,GAAI0a,EAAa1a,OAI/BsJ,GAGJqR,GACCla,EAAAA,GAAAA,cAAA,KAAGK,UD5GsF,YC6GvFL,EAAAA,GAAAA,cAAA,aACG8O,EAAAA,EAAAA,IAA6BpI,EAAMwT,IAEZ,QAAzBA,EAAYza,UAAsBO,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9H,KAAK,OAAO+B,KAAK,WACpC,QAAzB8Y,EAAYza,UAAsBO,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,gBCjHxD,GAAwF,WAAxF,GAAoI,WAApI,GAAgL,WCiD1K4Z,GAA+B,CAAC,GAAI,IAsS1C,IAAe1e,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAM6K,EAA4C,SAAnC7K,GAAOuM,aAAatH,MAAM3C,MAAmBtC,EAAMuM,YAAYtH,KAAKzC,GAC7EyC,EAAO4F,GAASM,EAAAA,EAAAA,KAAWpL,EAAQ8K,QAAUzK,EAC7Coe,EAAwBze,EAAO8S,WAAW4L,mCAE1C5Q,EAAiB7N,GAAOuM,YAAY5J,OACpC+b,EAAmB1e,GAAOuM,YAAYgB,OACvCM,GAAgBnL,WAAa2H,EAAAA,KAAsBsU,EAAAA,EAAAA,KAA0B5e,EAAQ8N,GAAgBlL,SACpGic,EAAAA,EAAAA,KAAwB7e,EAAQ8N,GAAgBlL,aAAWvC,EAEjE,MAAO,CACL6E,OACA4Z,uBAAuBC,EAAAA,EAAAA,KAA4B/e,GACnDgf,WAAYL,EACZF,0BAfc1e,CAzRqCkf,EACvDhf,QACAiF,OACA4Z,wBACAE,aACAP,4BAEA,MAAM,iBAAES,EAAgB,gBAAEC,EAAe,2BAAEC,IAA+B1e,EAAAA,EAAAA,MAEpEkJ,GAAOC,EAAAA,EAAAA,KACP5I,GAAUC,EAAAA,EAAAA,MACV,YAAEsL,GAAgBvM,GAAS,CAAC,EAC5Bof,GAAqBze,EAAAA,EAAAA,MAErB0e,GAAkB5d,EAAAA,EAAAA,GAAgB,KACtC,MAAM0M,EAAQ5B,GAAaW,cACtBiB,GAEL+Q,EAAgB,CACdI,OAAQC,GAAAA,GAAkBC,iBAC1BC,gBAAiBtR,EAAMuR,QAASpQ,GAASqQ,OAAOC,OAAOtQ,QAIrDuQ,GAAwBpe,EAAAA,EAAAA,GAAgB,KAC5C2d,EAAmBzd,cAGfme,GAAyBre,EAAAA,EAAAA,GAAiBse,IAC9CX,EAAmBzd,QAAUoe,IAGzBC,GAAgBld,EAAAA,EAAAA,IAAQ,KAC5B,IAAKyJ,EACH,OAGF,MAAM,eACJc,EAAc,MAAEpC,EAAK,OAAEtI,EAAM,cAAEsK,EAAa,SAAEO,EAAQ,aAAEZ,EAAY,iBACpEG,GACER,EAEEqI,EAAOrI,GAAaiB,SACpB6C,EAA8B,mBAAfuE,GAAMtS,KACrBmP,EAAUlF,GAAaiB,UAAW+C,EAAAA,EAAAA,IAAmBhE,EAAYiB,UAAYuR,EAE7EkB,EAAiB5P,GAAea,EAAAA,EAAAA,IAAkB0D,QAAQxU,EAE1DqN,EAAclB,EAAYtH,OAAQyI,EAAAA,EAAAA,IAAoBnB,KACvDoB,EAAAA,EAAAA,IAAgCpB,SAAiBnM,EAEhDyK,EAAoC,SAA3B0B,EAAYtH,MAAM3C,KAAkBiK,EAAYtH,KAAKzC,QAAKpC,EACnE8f,EAAS3T,EAAYtH,MAAQjE,EAyPvC,SAA8BiE,GAC5B,OAAQA,EAAK3C,MACX,IAAK,WACH,MAAO,WACT,IAAK,aACH,MAAO,aACT,IAAK,WACH,MAAO,WACT,IAAK,aACH,MAAO,sBACT,IAAK,MACH,MAAO,sBACT,IAAK,MACH,MAAO,kDACT,QACE,MAAO,sCAEb,CA1Q+C6d,CAAqB5T,EAAYtH,OAEtEwD,EAAQ6D,EAAoBtL,EAAS2I,EAAM4C,GAE3C6T,EAAcnb,GAAQsH,EAAYuN,YAAc7M,GAClDoT,EAAAA,EAAAA,IAAepb,OAAM7E,EAAWmM,EAAYuN,gBAAa1Z,EACvDkgB,EAAsBrb,GAAQoI,GAAiBgT,EAAAA,EAAAA,IAAepb,OAAM7E,EAAWiN,QAAkBjN,EAEjG+N,EAAQ5B,EAAYW,cAEpBqT,EAAcpS,GAAO5F,QAAU,EAC/ByS,EAAe7M,GAAO8M,MAAOuF,IAAOA,EAAEpS,OACtC+M,EAAehN,GAAO8M,MAAOuF,IAAOA,EAAEvV,OAEtCmQ,EAA2Bpa,EAAfga,EAAuB,wBACrCG,EAAuB,wBACb,QAFoDoF,GAI5Dxa,EAAcwG,EAAYxG,cAC1BkH,GAAoC,mBAAnBO,GAAUlL,KAA4BkL,EAAS/E,WAAQrI,KACxE+N,EAAQiN,OAAYhb,GAEpBqgB,GAAuBtS,IAAUsD,IAAYlF,EAAYO,cACzD2D,EAAcxF,OAAsE7K,IAA3DsN,EAAAA,EAAAA,IAAoBnB,IAAgBtH,GAASwI,EAEtEiT,EAAmBrQ,GACvBpN,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,GD5I2E,aC6IxGP,EAAAA,GAAAA,cAAC6Z,GAAgB,CACfE,kBAAmBiD,EAAgBhP,SACnCgM,iBAAkBgD,EAAgBU,QAClC5D,eAAgBkD,EAAgBnJ,MAChCrO,MAAOmM,EAAKnM,MACZqD,SAAUnC,EAAK,sBAAuB,CAAEiH,OAAQgE,EAAKhE,SACrDuM,YAAa5Q,EAAY5J,UAKzBgP,EAAmB9E,EAAiBlK,GDxJsB,WAAtB,WC0JpCie,EACJ3d,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,IACb2K,GACClL,EAAAA,GAAAA,cAAC4L,GAAc,CACbvL,WAAWC,EAAAA,EAAAA,GD9J+U,WC8J3S,6BAC/C4K,MAAOA,EACP3J,QAAS6a,KAGXlR,GAASsD,GACTxO,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBuE,IAAKxJ,EAAY/J,GACjBiP,QAASA,EACTC,KAAMmN,EACNZ,QAAM,IAGTwC,GACCxd,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACL1B,UD7Kia,WC8Kja2B,KAAMwL,EACN1E,SAAUd,EACV5G,KAAK,QACLwc,YAAahB,KAGfpO,IAAYlF,EAAYO,eACxB7J,EAAAA,GAAAA,cAAC6d,GAAAA,EAAmB,CAClBxd,WAAWC,EAAAA,EAAAA,GDtL+R,YCuL1SgB,MAAM,OACNwc,mBAAoBjB,EACpBkB,YAAazC,KAGhB1d,QAAQ4H,IAAUxF,EAAAA,GAAAA,cAAA,MAAIK,UD5LwH,YC4L9FmF,GACjDxF,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IAAqBuC,GACnC9C,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IACZP,EAAAA,GAAAA,cAAA,QACEK,WAAWC,EAAAA,EAAAA,GAAeC,GAAemO,KAExCI,EAAAA,EAAAA,IAA6BpI,EAAMhH,IAErCA,EAAOD,WAAa2H,EAAAA,KAAuBpH,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9H,KAAK,OAAO+B,KAAK,WAClD,QAApB1B,EAAOD,UAAsBO,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,UAAUrB,UAAWqO,IAC7DpF,EAAYsE,UACX5N,EAAAA,GAAAA,cAAA,KAAGK,UDvMwM,YCuM3KqG,EAAK,cAGxC9I,QAAQ0L,EAAYC,cAAgBD,EAAYQ,kBAAoByR,IACnEvb,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IACXmG,EACC,oCACA,CAAEsX,SAASjU,EAAAA,EAAAA,IAAcwR,EAAyB,KAClD,CACE9R,WAAW,EACX+I,cAAc,MAQpByL,GAAuB,GAyB7B,IAAIC,GAvBA5U,GAAeQ,IAAqBR,EAAYC,eAAiBI,GACnEsU,GAAUE,KAAK,CACbpgB,EAAQ,wCACRA,EAAQ,4CAIRiM,GACFiU,GAAUE,KAAK,CACbpgB,EAAQ,kBACRA,EAAQ,2BAIR4L,GACFsU,GAAUE,KAAK,CACbpgB,EAAQ,kBACR6L,EAAiBN,EAAY5J,QACzBgH,EAAK,2BACLA,EAAK,iCAMXwX,GADElU,EACUjM,EAAQ,8BACX6L,EAAiBlK,IAAW4J,EAAYe,SACrCtM,EAAQ,yBACXuL,EAAYQ,kBAAqBR,EAAYC,cAAiBI,EAG3D5L,EADH6J,EACW,wBAEA,yBAJR7J,EAAQ,0CAOjBuL,EAAYO,eACfoU,GAAUE,KAAK,CACbD,GACAtW,EAAS,CAAEqK,OAAQrK,GAAWqV,GAAU,KAIxC3T,EAAYQ,kBAAoBR,EAAYC,cAC9C0U,GAAUE,KAAK,CACbzX,EAAK,gCACLgT,EAAAA,GAAAA,IAAkBhT,EAChB4C,EAAY5J,OAAOA,SAAW,IAAM4J,EAAYQ,kBAAoB,KACpE,CAAE6P,QAAQ,EAAOtZ,UD3Q0O,WC2Q9M+d,mBD3QwL,eC+QvOjB,GACFc,GAAUE,KAAK,CAACpgB,EAAQ,mCAAoCiC,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKid,EAAahd,KAAMgd,MAG5FE,GAAuB/T,EAAY5J,OAAOD,WAAa2H,EAAAA,MACzD6W,GAAUE,KAAK,CAACpgB,EAAQ,eAAgBiC,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKmd,EAAqBld,KAAMpC,EAAQ,gBAC1FkgB,GAAUE,KAAK,CAACpgB,EAAQ,QAASA,EAAQ,QAASuL,EAAY5J,OAAQ,QAGpE4J,EAAY/J,IACd0e,GAAUE,KAAK,CACbpgB,EAAQ,wBAENiC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OACEK,UD9RmL,WC+RnLkB,QAASA,MACP8c,EAAAA,GAAAA,IAAoB/U,EAAY/J,IAChCyc,EAAiB,CACfrF,QAAS5Y,EAAQ,gCAIpBuL,EAAY/J,IAEfS,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACpB,UDxS0T,WCwS9RqB,KAAK,YAM/Cuc,GAAUE,KAAK,CACbpgB,EAAQ,2BACR8Q,EAAAA,EAAAA,IAA0C,IAAnBvF,EAAY2D,KAAalP,EAAQ8E,MAAM,KAGhE,MACMyb,GADavgB,EAAQ,6BACQgC,MAAM,UAUzC,MAAO,CACL4B,OAAQyL,EAAeqQ,EAAmBE,EAC1CM,aACAM,OAVAve,EAAAA,GAAAA,cAAA,QAAMK,UDvT6Q,YCwThRie,GAAgB,GACjBte,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKnC,EAAQ,gBAAiBoC,KAAMpC,EAAQ,4CACrDugB,GAAgB,MASpB,CAAChV,EAAavL,EAAS2I,EAAM1E,EAAM4Z,EAAuBE,EAC3DP,EAAuBsB,IAGnB2B,GADgB/G,EAAAA,GAAAA,GAAYsF,IACUA,EAE5C,OACE/c,EAAAA,GAAAA,cAACye,GAAAA,EAAc,CACb9gB,OAAQC,QAAQ0L,GAChBjJ,UD5UkB,WC6UlBqe,YAA6C,mBAAhCpV,GAAaiB,UAAUlL,KACpCsC,OAAQ6c,GAAoB7c,OAC5Bsc,UAAWO,GAAoBP,UAC/BM,OAAQC,GAAoBD,OAC5BI,WAAY5gB,EAAQ,MACpB6C,QAASsb,OClVf,GAAiN,WCuC3MZ,GAA+B,CAAC,GAAI,IA0N1C,IAAe1e,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAM6K,EAAS7K,GAAO2K,aAAaE,OAGnC,MAAO,CACL5F,KAHW4F,GAASM,EAAAA,EAAAA,KAAWpL,EAAQ8K,QAAUzK,IAHnCN,CAxNsC+hB,EACxD7hB,QAAOiF,WAEP,MAAM,4BACJ6c,EAA2B,yBAC3BC,EAAwB,wBACxBC,EAAuB,gBACvBC,EAAe,eACfC,EAAc,YACd3hB,IACEE,EAAAA,EAAAA,MACEO,GAAUC,EAAAA,EAAAA,KACV0I,GAAOC,EAAAA,EAAAA,MACP,aAAEe,GAAiB3K,GAAS,CAAC,EAC7Bof,GAAqBze,EAAAA,EAAAA,MAErBkf,GAAwBpe,EAAAA,EAAAA,GAAgB,KAC5C2d,EAAmBzd,cAGfme,GAAyBre,EAAAA,EAAAA,GAAiBse,IAC9CX,EAAmBzd,QAAUoe,IAGzBoC,GAAcrf,EAAAA,EAAAA,IAAQ,KAC1B,IAAK6H,EACH,MAAO,SAGT,GAAIA,EAAayX,aACf,MAAO,YAGT,MAAMC,EAAW1X,EAAaI,MAAQO,KAAKC,MAAQ,IACnD,GAAI8W,IAAa1X,EAAaK,YAC5B,MAAO,SAGT,GAAIqX,GAAY1X,EAAaK,YAC3B,MAAO,QAGT,MAAMsX,EAAa3X,EAAa4X,gBAAkB5X,EAAa6X,YAC/D,OAAKH,GAAYC,EACR,UAGF,MACN,CAAC3X,IAEE8X,GAAoBhhB,EAAAA,EAAAA,GAAgB,KACxC,GAAKkJ,EAAL,CAIA,OAAQwX,GACN,IAAK,YACHJ,EAAyB,CAAEvf,GAAImI,EAAanI,KAC5C,MAEF,IAAK,UACCmI,EAAa4X,eACfN,EAAgB,CAAES,KAAM/X,EAAa4X,iBAC5B5X,EAAa6X,aACtBjiB,EAAY,CACV+B,KAAM,OACNqgB,KAAMhY,EAAa6X,cAGvBN,IACA,MAEF,IAAK,QACHF,EAAwB,CAAExf,GAAImI,EAAanI,GAAIwI,aAAa,IAC5D,MAEF,IAAK,SACHgX,EAAwB,CAAExf,GAAImI,EAAanI,GAAIwI,aAAa,IAIhE8W,GA5BA,IA+BI9B,GAAgBld,EAAAA,EAAAA,IAAQ,KAC5B,IAAK6H,IAAiB1F,EACpB,OAGF,MAAM,QACJ6F,EAAO,MAAEC,EAAK,YAAEC,EAAW,aAAEoX,EAAY,MAAEnX,EAAK,MAAExC,EAAK,gBAAEma,GACvDjY,EAEEgQ,GAAoBkI,EAAAA,EAAAA,IAAc5d,GAElCL,EACJ3B,EAAAA,GAAAA,cAAA,OAAKK,UDzIiC,YC0IpCL,EAAAA,GAAAA,cAAA,OAAKK,UD1ImP,YC2ItPL,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACLC,KAAOgG,OAAe7K,EAAP6E,EACf8G,SAAUd,EACV5G,KAAK,QACLwc,YAAahB,IAEf5c,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9G,UDjJ8I,WCiJ1GhB,KAAK,OAAO+B,KAAK,cAEjEpB,EAAAA,GAAAA,cAAC6d,GAAAA,EAAmB,CAClBxd,WAAWC,EAAAA,EAAAA,GDpJ+G,YCqJ1HgB,MAAM,OACNwc,mBAAoBjB,EACpBkB,YAAazC,KAEftb,EAAAA,GAAAA,cAAA,MAAIK,UDzJmD,YCyJzBmF,GAASzH,EAAQ,2BAC/CiC,EAAAA,GAAAA,cAAA,KAAGK,UD1JwE,YC2JxEqG,EAAK,gBAAiB,CACrBhH,OAAQmI,EAAQnI,QACf,CACD+J,WAAW,EACXoW,mBAAoB,CAClB,CAACC,EAAAA,KAAyB9f,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CAAC9G,UDhKwI,WCgK1Ge,KAAK,WAAW/B,KAAK,cAO3F4e,EAAuB,GAE7BA,EAAUE,KAAK,CACbpgB,EAAQ2Z,EAAoB,uBAAyB,4BACrD,CAAEzF,OAAQjQ,EAAKzC,MAGbiG,GACFyY,EAAUE,KAAK,CACbpgB,EAAQ,+BACRyH,IAIJ,MAAM4C,EAAaN,EAAQO,KAAKC,MAAQ,IACxC2V,EAAUE,KAAK,CACbpgB,EAAQqK,EAAa,gCACjBL,EAAc,gCAAkC,iCACpD8G,EAAAA,EAAAA,IAA+B,IAAR/G,EAAc/J,EAAQ8E,MAAM,KAGrD,MAAMkd,EAAYrZ,EAAK,sBAAuB,CAC5C4R,KAAMtY,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAKwG,EAAK,2BAA4BvG,KAAMuG,EAAK,kCAChE,CACD+C,WAAW,IA4Cb,MAAO,CACL9H,SACAsc,YACAM,OA3CAve,EAAAA,GAAAA,cAAA,QAAMK,UDnM2F,YCoM/FL,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IAAmBwf,GAChChY,GACC/H,EAAAA,GAAAA,cAAA,KAAGK,UDtMwN,YCuMxNtC,EAAQ4hB,EAAkB,oCAAsC,mCAGpER,GACCnf,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IACXxC,EAAQ,kCAAkC8Q,EAAAA,EAAAA,IAA+B,IAAR/G,EAAc/J,EAAQ8E,MAAM,MAGhGkF,IAAgBoX,GAAgB/W,GAChCpI,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IACXxC,EAAQ,gCAAgC8Q,EAAAA,EAAAA,IAA+B,IAAR/G,EAAc/J,EAAQ8E,MAAM,MAG9FkF,IAAgBoX,IAAiB/W,GACjCpI,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,IACXxC,EAAQ,+BAA+B8Q,EAAAA,EAAAA,IAA+B,IAAR/G,EAAc/J,EAAQ8E,MAAM,KAG9E,WAAhBqc,GACClf,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLE,KAAK,UACLE,MAAuB,WAAhB4d,EAA2B,SAAW,UAC7C3K,OAAwB,WAAhB2K,EACR3d,QAASie,GAERzhB,EACiB,WAAhBmhB,EAA2B,0BACP,cAAhBA,EAA8B,6BACZ,YAAhBA,EAA4B,yBACV,UAAhBA,EAA0B,yBAA2B,UAYtE,CAACA,EAAaxY,EAAM3I,EAASiE,EAAM0F,IAGhC8W,GADgB/G,EAAAA,GAAAA,GAAYsF,IACUA,EAE5C,OACE/c,EAAAA,GAAAA,cAACye,GAAAA,EAAc,CACb9gB,OAAQC,QAAQ8J,GAChBrH,UDxPkB,WCyPlBsB,OAAQ6c,GAAoB7c,OAC5Bsc,UAAWO,GAAoBP,UAC/BM,OAAQC,GAAoBD,OAC5B3d,QAASie,O,wIC5Pf,UAAgB,KAAO,WAAW,OAAS,WAAW,SAAW,WAAW,SAAW,WAAW,qBAAuB,WAAW,cAAgB,WAAW,kBAAoB,WAAW,sBAAwB,YCyBhNmB,GAAiB,CAAC,GAAI,IAAK,IAAK,IAAM,IAAM,IAAM,KA4FxD,SAASC,GAAYC,EAAkBC,GACrC,MAAMC,EAAaF,EAAOG,UAAWC,GAAUH,GAASG,GAClDC,EAAYL,EAAOE,EAAa,IAAM,EACtCI,EAAYN,EAAOE,IAAeF,EAAOA,EAAO5a,OAAS,GAE/D,OAAO8a,GADWD,EAAQI,IAAcC,EAAYD,EAEtD,CAEA,SAASE,GAASP,EAAkBQ,GAClC,MAAMN,EAAatU,KAAK6U,MAAMD,GACxBH,EAAYL,EAAOE,EAAa,IAAM,EAEtCD,EAAQI,IADIL,EAAOE,IAAeF,EAAOA,EAAO5a,OAAS,IACxBib,IAAcG,EAAWN,GAChE,OAAOtU,KAAK3K,MAAMgf,EACpB,CAEA,UAAevjB,EAAAA,EAAAA,IA1GIgkB,EACjBC,WACAC,eACAzgB,YACA0gB,eAEA,MAAMC,GAAmBtjB,EAAAA,EAAAA,MAEnBwiB,GAASrgB,EAAAA,EAAAA,IAAQ,KACrB,MAAMohB,EAAS,GACf,IAAK,IAAI3U,EAAI,EAAGA,EAAI0T,GAAe1a,OAAQgH,IAKzC,GAJI0T,GAAe1T,GAAKuU,GACtBI,EAAO9C,KAAK6B,GAAe1T,IAGzB0T,GAAe1T,IAAMuU,EAAU,CACjCI,EAAO9C,KAAK0C,GACZ,KACF,CAGF,OAAOI,GACN,CAACJ,KAEGV,EAAOe,IAAY/iB,EAAAA,EAAAA,IAAS,IAEnCgjB,EAAAA,GAAAA,GAAc,KACZD,EAASjB,GAAYC,EAAQY,MAG/B,MAAMM,GAA0B5iB,EAAAA,EAAAA,GAAgB,KAC9C,MAAM6iB,EAAQL,EAAiBtiB,QAC/B,IAAK2iB,EAAO,OACZ,MAAMC,EAASD,EAAME,eAErBC,EAAAA,GAAAA,IAAe,KACb,MAAMC,EAAWH,EAAOI,WAAaL,EAAMM,YAAc,EACnDC,EAAWN,EAAOI,WAAaJ,EAAOK,YAAcN,EAAMM,YAAc,GAE9EE,EAAAA,GAAAA,IAAgB,KACdP,EAAOlG,MAAM0G,YAAY,WAAY,GAAGL,OACxCH,EAAOlG,MAAM0G,YAAY,WAAY,GAAGF,cAK9CG,EAAAA,GAAAA,GAAkBf,EAAkBI,GAEpC,MAAMY,GAAexjB,EAAAA,EAAAA,GAAiByjB,IACpC,MAAMC,EAAWC,OAAOF,EAAMhhB,cAAckf,OAC5Ce,EAASgB,GAETnB,EAASN,GAASP,EAAQgC,MAG5B,OACEliB,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOkI,KAAMpI,GAAY+a,MAAO,eAAe+E,EAAQD,EAAO5a,QAC3FtF,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO6hB,sBACrBpiB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO8hB,cAAeC,IAAKtB,GACzChhB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOgiB,mBACrBviB,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,OAAOrB,UAAWE,GAAOiiB,oBACpCxiB,EAAAA,GAAAA,cAACyiB,GAAAA,EAAe,CAACtiB,MAAMgJ,EAAAA,EAAAA,IAAcsX,GAASP,EAAQC,OAExDngB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOmiB,sBAAuB7jB,MAAM,KAAKC,OAAO,KAAK6jB,QAAQ,YAAYC,KAAK,QAC5F5iB,EAAAA,GAAAA,cAAA,YACEA,EAAAA,GAAAA,cAAA,kBAAgBT,GAAG,oBAAoBsjB,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KAC7DhjB,EAAAA,GAAAA,cAAA,QAAMijB,OAAO,OAAO,aAAW,YAC/BjjB,EAAAA,GAAAA,cAAA,QAAMijB,OAAO,OAAO,aAAW,cAGnCjjB,EAAAA,GAAAA,cAAA,QAAMkjB,EAAE,uTAAuTN,KAAK,+BAI1U5iB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOmgB,UACrB1gB,EAAAA,GAAAA,cAACmjB,GAAAA,EAAQ,CAACC,OAAO,WAAW/iB,UAAWE,GAAO8iB,YAEhDrjB,EAAAA,GAAAA,cAAA,SACEK,UAAWE,GAAO+iB,OAClBjkB,KAAK,QACL0M,IAAK,EACLwX,IAAKrD,EAAO5a,OACZwb,aAAcb,GAAYC,EAAQY,GAClC0C,KAAK,MACLzC,SAAUiB,OC/GlB,IAAgB,QAAU,WAAW,MAAQ,WAAW,OAAS,WAAW,YAAc,WAAW,SAAW,WAAW,UAAY,WAAW,aAAe,WAAW,SAAW,WAAW,uBAAyB,WAAW,qBAAuB,WAAW,eAAiB,WAAW,qBAAuB,WAAW,eAAiB,WAAW,yBAA2B,WAAW,mBAAqB,WAAW,UAAY,WAAW,SAAW,WAAW,SAAW,WAAW,IAAM,WAAW,SAAW,WAAW,WAAa,WAAW,QAAU,WAAW,WAAa,YCwEtkByB,GAA6B,CACjCC,WAAY,gBACZC,sBAAuB,UACvBC,cAAc,EACdjZ,SAAU,0BAwSZ,IAAe/N,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAM+Z,EAAO/Z,IAASiV,EAAAA,EAAAA,KAAWlV,EAAQC,EAAMkV,QACzC0E,EAAU5Z,IAAS6Z,EAAAA,EAAAA,KAAkB9Z,EAAQC,EAAMkV,OAAQlV,EAAM8Z,WACjEgN,EAAc/mB,EAAO0C,OAAOgH,QAC5Bsd,EAAYhnB,EAAO8S,WAAWmU,uBAlTZ,KAmTlBC,EAAiBlnB,EAAOmnB,SAASC,oBACjCC,EAA6BrN,GAAMqN,2BACnC5gB,EAAgBzG,EAAOyG,cAG7B,MAAO,CACLuT,OACAH,UACAkN,cACAC,YACAE,iBACAG,6BACA5gB,gBACA6gB,aAVkBlnB,EAAAA,EAAAA,KAAWJ,EAAQyG,KATvB1G,CArSMwnB,EACxBtnB,QACA+Z,OACAH,UACAmN,YACAD,cACAG,iBACAG,6BACA5gB,gBACA6gB,kBAEA,MAAM,uBAAEE,EAAsB,qBAAEC,EAAoB,wBAAEC,IAA4BhnB,EAAAA,EAAAA,OAE3EqN,EAAa4Z,IAAkBtmB,EAAAA,EAAAA,IAtBX,KAuBpBumB,EAAWC,EAAaC,IAAiB7T,EAAAA,EAAAA,MACzC8T,EAAuBC,IAA4B3mB,EAAAA,EAAAA,KAAS,IAC5D4mB,EAAcC,IAAmB7mB,EAAAA,EAAAA,IAASoF,GAE3C0O,EAAS6E,GAAMvX,GAEf0lB,EAAaF,GAAgB7c,EAAAA,EAAAA,MAAW7D,EAAAA,EAAAA,MAAa0gB,GAAiBX,EAEtErmB,GAAUC,EAAAA,EAAAA,MACV,SAAEknB,IAAaC,EAAAA,GAAAA,MACfze,GAAOC,EAAAA,EAAAA,KAEPye,GAA+B5mB,EAAAA,EAAAA,GAAiBuC,IACpD+jB,GAA0B/jB,EAAEskB,OAAOC,WAG/BC,GAAqB/mB,EAAAA,EAAAA,GAAiB2hB,IAC1CsE,EAAetE,GACfwE,OAGFrmB,EAAAA,EAAAA,IAAU,KACJ2T,IAAWkS,GACbK,EAAwB,CAAEvS,YAE3B,CAACA,EAAQkS,IAEZ,MAAMqB,GAAuB3lB,EAAAA,EAAAA,IAAQ,KACnC,MAAMohB,EAASkD,GAA4B/X,IAAKpK,GAASA,EAAKzC,IAC3DwF,OAAQxF,GAAOA,IAAO0S,GAEzB,OADAgP,GAAQwE,QAAQliB,GACT0d,GACN,CAACkD,EAA4BlS,EAAQ1O,IAElCmiB,EAAsBF,GAAwBA,EAAqBlgB,OAAS,GAElFhH,EAAAA,EAAAA,IAAU,KACHvB,GACH6nB,KAED,CAAC7nB,KAEJuB,EAAAA,EAAAA,IAAU,KACR,MAAMqnB,EAAiBhP,GAASiP,WAAWC,aAAaC,KAAMC,GAAYA,EAAQC,MAClF,GAAIL,EAKF,OAJAb,EAAyBlnB,QAAQ+nB,EAAeM,mBAC5CN,EAAe/d,QACjBod,EAAgBW,EAAe/d,SAKnCkd,EAAkD,cAAzBd,GAAgB3kB,OAAwB,GACpC,SAAzB2kB,GAAgB3kB,MAAmBmmB,GAAsBU,SAASlC,EAAepc,QACnFod,EAAgBhB,EAAepc,QAIjCod,EAAgBzhB,IACf,CAACygB,EAAgBrN,GAASiP,WAAWC,YAAaL,EAAsBjiB,IAE3E,MAAM4iB,GAAa3nB,EAAAA,EAAAA,GAAgB,KAC5BzB,IAELwnB,EAAqB,CACnBtS,OAAQlV,EAAMkV,OACd4E,UAAW9Z,EAAM8Z,UACjBrN,MAAOqB,EACPub,UAAWvB,EACXjd,OAAQid,GAAyBE,IAAiBxhB,OAAgBpG,EAAY4nB,EAC9EsB,4BAA4B,IAE9B/B,OAGIgC,GAAyB9nB,EAAAA,EAAAA,GAAiBoJ,IAC9Ckd,GAAyB,GACzBE,EAAgBpd,KAGZ2e,GAAiB/nB,EAAAA,EAAAA,GAAiBoJ,IACtC,MAAM5F,GAAOkG,EAAAA,EAAAA,MAAW7D,EAAAA,EAAAA,MAAauD,GAC/B4e,EAAazB,IAAiBnd,IAAWid,EAC/C,GAAK7iB,EAEL,OACEhC,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CACPllB,QAASA,IAAM+kB,EAAuB1e,IAEtC5H,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACLX,KAAK,QACLY,KAAMA,IAERhC,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOmmB,WACpC1mB,EAAAA,GAAAA,cAAC2mB,GAAAA,EAAa,CAACtmB,UAAWE,GAAOqmB,UAAW5kB,KAAMA,EAAM6kB,QAAM,EAACC,YAAU,IACzE9mB,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,GAAOwmB,eACrBnH,EAAAA,EAAAA,IAAc5d,GAAQ0E,EAAK,uBAAyBA,EAAK,iBAG9D1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOymB,SAClBtlB,KAAM8kB,EAAa,QAAU,mBAM/BS,GAAwEpnB,EAAAA,EAAAA,IAAQ,IAC7E,EAAGqnB,YAAWvpB,YACnBqC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLimB,QAASjC,EACT9jB,KAAK,UACLE,MAAM,cACNjB,WAAWC,EAAAA,EAAAA,GAAeC,GAAO6mB,qBAAsBzpB,EAAS,SAAW,IAC3E4D,QAAS2lB,EACT1lB,UAAWkF,EAAK,sBAEhB1G,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACL1B,UAAWE,GAAO8mB,uBAClBjmB,KAAK,OACLY,KAAM6iB,EAAwBpB,GAAiBwB,IAEjDjlB,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,OACLrB,UAAWE,GAAO+mB,kBAIvB,CAACpC,EAAUxe,EAAMue,EAAYJ,IAE1B0C,GAAkB1nB,EAAAA,EAAAA,IAAQ,KAC9B,GAAK6lB,EACL,OACE1lB,EAAAA,GAAAA,cAACwnB,GAAAA,EAAY,CACXnnB,WAAWC,EAAAA,EAAAA,GAAeC,GAAOknB,eAAgB,yBACjDC,gBAAiBnnB,GAAOonB,qBACxBC,QAASX,EACTY,UAAU,QACVC,WAAS,GAERtC,EAAqBpZ,IAAK7M,GACzBgnB,EAAehnB,MAIpB,CAAC0nB,EAAsBzB,EAAsBE,IAE1CG,GAAchmB,EAAAA,EAAAA,IAAQ,KAC1B,MAAM/C,GAASuH,EAAAA,EAAAA,MACTgL,EAAMsH,GAASiP,WAAWC,YAChC,IAAKxW,EACH,OAGF,MAAM4R,EAAwB,GAC9B,IAAI8G,GAAmB,EACnBC,EAAkB,EA0BtB,GAxBA3Y,EAAI4Y,QAASlC,IACX,MAAM/jB,EAAO+jB,EAAQne,QAASM,EAAAA,EAAAA,KAAWpL,EAAQipB,EAAQne,aAAUzK,EACnE,IAAK6E,IAAS+jB,EAAQE,cAAgBF,EAAQC,KAAM,OAKpD,GAJID,EAAQC,OACVgC,EAAkBjC,EAAQvc,OAGxBuc,EAAQC,OAASD,EAAQne,SAAWmd,GAAiBgB,EAAQE,cAAgBpB,GAAyB,OAE1G,MAAMqD,EAAmBnD,IAAiBgB,EAAQne,QAAWid,GAAyBkB,EAAQE,YAE1FiC,IACFH,GAAmB,GAGrB9G,EAAO9C,KAAK,CACVze,OAAQqmB,EAAQvc,MAChB2e,YAAaD,GAAoBxD,EAAY7Z,EAAc,EAC3Dmb,KAAMD,EAAQC,KACdC,YAAaF,EAAQE,YACrBjpB,KAAMgF,OAIL+lB,EAAkB,CACrB,MAAMK,GAASlgB,EAAAA,EAAAA,KAAWpL,EAAQioB,GAClC9D,EAAO9C,KAAK,CACVze,OAAQsoB,EACRG,YAAazD,EAAY7Z,EAAc,EACvCmb,MAAM,EACNhpB,KAAMorB,GAEV,CAIA,OAFAnH,EAAOoH,KAAK,CAACC,EAAGC,IAAOA,EAAE7oB,OAAS6oB,EAAEJ,aAAgBG,EAAE5oB,OAAS4oB,EAAEH,cAE1DlH,EAAO/U,MAAM,EA1NC,IA2NpB,CAACwY,EAAW/N,GAASiP,WAAWC,YAAahb,EAAaka,EAAcF,IAErE2D,GAAY1R,IAAQ/T,EAAAA,EAAAA,IAAahF,EAAS+Y,GAEhD,OACE9W,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJzC,OAAQC,QAAQb,GAChB6D,QAAS0jB,EACT3jB,QAAM,EACNgY,wBAAsB,EACtBlY,iBAAkBF,GAAOG,QACzB+nB,oBAAkB,GAElBzoB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOmoB,0BACpBnB,GAEHvnB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOooB,oBACrB3oB,EAAAA,GAAAA,cAACuG,EAAY,CAACC,QAASqd,EAAaxjB,UAAWE,GAAOkT,aAAchN,eAAa,KAGnFzG,EAAAA,GAAAA,cAAC4gB,GAAU,CACTvgB,UAAWE,GAAO+iB,OAClBxC,aAhPqB,GAiPrBD,SAAUiD,EACV/C,SAAUwE,IAEZvlB,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,GAAOiF,OAAQzH,EAAQ,uBACtCiC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOuC,cACpBH,EAAAA,EAAAA,GAAW5E,EAAQ,oBAAqByqB,IAAY,CAAC,kBAAmB,WAE3ExoB,EAAAA,GAAAA,cAAC4oB,GAAAA,EAAS,KACP/C,GAAe7lB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOsoB,UAAW9qB,EAAQ,6BAE3D8nB,GACC7lB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO5B,KACpBknB,EAAYzZ,IAAK2Z,IAChB,MAAM+C,GAAY3f,EAAAA,EAAAA,IAAc4c,EAAQrmB,OAASqmB,EAAQoC,aACnDnmB,EAAQ+jB,EAAQE,cAAgBF,EAAQ/oB,MAAS+oB,EAAQC,MAAQnB,EACnEpB,GAAiBsC,EAAQ/oB,KACvBmD,EAAO,iBAAkB6B,EAAOjE,EAAQiE,EAAK2I,UAC/C3I,IAAQe,EAAAA,EAAAA,IAAahF,EAASiE,GAClC,OACEhC,EAAAA,GAAAA,cAAC+Y,GAAAA,EAAS,CACR1Y,UAAWE,GAAOwoB,QAClBjW,IAAK,GAAGiT,EAAQ/oB,MAAMuC,IAAM,eAAeupB,IAC3C9mB,KAAMA,EACNmX,UAAW2P,EACX5P,UAAU,OACVE,eAAgB7Y,GAAOyoB,SACvB7oB,KAAMA,OAMf0lB,GAAgB7lB,EAAAA,GAAAA,cAAC4oB,GAAAA,EAAS,CAACvoB,UAAWE,GAAO0oB,YAC9CjpB,EAAAA,GAAAA,cAACkpB,GAAAA,EAAQ,CACP7oB,WAAWC,EAAAA,EAAAA,GAAeC,GAAO4oB,SAAU,mBAC3C7D,SAAUT,EACV9D,SAAUqE,EACVgE,MAAOrrB,EAAQ,qCAEjBiC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLE,KAAK,UACLG,QAAS4kB,GAERzf,EAAK,mBAAoB,CAAEhH,OAAQmL,GAAe,CACjDpB,WAAW,EACXoW,mBAAoB,CAClB,CAACC,EAAAA,KAAyB9f,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACpB,UAAWE,GAAO8oB,WAAY3nB,KAAK,aAIzE1B,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,GAAOqZ,YAClBlT,EAAK,qBAAsB,CAC1B4R,KAAMtY,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACE,KAAMuG,EAAK,yBAA0BxG,IAAKwG,EAAK,wBAC9D,CACD+C,WAAW,S,2HC7WrB,SAA+b,WAA/b,GAA6d,WAA7d,GAAsf,WC8Ytf,IAAe7M,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAU8K,aACT,MAAM0hB,GAAQC,EAAAA,EAAAA,KAAYzsB,IACpB,MACJ0C,GACE1C,GAEF0sB,UAAWC,EAAmB,aAC9B7O,EACA8O,WAAYC,EAAgB,gBAC5BC,IACEC,EAAAA,EAAAA,KAAkB/sB,EAAQwsB,IAAU,CAAC,EACnCtnB,GAAOkG,EAAAA,EAAAA,KAAWpL,EAAQ8K,GAC1BkiB,GAAoBC,EAAAA,EAAAA,KAA4BjtB,EAAQ8K,GACxDoiB,GAAeC,EAAAA,EAAAA,KAAmBntB,EAAQ8K,GAE1CsiB,EADgBptB,EAAOyG,gBACWqE,EAClCuiB,GAAgCD,GACjCF,GAAcI,iBAAiBC,8BAC9BC,GAAkCJ,GACnCF,GAAcI,iBAAiBE,+BAE9BC,GAAWC,EAAAA,EAAAA,KAAe1tB,GAEhC,MAAO,CACL+mB,YAAarkB,GAAOgH,QACpBxE,OACAsnB,QACAG,sBACA7O,eACA+O,mBACAC,kBACAa,aAAc3tB,EAAO8S,WAAW8a,yBAChCnnB,cAAezG,EAAOyG,cACtBonB,qBAAsBJ,EAASI,qBAC/Bb,oBACAK,+BACAG,mCArCcztB,CAnVpB,UAAsB,KACpB8U,EAAI,YACJiZ,EAAW,OACXhjB,EAAM,KACN5F,EAAI,aACJyoB,EAAY,MACZnB,EAAK,oBACLG,EAAmB,aACnB7O,EAAY,gBACZgP,EAAe,iBACfD,EAAgB,cAChBpmB,EAAa,qBACbonB,EAAoB,YACpB9G,EAAW,kBACXiG,EAAiB,6BACjBK,EAA4B,+BAC5BG,IAEA,MAAM,aACJO,EAAY,uBAAEC,EAAsB,YAAExtB,EAAW,qBAAEytB,EAAoB,sBAAEnkB,IACvEpJ,EAAAA,EAAAA,MAEEkJ,GAAOC,EAAAA,EAAAA,MAENqkB,EAAaC,IAAkB9sB,EAAAA,EAAAA,IAAiB,KAChD+sB,EAAgBC,IAAqBhtB,EAAAA,EAAAA,KAAkB,IACvDitB,EAAqBC,IAA0BltB,EAAAA,EAAAA,KAAkB,IACjEmtB,EAAkBC,IAAuBptB,EAAAA,EAAAA,KAAkB,GAE5DqtB,GAAwBC,EAAAA,GAAAA,GAAoBnC,EAAOK,IAEzDrrB,EAAAA,EAAAA,IAAU,KACJgsB,GACFe,GAAuB,IAExB,CAACf,EAAgCc,IAEpC,MAAMM,EAAa,OAAQ/Z,GAAsB,aAAdA,EAAKtS,KAClCssB,EAAgB,WAAYha,EAC5Bia,EAAoBhB,GAAe,WAAYA,EAC/CiB,EAAa7pB,IAAQ4d,EAAAA,EAAAA,IAAc5d,GACnC8pB,EAASlkB,IAAWrE,EAEpBwoB,GAAelsB,EAAAA,EAAAA,IAAQ,KAC3B,GAAI8rB,EAAe,CACjB,MAAMK,EAAcV,GAAoBM,EAAoBhB,EAAcjZ,EAC1E,MAAO,CACLpS,IAAK,EACL0S,OAAQ,IACRga,YAAY,EACZC,SAAU3oB,EACV0J,KAAMnB,KAAK6U,MAAMtY,KAAKC,MAAQ,KAC9B5H,QAAS,CACPyrB,OAAQ,CACNC,UAAW,SACX/sB,KAAM,cACNK,OAAQssB,EAAYtsB,OACpBD,SAAUusB,EAAYvsB,SACtB4sB,OAAQ1a,EAAK0a,OACb1V,QAASqU,EAAc,CAAE7qB,KAAM6qB,QAAgB7tB,IAIvD,CAEA,GAAIuuB,EACF,MAAO,CACLnsB,IAAK,EACL0S,OAAQ,IACRga,YAAY,EACZC,SAAU3oB,EACV0J,KAAMnB,KAAK6U,MAAMtY,KAAKC,MAAQ,KAC9B5H,QAAS,CACPyrB,OAAQ,CACNC,UAAW,SACX/sB,KAAM,WACNsX,QAASqU,GAAa1lB,OAAS,CAC7BnF,KAAM6qB,QACJ7tB,EACJmvB,aAAcpB,QAAkB/tB,EAChCovB,eAAgB5a,EAAK4a,eACrBC,WAAYpB,QAAuBjuB,EACnCsvB,wBAAyBrB,EAAsBzZ,EAAK+a,kBAAevvB,EACnEwU,OACA/J,SACA+kB,OAAQppB,MAMf,CAACA,EAAeoO,EAAMqZ,EAAaU,EACpCR,EAAgBE,EAAqBxjB,EACrC0jB,EAAkBM,EAAmBhB,EAAae,IAE9CiB,GAA0BpuB,EAAAA,EAAAA,GAAiBuC,IAC/CkqB,EAAelqB,EAAEskB,OAAOlF,SAGpB0M,GAA6BruB,EAAAA,EAAAA,GAAgB,KACjD2sB,GAAmBD,KAGf4B,GAAkCtuB,EAAAA,EAAAA,GAAgB,KACtD6sB,GAAwBD,KAGpB2B,GAAyBvuB,EAAAA,EAAAA,GAAgB,KACzCotB,GAAmBL,GAAqBD,KAGxC0B,GAA2BxuB,EAAAA,EAAAA,GAAgB,KAC1CktB,GACLX,EAAqB,CACnBkC,OAAQtb,EAAKpS,GACbqI,aAIEslB,GAAqB1uB,EAAAA,EAAAA,GAAgB,KACzCoI,EAAsB,CAAC,KAGnBumB,GAAwB3uB,EAAAA,EAAAA,GAAgB,KACxCktB,EACFb,EAAa,CACXjjB,SACAsjB,iBACAvZ,OACAgF,QAASqU,EAAc,CAAE7qB,KAAM6qB,QAAgB7tB,EAC/CiwB,cAAehC,IAKfE,GAAoBM,EACtBd,EAAuB,CACrBxrB,OAAQsI,EACRykB,OAAQzB,EAAYyB,OACpB3sB,OAAQkrB,EAAYlrB,OACpBiX,QAASqU,EAAc,CAAE7qB,KAAM6qB,QAAgB7tB,IAK/CwuB,GACFruB,EAAY,CACV+B,KAAM,WACNmE,QAAS,CAACoE,GACVnI,SAAUkS,EAAKlS,SACfC,OAAQiS,EAAKjS,OACbN,OAAQuS,EACRgF,QAASqU,EAAc,CAAE7qB,KAAM6qB,QAAgB7tB,MAK/CkwB,EAAqBzB,GAAqB/H,GAAgBA,EAAYnkB,OAASkrB,EAAYlrB,OA+I3F4tB,GAAchtB,EAAAA,EAAAA,GDvW2jB,WAAkF,WC0W/pBqpB,GD1WwmB,WC2WxmBC,GD3WmoB,WC4WnoBD,GAAoBF,GD5WgqB,YC+WtrB,IAAMiC,GAAeC,IAAmBI,EAExC,OACE/rB,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GDlXG,WCkXyB,kBAC1CN,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GDpXmV,WCoX1S,eAEpDitB,OAAK,EACLnS,OAAOC,EAAAA,GAAAA,GACL,oBAAoBT,IACpBgP,GAAmB,6BAA6BA,MAGlD5pB,EAAAA,GAAAA,cAAA,OACEK,UAAWitB,EACXlS,MAAOoQ,EAAwB,wBAAwBA,SAA0BruB,IAEnF6C,EAAAA,GAAAA,cAACwtB,GAAAA,EAAa,CACZ1a,IAAK4Y,EAAa/Z,EAAKpS,GAAKosB,EAAgBha,EAAK0a,YAASlvB,EAC1DwZ,QAASoV,EACT0B,SAAUC,GAAAA,GACVC,gBAAiB,KA3KzB,WACE,MAAMC,EAAcnD,EAAeA,EAAeO,EAAY1lB,YAASnI,EAEjEqI,GAAQzC,EAAAA,EAAAA,IAAa2D,EAAM1E,GACjC,OACEhC,EAAAA,GAAAA,cAAA,OAAKK,UD9NiS,aCgOlSypB,GACA9pB,EAAAA,GAAAA,cAAC6tB,GAAAA,EAAQ,CACPxtB,UDlOoX,WCmOpX0gB,SAAU6L,EACVzM,MAAO6K,EACP5B,MAAO1iB,EAAK,0BACZonB,UAAWrD,EACXsD,mBACEH,GAAeA,EA/KG,GA+KqCA,EAAYI,gBAAa7wB,IAKrFkwB,GACCrtB,EAAAA,GAAAA,cAACiuB,GAAAA,EAAQ,CAAC5tB,UAAWE,GAAiB2tB,QAAM,EAAC/G,QAAM,EAAC5lB,QAASwrB,GAC3D/sB,EAAAA,GAAAA,cAAA,YACG0G,EAAK,0BAA2B,CAC/BlH,OAAOka,EAAAA,GAAAA,IAAkBhT,EAAMkkB,EAAYlrB,OAAQ,CAAEW,UAAWE,MAC/D,CAAEkJ,WAAW,KAElBzJ,EAAAA,GAAAA,cAACmuB,GAAAA,EAAQ,CACP7I,QAASgG,EACTvK,SAAUgM,EACV3D,MAAO1iB,EAAK,iCAKjBklB,GAAqB/H,GACpB7jB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,IACbmG,EAAK,oCAAqC,CACzClH,OAAOka,EAAAA,GAAAA,IAAkBhT,EAAMmd,EAAYnkB,OAAQ,CAAEW,UAAWE,KAChE+X,KAAMtY,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CAACC,WAAS,EAAC9sB,QAAS2rB,GAAqBxmB,EAAK,0BACxD,CACD+C,WAAW,EACX+I,cAAc,KAKnBkZ,GAAc9tB,QAAQ+T,EAAK+a,gBAAkBvC,GAC5CnqB,EAAAA,GAAAA,cAACiuB,GAAAA,EAAQ,CACP5tB,UAAWE,GACX2tB,QAAM,EACN/G,QAAM,EACN5lB,QAASurB,EACT/X,SAAUuV,GAEVtqB,EAAAA,GAAAA,cAAA,YACG0G,EAAK,iBAAkB,CACtBlH,OAAOka,EAAAA,GAAAA,IAAkBhT,EAAMiL,EAAK+a,aAAc,CAAErsB,UAAWE,MAC9D,CAAEkJ,WAAW,KAElBzJ,EAAAA,GAAAA,cAACmuB,GAAAA,EAAQ,CACP7I,QAAS8F,EACTrK,SAAU+L,EACV1D,MAAO1iB,EAAK,wBAIjBglB,GAAc9tB,QAAQ+T,EAAK+a,gBAAkBvC,GAC5CnqB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,IACbsrB,EACGnlB,EAAK,4BAA6B,CAClC1J,KAAMwI,EACN8S,KAAMtY,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CAACC,WAAS,EAAC9sB,QAASyrB,GAA2BtmB,EAAK,wBAC9D,CACD+C,WAAW,IAEX/C,EAAK,mCAAoC,CACzC1E,KAAMwD,EACN8S,KAAMtY,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CAACC,WAAS,EAAC9sB,QAASyrB,GAA2BtmB,EAAK,wBAC9D,CACD+C,WAAW,KAKlBiiB,GACC1rB,EAAAA,GAAAA,cAACiuB,GAAAA,EAAQ,CAAC5tB,UAAWE,GAAiB2tB,QAAM,EAAC/G,QAAM,EAAC5lB,QAASsrB,GAC3D7sB,EAAAA,GAAAA,cAAA,YAAO0G,EAAK,mBACZ1G,EAAAA,GAAAA,cAACmuB,GAAAA,EAAQ,CACP7I,QAAS4F,EACTnK,SAAU8L,EACVzD,MAAO1iB,EAAK,qBAIjBglB,GACC1rB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,IACburB,EAASplB,EAAK,+BACXmlB,EAAanlB,EAAK,0BAA2B,CAAE4nB,SAAU9oB,IACvDkB,EAAK,mCAKrB,CAsEK6nB,GACDvuB,EAAAA,GAAAA,cAAA,OAAKK,UDxYoD,aCmU7D,WACE,MAAMX,EAAS4rB,GAAoBM,GAC/BlS,EAAAA,GAAAA,IAAkBhT,EAAMkkB,EAAYlrB,OAAQ,CAAEia,QAAQ,IACtD+R,GACEhS,EAAAA,GAAAA,IAAkBhT,EAAMiL,EAAKnS,OAAS4rB,EAAsBzZ,EAAK+a,aAAgB,GAAI,CAAE/S,QAAQ,IAC/FgS,GAAgB6C,EAAAA,EAAAA,IAAe9nB,EAAMiL,EAAKjS,OAAQiS,EAAKlS,eAAYtC,EAEzE,OACE6C,EAAAA,GAAAA,cAAA,OAAKK,UD3U8Z,YC4UhaqrB,GAAc9tB,QAAQ+T,EAAK8c,sBAC1BzuB,EAAAA,GAAAA,cAAC0uB,GAAAA,EAAe,CACdL,WAAS,EACT3N,SAAU/O,EAAK8c,oBAAsB9c,EAAKgd,kBAC1CC,UAAWloB,EAAK,gBAAiB,CAC/B8C,MAAOmI,EAAKgd,kBAAqBhd,EAAK8c,sBAExCI,SAAUnoB,EAAK,gBAAiB,CAAE8C,MAAOmI,EAAK8c,sBAC9CpuB,UDpVyY,aCuV7YL,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLb,UDxV6hB,WCyV7hBe,KAAK,UACLG,QAAS4rB,EACTnY,UAAW2V,GAEVjkB,EAAK,WAAY,CAChBhH,UACC,CACD+J,WAAW,KAKrB,CAoCKqlB,GAGP,I,gBC5YA,SAA4B,WAA5B,GAA2H,WAA3H,GAA6I,WCsG7I,IAAelyB,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUsC,aAIF,CACLoP,SAJcugB,EAAAA,EAAAA,KAA6BjyB,EAAQsC,EAAOitB,QAK1DzQ,uBAJ4BC,EAAAA,EAAAA,KAA4B/e,KAH1CD,CAhEpB,UAAyB,QACvB2R,EAAO,sBAAEoN,EAAqB,gBAAEoT,EAAe,OAAE5vB,EAAM,cAAE6vB,EAAa,QAAE1tB,IAExE,MAAM,OACJ8qB,EAAM,OAAE3sB,EAAM,SAAED,GACdL,EACEsH,GAAOC,EAAAA,EAAAA,KAEPuoB,GAAkB1wB,EAAAA,EAAAA,GAAgB,KACtC+C,EAAQnC,KAGJ+vB,EAAWrjB,KAAK6U,MAAMjhB,EAAS2sB,GAC/B+C,EAAWJ,GAAmBA,EAAkBG,EAClDrjB,KAAKujB,KAAK,IAAMF,GAAYH,EAAkB,WAC9C7xB,EAaJ,OACE6C,EAAAA,GAAAA,cAAA,OACEK,UAAWE,GACX+uB,SAAU,EACVC,KAAK,SACLhuB,QAAS2tB,GAETlvB,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBC,QAASA,EACTC,KAAMmN,EACNZ,QAAM,EACNwU,gBAAc,EACdpuB,KA1CkB,KAmBxB,WACE,MAAMquB,EAAqB,KAAXpD,EACZ3lB,EAAK,QAAS,CAAE8C,MAAO,GAAK,CAAEE,YAAa,IAC3ChD,EAAK,SAAU,CAAE8C,MAAO6iB,GAAU,CAAE3iB,YAAa2iB,IACrD,OACErsB,EAAAA,GAAAA,cAAA,OAAKK,UD5DsE,YC6DxEovB,EAGP,CAiBKC,GACD1vB,EAAAA,GAAAA,cAAA,OAAKK,UDlF+F,YCmFjGqG,EAAK,2BAER1G,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACb,UAAWE,GAAYivB,gBAAc,EAACpuB,KAAK,OAAOuuB,MAAI,EAACtb,OAAK,IACjEzR,EAAAA,EAAAA,IAAuBlD,EAAQD,IAEjCwvB,GACCjvB,EAAAA,GAAAA,cAAA,OAAKK,UDzF8M,YC0FhNqG,EAAK,wBAAyB,CAC7BlH,OAAQka,EAAAA,GAAAA,IAAkBhT,EAAMuoB,EAAcvvB,OAAQ,CAAEW,UD3FmL,cC4F1O,CAAEoJ,WAAW,EAAM+I,cAAc,KAGvC5U,QAAQwxB,IACPpvB,EAAAA,GAAAA,cAAC4vB,GAAAA,EAAU,CAACtuB,MAAM,SAASnB,KAAMuG,EAAK,eAAgB,CAAEsX,QAASoR,MAIzE,I,gBCuHA,UAAexyB,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,IAAsBC,IAGb,CACL+yB,sBAH2BC,EAAAA,EAAAA,KAA2BhzB,KAD1DD,CAvLF,UAAsB,KACpB8U,EAAI,oBAAEoe,EAAmB,QAAExuB,EAAO,SAAEyuB,EAAQ,qBAAEH,IAE9C,MAAM,kBAAEI,EAAiB,iBAAEC,EAAgB,iBAAElU,IAAqBxe,EAAAA,EAAAA,MAE5D8kB,GAAM5kB,EAAAA,EAAAA,MACNyyB,GAAazyB,EAAAA,EAAAA,MAcbgJ,GAAOC,EAAAA,EAAAA,MAEN+F,EAAW0jB,IAAgBjyB,EAAAA,EAAAA,KAAS,IACpCic,EAASC,EAAWC,IAAevJ,EAAAA,EAAAA,KAEpCvC,GAAUlB,EAAAA,EAAAA,IAAmBqE,GAC7B0e,EAA6B,mBAAd1e,EAAKtS,KACpBixB,EAAaD,EAAe1e,OAAOxU,EACnCozB,EAAeF,OAAsBlzB,EAAPwU,EAE9B6e,EAAaH,EAtBnB,SAAwBI,GACtB,IAAKA,EAAS,MAAO,CAAE/wB,OAAQ,EAAGD,SAAU2H,EAAAA,KAE5C,GAAkB,mBAAduK,EAAKtS,MAA6BsS,EAAK+e,cAAe,CACxD,MAAM/c,EAAY8c,EAAQ3K,KAAMpmB,GAAWA,EAAOD,WAAawH,EAAAA,KAC/D,GAAI0M,EAAW,OAAOA,CACxB,CAGA,OADoB8c,EAAQ3K,KAAMpmB,GAAWA,EAAOD,WAAa2H,EAAAA,IAEnE,CAcIupB,CAAeL,GAAYpW,aAD3B,CAAExa,OAAQ6wB,GAAa/wB,OAAS,EAAGC,SAAU2H,EAAAA,KAE3CwpB,EAAgBJ,GAAW/wB,UAAY2H,EAAAA,IACvCypB,EAAiBN,GAAaM,eAC9BC,GAAwBT,GAAgBL,GAAYa,EACtDnqB,EAAKiH,OAAOkjB,GAAkB,IAAML,GAAW9wB,QAAU,EACvDqxB,GAAaV,GAAgBzyB,QAAQ2yB,GAAaQ,WAClDC,GAAaX,GAAgBzyB,QAAQ2yB,GAAaS,WAClDC,EAAoBrzB,QAAQ+T,GAAMuf,gBAClCC,EAAqBvzB,QAAQ2yB,GAAaa,iBAAmBb,GAAac,gBAC1EC,EAAef,GAAae,aAE5BpC,GAAkB1wB,EAAAA,EAAAA,GAAgB,MAClCwyB,GAAchB,EAKdmB,EACFnV,EAAiB,CACfrF,QAASjQ,EAAK,yBAA0B,CACtC8C,MAAO8nB,GACN,CACD9e,cAAc,EACd/I,WAAW,OAMbwnB,GAAsBpB,EAO1BtuB,EAAQoQ,EAAMqe,EAAW,SAAW,YANlCE,EAAiB,CACfve,SAlBFse,EAAkB,CAAEte,WA0BlB+I,GAAwB7a,EAAAA,EAAAA,IAAQ,KACpC,MAAM,SAAEmO,EAAQ,QAAE0P,IAAYzP,EAAAA,EAAAA,IAAkB0D,IAAS,CAAC,EAE1D,IAAK3D,IAAa0P,EAChB,OAGF,MAAM/C,EAAiB,CAAC3M,EAASG,YAAaH,EAASI,WACjDwM,EAAe5M,EAAS4M,aAE9B,OACE5a,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UFxH0Q,WEyH1Q6N,iBAAkByM,EAClBC,aAAcA,EACdC,YAAa6C,EAAQlP,WAGxB,CAACmD,IAEE4f,EAAalB,EAAe1e,EAAKhE,OAAS,EAE1C6jB,GAAa3xB,EAAAA,EAAAA,IAAQ,KACzB,GAAIwwB,EAAc,CAChB,MAAM,SAAEriB,IAAaC,EAAAA,EAAAA,IAAkB0D,IAAS,CAAC,EACjD,IAAK3D,EACH,OAEF,OACEhO,EAAAA,GAAAA,cAAC4vB,GAAAA,EAAU,CACTtuB,MAAO,CAAC0M,EAASG,YAAaH,EAASI,WACvCjO,KACEuG,EAAK,kBAAmB,CAAEiH,OAAQ4jB,KAI1C,CACA,OAAIN,EACKjxB,EAAAA,GAAAA,cAAC4vB,GAAAA,EAAU,CAACtuB,MAAM,SAASnB,KAAMuG,EAAK,kBAE3CspB,EACKhwB,EAAAA,GAAAA,cAAC4vB,GAAAA,EAAU,CAACtuB,MAAM,QAAQnB,KAAMuG,EAAK,sBAE1CsqB,EACKhxB,EAAAA,GAAAA,cAAC4vB,GAAAA,EAAU,CAACtuB,MAAM,MAAMnB,KAAMuG,EAAK,iBAExCqqB,EACK/wB,EAAAA,GAAAA,cAAC4vB,GAAAA,EAAU,CAACtuB,MAAM,OAAOnB,KAAMuG,EAAK,sBAD7C,GAIC,CAAC2pB,EAAcL,EAAUre,EAAMqf,EAAWD,EAAWrqB,EAAM6qB,EAAYN,IAO1E,OALAQ,EAAAA,GAAAA,IAAenP,EAAKyN,EAAsB2B,IACxC,MAAMC,EAAUD,EAAME,eACtBxB,EAAauB,KAIb3xB,EAAAA,GAAAA,cAAA,OACEsiB,IAAKA,EACLjiB,WAAWC,EAAAA,EAAAA,GACT,mBACAC,GF1K0C,WE4K1C,eACA0wB,GF7KkK,YE+KpK3B,SAAU,EACVC,KAAK,SACLhuB,QAAS2tB,EACTjU,aAAeC,GAAAA,QAA2B/d,EAAZkd,EAC9Bc,aAAeD,GAAAA,QAA6B/d,EAAdmd,GAE7BI,EAED1a,EAAAA,GAAAA,cAAA,OACEsiB,IAAK6N,EACL9vB,UFzLsS,WE0LtS+a,MAAO,6BAEN5M,GACCxO,EAAAA,GAAAA,cAAC6xB,GAAAA,EAAW,CACVC,8BAA+B/B,EAC/BgC,8BAA+BhC,EAC/BiC,aAAc7B,EACd3hB,QAASA,EACTpN,KA/Jc,GAgKd6wB,WAAY7X,EACZ8X,sBAAoB,KAK1BlyB,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLb,UAAWE,GACXivB,gBAAc,EACdpuB,KAAK,OACLE,MAAO+uB,EAAe,mBAAqB,QAC3C8B,kBAAmBzlB,EACnBijB,MAAI,EACJtb,OAAK,GAEJuc,IAAkB3pB,EAAAA,KACfmrB,EAAAA,GAAAA,IAAgB1rB,EAAMoqB,GAAwB,EAAG,CAAEuB,wBAAwB,EAAMhyB,UAAWE,MAC5FmZ,EAAAA,GAAAA,IAAkBhT,EAAMoqB,GAAwB,EAAG,CAAEnX,QAAQ,EAAMtZ,UAAWE,MAEnFixB,EAGP,I,wCCzNA,UAAgB,KAAO,WAAW,WAAa,WAAW,QAAU,WAAW,iBAAmB,WAAW,KAAO,WAAW,YAAc,WAAW,QAAU,WAAW,yBAA2B,WAAW,mBAAqB,WAAW,oBAAsB,WAAW,OAAS,WAAW,aAAe,WAAW,6BAA+B,WAAW,YAAc,WAAW,WAAa,WAAW,aAAe,WAAW,iBAAmB,WAAW,iBAAmB,WAAW,wBAA0B,WAAW,YAAc,WAAW,QAAU,WAAW,QAAU,WAAW,OAAS,YAAY,eAAiB,WAAW,OAAS,WAAW,YAAc,WAAW,qBAAuB,WAAW,UAAY,WAAW,aAAe,WAAW,cAAgB,WAAW,OAAS,WAAW,oBAAsB,WAAW,kBAAoB,WAAW,yBAA2B,WAAW,kBAAoB,YCsJr7B,IAAe50B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAsBC,IACxC,MAAM,UACJw1B,GACEx1B,GAEE,YAAEy1B,IAAgB/H,EAAAA,EAAAA,KAAe1tB,GACjC6U,EAAO4gB,GAAatF,OAASqF,GAAW/tB,KAAKguB,EAAYtF,aAAU9vB,EACnE4H,EAASwtB,EAAYxtB,OACrBytB,EAAoBD,EAAYE,YAChCC,EAAkBH,EAAYvd,UAC9B2d,EAAkBJ,EAAYI,gBAEpC,MAAO,CACLC,YAAaL,EAAYM,MACzBlhB,OACA5M,SACAytB,oBACAE,kBACAC,oBAlBgB91B,CAxGqCi2B,EACvDF,cACAjhB,OACA5M,SACAytB,oBACAE,kBACAC,kBACAI,kBAEA,MAAM,gBACJC,EAAe,wBACfC,IACEz1B,EAAAA,EAAAA,MACE01B,GAAcx1B,EAAAA,EAAAA,MAEdgJ,GAAOC,EAAAA,EAAAA,KACPwsB,GAAiBtzB,EAAAA,EAAAA,IAAQ,IACtB+yB,GAAaxmB,IAAKgnB,GAAMA,EAAE7zB,IAChC,CAACqzB,IAEES,EAAYz1B,QAAQmH,GAAQuuB,iBAAiBhuB,QAC9CP,GAAQwuB,mBAAmBjuB,QAAUP,GAAQyuB,oBAAoBluB,QAEhEmuB,GAA4Bj1B,EAAAA,EAAAA,GAAgB,KAC5CmT,GACFqhB,EAAgB,CAAE/F,OAAQtb,EAAKpS,OAI7Bm0B,EAAe91B,SAASg1B,GAAsC,IAAvBA,EAAYttB,SAElDquB,EAAa9d,IAAc+d,EAAAA,GAAAA,GAChCH,EACAN,GACCxhB,EACDkiB,EAAAA,MAGI,QAAEC,IAAYC,EAAAA,GAAAA,IAAwB,CAAEC,QAASd,EAAae,WAxCxC,MA0CtBC,GAAyB11B,EAAAA,EAAAA,GAAgB,KAC7Cy0B,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHuuB,gBAAiB,GACjBE,mBAAoB,GACpBD,kBAAmB,QA4BvB,OACEvzB,EAAAA,GAAAA,cAAA,OAAKsiB,IAAK4Q,EAAa7yB,WAAWC,EAAAA,EAAAA,GAAeC,GAAO4zB,iBAAkB,kBACxEn0B,EAAAA,GAAAA,cAACqV,EAAAA,GAAU,CACT3T,KAAK,WACL8T,UAAWmd,GAEVe,GAAgBlB,GA5BnBxyB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO6zB,mBACrBp0B,EAAAA,GAAAA,cAACq0B,GAAAA,EAAuB,CACtBjzB,KAAM,IACNkzB,OAAQC,GAAAA,EAAeC,cACvBhF,gBAAc,EACdxU,QAAM,IAERhb,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOk0B,0BACpB/tB,EAAK,uBAEP2sB,GACCrzB,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CACH/tB,UAAWE,GAAOm0B,kBAClBnzB,QAAS2yB,GAERxtB,EAAK,6BAcV1G,EAAAA,GAAAA,cAAC4V,EAAAA,EAAc,CACbvV,WAAWC,EAAAA,EAAAA,GAAeC,GAAOo0B,0BACjC7e,MAAO6d,EACP9d,WAAYA,EACZG,aAAa,gBACbC,YAAU,EACV2e,iBAAkBf,EAAAA,IAClB9d,uBAAwB,IAAIxV,GAAO4zB,oBAElCvB,GAAaxmB,IAAKuF,GACjB3R,EAAAA,GAAAA,cAAC60B,GAAY,CACX/hB,IAAKnB,EAAKpS,GACVoS,KAAMA,EACNoe,oBAAqB+D,EACrB9D,UAAQ,EACRzuB,QAASwxB,W,gEC7IvB,MC8BM+B,GAAyB,IAAMC,GAAAA,EAkCrC,IAAen4B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAsBC,IACjC,CACLwsB,OAAOC,EAAAA,EAAAA,KAAYzsB,KAFHD,CAhC8Cm4B,EAChE30B,YACAhB,OACAmP,UACAujB,gCACAD,gCACAxI,YAEA,MAAM6G,GAAazyB,EAAAA,EAAAA,MAEbu3B,GAAcC,EAAAA,GAAAA,GAAwB/E,OAAYhzB,EAAoB,YAATkC,GAEnE,OACEW,EAAAA,GAAAA,cAAA,OACEsiB,IAAK6N,EACL9vB,WAAWC,EAAAA,EAAAA,GD/CM,WC+CsBD,GACvC+a,MAAO,UAAU0Z,iBAAqCA,QAEtD90B,EAAAA,GAAAA,cAAC6xB,GAAAA,EAAW,CACVG,aAAc7B,EACd3hB,QAASA,EACTpN,KAAM0zB,GACN5C,sBAAoB,EACpBH,8BAA+BA,EAC/BD,8BAA+BA,EAC/BqD,eDzDkC,WC0DlCF,YAAaA,QC1DrB,IAAgB,KAAO,WAAW,iBAAmB,WAAW,SAAW,WAAW,QAAU,WAAW,8BAAgC,WAAW,oBAAsB,WAAW,aAAe,WAAW,SAAW,WAAW,aAAe,WAAW,KAAO,WAAW,qBAAuB,WAAW,KAAO,WAAW,KAAO,WAAW,MAAQ,YCkoBjW,IAAer4B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAYC,IAC9B,MAAM,YAAEy1B,IAAgB/H,EAAAA,EAAAA,KAAe1tB,GAMvC,MAAO,CACLs4B,WALiB7C,EAAY6C,WAM7BC,SALe9C,EAAY8C,SAM3BtwB,OALawtB,EAAYxtB,SALTlI,CAjlBiCy4B,EACnDF,aACAC,WACAtwB,SACAtH,gBAEA,MAAMiJ,GAAOC,EAAAA,EAAAA,MACP,wBACJssB,IACEz1B,EAAAA,EAAAA,OAEG+3B,EAAkBC,IAAuBr3B,EAAAA,EAAAA,IAAS,KAClDs3B,EAAqBC,IAA0Bv3B,EAAAA,EAAAA,IAAS,KACxDw3B,EAAoBC,IAAyBz3B,EAAAA,EAAAA,IAAS,IACvD03B,GAAqBh2B,EAAAA,EAAAA,IAAQ,KACjC,MAAMuM,EAIF,CACFyH,MAAO,GACP6J,QAAS,GACT1P,SAAU,IAGZ,IAAK,MAAM8nB,KAAWT,GAAY,GAAI,CACpC,MAAM,UAAEU,GAAcD,EAEtB,IAAKA,EAAQtsB,MACX,SAGF,MAAMwsB,EAAQZ,GAAYtP,KAAMmQ,GACZ,aAAdA,EAAK52B,MAA0C,aAAnB02B,EAAU12B,KACjC42B,EAAKC,aAAeH,EAAUG,YAGrB,UAAdD,EAAK52B,MAAuC,UAAnB02B,EAAU12B,MAIrB,YAAd42B,EAAK52B,MAAyC,YAAnB02B,EAAU12B,OAHhC42B,EAAKznB,QAAQjP,KAAOw2B,EAAUI,YAUrB,aAAhBH,GAAO32B,MACT+M,EAAI4B,SAASmQ,KAAK6X,GAEA,UAAhBA,GAAO32B,MACT+M,EAAIyH,MAAMsK,KAAK6X,GAEG,YAAhBA,GAAO32B,MACT+M,EAAIsR,QAAQS,KAAK6X,EAErB,CAEA,OAAO5pB,GACN,CAACgpB,EAAYC,IAEVe,GAAgCv2B,EAAAA,EAAAA,IAAQ,KAC5C,MAAMw2B,EAAiBA,CAA8BvgB,EAAYjR,IAC1DA,EAAMyxB,OAEJxgB,EAAM/Q,OACVsH,GAAoBzO,QAAQyO,EAAK3K,MAAM60B,cAAcrQ,SAASrhB,EAAM0xB,iBAH7CzgB,EAO5B,MAAO,CACLjC,MAAOwiB,EAAeR,EAAmBhiB,MAAO0hB,GAChD7X,QAAS2Y,EAAeR,EAAmBnY,QAASiY,GACpD3nB,SAAUqoB,EAAeR,EAAmB7nB,SAAUynB,KAEvD,CAACI,EAAoBN,EAAkBE,EAAqBE,IAGzDa,GAAc94B,EAAAA,EAAAA,OAElB+4B,kBAAmBC,EACnBC,kBAAmBC,EACnBC,kBAAmBC,EACnBC,uBAAwBC,EACxBC,sBAAuBC,IACrBC,EAAAA,GAAAA,GAAuB15B,GACrB25B,GAAqB54B,EAAAA,EAAAA,GAAgB,IAAMg4B,EAAY93B,SAGvD24B,GAAe35B,EAAAA,EAAAA,OAEnB+4B,kBAAmBa,EACnBX,kBAAmBY,EACnBV,kBAAmBW,EACnBT,uBAAwBU,EACxBR,sBAAuBS,IACrBP,EAAAA,GAAAA,GAAuB15B,GACrBk6B,GAAsBn5B,EAAAA,EAAAA,GAC1B,IAAM64B,EAAa34B,SAIfk5B,GAAkBl6B,EAAAA,EAAAA,OAEtB+4B,kBAAmBoB,EACnBlB,kBAAmBmB,EACnBjB,kBAAmBkB,EACnBhB,uBAAwBiB,EACxBf,sBAAuBgB,IACrBd,EAAAA,GAAAA,GAAuB15B,GACrBy6B,GAAyB15B,EAAAA,EAAAA,GAAgB,IAAMo5B,EAAgBl5B,SAG/Dy5B,GAAiBz6B,EAAAA,EAAAA,OAErB+4B,kBAAmB2B,EACnBzB,kBAAmB0B,EACnBxB,kBAAmByB,EACnBvB,uBAAwBwB,EACxBtB,sBAAuBuB,IACrBrB,EAAAA,GAAAA,GAAuB15B,GACrBg7B,GAAwBj6B,EAAAA,EAAAA,GAAgB,IAAM25B,EAAez5B,SAE7Dg6B,GACH74B,EAAAA,EAAAA,IAAQ,KACR,MAAM84B,EAAW5zB,EAAO4zB,SACxB,MAAO,EAAGzR,YAAWvpB,OAAQi7B,KAC3B54B,EAAAA,GAAAA,cAAA,OACEK,UAAWE,GAAO8L,KAClB9K,QAAS2lB,GAEK,WAAbyR,GAAyBjyB,EAAK,uBACjB,aAAbiyB,GAA2BjyB,EAAK,yBACnB,YAAbiyB,GAA0BjyB,EAAK,wBAChC1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,kBACLrB,UAAWE,GAAOymB,aAIvB,CAACtgB,EAAM3B,IAEL8zB,GAEHh5B,EAAAA,EAAAA,IAAQ,KACR,MAAMi5B,EAAkB/zB,GAAQuuB,iBAAiBhuB,QAAU,EAC3D,MAAO,EAAG4hB,YAAWvpB,OAAQi7B,KAC3B54B,EAAAA,GAAAA,cAAA,OACEK,UAAWE,GAAO8L,KAClB9K,QAAS2lB,GAEY,IAApB4R,GAAyBpyB,EAAK,sBAC9BoyB,EAAkB,GACdpyB,EAAK,2BAA4B,CAAE8C,MAAOsvB,GAAmB,CAAEpvB,YAAaovB,IACjF94B,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,kBACLrB,UAAWE,GAAOymB,aAIvB,CAACtgB,EAAM3B,IACLg0B,GAEHl5B,EAAAA,EAAAA,IAAQ,KACR,MAAMi5B,EAAkB/zB,GAAQyuB,oBAAoBluB,QAAU,EAC9D,MAAO,EAAG4hB,YAAWvpB,OAAQi7B,KAC3B54B,EAAAA,GAAAA,cAAA,OACEK,UAAWE,GAAO8L,KAClB9K,QAAS2lB,GAEY,IAApB4R,GAAyBpyB,EAAK,yBAC9BoyB,EAAkB,GACdpyB,EAAK,8BAA+B,CAAE8C,MAAOsvB,GAAmB,CAAEpvB,YAAaovB,IACpF94B,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,kBACLrB,UAAWE,GAAOymB,aAIvB,CAACtgB,EAAM3B,IACLi0B,GACJn5B,EAAAA,EAAAA,IAAQ,KACR,MAAMi5B,EAAkB/zB,GAAQwuB,mBAAmBjuB,QAAU,EAC7D,MAAO,EAAG4hB,YAAWvpB,OAAQi7B,KAC3B54B,EAAAA,GAAAA,cAAA,OACEK,UAAWE,GAAO8L,KAClB9K,QAAS2lB,GAEY,IAApB4R,GAAyBpyB,EAAK,uBAC9BoyB,EAAkB,GACdpyB,EAAK,4BAA6B,CAAE8C,MAAOsvB,GAAmB,CAAEpvB,YAAaovB,IAClF94B,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,kBACLrB,UAAWE,GAAOymB,aAIvB,CAACtgB,EAAM3B,IAEJk0B,GAA0Bz6B,EAAAA,EAAAA,GAAiBa,IAC/C4zB,EAAwB,CAAEluB,OAAQ,IAC7BA,EACH4zB,SAAUt5B,OAIR65B,IAA+B16B,EAAAA,EAAAA,GAAgB,KACnDy0B,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHuuB,gBAAiB,QAGf6F,IAAiC36B,EAAAA,EAAAA,GAAgB,KACrDy0B,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHwuB,kBAAmB,QAGjB6F,IAAkC56B,EAAAA,EAAAA,GAAgB,KACtDy0B,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHyuB,mBAAoB,QAIlB6F,IAA2B76B,EAAAA,EAAAA,GAAiBu3B,IAChD,IAAKV,EAAU,OACf,MAAMD,EAAarwB,EAAOuuB,iBAAmB,GACvCxZ,EACFub,EAASvP,KAAMgQ,GACY,UAA3BA,EAAQC,UAAU12B,MAAoBy2B,EAAQC,UAAUI,aAAeJ,EAAUvnB,QAAQjP,KACxFw2B,UAEL,IAAKjc,EAAgB,OAErB,MACMwf,EADWlE,EAAWmE,KAAMltB,GAASA,EAAK8pB,aAAerc,EAAeqc,YAE1Ef,EAAWrwB,OAAQsH,GAASA,EAAK8pB,aAAerc,EAAeqc,YAC/D,IAAIf,EAAYtb,GACpBmZ,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHuuB,gBAAiBgG,OAIfE,IAA6Bh7B,EAAAA,EAAAA,GAAiBu3B,IAClD,IAAKV,EAAU,OACf,MAAMD,EAAarwB,EAAOwuB,mBAAqB,GACzCvZ,EAAmBqb,EAASvP,KAC/BgQ,GAC4B,YAA3BA,EAAQC,UAAU12B,MAAsBy2B,EAAQC,UAAUI,aAAeJ,EAAUvnB,QAAQjP,KAC5Fw2B,UAEH,IAAK/b,EAAkB,OAEvB,MACMsf,EADWlE,EAAWmE,KAAMltB,GAASA,EAAK8pB,aAAenc,EAAiBmc,YAE5Ef,EAAWrwB,OAAQsH,GAASA,EAAK8pB,aAAenc,EAAiBmc,YACjE,IAAIf,EAAYpb,GACpBiZ,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHwuB,kBAAmB+F,OAIjBG,IAA8Bj7B,EAAAA,EAAAA,GAAiBu3B,IACnD,IAAKV,EAAU,OACf,MAAMD,EAAarwB,EAAOyuB,oBAAsB,GAC1CzZ,EAAoBsb,EAASvP,KAChCgQ,GAC4B,aAA3BA,EAAQC,UAAU12B,MAAuBy2B,EAAQC,UAAUG,aAAeH,EAAUG,aACrFH,UAEH,IAAKhc,EAAmB,OAExB,MACMuf,EADWlE,EAAWmE,KAAMltB,GAASA,EAAK6pB,aAAenc,EAAkBmc,YAE7Ed,EAAWrwB,OAAQsH,GAASA,EAAK6pB,aAAenc,EAAkBmc,YAClE,IAAId,EAAYrb,GACpBkZ,EAAwB,CAAEluB,OAAQ,IAC7BA,EACHyuB,mBAAoB8F,OA6DlBI,IAA8BC,EAAAA,EAAAA,IAAY,KAC9CnE,EAAoB,KACnB,IACGoE,IAAiCD,EAAAA,EAAAA,IAAY,KACjDjE,EAAuB,KACtB,IACGmE,IAAgCF,EAAAA,EAAAA,IAAY,KAChD/D,EAAsB,KACrB,IACGkE,IAAyBt7B,EAAAA,EAAAA,GAAiBuC,IAC9CA,EAAEg5B,kBACFh5B,EAAEi5B,mBAGEC,IAA6Bv8B,EAAAA,EAAAA,OAC7B,QAAEo2B,KAAYC,EAAAA,GAAAA,IAAwB,CAC1CC,QAASiG,GACTnmB,YAAayjB,IA6Mf,OACEv3B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOkI,MACpB7K,QAAQg5B,IApPT52B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAI,CACHv8B,OAAQ+4B,EACRyD,OAAQvD,EACRtU,IAAKkU,EACLn2B,WAAWC,EAAAA,EAAAA,GACTC,GAAO65B,KACP75B,GAAO3B,KACP,yBAEFy7B,eAAgBjD,EAChBtP,WAAS,EACTlnB,QAASo2B,EACTsD,oBAAqBpD,EACrBrP,UAAU,QAhDZ7nB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CAAC8T,KAAK,gBAAgBh5B,QAASA,KAAQ03B,EAAwB,aACtEj5B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOi6B,cACpB9zB,EAAK,oBAER1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOk6B,aAClB/4B,KAA2B,YAArBqD,GAAQ4zB,SAAyB,QAAU,iBAGrD34B,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CAAC8T,KAAK,eAAeh5B,QAASA,KAAQ03B,EAAwB,YACrEj5B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOi6B,cACpB9zB,EAAK,mBAER1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOk6B,aAClB/4B,KAA2B,WAArBqD,GAAQ4zB,SAAwB,QAAU,iBAIpD34B,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CAAC8T,KAAK,iBAAgBh5B,QAASA,KAAQ03B,EAAwB,cACtEj5B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOi6B,cACpB9zB,EAAK,qBAER1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOk6B,aAClB/4B,KAA2B,aAArBqD,GAAQ4zB,SAA0B,QAAU,mBA8PvD/6B,QAAQ25B,IA3JTv3B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAI,CACHv8B,OAAQ25B,EACR6C,OAAQ5C,EACRjV,IAAK+U,EACLh3B,WAAWC,EAAAA,EAAAA,GACTC,GAAO65B,KACP75B,GAAO3B,KACP,yBAEFy7B,eAAgB1C,EAChB7P,WAAS,EACTlnB,QAAS62B,EACT6C,oBAAqB5C,GA9D3B,WACE,MAAMgD,EAAStE,EAA8BviB,MACvC8mB,EAAqB51B,EAAOuuB,iBAAmB,GAC/CsH,EAA8C,IAA9BD,EAAmBr1B,OACzC,OACEtF,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOs6B,qBAAsBvY,IAAK2X,IAChDj6B,EAAAA,GAAAA,cAAC86B,GAAAA,EAAW,CACVv5B,QAASu4B,GACTz5B,UAAWE,GAAOw6B,OAClB5a,MAAOoV,EACPxU,SAAUyU,EACVwF,QAAStB,GACTuB,YAAav0B,EAAK,YAEpB1G,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CAAC8T,KAAK,SAASh5B,QAAS23B,GAA8BnkB,SAAU6lB,GACtEl0B,EAAK,6BAEPg0B,EAAOtuB,IAAKyH,IACX,MAAM2S,EAAaoU,GACdD,EAAmBpB,KAAMtD,GAASA,EAAKE,aAAetiB,EAAMrF,QAAQjP,IACzE,OACES,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CACP3T,IAAKe,EAAMnS,KACXH,QAASA,KACP83B,GAAyBxlB,KAG3B7T,EAAAA,GAAAA,cAACg1B,GAA8B,CAC7B30B,UAAWE,GAAOiO,QAClBA,QAASqF,EAAMrF,QACfnP,KAAK,QACL0yB,8BAA+B+B,GAC/BhC,8BAA+BgC,KAEjC9zB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO26B,qBACpBrnB,EAAMnS,MAET1B,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOk6B,aAClB/4B,KAAM8kB,EAAa,QAAU,mBAO3C,CAkBO2U,IA8IFv9B,QAAQk6B,IAvFT93B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAI,CACHv8B,OAAQk6B,EACRsC,OAAQrC,EACRxV,IAAKsV,EACLv3B,WAAWC,EAAAA,EAAAA,GAAeC,GAAO65B,KAAM75B,GAAO66B,MAAO,yBACrDf,eAAgBnC,EAChBpQ,WAAS,EACTlnB,QAASo3B,EACTsC,oBAAqBrC,EACrBpQ,UAAU,SA3DhB,WACE,MAAMwT,EAAYjF,EAA8BpoB,SAC1C2sB,EAAqB51B,EAAOyuB,oBAAsB,GAClDoH,EAA8C,IAA9BD,EAAmBr1B,OAEzC,OACEtF,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOs6B,sBACrB76B,EAAAA,GAAAA,cAAC86B,GAAAA,EAAW,CACVv5B,QAASu4B,GACTz5B,UAAWE,GAAOw6B,OAClB5a,MAAOsV,EACP1U,SAAU2U,EACVsF,QAASpB,GACTqB,YAAav0B,EAAK,YAEpB1G,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CAAC8T,KAAK,SAASh5B,QAAS63B,GAAiCrkB,SAAU6lB,GACzEl0B,EAAK,6BAEP20B,EAAUjvB,IAAK4B,IACd,MAAMwY,EAAaoU,GACdD,EAAmBpB,KAAMtD,GAASA,EAAKC,aAAeloB,EAASkoB,YAEpE,OACEl2B,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CACP3T,IAAK9E,EAAStM,KACdH,QAASA,KACPk4B,GAA4BzrB,KAG9BhO,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UAAWE,GAAOyN,SAClBE,iBAAkB,CAACF,EAASG,YAAaH,EAASI,WAClDwM,aAAc5M,EAAS4M,eAEzB5a,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO+6B,+BACpBttB,EAAStM,MAEZ1B,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOk6B,aAClB/4B,KAAM8kB,EAAa,QAAU,mBAO3C,CAeO+U,IA6EF39B,QAAQy6B,IApBTr4B,EAAAA,GAAAA,cAACk6B,GAAAA,EAAI,CACHv8B,OAAQy6B,EACR+B,OAAQ9B,EACR/V,IAAK6V,EACL93B,WAAWC,EAAAA,EAAAA,GAAeC,GAAO65B,KAAM75B,GAAO66B,MAAO,yBACrDf,eAAgB5B,EAChB3Q,WAAS,EACTlnB,QAAS23B,EACT+B,oBAAqB9B,GA5D3B,WACE,MAAMgD,EAAWpF,EAA8B1Y,QACzCid,EAAqB51B,EAAOwuB,mBAAqB,GACjDqH,EAA8C,IAA9BD,EAAmBr1B,OAEzC,OACEtF,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOs6B,sBACrB76B,EAAAA,GAAAA,cAAC86B,GAAAA,EAAW,CACVv5B,QAASu4B,GACTz5B,UAAWE,GAAOw6B,OAClB5a,MAAOwV,EACP5U,SAAU6U,EACVoF,QAASnB,GACToB,YAAav0B,EAAK,YAEpB1G,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CAAC8T,KAAK,SAASh5B,QAAS43B,GAAgCpkB,SAAU6lB,GACxEl0B,EAAK,6BAEP80B,EAASpvB,IAAKsR,IACb,MAAM8I,EAAaoU,GACdD,EAAmBpB,KAAMtD,GAASA,EAAKE,aAAezY,EAAQlP,QAAQjP,IAE3E,OACES,EAAAA,GAAAA,cAACymB,GAAAA,EAAQ,CACP3T,IAAK4K,EAAQhc,KACbH,QAASA,KACPi4B,GAA2B9b,KAI7B1d,EAAAA,GAAAA,cAACg1B,GAA8B,CAC7B30B,UAAWE,GAAOiO,QAClBA,QAASkP,EAAQlP,QACjBnP,KAAK,YAGPW,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO26B,qBACpBxd,EAAQhc,MAEX1B,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHpB,UAAWE,GAAOk6B,aAClB/4B,KAAM8kB,EAAa,QAAU,mBAO3C,CAcOiV,IAWHz7B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOm7B,kBACrB17B,EAAAA,GAAAA,cAAC04B,EAAc,CACbxR,UAAW4P,EACXn5B,OAAQ+4B,IAEV12B,EAAAA,GAAAA,cAAC64B,EAAe,CACd3R,UAAWsQ,EACX75B,OAAQ25B,IAEVt3B,EAAAA,GAAAA,cAAC+4B,EAAkB,CACjB7R,UAAW6Q,EACXp6B,OAAQk6B,IAEV73B,EAAAA,GAAAA,cAACg5B,EAAiB,CAChB9R,UAAWoR,EACX36B,OAAQy6B,S,gBC3nBlB,MC4FA,IAAex7B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IACjBC,IACC,MAAM,UAAEw1B,GAAcx1B,EAEtB,MAAO,CACL6+B,cAAerJ,GAAWqJ,gBALZ9+B,CAnES++B,EAC3BD,gBACAE,oBACAC,oCAEA,MAAMxZ,GAAM5kB,EAAAA,EAAAA,MAENgJ,GAAOC,EAAAA,EAAAA,KACPo1B,GAAuCl8B,EAAAA,EAAAA,IAAQ,IAAM87B,GAAiBjf,OAAOsf,KAAKL,GACrF52B,OAAQk3B,GAA0B,QAAbA,GAAmC,YAAbA,GAC3C7vB,IAAI+V,QACJkG,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GACtB,CAACoT,IAEKO,EAAYP,GAAiBA,EAAsB,OAAEr2B,OAAS,GAE7D62B,EAAkBC,IAAuBj+B,EAAAA,EAAAA,IAA2B,OAiB3E,SAASk+B,EAAmBJ,GAC1B,OACEj8B,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GD7D2E,WC+DpF67B,IAAqBF,GD/DoH,YCiE3I16B,QAASA,IAtBf,SAAyB06B,GACvBG,EAAoBH,GACpBJ,EACEI,EAEJ,CAiBqBK,CAAgBL,IAE9B9Z,OAAOoa,UAAUN,IAChBj8B,EAAAA,GAAAA,cAACmH,EAAAA,EAAQ,CACP9G,UDrEyJ,WCsEzJhB,KAAK,OACL+B,KAAK,WArBf,SAA4B66B,GAC1B,MAAiB,QAAbA,EAA2Bv1B,EAAK,oBACnB,UAAbu1B,EAA6Bv1B,EAAK,sBACrB,YAAbu1B,EAA+Bv1B,EAAK,wBACvB,WAAbu1B,EAA8Bv1B,EAAK,sBAChCu1B,CACT,CAkBOO,CAAmBP,GAG1B,CAIA,OAFAQ,EAAAA,GAAAA,GAAoBna,OAAKnlB,GAAW,GAGlC6C,EAAAA,GAAAA,cAAA,OAAKsiB,IAAKA,EAAKjiB,WAAWC,EAAAA,EAAAA,GDlFP,WCkFmC,iBACnD+7B,EAAmB,QAClBP,GAAiCO,EAAmB,YACpDP,GAAiCI,GAAaG,EAAmB,UAClEA,EAAmB,SACnBN,GAAgB3vB,IAAIiwB,OCnBrB/gB,GAA+B,CAAC,GAAI,IAEpCohB,IAAwBC,EAAAA,GAAAA,IAAUC,GAAOA,IAHvB,KAG8C,GA2btE,IAAehgC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAqB,CAACC,GAAUC,YAClD,MAAM,UACJu1B,EAAS,MACT9yB,EAAK,cACL+D,GACEzG,EAEEkF,EAAOjF,GAAO8/B,WAAY30B,EAAAA,EAAAA,KAAWpL,EAAQC,EAAM8/B,gBAAa1/B,EAChE2uB,EAASluB,QAAQ2F,GAAiBxG,GAAO8/B,YAAct5B,GACvDymB,EAAehoB,GAAOioB,EAAAA,EAAAA,KAAmBntB,EAAQkF,GAAMzC,SAAMpC,GAE7D,YAAEo1B,IAAgB/H,EAAAA,EAAAA,KAAe1tB,GACjCggC,EAAmBvK,EAAY/oB,MAC/BuzB,GAAkD,IAA1BxK,EAAYvd,UAE1C,MAAO,CACLgoB,iBAAkBlgC,EAAO8S,WAAWqtB,kBACpCC,cAAe5K,GAAW/tB,KAC1B44B,sBAAuB7K,GAAWqJ,cAClC9X,YAAarkB,GAAOgH,QACpBxE,OACA8pB,SACA1B,gBAAiBJ,GAAcI,gBAC/B0S,mBACAC,0BAxBgBlgC,CAzbyBugC,EAC3CrgC,QACAmgC,gBACAC,wBACAtZ,cACA7hB,OACA8pB,SACA1B,kBACA0S,mBACAC,4BAEA,MAAM,eACJM,EAAc,kBAAEpN,EAAiB,iBAAEqN,EAAgB,gBAAEtK,IACnDx1B,EAAAA,EAAAA,MACEC,GAAYC,EAAAA,EAAAA,MACZ6/B,GAAgB7/B,EAAAA,EAAAA,MAChB8/B,GAAgB9/B,EAAAA,EAAAA,MAEhBw1B,GAAcx1B,EAAAA,EAAAA,MAEdC,EAASC,QAAQb,GACjBc,GAAiBC,EAAAA,EAAAA,GAAiBf,GAElCC,EAAOgF,IAAQ4d,EAAAA,EAAAA,IAAc5d,GAAQA,OAAO7E,EAC5C2Z,EAAO9U,IAAQy7B,EAAAA,EAAAA,IAAcz7B,GAAQA,OAAO7E,GAE3CugC,EAAcC,IAAmBx/B,EAAAA,EAAAA,OACjCy/B,EAAoBC,IAAyB1/B,EAAAA,EAAAA,OAC7C2/B,EAA4BC,IAAiC5/B,EAAAA,EAAAA,KAAS,IACtE6/B,EAAgCC,IAAqC9/B,EAAAA,EAAAA,KAAS,IAC9E+/B,EAAgCC,IAAqChgC,EAAAA,EAAAA,KAAS,IAE9Eg+B,EAAkBC,IAAuBj+B,EAAAA,EAAAA,IAA2B,OACrEge,GAAqBze,EAAAA,EAAAA,MAErB0gC,GAAwBv+B,EAAAA,EAAAA,IAAQ,KACpC,IAAKuqB,EACH,OAEF,MAAM,2BACJiU,KACGC,GACDlU,EACJ,OAAQ0B,GAAUpP,OAAOC,OAAO2hB,GAAqBtmB,MAAMpa,UAC1D,CAACkuB,EAAQ1B,IAENmU,GAAmCzS,GAAU1B,GAAiBoU,iCAC9D1C,GAAiChQ,GAAU1B,GAAiBE,+BAE5DvsB,GAAUC,EAAAA,EAAAA,KACV0I,IAAOC,EAAAA,EAAAA,KACP83B,GAAW5gC,GAAgBg1B,MAC3B6L,IAAgB7+B,EAAAA,EAAAA,IAAQ,IACrB4+B,IAAUpW,KAAK,CAACsW,EAAUhtB,IAASgtB,EAAStS,OAAS1a,EAAK0a,QAC9DtnB,OAAQ4M,GAAwB,IAAfA,EAAKrN,OAAeqN,EAAKlS,WAAa2H,EAAAA,KACzD,CAACq3B,KAEEG,IAAe/+B,EAAAA,EAAAA,IAAQ,KAC3B,MAAMg/B,EAAW,IAAIC,IAErB,OAAKJ,IAELA,GAAczW,QAAStW,IACrB,MAAMiZ,EAAc6T,IAAU3Y,KAC3BiZ,GAAcA,EAAUt/B,WAAa2H,EAAAA,KACjC23B,EAAU1S,SAAW1a,EAAK0a,QAE7BzB,GACFiU,EAASG,IAAIrtB,EAAMiZ,KAIhBiU,GAZoBA,GAa1B,CAACJ,GAAUC,KAERO,IAAWp/B,EAAAA,EAAAA,IAAQ,IAChB6+B,IAAeQ,OAAO,CAACC,EAAMxtB,IAAUwtB,EAAKz/B,OAASiS,EAAKjS,OAASy/B,EAAOxtB,GAChF,CAAC+sB,MAGF5K,QAAS/D,KACPgE,EAAAA,GAAAA,IAAwB,CAAEC,QAASd,EAAae,WAvFxB,IAuF2DngB,YAAanW,IAE9FyhC,GAAiBxhC,QAAQggC,KAAwBF,EACjD2B,GAAezhC,QAAQ8/B,GACvB4B,GAAmBF,IAAkBC,IAAgBvB,EACrDyB,GAAuBF,GAAenB,EAAiCF,GAE7E1/B,EAAAA,EAAAA,IAAU,KACJs/B,GACF5K,EAAgB,CAAE/F,OAAQ2Q,EAAmBr+B,MAE9C,CAACq+B,KAEJt/B,EAAAA,EAAAA,IAAU,KACHX,IACHogC,GAA8B,GAC9BJ,OAAgBxgC,GAChB0gC,OAAsB1gC,GACtBi/B,EAAoB,SAErB,CAACz+B,IAEJ,MAAM6hC,IAAehhC,EAAAA,EAAAA,GAAiBuC,IACpC,GAAIs+B,GAAc,OAClB,MAAMp+B,EAAgBF,EAAEE,cAExBy7B,GAAsB,KACpB,MAAM,UAAE17B,GAAcC,EAItB,GAFA88B,EAA8B/8B,EAAY,KAEtCu8B,EAAc7+B,SAAW8+B,EAAc9+B,QAAS,CAClD,MAAQC,IAAK8gC,GAAcjC,EAAc9+B,QAAQM,yBACzCL,IAAK+gC,GAAkBnC,EAAc7+B,QAAQM,wBACrDi/B,EAAkCwB,EAAYC,GAAiB,EACjE,MAIEC,GAAyBj5B,GAAK,yBAA0B,CAC5D1J,MAAMqV,EAAAA,EAAAA,IAAgBrV,GACtBsb,KACEtY,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CACPE,KAAMuG,GAAK,qCACXxG,IAAKwG,GAAK,iCAGb,CAAE+C,WAAW,IAEVm2B,GAAsB9oB,EACxBpQ,GAAK,6BAA8B,CAAE1E,MAAMe,EAAAA,EAAAA,IAAa2D,GAAMoQ,IAAS,CACvErN,WAAW,EACX+I,cAAc,IAEdsZ,EACEplB,GAAK,+BAA2BvJ,EAAW,CAC3CsM,WAAW,EACXo2B,kBAAmB,CAAC,QAEpBn5B,GAAK,sBAAuB,CAC5B1J,MAAMqV,EAAAA,EAAAA,IAAgBrV,IACrB,CAAEyM,WAAW,EAAM+I,cAAc,IAkClC0c,IAAkB1wB,EAAAA,EAAAA,GAAgB,CAACmT,EAAkB0T,KACzD,GAAe,WAAXA,EAAqB,CACvB,KAAM,OAAQ1T,GACZ,OAEF,OAAIytB,QACFnP,EAAkB,CAAEte,OAAMmuB,YAAajiC,GAAgBg/B,iBAGzDgB,EAAsBlsB,EAExB,CACAgsB,EAAgBhsB,GAChBwsB,EAAkC,OAAQxsB,KA0EtCkqB,IAAoBr9B,EAAAA,EAAAA,GAAiBy9B,IACzCG,EAAoBH,KAGhB8D,IAAmBvhC,EAAAA,EAAAA,GAAgB,KACvCm/B,OAAgBxgC,GAChB0gC,OAAsB1gC,GACtBmgC,IACAD,MAGI2C,IAAyBxhC,EAAAA,EAAAA,GAAgB,KAC7C,GAAI4gC,GAGF,OAFAvB,OAAsB1gC,QACtBmgC,IAGE+B,GACF1B,OAAgBxgC,GAGlB4iC,OAGInjB,IAAwBpe,EAAAA,EAAAA,GAAgB,KAC5C2d,EAAmBzd,cAGfme,IAAyBre,EAAAA,EAAAA,GAAiBse,IAC9CX,EAAmBzd,QAAUoe,IAiDzBmjB,GAAeZ,IAAgBD,GAE/Bc,IAAkB5/B,EAAAA,EAAAA,GACtB,sBACA2/B,IAAgB,cAqClB,OACEjgC,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJ3C,UAAWA,EACXmD,QAASm/B,GACTpiC,OAAQA,EACRgD,QAAM,EACNF,iBAAkBF,GAAOG,QACzBL,WAAWC,EAAAA,EAAAA,GAAeC,GAAOC,YAAaD,GAAOkI,MACrDggB,oBAAkB,GAElBzoB,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLb,UAAWE,GAAOc,YAClBF,OAAK,EACLG,MAAM,cACNF,KAAK,UACLG,QAASy+B,GACTx+B,UAA0BzD,EAAfkiC,GAAuB,cAAyB,iBAE3DjgC,EAAAA,GAAAA,cAAA,OAAKK,UAAW6/B,MAElBlgC,EAAAA,GAAAA,cAACuG,EAAY,CAAClG,UAAWE,GAAOiG,QAASA,QAASqd,EAAapd,eAAa,IAC5EzG,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GACdC,GAAOoB,OACPy9B,IAAkB7+B,GAAO4/B,cACxBb,IAAoB/+B,GAAOqB,eAE5B5B,EAAAA,GAAAA,cAACqV,EAAAA,GAAU,CACT3T,KAAK,oBACL8T,UAAY8pB,GAAuBF,GAAiB,EAAIG,GAAuB,EAAI,EAApD,EAC/BzkB,eAAgBva,GAAO6/B,aA/D/B,WACE,GAAKd,GAAL,CACA,GAAIF,GAAgB,CAClB,MAAMiB,EAAiBtD,IAA0BD,EACjD,OACE98B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO+/B,8BACrBtgC,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,GAAOggC,kBACnB3C,EAAmBp4B,OAErB66B,GAEGrgC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOigC,yBACpB95B,GAAK,aAGV25B,QAAuCljC,IAArB2/B,GAEhB98B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOigC,yBACpB95B,GAAK,+BAAgC,CACpC8C,MAAOszB,GACN,CAAErzB,WAAW,EAAM+I,cAAc,EAAM9I,YAAaozB,KAG7D98B,EAAAA,GAAAA,cAACs1B,GAAiB,CAAC73B,UAAWA,IAGpC,CACA,OACEuC,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,GAAOkgC,kBACnB/5B,GAAK64B,GAAwBzT,EAAS,sBAAwB,kBAAqB,qBA5BjD,CA+BzC,CAiCS4U,KAGL1gC,EAAAA,GAAAA,cAACqV,EAAAA,GAAU,CACTiN,IAAKib,EACLl9B,UAAWE,GAAOoV,WAClBjU,KAAK,YACL8T,UAAW6pB,GAAe,EAAID,GAAiB,EAAI,IAEjDC,KAAiBD,IA7HrBp/B,EAAAA,GAAAA,cAAA,OAAKsiB,IAAK4Q,EAAa7yB,WAAWC,EAAAA,EAAAA,GAAeC,GAAOM,KAAM,iBAAkBC,SAAU0+B,IACxFx/B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOogC,SACrB3gC,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACL1B,UAAWE,GAAO0B,OAClBb,KApTQ,IAqTRY,KAAMA,EACN4b,YAAahB,KAEf5c,EAAAA,GAAAA,cAAC6d,GAAAA,EAAmB,CAClBxd,UAAWE,GAAO2B,eAClBZ,MAAM,OACNyc,YAAazC,GACbwC,mBAAoBjB,OAGtBiP,IAAWhV,IAASsT,GAAiBiU,4BACrCr+B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KAvKJA,EAAAA,GAAAA,cAAA,MAAIK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOkC,WAAYlC,GAAOmC,SACrDgE,GAAK,sBAOR1G,EAAAA,GAAAA,cAAA,KAAGK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOuC,YAAavC,GAAOmC,SACrDi9B,IA6FH3/B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOqgC,qBACpBlC,IAAetyB,IAAKuF,GAEjB3R,EAAAA,GAAAA,cAAC6gC,GAAe,CACdzhC,OAAQuS,EACRsd,cAAe2P,GAAakC,IAAInvB,GAChCqd,gBAAiBiQ,GAAWnzB,KAAK6U,MAAMse,GAASv/B,OAASu/B,GAAS5S,aAAUlvB,EAC5EoE,QAAS2tB,SAiEbkP,GACAp+B,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KA/JJA,EAAAA,GAAAA,cAAA,MAAIsiB,IAAKkb,EAAen9B,WAAWC,EAAAA,EAAAA,GAAeC,GAAOkC,WAAYlC,GAAOmC,SACzEgE,GAAKolB,EAAS,sBAAwB,oBAOzC9rB,EAAAA,GAAAA,cAAA,KAAGK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOuC,YAAavC,GAAOwgC,qBAAsBxgC,GAAOmC,SAClFk9B,IAyJG5/B,EAAAA,GAAAA,cAAC47B,GAAoB,CACnBE,8BAA+BA,EAC/BD,kBAAmBA,KAErB77B,EAAAA,GAAAA,cAACqV,EAAAA,GAAU,CACT3T,KAAK,WACL8T,WA2IUymB,GA3IgBE,EA4IrB,QAAbF,GAA2B,EACd,YAAbA,GAA+B,EAClB,WAAbA,GAA8B,EACjB,UAAbA,GAA6B,EAC1BA,GAAW,GA/IN57B,UAAWE,GAAOygC,qBA3I9B,WACE,MAAMC,EAAkB9D,IAAwBhB,IAAmBp3B,OAAQkoB,IACzE,MAAMtb,EAAOurB,IAAgBjQ,GAC7B,IAAKtb,EAAM,OAAO,EAElB,MAAM,UAAEof,EAAS,UAAEC,EAAS,aAAEtE,GAAiB/a,EAC/C,OAAI4sB,IAAoCzC,EAC/B/K,EAEL+K,IAAkCyC,GAC5BxN,IAAcC,GAEpBuN,IAAmCzC,GAC9Bl+B,QAAQmzB,GAAanzB,QAAQ8uB,MAMxC,OACE1sB,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO2gC,oBACpBhE,GAAiB+D,GAAiBxkB,QAASwQ,IAC1C,MAAMtb,EAAOurB,EAAcjQ,GACrBkU,EAAwC,UAArBhF,GAAgCv+B,QAAQ+T,EAAKyvB,oBAChEC,EAA+C,WAArBlF,GAAiCgF,IAAqBxvB,EAAKqf,UAErFsQ,EAAW,CACfthC,EAAAA,GAAAA,cAAC60B,GAAY,CACX/hB,IAAKma,EACLtb,KAAMA,EACNoe,oBAAqBA,GACrBC,SAAUmR,IAAqBE,EAC/B9/B,QAAS2tB,MAgBb,OAZImS,GACFC,EAASnjB,KACPne,EAAAA,GAAAA,cAAC60B,GAAY,CACX/hB,IAAK,UAAUma,IACf+C,UAAQ,EACRre,KAAMA,EACNoe,oBAAqBA,GACrBxuB,QAAS2tB,MAKRoS,IAIf,CAyFaC,MA0FNnC,IAAkBxB,GAEf59B,EAAAA,GAAAA,cAAC8yB,GAAqB,CACpBC,YAAa7D,KAGlBmQ,IAAgBxhC,GAAgBg/B,WAC/B78B,EAAAA,GAAAA,cAACwhC,GAAkB,CACjB7vB,KAAM+rB,EACN9S,YAAagU,GAAakC,IAAIpD,GAC9B91B,OAAQ/J,EAAeg/B,cAoCnC,IAAwBZ,MC7hBxB,MCgFA,IAAer/B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAsBC,IACxC,MAAM,cAAEyG,GAAkBzG,EAE1B,MAAO,CACLyG,gBACAC,QAAS1G,EAAO2G,aAAaD,UALb3G,CArDQ4kC,EAC1B1kC,QACAwG,gBACAC,cAEA,MAAM,yBAAEk+B,EAAwB,cAAEC,IAAkBnkC,EAAAA,EAAAA,MAE9CO,GAAUC,EAAAA,EAAAA,KACVL,EAASZ,GAERkH,EAAaC,IAAkB/F,EAAAA,EAAAA,IAAiB,IAEjDgG,GAAmBtE,EAAAA,EAAAA,IAAQ,KAC/B,MAAM/C,GAASuH,EAAAA,EAAAA,MACTu9B,EAAcp+B,EAAUA,EAAQq+B,OAAOt+B,QAAkBpG,EACzD2kC,EAAkBF,GAAcj9B,EAAAA,EAAAA,IAAmB,CAAEC,IAAKg9B,EAAa/8B,MAAOZ,IAAiB,GAErG,OAAOa,EAAAA,EAAAA,IAAYL,EAAAA,EAAAA,IAAOq9B,GAAiB/8B,OAAQ6C,IAC1Cm6B,EAAAA,EAAAA,KAAcjlC,EAAQ8K,SAC3BzK,EAAW,CAACoG,KACf,CAACA,EAAeU,EAAaT,IAE1B4B,GAA8B5G,EAAAA,EAAAA,GAAiBwjC,IACnDL,EAAc,CAAE1kC,UAAW+kC,IAC3BN,MAGF,OACE1hC,EAAAA,GAAAA,cAACuF,EAAAA,EAAW,CACVlF,UDxDiB,WCyDjB1C,OAAQA,EACRiD,QAAS8gC,EACTl8B,MAAOzH,EAAQ,mCACf0H,gBAAc,EACdC,qBAAmB,EACnBC,iBAAe,GAEf3F,EAAAA,GAAAA,cAAC8F,EAAAA,EAAU,CACTzF,UDjEmC,WCkEnC0F,QAAS5B,EACT6B,YAAa/B,EACbgC,kBAAmBlI,EAAQ,UAC3BuI,mBAAoBlB,EACpBc,eAAgBhC,EAChBiC,cAAY,EACZC,oBAAkB,EAClBC,YAAU,EACV47B,eAAa,Q,oDC1ErB,UAAgB,KAAO,WAAW,YAAc,WAAW,SAAW,WAAW,MAAQ,YCqBnFC,GAAc,EAAInN,GAAAA,EAClBoN,GAAoB,EAAIpN,GAAAA,EAqC9B,IAAen4B,EAAAA,EAAAA,IAnCawlC,EAC1BpgC,OACA2P,WAEA,MAAMqL,GAAiBnd,EAAAA,EAAAA,IAAQ,KACtBoO,EAAAA,EAAAA,IAAkB0D,GACxB,CAACA,IAEJ,GAAKqL,EAEL,OACEhd,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOkI,MACrBzI,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO8hC,aACrBriC,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UAAWE,GAAOyN,SAClBE,iBAAkB,CAAC8O,EAAehP,SAAUG,YAAa6O,EAAehP,SAAUI,WAClFwM,aAAcoC,EAAehP,UAAU4M,aACvCC,YAAamC,EAAeU,SAASlP,UAEvCxO,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBlO,UAAWE,GAAOiO,QAClBpN,KAAM+gC,GACN3zB,QAASwO,EAAenJ,OAAOrF,WAGnCxO,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,OAAOrB,UAAWE,GAAO+hC,QACpCtiC,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACLC,KAAMA,EACNZ,KAAM8gC,GACN7hC,UAAWE,GAAO0B,Y,gBCrD1B,UAAgB,MAAQ,WAAW,SAAW,WAAW,oBAAsB,WAAW,YAAc,WAAW,OAAS,WAAW,MAAQ,WAAW,YAAc,WAAW,QAAU,WAAW,kBAAoB,WAAW,aAAe,WAAW,yBAA2B,WAAW,eAAiB,WAAW,oBAAsB,WAAW,KAAO,WAAW,MAAQ,WAAW,OAAS,WAAW,kBAAoB,WAAW,QAAU,WAAW,UAAY,WAAW,gBAAkB,WAAW,WAAa,WAAW,YAAc,WAAW,iBAAmB,WAAW,aAAe,WAAW,SAAW,YCg3BznB,IAAerF,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAMwlC,EAAWxlC,GAAO4U,KAClB6wB,EAAcD,GAAY,SAAUA,EACpCh/B,EAAgBzG,EAAOyG,cAEvBopB,EAAS6V,GAAeD,EAAS5V,OACjC8V,EAAW9V,GAASzkB,EAAAA,EAAAA,KAAWpL,EAAQ6vB,QAAUxvB,EACjDulC,EAAa3lC,GAAO6K,QAASM,EAAAA,EAAAA,KAAWpL,EAAQC,EAAM6K,aAAUzK,EAChE2Z,EAAO4rB,IAAcjF,EAAAA,EAAAA,IAAciF,GAAcA,OAAavlC,EAC9DwlC,EAAiB7rB,IAAQ8rB,EAAAA,EAAAA,IAAiB9rB,EAAM,gBAChDsN,GAAclnB,EAAAA,EAAAA,KAAWJ,EAAQyG,GACjCs/B,EAAgB9lC,GAAO+iC,aAAev8B,IAAkBxG,EAAM+iC,aAChE53B,EAAAA,EAAAA,KAAWpL,EAAQC,EAAM+iC,kBAAe3iC,EACtC2lC,EAAyB1e,GAAa2e,YACtCC,EAA2BlmC,EAAOkmC,0BAA0BC,SAE5DtxB,EAAO6wB,EAAcD,EAAS5wB,KAAO4wB,EACrCW,EAAkC,mBAAfvxB,GAAMtS,MAA6BsS,EAAKuxB,iBAGjE,MAAO,CACLT,WACAC,aACAS,eALqBD,GAAmBh7B,EAAAA,EAAAA,KAAWpL,EAAQomC,QAAoB/lC,EAM/EoG,gBACA6/B,yBAA0BtmC,EAAO8S,WAAWwzB,yBAC5CC,eAAgBvmC,EAAO8S,WAAWyzB,eAClCV,iBACAG,yBACAE,2BACA5e,cACAye,kBAhCchmC,CAzyBEymC,EACpBvmC,QACA0lC,WACAC,aACAS,iBACA5/B,gBACA6/B,2BACAT,iBACAG,yBACAE,2BACAK,iBACAjf,cACAye,oBAEA,MAAM,mBACJU,EAAkB,qBAClBC,EAAoB,mBACpBC,EAAkB,iBAClBC,EAAgB,aAChBC,EAAY,qBACZ5Y,EAAoB,iBACpB/O,EAAgB,YAChB4nB,EAAW,eACXvG,IACE7/B,EAAAA,EAAAA,OAEGqmC,EAAsBC,EAAoBC,IAAuBhzB,EAAAA,EAAAA,KAElErK,GAAOC,EAAAA,EAAAA,KACP5I,GAAUC,EAAAA,EAAAA,MACTgmC,EAAoBC,IAAyB9lC,EAAAA,EAAAA,KAAkB,IAC/D+lC,EAAgBC,IAAqBhmC,EAAAA,EAAAA,KAAkB,GAExDR,EAASC,QAAQb,GACjBc,GAAiBC,EAAAA,EAAAA,GAAiBf,GAClCqnC,GAAoBtmC,EAAAA,EAAAA,GAAiB2kC,GACrC4B,IAAsBvmC,EAAAA,EAAAA,GAAiB4kC,GAEvC4B,GAAeD,KAAuB5G,EAAAA,EAAAA,IAAc4G,KAElD1yB,KAAM4wB,IAAa1kC,GAAkB,CAAC,EACxC2kC,GAAcD,IAAY,SAAUA,GACpCgC,GAAY/B,GAAcD,QAAWplC,EACrCqnC,GAAWD,IAAW5X,SAAWppB,EACjCkhC,GAAwBF,IAAanB,GACzCmB,GAAUt3B,KAAOm2B,GAA2BsB,EAAAA,GAAAA,OACxC,EACAC,GAAiB74B,KAAKujB,KAAKoV,GAAuB,GAAK,GAAK,IAE5D9yB,GAAO6wB,GAAcD,GAAS5wB,KAAO4wB,GACrCl1B,GAAcsE,KAAQrE,EAAAA,EAAAA,IAAmBqE,IACzCizB,GAAmBH,GAAuB,GAAK7mC,QAAQ2mC,IAAWhY,gBAElE8D,GAAe1e,IAAsB,mBAAdA,GAAKtS,KAC5BixB,GAAaD,GAAe1e,QAAOxU,EAEnC0nC,IAAehlC,EAAAA,EAAAA,IAAQ,KAC3B,GAAK8R,IAAsB,mBAAdA,GAAKtS,KAAlB,CAEA,GAAI8jC,EAAgB,CAClB,MACM2B,EADqB,KAAIC,EAAAA,GAAAA,IAAgB5B,OACNpgC,EAAAA,EAAAA,IAAa2D,EAAMy8B,GACtD6B,GAAeplB,EAAAA,EAAAA,IAAcujB,GAC/Bz8B,EAAK,sBACLA,EAAK,yBAET,OAAOA,EAAK,wBAAyB,CACnCiH,OAAQgE,GAAKhE,OAAQs3B,MAAOH,GAAcE,GAAgB,CAC1Dv7B,WAAW,EACX+I,cAAc,GAElB,CAEA,OAAO9L,EAAK,sBAAuB,CAAEiH,OAAQgE,GAAKhE,QAhBW,GAiB5D,CAACgE,GAAMwxB,EAAgBz8B,IAEpBw+B,GAAkBtnC,QAAQ2mC,IAAWY,cACrCC,IAAaF,IAAmBX,IAAWc,YAC/Cf,GAAe3B,EAAiB0B,IAAqB9kC,KAAOgE,GAG9D,SAAS+hC,GAAepB,GACtB,IAAK7T,GAAc,OACnB,MAAMI,EAAU9e,GAAKuI,YACrB,OAAKuW,EAED9e,IAAM+e,eAAiBwT,EAClBzT,EAAQ3K,KAAMpmB,GAAWA,EAAOD,WAAawH,EAAAA,KAG/CwpB,EAAQ3K,KAAMpmB,GAAWA,EAAOD,WAAa2H,EAAAA,UANpD,CAOF,CAEA,MAAM8S,GAAcorB,KACdC,GAAeD,GAAepB,GAC9BsB,GAA4B,mBAAf7zB,IAAMtS,MAA6BsS,GAAK8zB,UAAYliC,GAAiB3F,QAAQsc,IAE1FwrB,GAAiB,MACrB,IAAKrV,GAAc,OACnB,MAAM,UAAEsV,EAAS,QAAEF,GAAY9zB,GACzB7U,GAASuH,EAAAA,EAAAA,MACT4gC,EAAQQ,GAAUv9B,EAAAA,EAAAA,KAAWpL,EAAQ2oC,QAAWtoC,EACtD,OAAO8nC,GAAQliC,EAAAA,EAAAA,IAAa2D,EAAMu+B,GAASU,CAC5C,EANsB,GAQjBhmC,IAAcnB,EAAAA,EAAAA,GAAgB,KAClC+kC,MAGIqC,IAAsBpnC,EAAAA,EAAAA,GAAgB,KAC1C,MAAMqnC,EAAWrB,GAAWH,GAAsBD,EAClD,IAAKG,IAAWY,eAAiBU,EAAU,OAC3C,MAAM,aAAEV,GAAiBZ,GACzBZ,EAAa,CAAE1xB,OAAQ4zB,EAAStmC,GAAIsX,UAAWsuB,IAC/CxlC,OAGImmC,IAA0BtnC,EAAAA,EAAAA,GAAgB,KAC9C,MAAM,UAAE6mC,EAAS,UAAEU,GAAcxB,GACjCf,EAAqB,CAAE7xB,KAAM0zB,EAAYW,cAAeD,IACxDpmC,OAGIsmC,IAAuBznC,EAAAA,EAAAA,GAAgB,KAC3C,MAAM,UAAE6mC,GAAcd,GACtBd,EAAmB,CAAE9xB,KAAM0zB,IAC3BtB,IACApkC,OAGIumC,IAAyB1nC,EAAAA,EAAAA,GAAgB,KACxC+lC,IACLxZ,EAAqB,CAAEkC,OAAQsX,GAAU5yB,KAAKpS,GAAIoS,KAAM4yB,OAGpD4B,IAAgB3nC,EAAAA,EAAAA,GAAgB,KACjB,mBAAfmT,IAAMtS,MAA8BimC,MACxCrB,GAAsB,KAGlBmC,IAAoB5nC,EAAAA,EAAAA,GAAgB,KACxCylC,GAAsB,KAGlBoC,IAAuB7nC,EAAAA,EAAAA,GAAgB,KAC3C,MAAMwD,EAAO6gC,GAAiBze,EACxBkiB,EAAQhB,GAAepB,GACxBliC,GAASskC,GAAwB,mBAAf30B,IAAMtS,OAC7B+mC,KACA/I,IACAuG,EAAY,CAAEh8B,OAAQ5F,EAAKzC,GAAImgB,KAAM/N,GAAK+N,KAAM4mB,aAG5CtpB,IAAiBnd,EAAAA,EAAAA,IAAQ,IACtB8R,KAAQ1D,EAAAA,EAAAA,IAAkB0D,IAChC,CAACA,KAEE40B,IAA0E1mC,EAAAA,EAAAA,IAAQ,IAC/E,EAAGqnB,eACRlnB,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GACTC,GAAOimC,aACPjmC,GAAO3B,MAET0wB,SAAU,EACVC,KAAK,SACL,gBAAc,OACd,aAAY7oB,EAAK,kBACjBnF,QAAS2lB,GAETlnB,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,OACLrB,UAAWE,GAAOg6B,QAIvB,CAAC7zB,IAEE+/B,IAAqBjoC,EAAAA,EAAAA,GAAgB,IACrCgnC,GAEAxlC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACsT,mBAAiB,EAACpT,KAAK,UAAUG,QAAS4kC,IAC/Cz/B,EAAK,gBAAiB,CACrBlH,MAAO0a,IAAaza,WAAawH,EAAAA,KAC7BmrB,EAAAA,GAAAA,IAAgB1rB,EAAMwT,GAAYxa,OAAQ,CAAE2yB,wBAAwB,KACpE3Y,EAAAA,GAAAA,IAAkBhT,EAAMwT,IAAaxa,OAAQ,CAAEia,QAAQ,KAC1D,CAAElQ,WAAW,KAKlBy7B,GAEAllC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACE,KAAK,UAAUG,QAASqkC,IAC7Bl/B,EAAK,yBAKR0+B,IAAab,IAAW9X,0BAA4B8X,GAAUY,aAE9DnlC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACE,KAAK,UAAUslC,SAAO,EAACnlC,QAAS2kC,IACrCx/B,EAAK,0BACN1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,oBAAoBrB,UAAWE,GAAOomC,eAKnDvB,IAAab,GAAU/X,aAAe+X,GAAUY,aAEhDnlC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACE,KAAK,UAAUslC,SAAO,EAACnlC,QAAS2kC,IACrCx/B,EAAK,mBACN1G,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,oBAAoBrB,UAAWE,GAAOomC,eAMrD3mC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACE,KAAK,UAAUG,QAAS5B,IAC7B+G,EAAK,QAKNkgC,IAAe/mC,EAAAA,EAAAA,IAAQ,KAC3B,IAAK8R,GAAM,OACX,IAAIxR,EAAO,GAWX,MAVkB,aAAdwR,GAAKtS,OACHsS,GAAKk1B,gBACP1mC,GAAQ,GAAGuG,EAAK,yBAAwBmI,EAAAA,EAAAA,IAA4C,IAArB8C,GAAKk1B,cAAsBngC,EAAK7D,MAAM,MAEnG8O,GAAKm1B,eACP3mC,GAAQ,KACRA,GAAQ,GAAGuG,EAAK,wBAAuBmI,EAAAA,EAAAA,IAA2C,IAApB8C,GAAKm1B,aAAqBpgC,EAAK7D,MAAM,OAIhG1C,GACN,CAACwR,GAAMjL,IAEJqgC,IAAYlnC,EAAAA,EAAAA,IAAQ,KACxB,IAAK0iC,KAAa5wB,GAChB,OAGF,MAAM,OACJgb,EAAM,aAAEL,EAAY,eAAEC,EAAc,UAAEwZ,EAAS,YAAEiB,EAAW,aAAE7B,GAC5DZ,IAAa,CAAC,EACZ0C,EAAarC,IAAoBhnC,QAAQ2uB,GAEzC2a,EAAiB5a,GAAgB+X,GAEjCvhC,EAAc,MAClB,IAAKyhC,GAAW,OAAO79B,EAAK,8BAC5B,IAAI49B,GAAJ,CAEA,GAAIC,GAAUY,aAAc,OAAOz+B,EAAK,+BACxC,GAAI0+B,IAAab,GAAU/X,YAAc+X,GAAU9X,0BAA4B8X,GAAUY,aACvF,OAAOz+B,EAAK,8BAEd,GAAI69B,GAAU/X,YAAc4Y,GAC1B,OAAOA,GACH1+B,EAAK,kCACLA,EAAK,wCAAyC,CAAE1E,MAAMe,EAAAA,EAAAA,IAAa2D,EAAM29B,MAE/E,GAAKe,IAAcZ,GACnB,OAAIwC,GAAeC,EACV7B,GACH1+B,EAAK,+BAAgC,CACrChH,OAAQ6sB,GACP,CACD7iB,YAAa6iB,EACb9iB,WAAW,EACX+I,cAAc,IAEd9L,EAAK,sCAAuC,CAC5ChH,OAAQ6sB,EACRvqB,MAAMe,EAAAA,EAAAA,IAAa2D,EAAM29B,KACxB,CACD36B,YAAa6iB,EACb9iB,WAAW,EACX+I,cAAc,IAIhB+xB,GAAU/X,YAAc4Y,GACtB6B,EACKvgC,EAAK,6BAA8B,CACxChH,OAAQ6sB,GACP,CACD7iB,YAAa6iB,EACb9iB,WAAW,EACX+I,cAAc,IAIX9L,EAAK,qCAGV0+B,GACE6B,EACKvgC,EAAK,sBAAuB,CACjChH,OAAQ6sB,GACP,CACD9iB,WAAW,EACX+I,cAAc,EACd9I,YAAa6iB,IAIV7lB,EAAK,8BAGVugC,EACKvgC,EAAK,6BAA8B,CACxChH,OAAQ6sB,EACRvqB,MAAMe,EAAAA,EAAAA,IAAa2D,EAAM29B,KACxB,CACD56B,WAAW,EACX+I,cAAc,EACd9I,YAAa6iB,IAIV7lB,EAAK,oCAAqC,CAAE1E,MAAMe,EAAAA,EAAAA,IAAa2D,EAAM29B,KAtE1C,CAuEnC,EAzEmB,GAkFd8C,EACJnnC,EAAAA,GAAAA,cAACwnB,GAAAA,EAAY,CACXnnB,UAAU,wBACVunB,QAAS2e,GACT1e,UAAU,SAEV7nB,EAAAA,GAAAA,cAAConC,GAAAA,EAAa,CACZx/B,OAAQ/J,EAAgB+J,OACxB+J,KAAM4wB,GACN6C,UAAWA,GACXpC,yBAA0BA,EAC1BF,uBAAwBA,KAKxBuE,EACJrnC,EAAAA,GAAAA,cAAA,OACEK,UAAWE,GAAO+mC,aAEjB1pC,QAAQsc,IAAaxa,SACpBM,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOgnC,0BACpBrtB,GAAYza,WAAawH,EAAAA,KACtBmrB,EAAAA,GAAAA,IAAgB1rB,EAAMwT,GAAYxa,OAAQ,CAC1CW,UAAWE,GAAOinC,oBAClBnV,wBAAwB,KAExB3Y,EAAAA,GAAAA,IAAkBhT,EAAMwT,GAAYxa,OAAQ,CAC5Cia,QAAQ,EACRtZ,UAAWE,GAAOinC,uBAI1BxnC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOknC,mBACpB9pC,GAAUwpC,EACXnnC,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GACTC,GAAOimC,aACPjmC,GAAO66B,OAET9L,SAAU,EACVC,KAAK,SACL,gBAAc,OACd,aAAY7oB,EAAK,SACjBnF,QAAS5B,IAETK,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CACHC,KAAK,QACLrB,WAAWC,EAAAA,EAAAA,GACTC,GAAOg6B,KACPh6B,GAAOmnC,eAQbjqB,EAAmB4S,IACvBrwB,EAAAA,GAAAA,cAAA,OAAKK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOoB,OAAQpB,GAAO+vB,aACnDtwB,EAAAA,GAAAA,cAAC6Z,GAAgB,CACfE,kBAAmBiD,GAAgBhP,SACnCgM,iBAAkBgD,GAAgBU,QAClC5D,eAAgBkD,GAAgBnJ,MAChCrO,MAAOmM,GAAKnM,MACZqD,SAAUg8B,GACV5qB,aAAckpB,KAKdxlB,EACJ3d,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOoB,QACrB3B,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBlO,UAAWE,GAAO8M,YAClBmB,QAASnB,GACTjM,KA5ZW,MA8ZbpB,EAAAA,GAAAA,cAAA,MAAIK,UAAWE,GAAOiF,OApFpB6qB,GAAqB1e,GAAKnM,MAGXkB,EAFd69B,GAEEa,GAAiB,mBAA2B,gBAFvB,yBAsFzBxnC,QAAQkF,IACP9C,EAAAA,GAAAA,cAAA,KAAGK,WAAWC,EAAAA,EAAAA,GAAeC,GAAOuC,aAAcyhC,IAA4B,aAAf5yB,IAAMtS,MAAuBkB,GAAOonC,UAChG7kC,IAMHmb,EAAuB,GAC7B,GAAkB,aAAdtM,GAAKtS,KAAqB,EACZstB,GAAUL,IAGxBrO,EAAUE,KAAK,CACbzX,EAAK,gBACJimB,EAKG,CAAE1a,OAAQ0a,GAJZ3sB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CAACX,KAAK,QAAQY,KAAM4lC,EAAAA,KAC3B5nC,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,GAAOsnC,SAAU9pC,EAAQ6pC,EAAAA,GAAmBj9B,cAMjE45B,IAAWt3B,MACbgR,EAAUE,KAAK,CACbzX,EAAK,gBACL1G,EAAAA,GAAAA,cAAA,QAAMwF,MAAOohC,KAAe/3B,EAAAA,EAAAA,IAAwC,IAAjB01B,GAAUt3B,KAAavG,EAAK7D,MAAM,MAIrF8O,GAAKk1B,gBAAkBtC,IACzBtmB,EAAUE,KAAK,CACbzX,EAAK,sBACLmI,EAAAA,EAAAA,IAA4C,IAArB8C,GAAKk1B,cAAsBngC,EAAK7D,MAAM,KAI7D8O,GAAKm1B,eAAiBvC,IACxBtmB,EAAUE,KAAK,CACbzX,EAAK,qBACLmI,EAAAA,EAAAA,IAA2C,IAApB8C,GAAKm1B,aAAqBpgC,EAAK7D,MAAM,KAIhE,MAAMilC,EAAan2B,GAAKnS,OAAS+kC,IAAW9X,yBAA2B,GAEvExO,EAAUE,KAAK,CACbzX,EAAK,iBACL1G,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOwnC,YACpBruB,EAAAA,GAAAA,IAAkBhT,EAAMohC,EAAY,CAAEznC,UAAWE,GAAOynC,iBACxD5C,IAAaR,IAAoBhnC,QAAQ2uB,IACxCvsB,EAAAA,GAAAA,cAACsH,EAAAA,EAAW,CAAC/F,QAASuiC,GACnBp9B,EAAK,kBAAmB,CAAEhH,OAAQ6sB,GAAkB,CAAE7iB,YAAa6iB,QAMxE5a,GAAKgd,mBACP1Q,EAAUE,KAAK,CACbzX,EAAK,wBACLA,EAAK,4BAA6B,CAChC8C,MAAOmI,GAAK8c,qBAAuB,EACnCwZ,MAAOt2B,GAAKgd,mBACX,CACDjlB,YAAaiI,GAAK8c,qBAAuB,MAK3C9c,GAAK+a,eAAiByY,GACxBlnB,EAAUE,KAAK,CACbzX,EAAK,kBACL1G,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOwnC,WACpBrhC,EAAK,8BAKR69B,IAAW5tB,SACbsH,EAAUE,KAAK,MACbhhB,GACA+qC,EAAAA,GAAAA,IAAuB3D,GAAU5tB,UAGvC,CAEA,GAAI0Z,GAAc,CAChB,MAAM,UAAEsV,EAAS,aAAEwC,EAAY,QAAE1C,GAAY9zB,GACvCy2B,EAAY3C,GAAUv9B,EAAAA,EAAAA,MAAW7D,EAAAA,EAAAA,MAAaohC,QAAWtoC,GACzD,MACJ0W,EAAK,SAAE7F,EAAQ,QAAE0P,EAAO,gBAAE2qB,GACxBrrB,IAAkB,CAAC,EAgEvB,GA9DImrB,EACFlqB,EAAUE,KAAK,CACbzX,EAAK,iBACL1G,EAAAA,GAAAA,cAAA,QACEK,UAAWE,GAAO4nC,aAClB5mC,QAASA,MACP8c,EAAAA,GAAAA,IAAoB8pB,GACpBnsB,EAAiB,CACfrF,QAAS,CAAE7D,IAAK,uBAChBynB,KAAM,WAIT4N,EACDnoC,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACpB,UAAWE,GAAO+nC,SAAU5mC,KAAK,aAGlC0mC,GAAazC,IACtB1nB,EAAUE,KAAK,CACbzX,EAAK,iBACL++B,EAAU,CAAExzB,OAAQwzB,EAAS8C,iBAAiB,GAAS5C,GAAa,KAIpE9xB,GACFoK,EAAUE,KAAK,CACbzX,EAAK,sBACL1G,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,GAAOioC,iBACrB30B,EAAMnS,KACP1B,EAAAA,GAAAA,cAACsH,EAAAA,EAAW,MAAEyC,EAAAA,EAAAA,IAAc8J,EAAM40B,mBAKpCz6B,GACFiQ,EAAUE,KAAK,CACbzX,EAAK,yBACL1G,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,GAAOioC,iBACrBx6B,EAAStM,KACV1B,EAAAA,GAAAA,cAACsH,EAAAA,EAAW,MAAEyC,EAAAA,EAAAA,IAAciE,EAASy6B,mBAKvC/qB,GACFO,EAAUE,KAAK,CACbzX,EAAK,uBACL1G,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,GAAOioC,iBACrB9qB,EAAQhc,KACT1B,EAAAA,GAAAA,cAACsH,EAAAA,EAAW,MAAEyC,EAAAA,EAAAA,IAAc2T,EAAQ+qB,mBAK1CxqB,EAAUE,KAAK,CACbzX,EAAK,wBACLA,EAAK,iBAAkB,CACrBgiC,OAAQ/2B,GAAKg3B,YACbV,MAAOt2B,GAAKi3B,eAIZP,EAAiB,CACnB,MAAM,KACJp7B,EAAI,YAAE6yB,EAAW,QAAEnpB,EAAO,SAAEuV,GAC1Bmc,EACEvrC,GAASuH,EAAAA,EAAAA,MAET8V,EAAY5a,IAChBmkC,EAAiB,CAAEnkC,OACnBgkC,KAGIsF,GAAY3gC,EAAAA,EAAAA,KAAWpL,EAAQgjC,GAC/B1X,EAAS8D,GAAWhkB,EAAAA,EAAAA,KAAWpL,EAAQovB,QAAY/uB,EAEnDoL,GAAgBsG,EAAAA,EAAAA,IAA8B,IAAP5B,EAAavG,EAAK7D,MAAM,GAC/DimC,EACJ9oC,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CAAC7sB,QAASA,IAAM4Y,EAAS2lB,GAAczR,WAAS,IAClDtrB,EAAAA,EAAAA,IAAa2D,EAAMmiC,IAIxB,IAAI1oC,EACJ,GAAKioB,GAAU8D,IAAa4T,EAarB,CACL,MAAMiJ,EACJ/oC,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CAAC7sB,QAASA,IAAM4Y,EAASiO,EAAO7oB,IAAK8uB,WAAS,IAChDtrB,EAAAA,EAAAA,IAAa2D,EAAM0hB,IAGxBjoB,EAAOwW,EAAUjQ,EAAK,qCAAsC,CAC1D1E,KAAM8mC,EACN1gB,OAAQ2gB,EACR5oC,MAAM+nC,EAAAA,GAAAA,IAAuBvxB,GAC7B1J,KAAM1E,GACL,CACDkB,WAAW,IACR/C,EAAK,iCAAkC,CAC1C1E,KAAM8mC,EACN77B,KAAM1E,EACN6f,OAAQ2gB,GACP,CACDt/B,WAAW,GAEf,MAhCEtJ,EAAOwW,EAAUjQ,EAAK,+BAAgC,CACpD1E,KAAM8mC,EACN3oC,MAAM+nC,EAAAA,GAAAA,IAAuBvxB,GAC7B1J,KAAM1E,GACL,CACDkB,WAAW,IACR/C,EAAK,2BAA4B,CACpC1E,KAAM8mC,EACN77B,KAAM1E,GACL,CACDkB,WAAW,IAwBfwU,EAAUE,KAAK,MACbhhB,EACA6C,EAAAA,GAAAA,cAAA,YAAOG,IAEX,CACF,CAEA,MAAM6oC,EAAU3F,GAAkBhT,IAAgB1e,GAAKs3B,aACrD,GAAG5F,IAAiB1xB,GAAKs3B,cAGrB1qB,EACJve,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOge,SACnB6mB,IAAa4D,GAAWxD,KACxBxlC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO2oC,mBACpBF,GACChpC,EAAAA,GAAAA,cAAA,WACG0G,EAAK,kBAAmB,CACvB4R,KAAMtY,EAAAA,GAAAA,cAACC,EAAAA,EAAQ,CAACC,IAAK8oC,EAAS11B,iBAAe,EAACnT,KAAMuG,EAAK,0BACxD,CAAE+C,WAAW,KAGnB27B,IACCplC,EAAAA,GAAAA,cAAA,WACG0G,EAAK,WAAW49B,GAAe,UAAY,KAAKyB,EAAY,SAAW,UAAW,CACjFztB,KACEtY,EAAAA,GAAAA,cAACouB,GAAAA,EAAI,CAACC,WAAS,EAAC9sB,QAASukC,IACtBp/B,EAAK,iBAAgBq/B,EAAY,OAAS,WAG9C,CACDt8B,WAAW,MAIf+7B,IAAc0B,GACdlnC,EAAAA,GAAAA,cAAA,WACG0G,EAAK,yBAGT8+B,IAAcE,IACb1lC,EAAAA,GAAAA,cAAA,WACG0G,EAAK,kBAAmB,CACvB1J,KAAM0oC,IACL,CAAEj8B,WAAW,MAKvBg9B,MAIL,MAAO,CACLa,YAAajX,GAAegX,OAAwBlqC,EACpDwE,OAAQ0uB,GAAe5S,EAAmBE,EAC1CM,YACAM,WAED,CACDgkB,GAAUgC,GAAWF,GAAqBh3B,GAAa3G,EACvD0+B,GAAWR,GAAkBJ,GAAUzmC,EAASslC,EAChD1xB,GAAMqL,GAAgBypB,GAAoBnC,GAC1CiC,GAAoBlW,GAAcxyB,EAClCmlC,EAA0BF,EAAwB8D,GAClDpB,GAAYE,GAAgB/nC,EAAQuc,GAAa2qB,GACjD1B,IAGF,OACEnjC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACye,GAAAA,EAAc,CACb9gB,OAAQA,EACR2pC,YAAaP,IAAWO,YACxB3lC,OAAQolC,IAAWplC,OACnB+c,YAAa2R,GACbpS,UAAW8oB,IAAW9oB,UACtBM,OAAQwoB,IAAWxoB,OACnBle,UAAWE,GAAOxD,MAClB6D,QAASjB,GACTwpC,eAAgBvrC,QAAQ4nC,IACxB4D,qBAAsB7D,IAAc9lC,SACpCgpB,oBAAkB,IAEnB6H,IAAclM,GAAexmB,QAAQ2nC,KACpCvlC,EAAAA,GAAAA,cAACqpC,GAAAA,EAAa,CACZ1rC,OAAQqmC,EACRsF,gBAAc,EACd1oC,QAASwlC,GACTmD,aAAc7iC,EAAK,gBAAiB,CAClClH,MAAO+lC,IAAc9lC,WAAawH,EAAAA,KAC9BmrB,EAAAA,GAAAA,IAAgB1rB,EAAM6+B,GAAa7lC,OAAQ,CAAE2yB,wBAAwB,KACrE3Y,EAAAA,GAAAA,IAAkBhT,EAAM6+B,GAAa7lC,OAAQ,CAAEia,QAAQ,KAC1D,CAAElQ,WAAW,IAChB+/B,eAAgBnD,IAGhBrmC,EAAAA,GAAAA,cAACoiC,GAAmB,CAClBpgC,KAAM6gC,GAAiBze,EACvBzS,KAAM2e,MAENuS,GAEE7iC,EAAAA,GAAAA,cAAA,SACG0G,EAAK,4BAA6B,CACjCiL,KAAMjL,EAAK,aAAc,CAAElB,MAAO8qB,GAAW9qB,MAAOmI,OAAQ2iB,GAAW3iB,SACvEnO,MAAO+lC,IAAc9lC,WAAawH,EAAAA,KAC9BwiC,EAAAA,GAAAA,IAAgB/iC,EAAM6+B,GAAa7lC,QAAQ,IAC3CgqC,EAAAA,GAAAA,IAAkBhjC,EAAM6+B,GAAa7lC,SACxC,CACD+J,WAAW,EACX+I,cAAc,KAIrBqwB,GAEG7iC,EAAAA,GAAAA,cAAA,SACG0G,EAAK,mCAAoC,CACxCiL,KAAMjL,EAAK,aAAc,CAAElB,MAAO8qB,GAAW9qB,MAAOmI,OAAQ2iB,GAAW3iB,SACvEnO,MAAO+lC,IAAc9lC,WAAawH,EAAAA,KAC9BwiC,EAAAA,GAAAA,IAAgB/iC,EAAM6+B,GAAa7lC,QAAQ,IAC3CgqC,EAAAA,GAAAA,IAAkBhjC,EAAM6+B,GAAa7lC,QACzCsC,MAAMe,EAAAA,EAAAA,IAAa2D,EAAMm8B,IACxB,CACDp5B,WAAW,EACX+I,cAAc,MAIpB8d,GAAWI,eACX1wB,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACkpB,GAAAA,EAAQ,CACP7oB,UAAWE,GAAO4oB,SAClBC,MAAO1iB,EAAK,iBACZ4e,QAAS4e,EACTyF,QAASxF,IAGXnkC,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOqpC,qBACpBljC,EAAK,0BAMf69B,IACCvkC,EAAAA,GAAAA,cAACqpC,GAAAA,EAAa,CACZ1rC,OAAQkmC,EACRjjC,QAASmjC,EACTyF,eAAgBvD,GAChBzgC,MAAOkB,EAAK,yBAEZ1G,EAAAA,GAAAA,cAAA,WACG0G,EAAK,iCAAkC,CACtChH,QAAQgqC,EAAAA,GAAAA,IAAkBhjC,EAAM69B,GAAUhY,gBAC1CvqB,MAAMe,EAAAA,EAAAA,IAAa2D,EAAM09B,IACxB,CACD36B,WAAW,EACX+I,cAAc,KAGjBoyB,IACC5kC,EAAAA,GAAAA,cAAA,WACG0G,EAAK,mCAAoC,CACxC8C,MAAOm7B,IACN,CACDl7B,WAAW,EACX+I,cAAc,EACd9I,YAAai7B,MAInB3kC,EAAAA,GAAAA,cAAA,WAAM0G,EAAK,qC,gBCz2BrB,MCgLA,IAAe9J,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IACjBC,IACC,MAAM+sC,EAAiB/sC,EAAO8S,WAAWk6B,sCACnCA,EAAwCD,EAAkBA,EAAiB,SAAQ1sC,EACnF4sC,EAA+BjtC,EAAO8S,WAAWm6B,8BAAgC,EACjFC,EAA+BltC,EAAO8S,WAAWo6B,6BAEjDC,EAA4BntC,EAAO8S,WAAWq6B,0BAC9CC,EAAuBD,EAA4BA,EAA4B,IAAO,EAEtFE,EAAoBrtC,EAAO8S,WAAWw6B,oCACtCA,EAAsCD,EAAqBA,EAAoB,IAAQ,EACvFE,GAA6BC,EAAAA,EAAAA,IAAoBxtC,EAAO8S,WAAWy6B,4BAA8B,GACjGE,EAAmBztC,EAAO8S,WAAW46B,2BACrCA,EAA6BD,IAAoBD,EAAAA,EAAAA,IAAoBC,GAErE56B,EAAa7S,EAAO8S,WAAWD,WAErC,MAAO,CACLm6B,wCACAC,+BACAC,+BACAE,uBACAE,sCACAC,6BACAG,6BACA76B,eA1Bc9S,CA1IiB4tC,EACnC1tC,QAAO+sC,wCACPC,+BAA8BC,+BAA8BE,uBAC5DE,sCAAqCC,6BAA4BG,6BAA4B76B,iBAE7F,MAAM,kCACJ+6B,EAAiC,mBACjCnH,EAAkB,oBAClBoH,EAAmB,iBACnB3uB,IACExe,EAAAA,EAAAA,MACEG,EAASC,QAAQb,IAChBupC,EAAOsE,IAAYzsC,EAAAA,EAAAA,SAA6BhB,IAChD0tC,EAAcC,IAAmB3sC,EAAAA,EAAAA,KAAS,GAE3CN,GAAiBC,EAAAA,EAAAA,GAAiBf,IAChC4U,KAAM4wB,GAAa1kC,GAAkB,CAAC,EAExC0mC,EADchC,GAAY,SAAUA,EACVA,OAAWplC,EACrC4tC,EAAWntC,QAAQ0oC,GAEnB5/B,GAAOC,EAAAA,EAAAA,KAEPqkC,GAAoBxsC,EAAAA,EAAAA,GAAiBuC,IACzC,MAAMof,EAAQpf,EAAEskB,OAAOlF,MACjBxS,EAASs9B,WAAW9qB,GACpB2D,EAAY+mB,EAAeL,EAA6BR,EACxD/oB,EAAmB,KAAVd,GAAgBgC,OAAO+oB,MAAMv9B,QAAUxQ,EAClD2mB,EAAYhY,KAAKC,IAAI4B,EAAQmW,GAAanW,EAC9Ci9B,EAAS3pB,KAGLthB,GAAcnB,EAAAA,EAAAA,GAAgB,KAClCksC,MAGIS,GAAiB3sC,EAAAA,EAAAA,GAAgB,KAChC+lC,GAAqC,mBAAxBA,EAAU5yB,KAAKtS,MAA8BklC,EAAUc,WAAciB,IACvFoE,IACAnH,IACAoH,EACE,CACEh5B,KAAM4yB,EAAUc,UAChBiB,MAAO,CACL7mC,SAAUorC,EAAe,MAAQ,MACjCnrC,OAAQmrC,GAAeO,EAAAA,EAAAA,IAAkB9E,GAASA,EAClDx7B,MAAO,KAGbkR,EAAiB,CACfue,KAAM,eACN5jB,QAAS,CACP7D,IAAK,yBACLu4B,UAAW,CACT15B,KAAMjL,EAAK,aAAc,CAAElB,MAAO++B,EAAU5yB,KAAKnM,MAAOmI,OAAQ42B,EAAU5yB,KAAKhE,gBAKjF29B,EAAaT,EAAeT,EAAsCN,EAClEyB,EAAYV,EAAeR,EAA6BN,EACxDyB,EAAiBT,GAAYzE,GAASiF,EAE5C,OACEvrC,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJzC,OAAQA,EACR6H,MAAsBkB,EAAfmkC,EAAoB,aAAqB,gBAChDplC,gBAAc,EACd9E,QAAM,EACNC,QAASjB,GAETK,EAAAA,GAAAA,cAAA,OAAKK,UD7G0I,YC8G7IL,EAAAA,GAAAA,cAACyrC,GAAAA,EAAS,CACRriB,MAAsB1iB,EAAfmkC,EAAoB,kBAA0B,qBACrD9pB,SAAUiqB,EACV7qB,MAAOmmB,GAAOtY,WACd0d,UAAU,UACVpc,SAAU,EACVqc,2BAA4Bd,KAIhC7qC,EAAAA,GAAAA,cAAA,OAAKK,UDxH8D,YCyHjEL,EAAAA,GAAAA,cAAA,aACIwrC,GAAkB5tC,QAAQ0tC,IAAe5kC,EAAK,sCAAuC,CACrFlH,MAAOqrC,GAAepB,EAAAA,GAAAA,IAAgB/iC,EAAM6kC,IAAa7B,EAAAA,GAAAA,IAAkBhjC,EAAM6kC,IAChF,CACD/4B,cAAc,EACd/I,WAAW,IAEZ+hC,GAAkB,MACjB,MAAMI,EAAsBN,EAAanpB,QAAQmkB,EAAQgF,GAAYO,WAAavF,EAClF,OAAO5/B,EAAK,qCACV,CACElH,MAAOqrC,GACHpB,EAAAA,GAAAA,IAAgB/iC,EAAMklC,IACtBlC,EAAAA,GAAAA,IAAkBhjC,EAAMklC,IAE9B,CACEp5B,cAAc,EACd/I,WAAW,GAEhB,EAZkB,IAepB+hC,GAAkB5tC,QAAQitC,EAAel7B,EAAau6B,IACrDlqC,EAAAA,GAAAA,cAAA,QAAMK,UDhJ6G,YCiJhH,MAAKuC,EAAAA,EAAAA,IACJioC,GAAe12B,EAAAA,EAAAA,GAAgBmyB,EAAO32B,GAAe22B,EAAQ4D,EAC7D,MACAxjC,EAAK7D,UAMb7C,EAAAA,GAAAA,cAACkpB,GAAAA,EAAQ,CACP7oB,UD3JuF,WC4JvF+oB,MAAO1iB,EAAK,iBACZ4e,QAASulB,EACTlB,QAASmB,IAGX9qC,EAAAA,GAAAA,cAAA,OAAKK,UDjK2B,YCkK7BqG,EAAK,6BAGR1G,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACsT,mBAAiB,EAACO,UAAWy2B,EAAgBpqC,KAAK,UAAUG,QAAS4pC,GAC1EK,GAAkB9kC,EAAK,iBAAkB,CACxClH,MAAOqrC,GAAezY,EAAAA,GAAAA,IAAgB1rB,EAAM4/B,IACxC5sB,EAAAA,GAAAA,IAAkBhT,EAAM4/B,EAAO,CAAE3sB,QAAQ,KAC5C,CAAElQ,WAAW,KACd+hC,GAAkB9kC,EAAK,a,uCC1KjC,SAAmD,WCgLnD,IAAe9J,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAClB,CAACC,GAAUC,YACT,MAAM+iC,EAAc/iC,GAAO+iC,YAG3B,MAAO,CACL+I,UAHgB/I,GAAc53B,EAAAA,EAAAA,KAAWpL,EAAQgjC,QAAe3iC,IAHlDN,CA9HKivC,EAAG/uC,QAAO8rC,gBACjC,MAAM,sBAAEkD,EAAqB,YAAEC,IAAgBxuC,EAAAA,EAAAA,MACzCG,EAASC,QAAQb,GAEjBc,GAAiBC,EAAAA,EAAAA,GAAiBf,GAClCkvC,GAAqBnuC,EAAAA,EAAAA,GAAiB+qC,IACrCqD,EAA2BC,IAAgChuC,EAAAA,EAAAA,KAAS,IAEpEiuC,EAAmBC,IAAwBluC,EAAAA,EAAAA,MAE5CuI,GAAOC,EAAAA,EAAAA,KAEPhH,GAAcnB,EAAAA,EAAAA,GAAgB,IAAMutC,KAEpCO,GAAgB9tC,EAAAA,EAAAA,GAAgB,KACpC,MAAMmT,EAAO9T,GAAgB8T,KACxBA,GAAM0zB,YAEX2G,EAAY,CACVr6B,KAAMA,EAAK0zB,UACX6G,4BACAxf,aAAe/a,EAAK8a,6BAA2EtvB,EAAhDwU,EAAKA,KAA4B+a,eAElF/sB,OAGI4sC,GAA0B/tC,EAAAA,EAAAA,GAAgB,KACzCX,GAAgB2uC,kBACrBH,EA6GJ,SAA6Bz3B,EAA8B63B,GACzD,MAAM/R,EAAS9lB,EAAK7P,OAAQkxB,GACZ,UAAdA,EAAK52B,MAAoB42B,EAAKv0B,OAAS+qC,GAAmB54B,MAAMnS,MAE5D85B,EAAW5mB,EAAK7P,OAAQkxB,GACd,YAAdA,EAAK52B,MAAsB42B,EAAKv0B,OAAS+qC,GAAmB/uB,QAAQhc,MAEhE25B,EAAYzmB,EAAK7P,OAAQkxB,GACf,aAAdA,EAAK52B,MAAuB42B,EAAKv0B,OAAS+qC,GAAmBz+B,SAAStM,MAOxE,MAAO,CACLmS,MALkB6mB,EAAO5uB,KAAK6U,MAAM7U,KAAK4gC,SAAWhS,EAAOp1B,SAM3DoY,QALoB8d,EAAS1vB,KAAK6U,MAAM7U,KAAK4gC,SAAWlR,EAASl2B,SAMjE0I,SALqBqtB,EAAUvvB,KAAK6U,MAAM7U,KAAK4gC,SAAWrR,EAAU/1B,SAOxE,CAjIyBqnC,CAAoB9uC,EAAe2uC,iBAAkBJ,OAG5EQ,EAAAA,GAAAA,GAAYL,EAAyB5uC,EAjCP,SAiC0CR,GAAW,IAEnFmB,EAAAA,EAAAA,IAAU,KACJX,GAAUE,GAAgB2uC,kBAC5BD,KAED,CAAC5uC,EAAQE,GAAgB2uC,oBAG5BluC,EAAAA,EAAAA,IAAU,KACR,MAAM82B,EAAav3B,GAAgB2uC,iBAC9BpX,GAMe,IALIA,EAAWrwB,OAAQkxB,GAA0D,YAAdA,EAAK52B,MACzF+M,IAAK6pB,GAASA,EAAKznB,YACA4mB,EAAWrwB,OAAQkxB,GAA0D,UAAdA,EAAK52B,MACvF+M,IAAK6pB,GAASA,EAAKznB,UAEqCpC,IAAKoC,IAAYq+B,EAAAA,EAAAA,IAAoBr+B,EAAS,SAC7FyZ,QAASxI,KACnBqtB,EAAAA,GAAAA,IAAMrtB,EAAMstB,GAAAA,GAAeC,YAE5B,CAACnvC,GAAgB2uC,mBAEpB,MAAMzF,GAAYlnC,EAAAA,EAAAA,IAAQ,KACxB,IAAKusC,IAAsBzuC,EACzB,OAGF,MAAMgU,EAAO9T,GAAgB8T,KAEvBs7B,EAAe,CACnB,CAAC,UAAWvmC,EAAK,0BAA2BA,EAAK,iCACjD,CAAC,QAASA,EAAK,gCAAiCA,EAAK,uCACrD,CAAC,UAAWA,EAAK,6BAA8BA,EAAK,qCAGhDmC,EAAWojC,EACbvlC,EAAK,sBAAuB,CAAE1E,MAAMe,EAAAA,EAAAA,IAAa2D,EAAMulC,KACvDvlC,EAAK,sBAsCT,MAAO,CACLumC,eACAtrC,OArCA3B,EAAAA,GAAAA,cAAC6Z,GAAgB,CACfC,eAAgBsyB,EAAkBv4B,MAClCkG,kBAAmBqyB,EAAkBp+B,SACrCgM,iBAAkBoyB,EAAkB1uB,QACpClY,MAAOkB,EAAK,oBACZmC,SAAUA,IAiCZ0V,OA5BAve,EAAAA,GAAAA,cAAA,OAAKK,UDpIc,aCqIfsR,GACA3R,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACb,UAAWE,GAAqBa,KAAK,UAAUG,QAAS5B,GAC7D+G,EAAK,OAGTiL,GACC3R,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAACkpB,GAAAA,EAAQ,CACPE,MAAO1iB,EAAK,0BACZijC,QAASwC,EACT7mB,QAAS4mB,IAEXlsC,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACb,UAAWE,GAAqBa,KAAK,UAAUslC,SAAO,EAACnlC,QAAS+qC,GACrE36B,EAAK8a,wBACF/lB,EAAK,kBACLA,EAAK,oBAAqB,CAC1BhH,QAAQga,EAAAA,GAAAA,IAAkBhT,EAAOiL,EAAKA,KAA4B+a,aAAe,CAAE/S,QAAQ,KAC1F,CAAElQ,WAAW,SAY3B,CAAC2iC,EAAmBzuC,EAAQ+I,EAAMulC,EAAoBpuC,GAAgB8T,KAAMu6B,IAE/E,OACElsC,EAAAA,GAAAA,cAACktC,GAAAA,EAAe,CACdvvC,OAAQA,EACRgE,OAAQolC,GAAWplC,OACnB4c,OAAQwoB,GAAWxoB,OACnB0uB,aAAclG,GAAWkG,aACzBvuB,aAAW,EACX9d,QAASjB,O,gBC3Kf,MCkKA,IAAe/C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IACjBC,IAIQ,CACLsnB,aAJkBlnB,EAAAA,EAAAA,KAAWJ,EAAQA,EAAOyG,eAK5CssB,sBAJ2BC,EAAAA,EAAAA,KAA2BhzB,KAHxCD,CA/HQswC,EAC1BpwC,QACAqnB,cACAyL,2BAEA,MAAM,yBACJud,EAAwB,eACxBC,IACE7vC,EAAAA,EAAAA,MACEkJ,GAAOC,EAAAA,EAAAA,KACPhJ,EAASC,QAAQb,GACjBc,GAAiBC,EAAAA,EAAAA,GAAiBf,IAElC,YAAEgmC,GAAgBllC,GAAkB,CAAC,EAErC2c,EAAgBuoB,GAAatoB,UAE7BI,GAAcyyB,EAAAA,GAAAA,GAAevK,GAAawK,mBAE1C5tC,GAAcnB,EAAAA,EAAAA,GAAgB,KAClC4uC,MAGII,GAAchvC,EAAAA,EAAAA,GAAgB,KAC9BukC,GACFsK,EAAe,CAAEtK,gBAEnBqK,MAGI1yB,GAAwB7a,EAAAA,EAAAA,IAAQ,KACpC,IAAKkjC,IAAgBplC,EAAQ,OAE7B,MAAMgd,EAAiB,CAACooB,EAAY50B,YAAa40B,EAAY30B,WACvDwM,EAAemoB,EAAYnoB,aAEjC,OACE5a,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UDzEkG,WC0ElG6N,iBAAkByM,EAClBC,aAAcA,EACdC,YAAaA,EAAY4yB,eAG5B,CAAC1K,EAAaplC,EAAQkd,IAEnB6yB,GAAqB7tC,EAAAA,EAAAA,IAAQ,KAC1B,IACFukB,EACH2e,gBAED,CAAC3e,EAAa2e,IAEXphC,GAAS9B,EAAAA,EAAAA,IAAQ,IAEnBG,EAAAA,GAAAA,cAAA,OAAKK,UD1Fc,YC2FjBL,EAAAA,GAAAA,cAAA,OACEK,WAAWC,EAAAA,EAAAA,GD5F8B,YC6FzC8a,OAAOC,EAAAA,GAAAA,GAAWb,GAAiB,UAAUA,MAG5CE,EACD1a,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CAACC,KAAM0rC,EAAoBtsC,KAAK,QAAQf,UDjG2F,aCkG1IL,EAAAA,GAAAA,cAAC2mB,GAAAA,EAAa,CACZ3kB,KAAM0rC,EACNrtC,UDpG+J,WCqG/JkoC,iBAAe,EACf1hB,QAAM,EACNC,YAAU,EACV6mB,oBAAqBnzB,IAEvBxa,EAAAA,GAAAA,cAAA,KAAGK,UD1GkL,WC0GxJ+a,OAAOC,EAAAA,GAAAA,GAAWb,GAAiB,UAAUA,MACvE9T,EAAK,YAGV1G,EAAAA,GAAAA,cAAA,OAAKK,UD9GkE,YC+GrEL,EAAAA,GAAAA,cAAA,OAAKK,UD/GuM,YCiHxMqG,EAAK,wBAAyB,CAC5BiL,KAAM+7B,GAAoB3K,aAAav9B,SAI7CxF,EAAAA,GAAAA,cAAA,OAAKK,UDtHoO,YCwHrOqG,EAAK,sCAMd,CAAC8T,EAAeE,EAAuBgzB,EAAoBhnC,IAExDumC,EAAe,CACnB,CAAC,eAAgBvmC,EAAK,iCAAkCA,EAAK,iCAC7D,CAAC,iBAAkBA,EAAK,yCAA0CA,EAAK,yCACvE,CAAC,qBAAsBA,EAAK,4CAC1BA,EAAK,6CAGH6X,GAAS1e,EAAAA,EAAAA,IAAQ,KACrB,GAAKlC,EACL,OACEqC,EAAAA,GAAAA,cAAA,OAAKK,UD1I4P,YC2I/PL,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CACLE,KAAK,UACLG,QAASisC,GAER9mC,EAAK,2BACJmpB,GAAwB7vB,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,aAAarB,UDhJoE,gBCoJ3H,CAACqG,EAAMmpB,EAAsBlyB,IAEhC,OACEqC,EAAAA,GAAAA,cAACktC,GAAAA,EAAe,CACdvvC,OAAQA,EACRgE,OAAQA,EACRsrC,aAAcA,EACd1uB,OAAQA,EACRG,aAAW,EACX9d,QAASjB,O,4BC7Jf,UAAgB,OAAS,WAAW,YAAc,WAAW,SAAW,WAAW,YAAc,WAAW,MAAQ,WAAW,WAAa,YCsCtIiuC,GAA4B,CAChChqB,cAAc,EACdF,WAAY,WACZle,MAAO,GACPme,sBAAuB,WAEnBwe,GAAoB,IAAMpN,GAAAA,EAkHhC,IAAen4B,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IACjBC,IACC,MACEmnB,UACE4pB,OAAO,YACLC,IAGJC,eACEp5B,KAAMq5B,IAENlxC,EAEJ,MAAO,CACLgxC,cACAE,iBAfcnxC,CAhHMoxC,EAAGlxC,QAAO+wC,cAAaE,mBAC/C,MAAM,uBACJE,EAAsB,uBACtBC,EAAsB,mBACtB5K,EAAkB,0BAClB6K,EAAyB,mBACzBC,IACE7wC,EAAAA,EAAAA,MACEG,EAASC,QAAQb,IAEhBuxC,EAAoBC,IAAyBpwC,EAAAA,EAAAA,KAAS,GAEvDuI,GAAOC,EAAAA,EAAAA,KAEP9I,GAAiBC,EAAAA,EAAAA,GAAiBf,GAClC4U,EAAO9T,GAAgB8T,MAAMA,KAC7BqL,EAAiBrL,IAAQ1D,EAAAA,EAAAA,IAAkB0D,GAC3C68B,EAAc3wC,GAAgB8T,MAAM88B,YACtC3iC,KAAKyX,IAAI1lB,EAAe8T,KAAK88B,aAAc/J,EAAAA,GAAAA,MAAiB,QAAKvnC,EAE/DwC,GAAcnB,EAAAA,EAAAA,GAAgB,KAClC0vC,MAGIQ,GAAelwC,EAAAA,EAAAA,GAAiBmwC,IACpCP,EAA0B,CACxBz8B,KAAM9T,EAAgB8T,KAAK0zB,UAC3BsJ,eAIEC,GAAsBpwC,EAAAA,EAAAA,GAAgB,KAC1C6vC,EAAmB,CACjBQ,OAAQC,GAAAA,GAAgBC,gBAE1Bb,IACA3K,MAGF,OACEvjC,EAAAA,GAAAA,cAACI,EAAAA,EAAK,CACJzC,OAAQA,EACR6H,MAAOkB,EAAK,qBACZjB,gBAAc,EACd9E,QAAM,EACNC,QAASjB,GAERqd,GACChd,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAOoB,QACrB3B,EAAAA,GAAAA,cAAA,OAAKK,UAAWE,GAAO8hC,aACrBriC,EAAAA,GAAAA,cAACqO,EAAAA,EAAuB,CACtBhO,UAAWE,GAAOyN,SAClBE,iBAAkB,CAAC8O,EAAehP,SAAUG,YAAa6O,EAAehP,SAAUI,WAClFwM,aAAcoC,EAAehP,UAAU4M,aACvCC,YAAamC,EAAeU,SAASlP,UAEvCxO,EAAAA,GAAAA,cAACuO,EAAAA,EAAuB,CACtBlO,UAAWE,GAAOiO,QAClBpN,KAAM+gC,GACN3zB,QAASwO,EAAenJ,OAAOrF,WAGnCxO,EAAAA,GAAAA,cAACyB,EAAAA,EAAI,CAACC,KAAK,OAAOrB,UAAWE,GAAO+hC,QACpCtiC,EAAAA,GAAAA,cAAC+B,EAAAA,EAAM,CACLC,KAAM4rC,GACNxsC,KAAK,QACLf,UAAWE,GAAO0B,UAGtBjC,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,GAAOuC,aAClB4D,EAAK,0BAA2B,CAC/BiL,KAAM,GAAGA,EAAKnM,UAAUmM,EAAKhE,UAC5B,CACDlE,WAAW,EACX+I,cAAc,EACdqtB,kBAAmB,CAAC,UAK3BjiC,QAAQ4wC,IACPxuC,EAAAA,GAAAA,cAAA,KAAGK,UAAWE,GAAOyuC,YAClBtoC,EAAK,mBAAoB,CAAEuoC,MAAMC,EAAAA,GAAAA,IAAQV,IAAgB,CAAE9kC,aAAawlC,EAAAA,GAAAA,IAAQV,OAGnFV,GACA9tC,EAAAA,GAAAA,cAAAA,EAAAA,GAAAA,SAAA,KACEA,EAAAA,GAAAA,cAAA,QAAMK,UAAWE,GAAO4uC,YAAazoC,EAAK,yBAC1C1G,EAAAA,GAAAA,cAACkB,EAAAA,EAAM,CAACb,UAAU,OAAOe,KAAK,UAAUG,QAASqtC,GAAsBloC,EAAK,cAG/EonC,IAAgBU,GACfxuC,EAAAA,GAAAA,cAACovC,GAAAA,EAAY,CACXC,kBAAgB,EAChBpU,YAAav0B,EAAK,4BAClB4oC,MAAOzxC,GAAgB0xC,UAAY7oC,EAAK8oC,YAAY3xC,GAAgB0xC,UACpEzsC,YAAa4D,EAAK,4BAClB+oC,WAAYtB,EACZn5B,UAAWnX,GAAgBmX,UAC3BL,KAAMq5B,EACN0B,kBAAmBpB,EACnBqB,iBAAkBhyC,EAClBiyC,2BAA4BrB,EAC5BsB,YAAanpC,EAAK,sBAClBopC,SAAUpB,Q,oGCjGpB,SAASqB,KACT,CC7COC,eAAeC,GAAiBprC,GACrC,MAAMqrC,QAAqBC,EAAAA,GAAAA,IAAQ,cAAe,CAAEtrC,UACpD,GAAKqrC,EAIL,MAFY,IAAIA,EAAaE,oBAAqBF,EAAaG,gBAGjE,CCuBA,MA8JA,IAAezzC,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IACjBC,IACC,MAAM,YAAE2G,EAAW,cAAEF,GAAkBzG,EAEvC,MAAO,CACLwzC,WAAY7sC,GAAaD,QACzBD,kBANc1G,CA9JM0zC,EACxBxzC,QAAOuzC,aAAY/sC,oBAEnB,MAAM,uBAAEitC,EAAsB,sBAAEC,EAAqB,aAAEC,IAAiBlzC,EAAAA,EAAAA,MAClEG,EAASC,QAAQb,GAEjB2J,GAAOC,EAAAA,EAAAA,MAEN1C,EAAaC,IAAkB/F,EAAAA,EAAAA,IAAiB,IAEjDN,GAAiBC,EAAAA,EAAAA,GAAiBf,GAClCuzB,EAAazyB,GAAgB8T,MAAMA,KACnCqL,EAAiBsT,IAAcriB,EAAAA,EAAAA,IAAkBqiB,IAEhD0R,EAAY2O,IAAiBxyC,EAAAA,EAAAA,MAE9ByyC,GAA0B9yC,EAAAA,EAAAA,GAAiBkkC,GAC3C6O,GAAwBhxC,EAAAA,EAAAA,IAAQ,KACpC,MAAM/C,GAASuH,EAAAA,EAAAA,MACf,OAAOusC,GAA0B1oC,EAAAA,EAAAA,KAAWpL,EAAQ8zC,QAA2BzzC,GAC9E,CAACyzC,IAEEE,GAAiBC,EAAAA,GAAAA,IAA8BC,EAAAA,KAE/CC,GAAiBpxC,EAAAA,EAAAA,IAAQ,KACtB4E,EAAAA,EAAAA,IAAO,IACR6rC,GAAc,MACdQ,GAAkB,KAEvB,CAACR,EAAYQ,KAER7vB,OAAQiwB,EAAQ,oBAAEC,GDxCb,UAAuB,MACpCtsC,EAAK,QACLusC,EAAUnB,GAAgB,aAC1BnvB,EAAY,gBACZuwB,EA3BuB,IA2BW,WAClCv9B,IAQA,MAAMw9B,EDpCO,SACbC,EAAqBC,EAAYC,GAEjC,MAAOtxB,EAAOe,IAAY/iB,EAAAA,EAAAA,OACpB,SAAEuzC,EAAQ,mBAAEC,GAkBpB,WACE,MAAM7jC,GAAYpQ,EAAAA,EAAAA,KAAO,GAEnBi0C,GAAqBhY,EAAAA,EAAAA,IAAY,KACrC7rB,EAAUpP,SAAU,GACnB,IAEGkzC,GAAcC,EAAAA,GAAAA,KACdC,GAAiBnY,EAAAA,EAAAA,IAAY,KAC5B7rB,EAAUpP,UAIfoP,EAAUpP,SAAU,EACpBkzC,MACC,CAACA,IAGJ,OAFAG,EAAAA,GAAAA,IAAkBhC,GAAM+B,GAEjB,CACLJ,UAAUM,EAAAA,EAAAA,MACVL,qBAEJ,CAxC2CM,GACnCC,GAAeC,EAAAA,GAAAA,GAAgBX,GAAI,GAczC,OAZAY,EAAAA,GAAAA,GAAc,KACRV,EACFC,IAIFO,EAAa,KACXhxB,EAASqwB,QAGV,IAAIE,EAAcC,IAEdvxB,CACT,CCgByBkyB,CAAiB,IAAMxtC,EAAOwsC,EAAiB,CAACxsC,KAChEssC,EAAqBmB,IAA0Bn0C,EAAAA,EAAAA,IAAiB,IACjE8F,EAAeY,EAAgBysC,EAARzsC,EACvB0tC,GAAgB/zC,EAAAA,EAAAA,GAAgB4yC,GAatC,MAAO,KAXQoB,EAAAA,GAAAA,GAASxC,UACtB,IAAK/rC,GAAe6P,EAElB,OADAw+B,EAAuB,IAChBG,QAAQC,QAAQ5xB,GAGzB,MAAM6xB,QAAeJ,EAActuC,GAEnC,OADAquC,EAAuBruC,GAChB0uC,GACN,CAAC1uC,EAAa6c,EAAcyxB,EAAez+B,GAAagN,GAIzDqwB,sBAEJ,CCOoDyB,CAAc,CAC9D/tC,MAAOZ,EACP6c,aAAcmwB,IAGVj8B,EAAYm8B,IAAwBltC,EAEpC4uC,GAAahzC,EAAAA,EAAAA,IAAQ,IACrBsxC,EAA4B2B,GAAAA,EAEzB,CAAC,CACNzzC,KAAM,WACNukB,cAAc,EACdF,WAAY,UACZqvB,YAAa,EACbvtC,MAAOkB,EAAK,qBAEb,CAACA,EAAMyqC,IAEJ6B,GAAuBx0C,EAAAA,EAAAA,GAAiBy9B,IAC3B,aAAbA,IAEJwU,EAAsB,CACpB9+B,KAAM9T,EAAgB8T,OAExB6+B,OAGIyC,GAAapzC,EAAAA,EAAAA,IAAQ,KACzB,GAAImV,EAAW,OAAO89B,GAAAA,EACtB,MAAMh2C,GAASuH,EAAAA,EAAAA,MAEf,OAAOS,EAAAA,EAAAA,IAAaosC,GAAY,IAAInsC,OAAQ6C,GAC1CA,IAAWrE,IAAiBw+B,EAAAA,EAAAA,KAAcjlC,EAAQ8K,KAEpD,IACC,CAACoN,EAAWk8B,EAAU3tC,IAEnB6iC,GAAoB5nC,EAAAA,EAAAA,GAAgB,KACxCmyC,OAAcxzC,MAGhBmB,EAAAA,EAAAA,IAAU,KACHX,GACHgzC,OAAcxzC,IAEf,CAACQ,IAEJ,MAAMu1C,GAAiB10C,EAAAA,EAAAA,GAAgB,KAChCX,GAAgB8T,KAAK0zB,YAC1BqL,EAAa,CACX/+B,KAAM9T,EAAe8T,KAAK0zB,UAC1BvF,YAAa8Q,EACbuC,cAAet1C,EAAe8T,KAAKwhC,gBAGrC/M,IACAoK,OAGF,OACExwC,EAAAA,GAAAA,cAACuF,EAAAA,EAAW,CACV5H,OAAQA,EACRiD,QAAS4vC,EACThrC,MAAOkB,EAAK,qBACZjB,gBAAc,EACdC,qBAAmB,EACnBC,iBAAe,EACfytC,cAAY,GAEZpzC,EAAAA,GAAAA,cAAC8F,EAAAA,EAAU,CACTC,QAASktC,EACTJ,WAAYA,EACZQ,yBAA0BL,EAC1B5sC,oBAAkB,EAClBktC,mBAAiB,EACjBntC,cAAY,EACZotC,iBAAe,EACfv+B,UAAWA,EACXhP,YAAa/B,EACbgC,kBAAmBS,EAAK,UACxBR,eAAgBhC,EAChBoC,mBAAoBqqC,IAErB3zB,GACChd,EAAAA,GAAAA,cAACqpC,GAAAA,EAAa,CACZ1rC,OAAQC,QAAQokC,GAChBsH,gBAAc,EACd1oC,QAASwlC,EACTmD,aAAc1rC,GAAgB8T,KAAKwhC,cAC/BzsC,EACA,4BACA,CAAEhH,QAAQga,EAAAA,GAAAA,IAAkBhT,EAAM7I,EAAe8T,KAAKwhC,cAAe,CAAEx5B,QAAQ,KAC/E,CAAElQ,WAAW,IACX/C,EAAK,iCACX8iC,eAAgB0J,GAEfrC,GACC7wC,EAAAA,GAAAA,cAACoiC,GAAmB,CAClBpgC,KAAM6uC,EACNl/B,KAAM2e,IAGVtwB,EAAAA,GAAAA,cAAA,SACGnC,GAAgB8T,KAAKwhC,cAClBzsC,EAAK,iCAAkC,CACvCiL,KAAMjL,EAAK,aAAc,CAAElB,MAAO8qB,EAAW9qB,MAAOmI,OAAQ2iB,EAAW3iB,SACvEjO,QAAQgqC,EAAAA,GAAAA,IAAkBhjC,EAAM7I,EAAe8T,KAAKwhC,eACpDnxC,MAAMe,EAAAA,EAAAA,IAAa2D,EAAMmqC,IACxB,CACDpnC,WAAW,EACX+I,cAAc,IAEd9L,EAAK,qCAAsC,CAC3CiL,KAAMjL,EAAK,aAAc,CAAElB,MAAO8qB,EAAW9qB,MAAOmI,OAAQ2iB,EAAW3iB,SACvE3L,MAAMe,EAAAA,EAAAA,IAAa2D,EAAMmqC,IACxB,CACDpnC,WAAW,EACX+I,cAAc,UC9G9B,IAAe5V,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAqB,CAACC,GAAUC,YAG3C,CACLC,KAHWD,GAAOuC,QAASpC,EAAAA,EAAAA,KAAWJ,EAAQC,EAAMuC,aAAUnC,IAD9CN,CAtDI22C,EAAGz2C,QAAOC,WAChC,MAAM,qBAAEy2C,EAAoB,8BAAEC,IAAkCl2C,EAAAA,EAAAA,OAEzDm2C,EAAmBC,IAAwBz1C,EAAAA,EAAAA,KAAS,GAErDN,GAAiBC,EAAAA,EAAAA,GAAiBf,GAClC82C,GAAgB/1C,EAAAA,EAAAA,GAAiBd,IAEjC,cAAE82C,EAAa,OAAEx0C,GAAWzB,GAAkB,CAAC,EAE/C6I,GAAOC,EAAAA,EAAAA,KAEPhJ,EAASC,QAAQb,GAEjBg3C,GAAyBv1C,EAAAA,EAAAA,GAAgB,KAC7Ci1C,IACKn0C,GAELo0C,EAA+B,CAAEp0C,SAAQ00C,oBAAqBL,MAGhE,OACE3zC,EAAAA,GAAAA,cAACqpC,GAAAA,EAAa,CACZ1rC,OAAQA,EACRiD,QAAS6yC,EACTjuC,MAAOkB,EAAK,kBACZ6iC,aAAc7iC,EAAK,2BACnB8iC,eAAgBuK,GAEfrtC,EAAK,gCAAiC,CACrC1E,KAAM6xC,IAAiB9wC,EAAAA,EAAAA,IAAa2D,EAAMmtC,IACzC,CACDrhC,cAAc,EACd/I,WAAW,IAGX7L,QAAQk2C,IACN9zC,EAAAA,GAAAA,cAACkpB,GAAAA,EAAQ,CACP7oB,UAAU,kBACV+oB,MAAO1iB,EAAK,oCAAqC,CAC/ChH,QAAQgqC,EAAAA,GAAAA,IAAkBhjC,EAAMotC,IAC/B,CACDthC,cAAc,EACd/I,WAAW,IAEb6b,QAASquB,EACThK,QAASiK,Q,gBC/CrB,MAwFA,IAAeh3C,EAAAA,EAAAA,KAAKC,EAAAA,EAAAA,IAAsBC,IACxC,MAAM+mB,EAAc/mB,EAAO0C,OAAOgH,QAC5BwN,EAAalX,EAAOqS,KAAK3I,SAAS9G,OAExC,MAAO,CACLmkB,cACA7P,eANgBnX,CAxFiCo3C,EACnDl3C,QACA8mB,cACA7P,iBAEA,MAAMkgC,GAAU12C,EAAAA,EAAAA,MAEVkJ,GAAOC,EAAAA,EAAAA,KAEPwtC,GAAgBxa,EAAAA,EAAAA,IAAY,KAChC,IAAK58B,GAAOq3C,WAEV,YADAF,EAAQG,yBAIV,MAAM,SAAE50C,EAAQ,UAAE60C,GAAcv3C,EAC1BkW,EAAqB,QAAbxT,EACR80C,EAAiBthC,EAAQe,EAAa6P,GAAankB,OAEzD,QAAuBvC,IAAnBo3C,EAAJ,CAKA,GAAIA,EAAiBD,EAMnB,OALAJ,EAAQttC,sBAAsB,CAC5BnH,SAAUwT,EAAQ,MAAQ,MAC1BuhC,OAAOC,EAAAA,GAAAA,aAETP,EAAQG,yBAIVH,EAAQ78B,oBAAoB,CAC1B+8B,WAAYr3C,EAAMq3C,WAClBI,OAAOC,EAAAA,GAAAA,QAETP,EAAQG,wBAfR,MAFEH,EAAQG,0BAkBT,CAACt3C,EAAO8mB,EAAa7P,EAAYkgC,IAE9Bv0C,GAAcg6B,EAAAA,EAAAA,IAAY,KAC9Bua,EAAQG,0BACP,CAACH,IAEJ,IAAKn3C,EACH,OAGF,MAAM,eACJ23C,EAAc,UACdJ,EAAS,SACT70C,GACE1C,EAIJ,IAAI43C,EACAC,EAUJ,MAb2B,QAAbn1C,GAMZk1C,GAAqBlL,EAAAA,GAAAA,IAAgB/iC,GAAM4jC,EAAAA,EAAAA,IAAoBoK,IAC/DE,GAAgBnL,EAAAA,GAAAA,IAAgB/iC,GAAM4jC,EAAAA,EAAAA,IAAoBgK,MAE1DK,GAAqBjL,EAAAA,GAAAA,IAAkBhjC,EAAMguC,GAC7CE,GAAgBlL,EAAAA,GAAAA,IAAkBhjC,EAAM4tC,IAIxCt0C,EAAAA,GAAAA,cAACqpC,GAAAA,EAAa,CACZ1rC,OAAQC,QAAQb,GAChB6D,QAASjB,EACT6F,MAAOkB,EAAK,gBACZ8iC,eAAgB2K,EAChB5K,aAAc7iC,EAAK,gBAEnB1G,EAAAA,GAAAA,cAAA,SACG0G,EAAK,mBAAoB,CACxBguC,eAAgBC,EAChBL,UAAWM,GACV,CACDpiC,cAAc,EACd/I,WAAW,Q","sources":["webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e","webpack://TeleGPT/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://TeleGPT/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://TeleGPT/./src/components/modals/stars/BalanceBlock.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://TeleGPT/./src/components/modals/stars/helpers/transaction.ts","webpack://TeleGPT/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://TeleGPT/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://TeleGPT/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://TeleGPT/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://TeleGPT/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://TeleGPT/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://TeleGPT/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://TeleGPT/./src/components/modals/paidReaction/StarSlider.tsx","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://TeleGPT/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://TeleGPT/./src/components/modals/gift/GiftComposer.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://TeleGPT/./src/components/modals/gift/GiftItemPremium.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftItemStar.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://TeleGPT/./src/components/modals/gift/GiftModalResaleScreen.tsx","webpack://TeleGPT/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.module.scss?8276","webpack://TeleGPT/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftResaleFilters.module.scss?c5a8","webpack://TeleGPT/./src/components/modals/gift/GiftResaleFilters.tsx","webpack://TeleGPT/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://TeleGPT/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://TeleGPT/./src/components/modals/gift/GiftModal.tsx","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://TeleGPT/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://TeleGPT/./src/components/common/gift/GiftTransferPreview.module.scss?0f0d","webpack://TeleGPT/./src/components/common/gift/GiftTransferPreview.tsx","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://TeleGPT/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://TeleGPT/./src/components/modals/gift/resale/GiftResalePriceComposerModal.module.scss?6666","webpack://TeleGPT/./src/components/modals/gift/resale/GiftResalePriceComposerModal.tsx","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://TeleGPT/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://TeleGPT/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://TeleGPT/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://TeleGPT/./src/hooks/useDebouncedMemo.ts","webpack://TeleGPT/./src/hooks/usePeerSearch.ts","webpack://TeleGPT/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://TeleGPT/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://TeleGPT/./src/components/modals/priceConfirm/PriceConfirmModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/GoldStar.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"lastSection\":\"f749AI4g\",\"sectionTitle\":\"FF8gm7MP\",\"hint\":\"Rs8WXoOz\",\"tos\":\"Vu6blJk9\",\"topUpButton\":\"dc_DZoVF\",\"tonBalanceContainer\":\"lorbW9II\",\"tonBalance\":\"h2Fs3tOv\",\"tonIconBalance\":\"Ut6GidJP\",\"tonInUsd\":\"FdcdsB4l\",\"tonIconLogo\":\"_hCjjyEv\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiTypeCurrencyAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  const renderStarsAmount = () => {\n    return (\n      <>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined && balance.currency === STARS_CURRENCY_CODE\n          ? formatStarsAmount(lang, balance) : '…'}\n        {withAddButton && (\n          <BadgeButton\n            className={styles.addStarsButton}\n            onClick={() => openStarsBalanceModal({})}\n          >\n            <Icon\n              className={styles.addStarsIcon}\n              name=\"add\"\n            />\n          </BadgeButton>\n        )}\n      </>\n    );\n  };\n\n  const renderTonAmount = () => {\n    return (\n      <>\n        <Icon name=\"toncoin\" />\n        {balance !== undefined ? convertCurrencyFromBaseUnit(balance.amount, balance.currency) : '…'}\n      </>\n    );\n  };\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          {balance?.currency === TON_CURRENCY_CODE ? renderTonAmount() : renderStarsAmount()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction, ApiTypeCurrencyAmount } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer, shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n\n  if (transaction.isGiftResale) {\n    return isNegativeAmount(transaction.amount)\n      ? lang('StarGiftSaleTransaction')\n      : lang('StarGiftPurchaseTransaction');\n  }\n  if (transaction.isPostsSearch) {\n    return lang('PostsSearchTransaction');\n  }\n\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) {\n    if (transaction.amount.currency === TON_CURRENCY_CODE) {\n      return lang('TonGiftReceived');\n    }\n    return oldLang('StarsGiftReceived');\n  }\n  if (transaction.starGift) {\n    return isNegativeAmount(transaction.amount) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n    && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n\nexport function isNegativeAmount(currencyAmount: ApiTypeCurrencyAmount) {\n  if (currencyAmount.currency === STARS_CURRENCY_CODE) {\n    return isNegativeStarsAmount(currencyAmount);\n  }\n  return currencyAmount.amount < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    amount,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (!shouldUseCustomPeer(transaction)) {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isGiftResale && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isPostsSearch) {\n      title = getTransactionTitle(oldLang, lang, transaction);\n      description = undefined;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, amountColorClass)}\n        >\n          {formatStarsTransactionAmount(lang, amount)}\n        </span>\n        {amount.currency === STARS_CURRENCY_CODE && <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />}\n        {amount.currency === TON_CURRENCY_CODE && <Icon name=\"toncoin\" className={amountColorClass} />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  PAID_MESSAGES_PURPOSE,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n  TON_TOPUP_URL_DEFAULT,\n  TON_USD_RATE_DEFAULT,\n} from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit, convertTonToUsd, formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ParticlesHeader from '../common/ParticlesHeader.tsx';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  tonBalanceState?: GlobalState['ton'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n  tonUsdRate?: number;\n  tonTopupUrl: string;\n  animationLevel: AnimationLevel;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, tonBalanceState, canBuyPremium, shouldForceHeight, tonUsdRate, tonTopupUrl, animationLevel,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n    openUrl,\n  } = getActions();\n\n  const currency = modal?.currency || STARS_CURRENCY_CODE;\n  const currentState = currency === TON_CURRENCY_CODE ? tonBalanceState : starsBalanceState;\n  const { balance, history } = currentState || {};\n  const { subscriptions } = (currency === STARS_CURRENCY_CODE && starsBalanceState) || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && (starsBalanceState || tonBalanceState));\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const modalHeight = useMemo(() => {\n    const transactionCount = history?.all?.transactions.length || 0;\n    if (transactionCount == 1) {\n      return '35.5rem';\n    }\n    if (transactionCount == 2) {\n      return '39.25rem';\n    }\n    if (transactionCount == 3) {\n      return '43rem';\n    }\n    return '45rem';\n  }, [history?.all?.transactions.length]);\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  const renderStarsHeaderSection = () => {\n    return (\n      <>\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"gold\"\n          title={starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          description={renderText(\n            starsNeededText || oldLang('TelegramStarsInfo'),\n            ['simple_markdown', 'emoji'],\n          )}\n          isDisabled={!isOpen}\n        />\n        {canBuyPremium && !areBuyOptionsShown && (\n          <Button\n            className={styles.starButton}\n            onClick={showBuyOptions}\n            fluid\n          >\n            {oldLang('Star.List.BuyMoreStars')}\n          </Button>\n        )}\n        {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n          <Button\n            isText\n            noForcedUpperCase\n            className={styles.starButton}\n            fluid\n            onClick={openStarsGiftingPickerModalHandler}\n          >\n            {oldLang('TelegramStarsGift')}\n          </Button>\n        )}\n        {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n          <StarTopupOptionList\n            starsNeeded={starsNeeded}\n            options={starsBalanceState.topupOptions}\n            onClick={handleBuyStars}\n          />\n        )}\n      </>\n    );\n  };\n\n  const renderTonHeaderSection = () => {\n    const tonAmount = convertCurrencyFromBaseUnit(balance?.amount || 0, TON_CURRENCY_CODE);\n    return (\n      <>\n        <ParticlesHeader\n          model=\"speeding-diamond\"\n          color=\"blue\"\n          title={lang('CurrencyTon')}\n          description={lang('DescriptionAboutTon')}\n          isDisabled={!isOpen}\n        />\n        <div className={styles.tonBalanceContainer}>\n          <div className={styles.tonBalance}>\n            <Icon name=\"toncoin\" className={styles.tonIconBalance} />\n            {tonAmount}\n          </div>\n          {Boolean(tonUsdRate) && (\n            <span className={styles.tonInUsd}>\n              {`≈ ${formatCurrencyAsString(\n                convertTonToUsd(balance?.amount || 0, tonUsdRate, true),\n                'USD',\n                lang.code,\n              )}`}\n            </span>\n          )}\n        </div>\n        <Button\n          className={styles.topUpButton}\n          onClick={handleTonTopUp}\n          fluid\n        >\n          {lang('ButtonTopUpViaFragment')}\n        </Button>\n      </>\n    );\n  };\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n      isTon: currency === TON_CURRENCY_CODE,\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  const handleTonTopUp = useLastCallback(() => {\n    openUrl({ url: tonTopupUrl, shouldSkipModal: true });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n      dialogStyle={`--modal-height: ${modalHeight}`}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {currency !== TON_CURRENCY_CODE && <BalanceBlock balance={balance} className={styles.modalBalance} />}\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          {currency === TON_CURRENCY_CODE ? renderTonHeaderSection() : renderStarsHeaderSection()}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {currency === TON_CURRENCY_CODE && (\n          <div className={styles.hint}>\n            {lang('TonModalHint')}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.lastSection}>\n              <Transition\n                name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const shouldForceHeight = modal?.currency === TON_CURRENCY_CODE\n      ? Boolean(global.ton?.history?.all?.transactions.length)\n      : Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      tonBalanceState: global.ton,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      tonUsdRate: global.appConfig?.tonUsdRate || TON_USD_RATE_DEFAULT,\n      tonTopupUrl: global.appConfig?.tonTopupUrl || TON_TOPUP_URL_DEFAULT,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarsBalanceModal));\n","import React from '@teact';\nimport { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => Boolean(media.duration));\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {Boolean(disclaimerText) && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"subtitleBadge\":\"V7kDVPLm\",\"radialPattern\":\"UvhsGZLf\",\"amount\":\"zTVWZg63\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React from '@teact';\nimport type { TeactNode } from '@teact';\nimport { memo, useMemo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n  ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport {\n  formatStarsTransactionAmount,\n} from '../../../global/helpers/payments';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: TeactNode;\n  subtitlePeer?: ApiPeer;\n  className?: string;\n  resellPrice?: ApiTypeCurrencyAmount;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  subtitlePeer,\n  className,\n  resellPrice,\n}: OwnProps) => {\n  const {\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHover, markHover, unmarkHover] = useFlag();\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={buildClassName('interactive-gift', styles.transitionSlide)}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n          noLoop={!isHover}\n          onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n          onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {Boolean(subtitle) && (\n        <div\n          className={buildClassName(styles.subtitle, subtitlePeer && styles.subtitleBadge)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n          onClick={() => {\n            if (subtitlePeer) {\n              openChat({ id: subtitlePeer.id });\n            }\n          }}\n        >\n          {subtitle}\n        </div>\n      )}\n      {resellPrice && (\n        <p className={styles.amount}>\n          <span>\n            {formatStarsTransactionAmount(lang, resellPrice)}\n          </span>\n          {resellPrice.currency === 'XTR' && <StarIcon type=\"gold\" size=\"middle\" />}\n          {resellPrice.currency === 'TON' && <Icon name=\"toncoin\" />}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"refunded\":\"sxWAwxTd\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\",\"avatar\":\"hcrszlpT\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../../config';\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal,\n  peer,\n  canPlayAnimatedEmojis,\n  topSticker,\n  paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, amount, isGiftUpgrade, starGift, isGiftResale,\n      starRefCommision,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n      && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId ? getMessageLink(peer, undefined, giveawayPostId) : undefined;\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker && !transaction.isPostsSearch;\n    const avatarPeer = !photo ? ((!shouldUseCustomPeer(transaction) && peer) || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n          resellPrice={transaction.amount}\n        />\n      </div>\n    );\n\n    const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar\n            className={styles.avatar}\n            peer={avatarPeer}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n        )}\n        {!sticker && !transaction.isPostsSearch && (\n          <InteractiveSparkles\n            className={buildClassName(styles.starsBackground)}\n            color=\"gold\"\n            onRequestAnimation={handleRequestAnimation}\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n          />\n        )}\n        {Boolean(title) && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, amountColorClass)}\n          >\n            {formatStarsTransactionAmount(lang, amount)}\n          </span>\n          {amount.currency === STARS_CURRENCY_CODE && <StarIcon type=\"gold\" size=\"middle\" />}\n          {amount.currency === 'TON' && <Icon name=\"toncoin\" className={amountColorClass} />}\n          {transaction.isRefund && (\n            <p className={styles.refunded}>{lang('Refunded')}</p>\n          )}\n        </p>\n        {Boolean(transaction.paidMessages && transaction.starRefCommision && paidMessageCommission) && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission! / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    if (isGiftResale) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        isNegativeAmount(transaction.amount)\n          ? lang('StarGiftSaleTransaction')\n          : lang('StarGiftPurchaseTransaction'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeAmount(amount) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    if (!transaction.isPostsSearch) {\n      tableData.push([\n        peerLabel,\n        peerId ? { chatId: peerId } : toName || '',\n      ]);\n    }\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.amount.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink && transaction.amount.currency === STARS_CURRENCY_CODE) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.amount, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker,\n    paidMessageCommission, handleRequestAnimation]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    const currencyAmount = modal?.transaction.amount;\n    const starsGiftSticker = modal?.transaction.isGift\n      ? (currencyAmount?.currency === STARS_CURRENCY_CODE ? selectGiftStickerForStars(global, currencyAmount?.amount)\n        : selectGiftStickerForTon(global, currencyAmount?.amount)) : undefined;\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\",\"avatarWrapper\":\"wuTMXDP9\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar\n            peer={!photo ? peer : undefined}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <InteractiveSparkles\n          className={buildClassName(styles.starsBackground)}\n          color=\"gold\"\n          onRequestAnimation={handleRequestAnimation}\n          centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React from '@teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  const floatingBadgeRef = useRef<HTMLDivElement>();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />)}\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift && gift.type === 'starGift';\n  const isPremiumGift = 'months' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (isPremiumGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    if (isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName || undefined,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n    return undefined;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars, isPremiumGift]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    if (isPremiumGift) {\n      openInvoice({\n        type: 'giftcode',\n        userIds: [peerId],\n        currency: gift.currency,\n        amount: gift.amount,\n        option: gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n    }\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : isPremiumGift ? formatCurrency(lang, gift.amount, gift.currency) : undefined;\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && Boolean(gift.availabilityRemains) && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  if ((!isStarGift && !isPremiumGift) || !localMessage) return;\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : isPremiumGift ? gift.months : undefined}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"premiumRequired\":\"NBYIITte\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\",\"radialPattern\":\"Nkotr8Q4\",\"stickerWrapper\":\"rUSoeQXb\"};","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React from '@teact';\nimport { memo, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGift, ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { getGiftAttributes, getStickerFromGift } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGift, target: 'original' | 'resell') => void;\n  isResale?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({\n  gift, observeIntersection, onClick, isResale, isCurrentUserPremium,\n}: OwnProps & StateProps) {\n  const { openGiftInfoModal, openPremiumModal, showNotification } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  function getPriceAmount(amounts?: ApiTypeCurrencyAmount[]) {\n    if (!amounts) return { amount: 0, currency: STARS_CURRENCY_CODE };\n\n    if (gift.type === 'starGiftUnique' && gift.resaleTonOnly) {\n      const tonAmount = amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n      if (tonAmount) return tonAmount;\n    }\n\n    const starsAmount = amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n    return starsAmount;\n  }\n\n  const lang = useLang();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const sticker = getStickerFromGift(gift);\n  const isGiftUnique = gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n  const regularGift = !isGiftUnique ? gift : undefined;\n\n  const priceInfo = !isGiftUnique\n    ? { amount: regularGift?.stars || 0, currency: STARS_CURRENCY_CODE }\n    : getPriceAmount(uniqueGift?.resellPrice);\n  const priceCurrency = priceInfo?.currency || STARS_CURRENCY_CODE;\n  const resellMinStars = regularGift?.resellMinStars;\n  const priceInStarsAsString = !isGiftUnique && isResale && resellMinStars\n    ? lang.number(resellMinStars) + '+' : priceInfo?.amount || 0;\n  const isLimited = !isGiftUnique && Boolean(regularGift?.isLimited);\n  const isSoldOut = !isGiftUnique && Boolean(regularGift?.isSoldOut);\n  const isPremiumRequired = Boolean(gift?.requirePremium);\n  const isUserLimitReached = Boolean(regularGift?.limitedPerUser && !regularGift?.perUserRemains);\n  const perUserTotal = regularGift?.perUserTotal;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut && !isResale) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    if (isUserLimitReached) {\n      showNotification({\n        message: lang('NotificationGiftsLimit', {\n          count: perUserTotal,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        }),\n      });\n      return;\n    }\n\n    if (isPremiumRequired && !isCurrentUserPremium) {\n      openPremiumModal({\n        gift,\n      });\n      return;\n    }\n\n    onClick(gift, isResale ? 'resell' : 'original');\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift]);\n\n  const giftNumber = isGiftUnique ? gift.number : 0;\n\n  const giftRibbon = useMemo(() => {\n    if (isGiftUnique) {\n      const { backdrop } = getGiftAttributes(gift) || {};\n      if (!backdrop) {\n        return undefined;\n      }\n      return (\n        <GiftRibbon\n          color={[backdrop.centerColor, backdrop.edgeColor]}\n          text={\n            lang('GiftSavedNumber', { number: giftNumber })\n          }\n        />\n      );\n    }\n    if (isPremiumRequired) {\n      return <GiftRibbon color=\"orange\" text={lang('LimitPremium')} />;\n    }\n    if (isResale) {\n      return <GiftRibbon color=\"green\" text={lang('GiftRibbonResale')} />;\n    }\n    if (isSoldOut) {\n      return <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />;\n    }\n    if (isLimited) {\n      return <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />;\n    }\n    return undefined;\n  }, [isGiftUnique, isResale, gift, isSoldOut, isLimited, lang, giftNumber, isPremiumRequired]);\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    const visible = entry.isIntersecting;\n    setIsVisible(visible);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'interactive-gift',\n        styles.container,\n        styles.starGift,\n        'starGiftItem',\n        isPremiumRequired && styles.premiumRequired,\n      )}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      <Button\n        className={styles.buy}\n        nonInteractive\n        size=\"tiny\"\n        color={isGiftUnique ? 'bluredStarsBadge' : 'stars'}\n        withSparkleEffect={isVisible}\n        pill\n        fluid\n      >\n        {priceCurrency === TON_CURRENCY_CODE\n          ? formatTonAsIcon(lang, priceInStarsAsString || 0, { shouldConvertFromNanos: true, className: styles.star })\n          : formatStarsAsIcon(lang, priceInStarsAsString || 0, { asFont: true, className: styles.star })}\n      </Button>\n      {giftRibbon}\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n    };\n  })(GiftItemStar),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"resaleScreenRoot\":\"Vce_TsJO\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"resaleStarGiftsContainer\":\"RSFcSNGL\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"resaleHeader\":\"cJRBgg9B\",\"resaleHeaderContentContainer\":\"OXYQmfGK\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"resaleHeaderText\":\"bp_KPx8I\",\"commonHeaderText\":\"ybZo03if\",\"resaleHeaderDescription\":\"XefHUFm1\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"avatar\":\"_3hY4vIep\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\",\"notFoundGiftsRoot\":\"UqnRlJ1n\",\"notFoundGiftsDescription\":\"g0VbwIG_\",\"notFoundGiftsLink\":\"j2zPEQr8\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions } from '../../../types';\n\nimport { RESALE_GIFTS_LIMIT } from '../../../config';\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Transition from '../../ui/Transition';\nimport GiftItemStar from './GiftItemStar';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  onGiftClick: (gift: ApiStarGift) => void;\n};\n\ntype StateProps = {\n  gift?: ApiStarGift;\n  resellGifts?: ApiStarGift[];\n  filter: ResaleGiftsFilterOptions;\n  areGiftsAllLoaded?: boolean;\n  areGiftsLoading?: boolean;\n  updateIteration: number;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst GiftModalResaleScreen: FC<OwnProps & StateProps> = ({\n  resellGifts,\n  gift,\n  filter,\n  areGiftsAllLoaded,\n  areGiftsLoading,\n  updateIteration,\n  onGiftClick,\n}) => {\n  const {\n    loadResaleGifts,\n    updateResaleGiftsFilter,\n  } = getActions();\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const resellGiftsIds = useMemo(() => {\n    return resellGifts?.map((g) => g.id);\n  }, [resellGifts]);\n\n  const hasFilter = Boolean(filter?.modelAttributes?.length\n    || filter?.patternAttributes?.length || filter?.backdropAttributes?.length);\n\n  const handleLoadMoreResellGifts = useLastCallback(() => {\n    if (gift) {\n      loadResaleGifts({ giftId: gift.id });\n    }\n  });\n\n  const isGiftsEmpty = Boolean(!resellGifts || resellGifts.length === 0);\n\n  const [viewportIds, onLoadMore] = useInfiniteScroll(\n    handleLoadMoreResellGifts,\n    resellGiftsIds,\n    !gift,\n    RESALE_GIFTS_LIMIT,\n  );\n\n  const { observe } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n      backdropAttributes: [],\n      patternAttributes: [],\n    } });\n  });\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className={styles.notFoundGiftsRoot}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className={styles.notFoundGiftsDescription}>\n          {lang('ResellGiftsNoFound')}\n        </div>\n        {hasFilter && (\n          <Link\n            className={styles.notFoundGiftsLink}\n            onClick={handleResetGiftsFilter}\n          >\n            {lang('ResellGiftsClearFilters')}\n          </Link>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div ref={scrollerRef} className={buildClassName(styles.resaleScreenRoot, 'custom-scroll')}>\n      <Transition\n        name=\"zoomFade\"\n        activeKey={updateIteration}\n      >\n        {isGiftsEmpty && areGiftsAllLoaded && renderNothingFoundGiftsWithFilter()}\n        <InfiniteScroll\n          className={buildClassName(styles.resaleStarGiftsContainer)}\n          items={viewportIds}\n          onLoadMore={onLoadMore}\n          itemSelector=\".starGiftItem\"\n          noFastList\n          preloadBackwards={RESALE_GIFTS_LIMIT}\n          scrollContainerClosest={`.${styles.resaleScreenRoot}`}\n        >\n          {resellGifts?.map((gift) => (\n            <GiftItemStar\n              key={gift.id}\n              gift={gift}\n              observeIntersection={observe}\n              isResale\n              onClick={onGiftClick}\n            />\n          ))}\n        </InfiniteScroll>\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    starGifts,\n  } = global;\n\n  const { resaleGifts } = selectTabState(global);\n  const gift = resaleGifts?.giftId ? starGifts?.byId[resaleGifts.giftId] : undefined;\n  const filter = resaleGifts.filter;\n  const areGiftsAllLoaded = resaleGifts.isAllLoaded;\n  const areGiftsLoading = resaleGifts.isLoading;\n  const updateIteration = resaleGifts.updateIteration;\n\n  return {\n    resellGifts: resaleGifts.gifts,\n    gift,\n    filter,\n    areGiftsAllLoaded,\n    areGiftsLoading,\n    updateIteration,\n  };\n})(GiftModalResaleScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KLFLR9ji\",\"thumb\":\"fCL5rY2D\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport StickerView from '../../common/StickerView';\n\nimport styles from './ResaleGiftMenuAttributeSticker.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  type: 'model' | 'pattern';\n  sticker: ApiSticker;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst ATTRIBUTE_STICKER_SIZE = 1.5 * REM;\n\nconst ResaleGiftMenuAttributeSticker: FC<StateProps & OwnProps> = ({\n  className,\n  type,\n  sticker,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  theme,\n}) => {\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const customColor = useDynamicColorListener(stickerRef, undefined, type !== 'pattern');\n\n  return (\n    <div\n      ref={stickerRef}\n      className={buildClassName(styles.root, className)}\n      style={`width: ${ATTRIBUTE_STICKER_SIZE}px; height: ${ATTRIBUTE_STICKER_SIZE}px`}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={sticker}\n        size={ATTRIBUTE_STICKER_SIZE}\n        shouldPreloadPreview\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        thumbClassName={styles.thumb}\n        customColor={customColor}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    theme: selectTheme(global),\n  };\n})(ResaleGiftMenuAttributeSticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_VgmQnUg\",\"buttonsContainer\":\"IDlp6U6g\",\"itemIcon\":\"yuctLnuR\",\"sticker\":\"VT562JS0\",\"backdropAttributeMenuItemText\":\"D50wFfRL\",\"menuItemStickerText\":\"THcGWXSA\",\"menuItemText\":\"L6EVE2Ux\",\"backdrop\":\"A29QNxKb\",\"menuItemIcon\":\"GL4rVsev\",\"item\":\"qiYcBOYc\",\"menuContentContainer\":\"EDsBn29z\",\"menu\":\"ISaNdBwd\",\"left\":\"e4Kkh_MR\",\"right\":\"Kz_nCGC3\"};","import React from '@teact';\nimport { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useRef,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeCounter,\n  ApiStarGiftAttributeIdBackdrop,\n  ApiStarGiftAttributeIdPattern,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  StarGiftAttributeIdModel,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions, ResaleGiftsSortType } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport ResaleGiftMenuAttributeSticker from './ResaleGiftMenuAttributeSticker';\n\nimport styles from './GiftResaleFilters.module.scss';\n\ntype OwnProps = {\n  dialogRef: ElementRef<HTMLDivElement>;\n};\ntype StateProps = {\n  filter: ResaleGiftsFilterOptions;\n  attributes?: ApiStarGiftAttribute[];\n  counters?: ApiStarGiftAttributeCounter[];\n};\n\nconst GiftResaleFilters: FC<StateProps & OwnProps> = ({\n  attributes,\n  counters,\n  filter,\n  dialogRef,\n}) => {\n  const lang = useLang();\n  const {\n    updateResaleGiftsFilter,\n  } = getActions();\n\n  const [searchModelQuery, setSearchModelQuery] = useState('');\n  const [searchBackdropQuery, setSearchBackdropQuery] = useState('');\n  const [searchPatternQuery, setSearchPatternQuery] = useState('');\n  const filteredAttributes = useMemo(() => {\n    const map: {\n      model: ApiStarGiftAttributeModel[];\n      pattern: ApiStarGiftAttributePattern[];\n      backdrop: ApiStarGiftAttributeBackdrop[];\n    } = {\n      model: [],\n      pattern: [],\n      backdrop: [],\n    };\n\n    for (const counter of counters ?? []) {\n      const { attribute } = counter;\n\n      if (!counter.count) {\n        continue;\n      }\n\n      const found = attributes?.find((attr) => {\n        if (attr.type === 'backdrop' && attribute.type === 'backdrop') {\n          return attr.backdropId === attribute.backdropId;\n        }\n\n        if (attr.type === 'model' && attribute.type === 'model') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        if (attr.type === 'pattern' && attribute.type === 'pattern') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        return false;\n      });\n\n      if (found?.type === 'backdrop') {\n        map.backdrop.push(found);\n      }\n      if (found?.type === 'model') {\n        map.model.push(found);\n      }\n      if (found?.type === 'pattern') {\n        map.pattern.push(found);\n      }\n    }\n\n    return map;\n  }, [attributes, counters]);\n\n  const filteredAndSearchedAttributes = useMemo(() => {\n    const filterBySearch = <T extends { name?: string }>(items: T[], query: string): T[] => {\n      if (!query.trim()) return items;\n\n      return items.filter(\n        (item): item is T => Boolean(item.name?.toLowerCase().includes(query.toLowerCase())),\n      );\n    };\n\n    return {\n      model: filterBySearch(filteredAttributes.model, searchModelQuery),\n      pattern: filterBySearch(filteredAttributes.pattern, searchPatternQuery),\n      backdrop: filterBySearch(filteredAttributes.backdrop, searchBackdropQuery),\n    };\n  }, [filteredAttributes, searchModelQuery, searchBackdropQuery, searchPatternQuery]);\n\n  // Sort Menu\n  const sortMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isSortContextMenuOpen,\n    contextMenuAnchor: sortContextMenuAnchor,\n    handleContextMenu: handleSortContextMenu,\n    handleContextMenuClose: handleSortContextMenuClose,\n    handleContextMenuHide: handleSortContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getSortMenuElement = useLastCallback(() => sortMenuRef.current!);\n\n  // Model Menu\n  const modelMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isModelContextMenuOpen,\n    contextMenuAnchor: modelContextMenuAnchor,\n    handleContextMenu: handleModelContextMenu,\n    handleContextMenuClose: handleModelContextMenuClose,\n    handleContextMenuHide: handleModelContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getModelMenuElement = useLastCallback(\n    () => modelMenuRef.current!,\n  );\n\n  // Backdrop Menu\n  const backdropMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isBackdropContextMenuOpen,\n    contextMenuAnchor: backdropContextMenuAnchor,\n    handleContextMenu: handleBackdropContextMenu,\n    handleContextMenuClose: handleBackdropContextMenuClose,\n    handleContextMenuHide: handleBackdropContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getBackdropMenuElement = useLastCallback(() => backdropMenuRef.current!);\n\n  // Pattern Menu\n  const patternMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isPatternContextMenuOpen,\n    contextMenuAnchor: patternContextMenuAnchor,\n    handleContextMenu: handlePatternContextMenu,\n    handleContextMenuClose: handlePatternContextMenuClose,\n    handleContextMenuHide: handlePatternContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getPatternMenuElement = useLastCallback(() => patternMenuRef.current!);\n\n  const SortMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const sortType = filter.sortType;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {sortType === 'byDate' && lang('ValueGiftSortByDate')}\n         {sortType === 'byNumber' && lang('ValueGiftSortByNumber')}\n         {sortType === 'byPrice' && lang('ValueGiftSortByPrice')}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n\n  const ModelMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.modelAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeModel')}\n         {attributesCount > 0\n           && lang('GiftAttributeModelPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const BackdropMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.backdropAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeBackdrop')}\n         {attributesCount > 0\n           && lang('GiftAttributeBackdropPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const PatternMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n  = useMemo(() => {\n    const attributesCount = filter?.patternAttributes?.length || 0;\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <div\n        className={styles.item}\n        onClick={onTrigger}\n      >\n        {attributesCount === 0 && lang('GiftAttributeSymbol')}\n        {attributesCount > 0\n          && lang('GiftAttributeSymbolPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n        <Icon\n          name=\"dropdown-arrows\"\n          className={styles.itemIcon}\n        />\n      </div>\n    );\n  }, [lang, filter]);\n\n  const handleSortMenuItemClick = useLastCallback((type: ResaleGiftsSortType) => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      sortType: type,\n    } });\n  });\n\n  const handleSelectedAllModelsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n    } });\n  });\n  const handleSelectedAllPatternsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: [],\n    } });\n  });\n  const handleSelectedAllBackdropsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: [],\n    } });\n  });\n\n  const handleModelMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeModel) => {\n    if (!counters) return;\n    const attributes = filter.modelAttributes || [];\n    const modelAttribute\n      = counters.find((counter): counter is ApiStarGiftAttributeCounter<StarGiftAttributeIdModel> =>\n        counter.attribute.type === 'model' && counter.attribute.documentId === attribute.sticker.id,\n      )?.attribute;\n\n    if (!modelAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === modelAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== modelAttribute.documentId)\n      : [...attributes, modelAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: updatedAttributes,\n    } });\n  });\n\n  const handlePatternMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributePattern) => {\n    if (!counters) return;\n    const attributes = filter.patternAttributes || [];\n    const patternAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdPattern> =>\n        counter.attribute.type === 'pattern' && counter.attribute.documentId === attribute.sticker.id,\n    )?.attribute;\n\n    if (!patternAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === patternAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== patternAttribute.documentId)\n      : [...attributes, patternAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: updatedAttributes,\n    } });\n  });\n\n  const handleBackdropMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeBackdrop) => {\n    if (!counters) return;\n    const attributes = filter.backdropAttributes || [];\n    const backdropAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdBackdrop> =>\n        counter.attribute.type === 'backdrop' && counter.attribute.backdropId === attribute.backdropId,\n    )?.attribute;\n\n    if (!backdropAttribute) return;\n\n    const isActive = attributes.some((item) => item.backdropId === backdropAttribute.backdropId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.backdropId !== backdropAttribute.backdropId)\n      : [...attributes, backdropAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: updatedAttributes,\n    } });\n  });\n\n  function renderSortMenuItems() {\n    return (\n      <>\n        <MenuItem icon=\"sort-by-price\" onClick={() => { handleSortMenuItemClick('byPrice'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByPrice')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byPrice' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n        <MenuItem icon=\"sort-by-date\" onClick={() => { handleSortMenuItemClick('byDate'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByDate')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byDate' ? 'check' : 'placeholder'}\n          />\n\n        </MenuItem>\n        <MenuItem icon=\"sort-by-number\"onClick={() => { handleSortMenuItemClick('byNumber'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByNumber')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byNumber' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n      </>\n    );\n  }\n\n  function renderSortMenu() {\n    return (\n      <Menu\n        isOpen={isSortContextMenuOpen}\n        anchor={sortContextMenuAnchor}\n        ref={sortMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getSortMenuElement}\n        autoClose\n        onClose={handleSortContextMenuClose}\n        onCloseAnimationEnd={handleSortContextMenuHide}\n        positionX=\"left\"\n      >\n        {renderSortMenuItems()}\n      </Menu>\n    );\n  }\n\n  const handleSearchModelInputReset = useCallback(() => {\n    setSearchModelQuery('');\n  }, []);\n  const handleSearchBackdropInputReset = useCallback(() => {\n    setSearchBackdropQuery('');\n  }, []);\n  const handleSearchPatternInputReset = useCallback(() => {\n    setSearchPatternQuery('');\n  }, []);\n  const handleSearchInputClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  });\n\n  const modelMenuItemsContainerRef = useRef<HTMLDivElement>();\n  const { observe } = useIntersectionObserver({\n    rootRef: modelMenuItemsContainerRef,\n    isDisabled: !modelContextMenuAnchor,\n  });\n\n  function renderModelMenuItems() {\n    const models = filteredAndSearchedAttributes.model;\n    const selectedAttributes = filter.modelAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n    return (\n      <div className={styles.menuContentContainer} ref={modelMenuItemsContainerRef}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchModelQuery}\n          onChange={setSearchModelQuery}\n          onReset={handleSearchModelInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllModelsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {models.map((model) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === model.sticker.id);\n          return (\n            <MenuItem\n              key={model.name}\n              onClick={() => {\n                handleModelMenuItemClick(model);\n              }}\n            >\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={model.sticker}\n                type=\"model\"\n                observeIntersectionForLoading={observe}\n                observeIntersectionForPlaying={observe}\n              />\n              <div className={styles.menuItemStickerText}>\n                {model.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderModelMenu() {\n    return (\n      <Menu\n        isOpen={isModelContextMenuOpen}\n        anchor={modelContextMenuAnchor}\n        ref={modelMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getModelMenuElement}\n        autoClose\n        onClose={handleModelContextMenuClose}\n        onCloseAnimationEnd={handleModelContextMenuHide}\n      >\n        {renderModelMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderBackdropMenuItems() {\n    const backdrops = filteredAndSearchedAttributes.backdrop;\n    const selectedAttributes = filter.backdropAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchBackdropQuery}\n          onChange={setSearchBackdropQuery}\n          onReset={handleSearchBackdropInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllBackdropsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {backdrops.map((backdrop) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.backdropId === backdrop.backdropId);\n\n          return (\n            <MenuItem\n              key={backdrop.name}\n              onClick={() => {\n                handleBackdropMenuItemClick(backdrop);\n              }}\n            >\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[backdrop.centerColor, backdrop.edgeColor]}\n                patternColor={backdrop.patternColor}\n              />\n              <div className={styles.backdropAttributeMenuItemText}>\n                {backdrop.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderBackdropMenu() {\n    return (\n      <Menu\n        isOpen={isBackdropContextMenuOpen}\n        anchor={backdropContextMenuAnchor}\n        ref={backdropMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getBackdropMenuElement}\n        autoClose\n        onClose={handleBackdropContextMenuClose}\n        onCloseAnimationEnd={handleBackdropContextMenuHide}\n        positionX=\"right\"\n      >\n        {renderBackdropMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderPatternMenuItems() {\n    const patterns = filteredAndSearchedAttributes.pattern;\n    const selectedAttributes = filter.patternAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchPatternQuery}\n          onChange={setSearchPatternQuery}\n          onReset={handleSearchPatternInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllPatternsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {patterns.map((pattern) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === pattern.sticker.id);\n\n          return (\n            <MenuItem\n              key={pattern.name}\n              onClick={() => {\n                handlePatternMenuItemClick(pattern);\n              }}\n            >\n\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={pattern.sticker}\n                type=\"pattern\"\n              />\n\n              <div className={styles.menuItemStickerText}>\n                {pattern.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPatternMenu() {\n    return (\n      <Menu\n        isOpen={isPatternContextMenuOpen}\n        anchor={patternContextMenuAnchor}\n        ref={patternMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getPatternMenuElement}\n        autoClose\n        onClose={handlePatternContextMenuClose}\n        onCloseAnimationEnd={handlePatternContextMenuHide}\n      >\n        {renderPatternMenuItems()}\n      </Menu>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      {Boolean(sortContextMenuAnchor) && renderSortMenu()}\n      {Boolean(modelContextMenuAnchor) && renderModelMenu()}\n      {Boolean(backdropContextMenuAnchor) && renderBackdropMenu()}\n      {Boolean(patternContextMenuAnchor) && renderPatternMenu()}\n      <div className={styles.buttonsContainer}>\n        <SortMenuButton\n          onTrigger={handleSortContextMenu}\n          isOpen={isSortContextMenuOpen}\n        />\n        <ModelMenuButton\n          onTrigger={handleModelContextMenu}\n          isOpen={isModelContextMenuOpen}\n        />\n        <BackdropMenuButton\n          onTrigger={handleBackdropContextMenu}\n          isOpen={isBackdropContextMenuOpen}\n        />\n        <PatternMenuButton\n          onTrigger={handlePatternContextMenu}\n          isOpen={isPatternContextMenuOpen}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { resaleGifts } = selectTabState(global);\n\n  const attributes = resaleGifts.attributes;\n  const counters = resaleGifts.counters;\n  const filter = resaleGifts.filter;\n\n  return {\n    attributes,\n    counters,\n    filter,\n  };\n})(GiftResaleFilters));\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","import React from '@teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const hasResale = idsByCategory && idsByCategory['resale'].length > 0;\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    if (category === 'resale') return lang('GiftCategoryResale');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {!areLimitedStarGiftsDisallowed && hasResale && renderCategoryItem('resale')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGift,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport InteractiveSparkles from '../../common/InteractiveSparkles';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport GiftModalResaleScreen from './GiftModalResaleScreen';\nimport GiftResaleFilters from './GiftResaleFilters';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n  resaleGiftsCount?: number;\n  areResaleGiftsLoading?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n  resaleGiftsCount,\n  areResaleGiftsLoading,\n}) => {\n  const {\n    closeGiftModal, openGiftInfoModal, resetResaleGifts, loadResaleGifts,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n  const giftHeaderRef = useRef<HTMLHeadingElement>();\n\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [selectedResellGift, setSelectedResellGift] = useState<ApiStarGift | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== STARS_CURRENCY_CODE);\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n          && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isResaleScreen = Boolean(selectedResellGift) && !selectedGift;\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isResaleScreen || isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (selectedResellGift) {\n      loadResaleGifts({ giftId: selectedResellGift.id });\n    }\n  }, [selectedResellGift]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedResellGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption, target?: 'resell' | 'original') => {\n    if (target === 'resell') {\n      if (!('id' in gift)) {\n        return;\n      }\n      if (isResaleScreen) {\n        openGiftInfoModal({ gift, recipientId: renderingModal?.forPeerId });\n        return;\n      }\n      setSelectedResellGift(gift);\n      return;\n    }\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && Boolean(upgradeStars));\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.flatMap((giftId) => {\n          const gift = starGiftsById[giftId];\n          const shouldShowResale = selectedCategory !== 'stock' && Boolean(gift.availabilityResale);\n          const shouldDuplicateAsResale = selectedCategory !== 'resale' && shouldShowResale && !gift.isSoldOut;\n\n          const elements = [\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              isResale={shouldShowResale && !shouldDuplicateAsResale}\n              onClick={handleGiftClick}\n            />,\n          ];\n\n          if (shouldDuplicateAsResale) {\n            elements.push(\n              <GiftItemStar\n                key={`resale_${giftId}`}\n                isResale\n                gift={gift}\n                observeIntersection={observeIntersection}\n                onClick={handleGiftClick}\n              />,\n            );\n          }\n\n          return elements;\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseModal = useLastCallback(() => {\n    setSelectedGift(undefined);\n    setSelectedResellGift(undefined);\n    resetResaleGifts();\n    closeGiftModal();\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isResaleScreen) {\n      setSelectedResellGift(undefined);\n      resetResaleGifts();\n      return;\n    }\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    handleCloseModal();\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            className={styles.avatar}\n            size={AVATAR_SIZE}\n            peer={peer}\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <InteractiveSparkles\n            className={styles.logoBackground}\n            color=\"gold\"\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n            onRequestAnimation={handleRequestAnimation}\n          />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen || isResaleScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  function renderHeader() {\n    if (!shouldShowHeader) return undefined;\n    if (isResaleScreen) {\n      const isFirstLoading = areResaleGiftsLoading && !resaleGiftsCount;\n      return (\n        <div className={styles.resaleHeaderContentContainer}>\n          <h2 className={styles.resaleHeaderText}>\n            {selectedResellGift.title}\n          </h2>\n          {isFirstLoading\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('Loading')}\n              </div>\n            )}\n          {!isFirstLoading && resaleGiftsCount !== undefined\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('HeaderDescriptionResaleGifts', {\n                  count: resaleGiftsCount,\n                }, { withNodes: true, withMarkdown: true, pluralValue: resaleGiftsCount })}\n              </div>\n            )}\n          <GiftResaleFilters dialogRef={dialogRef} />\n        </div>\n      );\n    }\n    return (\n      <h2 className={styles.commonHeaderText}>\n        {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={handleCloseModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(\n        styles.header,\n        isResaleScreen && styles.resaleHeader,\n        !shouldShowHeader && styles.hiddenHeader)}\n      >\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={!shouldShowHeader ? 0 : isResaleScreen ? 1 : isHeaderForStarGifts ? 2 : 3}\n          slideClassName={styles.headerSlide}\n        >\n          {renderHeader()}\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : isResaleScreen ? 2 : 0}\n      >\n        {!isGiftScreen && !isResaleScreen && renderMainScreen()}\n        {isResaleScreen && selectedResellGift\n          && (\n            <GiftModalResaleScreen\n              onGiftClick={handleGiftClick}\n            />\n          )}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  const { resaleGifts } = selectTabState(global);\n  const resaleGiftsCount = resaleGifts.count;\n  const areResaleGiftsLoading = resaleGifts.isLoading !== false;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n    resaleGiftsCount,\n    areResaleGiftsLoading,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return 0;\n  if (category === 'limited') return 1;\n  if (category === 'resale') return 2;\n  if (category === 'stock') return 3;\n  return category + 3;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","import React from '@teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef0cKSqQ\",\"giftPreview\":\"IvuNzslN\",\"backdrop\":\"dNukis4X\",\"arrow\":\"oufsMLLF\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiStarGiftUnique,\n} from '../../../api/types';\n\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\n\nimport styles from './GiftTransferPreview.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer;\n  gift: ApiStarGiftUnique;\n};\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferPreview = ({\n  peer,\n  gift,\n}: OwnProps) => {\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift);\n  }, [gift]);\n\n  if (!giftAttributes) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.giftPreview}>\n        <RadialPatternBackground\n          className={styles.backdrop}\n          backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n          patternColor={giftAttributes.backdrop?.patternColor}\n          patternIcon={giftAttributes.pattern?.sticker}\n        />\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          size={GIFT_STICKER_SIZE}\n          sticker={giftAttributes.model?.sticker}\n        />\n      </div>\n      <Icon name=\"next\" className={styles.arrow} />\n      <Avatar\n        peer={peer}\n        size={AVATAR_SIZE}\n        className={styles.avatar}\n      />\n    </div>\n  );\n};\n\nexport default memo(GiftTransferPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"checkBox\":\"fjE0wGvw\",\"checkBoxDescription\":\"tepUTe4z\",\"upgradeIcon\":\"lgyInH5K\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"headerSplitButton\":\"XOMI_4PO\",\"headerButton\":\"WA0INleU\",\"giftResalePriceContainer\":\"BN8gf5y6\",\"starAmountIcon\":\"_5guecUe\",\"giftResalePriceStar\":\"H_q8o2vY\",\"left\":\"aOhTHZlf\",\"right\":\"rJOB1u5Q\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","import React from '@teact';\nimport type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../../global/helpers/peers';\nimport { getMainUsername } from '../../../../global/helpers/users';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport {\n  formatStarsAsIcon, formatStarsAsText, formatTonAsIcon, formatTonAsText,\n} from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  releasedByPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n  currentUser?: ApiUser;\n  recipientPeer?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  releasedByPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n  currentUser,\n  recipientPeer,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    buyStarGift,\n    closeGiftModal,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState<boolean>(false);\n  const [shouldPayInTon, setShouldPayInTon] = useState<boolean>(false);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n\n  const giftSubtitle = useMemo(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return undefined;\n\n    if (releasedByPeer) {\n      const releasedByUsername = `@${getMainUsername(releasedByPeer)}`;\n      const ownerTitle = releasedByUsername || getPeerTitle(lang, releasedByPeer);\n      const fallbackText = isApiPeerUser(releasedByPeer)\n        ? lang('ActionFallbackUser')\n        : lang('ActionFallbackChannel');\n\n      return lang('GiftInfoCollectibleBy', {\n        number: gift.number, owner: ownerTitle || fallbackText }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('GiftInfoCollectible', { number: gift.number });\n  }, [gift, releasedByPeer, lang]);\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  function getResalePrice(shouldPayInTon?: boolean) {\n    if (!isGiftUnique) return undefined;\n    const amounts = gift.resellPrice;\n    if (!amounts) return undefined;\n\n    if (gift?.resaleTonOnly || shouldPayInTon) {\n      return amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }\n\n  const resellPrice = getResalePrice();\n  const confirmPrice = getResalePrice(shouldPayInTon);\n  const canBuyGift = gift?.type === 'starGiftUnique' && gift.ownerId !== currentUserId && Boolean(resellPrice);\n\n  const giftOwnerTitle = (() => {\n    if (!isGiftUnique) return undefined;\n    const { ownerName, ownerId } = gift;\n    const global = getGlobal(); // Peer titles do not need to be reactive\n    const owner = ownerId ? selectPeer(global, ownerId) : undefined;\n    return owner ? getPeerTitle(lang, owner) : ownerName;\n  })();\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const handleBuyGift = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !getResalePrice()) return;\n    setIsConfirmModalOpen(true);\n  });\n\n  const closeConfirmModal = useLastCallback(() => {\n    setIsConfirmModalOpen(false);\n  });\n\n  const handleConfirmBuyGift = useLastCallback(() => {\n    const peer = recipientPeer || currentUser;\n    const price = getResalePrice(shouldPayInTon);\n    if (!peer || !price || gift?.type !== 'starGiftUnique') return;\n    closeConfirmModal();\n    closeGiftModal();\n    buyStarGift({ peerId: peer.id, slug: gift.slug, price });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger }) => (\n      <div\n        className={buildClassName(\n          styles.headerButton,\n          styles.left,\n        )}\n        tabIndex={0}\n        role=\"button\"\n        aria-haspopup=\"menu\"\n        aria-label={lang('AriaMoreButton')}\n        onClick={onTrigger}\n      >\n        <Icon\n          name=\"more\"\n          className={styles.icon}\n        />\n      </div>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canBuyGift) {\n      return (\n        <Button noForcedUpperCase size=\"smaller\" onClick={handleBuyGift}>\n          {lang('ButtonBuyGift', {\n            stars: resellPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, resellPrice?.amount, { asFont: true }),\n          }, { withNodes: true })}\n        </Button>\n      );\n    }\n\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift.canUpgrade && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgrade')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (canManage && savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n        return lang('GiftInfoDescriptionUpgrade');\n      }\n      if (savedGift.canUpgrade && canManage) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        {Boolean(resellPrice?.amount) && (\n          <div className={styles.giftResalePriceContainer}>\n            {resellPrice.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, {\n                className: styles.giftResalePriceStar,\n                shouldConvertFromNanos: true,\n              })\n              : formatStarsAsIcon(lang, resellPrice.amount, {\n                asFont: true,\n                className: styles.giftResalePriceStar,\n              })}\n          </div>\n        )}\n        <div className={styles.headerSplitButton}>\n          {isOpen && uniqueGiftContextMenu}\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon\n              name=\"close\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={giftSubtitle}\n          subtitlePeer={releasedByPeer}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {Boolean(description) && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const ownerPeer = ownerId ? selectPeer(getGlobal(), ownerId) : undefined;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else if (ownerPeer || ownerName) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}\n            <BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}\n            <BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}\n            <BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink || canBuyGift) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {!canBuyGift && isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n            {canBuyGift && giftOwnerTitle && (\n              <div>\n                {lang('GiftInfoBuyGift', {\n                  user: giftOwnerTitle,\n                }, { withNodes: true })}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n    canBuyGift, giftOwnerTitle, isOpen, resellPrice, giftSubtitle,\n    releasedByPeer,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n        withBalanceBar={Boolean(canBuyGift)}\n        currencyInBalanceBar={confirmPrice?.currency}\n        isLowStackPriority\n      />\n      {uniqueGift && currentUser && Boolean(confirmPrice) && (\n        <ConfirmDialog\n          isOpen={isConfirmModalOpen}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={lang('ButtonBuyGift', {\n            stars: confirmPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, confirmPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, confirmPrice.amount, { asFont: true }),\n          }, { withNodes: true })}\n          confirmHandler={handleConfirmBuyGift}\n        >\n\n          <GiftTransferPreview\n            peer={recipientPeer || currentUser}\n            gift={uniqueGift}\n          />\n          {!recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyForPeerConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                  peer: getPeerTitle(lang, recipientPeer),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {!uniqueGift.resaleTonOnly && (\n            <>\n              <Checkbox\n                className={styles.checkBox}\n                label={lang('LabelPayInTON')}\n                checked={shouldPayInTon}\n                onCheck={setShouldPayInTon}\n              />\n\n              <div className={styles.checkBoxDescription}>\n                {lang('DescriptionPayInTON')}\n              </div>\n            </>\n          )}\n        </ConfirmDialog>\n      )}\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const recipientPeer = modal?.recipientId && currentUserId !== modal.recipientId\n      ? selectPeer(global, modal.recipientId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    const gift = isSavedGift ? typeGift.gift : typeGift;\n    const releasedByPeerId = gift?.type === 'starGiftUnique' && gift.releasedByPeerId;\n    const releasedByPeer = releasedByPeerId ? selectPeer(global, releasedByPeerId) : undefined;\n\n    return {\n      fromPeer,\n      targetPeer,\n      releasedByPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n      currentUser,\n      recipientPeer,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBoxDescription\":\"pWjQiY4m\",\"inputPriceDescription\":\"SGFmA4kL\",\"checkBox\":\"yt_nODdj\",\"descriptionPrice\":\"r9R0VR_w\",\"inputPrice\":\"ElDo1Bru\"};","import React from '@teact';\nimport {\n  memo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { convertTonFromNanos, convertTonToNanos } from '../../../../util/formatCurrency';\nimport { convertTonToUsd, formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon, formatStarsAsText, formatTonAsIcon,\n  formatTonAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftResalePriceComposerModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftResalePriceComposerModal'];\n};\n\nexport type StateProps = {\n  starsStargiftResaleCommissionPermille?: number;\n  starsStargiftResaleAmountMin: number;\n  starsStargiftResaleAmountMax?: number;\n  starsUsdWithdrawRate?: number;\n  tonStargiftResaleCommissionPermille?: number;\n  tonStargiftResaleAmountMin: number;\n  tonStargiftResaleAmountMax?: number;\n  tonUsdRate?: number;\n};\n\nconst GiftResalePriceComposerModal = ({\n  modal, starsStargiftResaleCommissionPermille,\n  starsStargiftResaleAmountMin, starsStargiftResaleAmountMax, starsUsdWithdrawRate,\n  tonStargiftResaleCommissionPermille, tonStargiftResaleAmountMin, tonStargiftResaleAmountMax, tonUsdRate,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftResalePriceComposerModal,\n    closeGiftInfoModal,\n    updateStarGiftPrice,\n    showNotification,\n  } = getActions();\n  const isOpen = Boolean(modal);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n  const [isPriceInTon, setIsPriceInTon] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const hasPrice = Boolean(price);\n\n  const lang = useLang();\n\n  const handleChangePrice = useLastCallback((e) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n    const maxAmount = isPriceInTon ? tonStargiftResaleAmountMax : starsStargiftResaleAmountMax;\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : maxAmount ? Math.min(number, maxAmount) : number;\n    setPrice(result);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiftResalePriceComposerModal();\n  });\n\n  const handleSellGift = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift || !price) return;\n    closeGiftResalePriceComposerModal();\n    closeGiftInfoModal();\n    updateStarGiftPrice(\n      {\n        gift: savedGift.inputGift,\n        price: {\n          currency: isPriceInTon ? 'TON' : 'XTR',\n          amount: isPriceInTon ? convertTonToNanos(price) : price,\n          nanos: 0,\n        },\n      });\n    showNotification({\n      icon: 'sell-outline',\n      message: {\n        key: 'NotificationGiftIsSale',\n        variables: {\n          gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }),\n        },\n      },\n    });\n  });\n  const commission = isPriceInTon ? tonStargiftResaleCommissionPermille : starsStargiftResaleCommissionPermille;\n  const minAmount = isPriceInTon ? tonStargiftResaleAmountMin : starsStargiftResaleAmountMin;\n  const isPriceCorrect = hasPrice && price >= minAmount;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={isPriceInTon ? lang('PriceInTON') : lang('PriceInStars')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      <div className={styles.inputPrice}>\n        <InputText\n          label={isPriceInTon ? lang('EnterPriceInTon') : lang('EnterPriceInStars')}\n          onChange={handleChangePrice}\n          value={price?.toString()}\n          inputMode=\"numeric\"\n          tabIndex={0}\n          teactExperimentControlled={!isPriceInTon}\n        />\n      </div>\n\n      <div className={styles.inputPriceDescription}>\n        <span>\n          {!isPriceCorrect && Boolean(commission) && lang('DescriptionComposerGiftMinimumPrice', {\n            stars: isPriceInTon ? formatTonAsText(lang, minAmount) : formatStarsAsText(lang, minAmount),\n          }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n          {isPriceCorrect && (() => {\n            const priceWithCommission = commission ? Number((price * commission).toFixed()) : price;\n            return lang('DescriptionComposerGiftResalePrice',\n              {\n                stars: isPriceInTon\n                  ? formatTonAsText(lang, priceWithCommission)\n                  : formatStarsAsText(lang, priceWithCommission),\n              },\n              {\n                withMarkdown: true,\n                withNodes: true,\n              });\n          })()}\n        </span>\n\n        {isPriceCorrect && Boolean(isPriceInTon ? tonUsdRate : starsUsdWithdrawRate) && (\n          <span className={styles.descriptionPrice}>\n            {`≈ ${formatCurrencyAsString(\n              isPriceInTon ? convertTonToUsd(price, tonUsdRate!) : price * starsUsdWithdrawRate!,\n              'USD',\n              lang.code,\n            )}`}\n          </span>\n        )}\n      </div>\n\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('OnlyAcceptTON')}\n        checked={isPriceInTon}\n        onCheck={setIsPriceInTon}\n      />\n\n      <div className={styles.checkBoxDescription}>\n        {lang('OnlyAcceptTONDescription')}\n      </div>\n\n      <Button noForcedUpperCase disabled={!isPriceCorrect} size=\"smaller\" onClick={handleSellGift}>\n        {isPriceCorrect && lang('ButtonSellGift', {\n          stars: isPriceInTon ? formatTonAsIcon(lang, price)\n            : formatStarsAsIcon(lang, price, { asFont: true }),\n        }, { withNodes: true })}\n        {!isPriceCorrect && lang('Sell')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const configPermille = global.appConfig?.starsStargiftResaleCommissionPermille;\n    const starsStargiftResaleCommissionPermille = configPermille ? (configPermille / 1000) : undefined;\n    const starsStargiftResaleAmountMin = global.appConfig?.starsStargiftResaleAmountMin || 0;\n    const starsStargiftResaleAmountMax = global.appConfig?.starsStargiftResaleAmountMax;\n\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n\n    const tonConfigPermille = global.appConfig?.tonStargiftResaleCommissionPermille;\n    const tonStargiftResaleCommissionPermille = tonConfigPermille ? (tonConfigPermille / 1000) : 0;\n    const tonStargiftResaleAmountMin = convertTonFromNanos(global.appConfig?.tonStargiftResaleAmountMin || 0);\n    const maxTonFromConfig = global.appConfig?.tonStargiftResaleAmountMax;\n    const tonStargiftResaleAmountMax = maxTonFromConfig && convertTonFromNanos(maxTonFromConfig);\n\n    const tonUsdRate = global.appConfig?.tonUsdRate;\n\n    return {\n      starsStargiftResaleCommissionPermille,\n      starsStargiftResaleAmountMin,\n      starsStargiftResaleAmountMax,\n      starsUsdWithdrawRate,\n      tonStargiftResaleCommissionPermille,\n      tonStargiftResaleAmountMin,\n      tonStargiftResaleAmountMax,\n      tonUsdRate,\n    };\n  },\n)(GiftResalePriceComposerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>\n            {\n              lang('UniqueStatusWearTitle', {\n                gift: mockPeerWithStatus?.emojiStatus?.title,\n              })\n            }\n          </div>\n          <div className={styles.infoDescription}>\n            {\n              lang('UniqueStatusBenefitsDescription')\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React from '@teact';\nimport {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { type CustomPeer, SettingsScreens } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const {\n    closeGiftWithdrawModal,\n    clearGiftWithdrawError,\n    closeGiftInfoModal,\n    processStarGiftWithdrawal,\n    openSettingsScreen,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  const handleSetUpPassword = useLastCallback(() => {\n    openSettingsScreen({\n      screen: SettingsScreens.TwoFaDisabled,\n    });\n    closeGiftWithdrawModal();\n    closeGiftInfoModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && (\n        <>\n          <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>\n          <Button className=\"mt-2\" size=\"smaller\" onClick={handleSetUpPassword}>{lang('SetUp2FA')}</Button>\n        </>\n      )}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R, D extends unknown[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          {renderingSelectedPeer && (\n            <GiftTransferPreview\n              peer={renderingSelectedPeer}\n              gift={uniqueGift}\n            />\n          )}\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","import React from '@teact';\nimport { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, toggleNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n\n    toggleNoPaidMessagesException ({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n};\n\nconst PriceConfirmModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starBalance,\n  tonBalance,\n}) => {\n  const actions = getActions();\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    if (!modal?.directInfo) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    const { currency, newAmount } = modal;\n    const isTon = currency === 'TON';\n    const currentBalance = isTon ? tonBalance : starBalance?.amount;\n\n    if (currentBalance === undefined) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    if (currentBalance < newAmount!) {\n      actions.openStarsBalanceModal({\n        currency: isTon ? 'TON' : 'XTR',\n        tabId: getCurrentTabId(),\n      });\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    actions.sendStarPaymentForm({\n      directInfo: modal.directInfo,\n      tabId: getCurrentTabId(),\n    });\n    actions.closePriceConfirmModal();\n  }, [modal, starBalance, tonBalance, actions]);\n\n  const handleClose = useCallback(() => {\n    actions.closePriceConfirmModal();\n  }, [actions]);\n\n  if (!modal) {\n    return undefined;\n  }\n\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n  } = modal;\n\n  const isTon = currency === 'TON';\n\n  let originalAmountText: string;\n  let newAmountText: string;\n\n  if (isTon) {\n    originalAmountText = formatTonAsText(lang, convertTonFromNanos(originalAmount!));\n    newAmountText = formatTonAsText(lang, convertTonFromNanos(newAmount!));\n  } else {\n    originalAmountText = formatStarsAsText(lang, originalAmount!);\n    newAmountText = formatStarsAsText(lang, newAmount!);\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal)}\n      onClose={handleClose}\n      title={lang('PriceChanged')}\n      confirmHandler={handleConfirm}\n      confirmLabel={lang('PayNewPrice')}\n    >\n      <p>\n        {lang('PriceChangedText', {\n          originalAmount: originalAmountText,\n          newAmount: newAmountText,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        })}\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const starBalance = global.stars?.balance;\n  const tonBalance = global.ton?.balance?.amount;\n\n  return {\n    starBalance,\n    tonBalance,\n  };\n},\n)(PriceConfirmModal));\n"],"names":["memo","withGlobal","global","modal","user","forUserId","selectUser","undefined","StarsGiftModal","closeStarsGiftModal","openInvoice","requestConfetti","getActions","dialogRef","useRef","isOpen","Boolean","renderingModal","useCurrentOrPrev","oldLang","useOldLang","selectedOption","setSelectedOption","useState","isHeaderHidden","setHeaderHidden","useEffect","showConfetti","useLastCallback","dialog","current","top","left","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","handleClick","option","type","userId","id","stars","currency","amount","handleClose","bottomText","useMemo","parts","split","React","SafeLink","url","text","Modal","className","buildClassName","styles","modalDialog","contentClassName","content","isSlim","onClose","main","onScroll","e","scrollTop","currentTarget","Button","round","size","closeButton","color","onClick","ariaLabel","Icon","name","header","hiddenHeader","starHeaderText","headerInfo","Avatar","peer","avatar","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","renderText","formatCurrencyAsString","code","description","getPeerTitle","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","chats","listIds","currentUserId","userIds","contactList","activeListIds","active","archivedListIds","archived","StarsGiftingPickerModal","closeStarsGiftingPickerModal","openStarsGiftModal","searchQuery","setSearchQuery","displayedUserIds","usersById","getGlobal","users","byId","combinedIds","unique","filteredUserIds","filterPeersByQuery","ids","query","sortChatIds","filter","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","handleSelectedUserIdsChange","newSelectedId","length","PickerModal","title","hasCloseButton","shouldAdaptToSearch","withFixedHeight","confirmButtonText","onEnter","PeerPicker","itemIds","filterValue","filterPlaceholder","onFilterChange","isSearchable","withDefaultPadding","withStatus","onSelectedIdChange","BalanceBlock","balance","withAddButton","lang","useLang","openStarsBalanceModal","balanceBlock","balanceInfo","smallerText","balanceBottom","TON_CURRENCY_CODE","convertCurrencyFromBaseUnit","StarIcon","STARS_CURRENCY_CODE","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","StarsSubscriptionItem","subscription","openStarsSubscriptionModal","peerId","pricing","until","isCancelled","photo","useSelector","selectPeer","selectProvidedPeer","hasExpired","Date","now","formattedDate","formatDateToString","root","preview","subscriptionStar","info","subtitle","webPhoto","status","statusEnded","statusPricing","star","formatInteger","statusPeriod","getTransactionTitle","transaction","paidMessages","count","withNodes","pluralValue","isGiftResale","isNegativeAmount","isPostsSearch","starRefCommision","formatPercent","isGiftUpgrade","extendedMedia","subscriptionPeriod","isReaction","giveawayPostId","isMyGift","isGift","starGift","customPeer","shouldUseCustomPeer","buildStarsTransactionCustomPeer","titleKey","currencyAmount","starsAmount","nanos","SingleMediaThumb","boughtMedia","index","media","video","mediaHash","getMediaHash","thumb","getMediaThumbUri","mediaBlob","useMedia","blurry","full","PaidMediaThumb","isTransactionPreview","Math","min","isLocked","dir","slice","reverse","map","item","i","arr","realIndex","MediaSpoiler","isVisible","thumbDataUri","thumbnail","dataUri","noOutline","StarsTransactionItem","openStarsTransactionModal","date","transactionPeer","selectOptionalPeer","isUniqueGift","giftSticker","getStickerFromGift","data","avatarPeer","subtitleKey","CUSTOM_PEER_PREMIUM","number","isRefund","hasFailed","isPending","previewContent","backdrop","getGiftAttributes","backgroundColors","centerColor","edgeColor","RadialPatternBackground","uniqueGiftBackground","AnimatedIconFromSticker","sticker","play","amountColorClass","negative","positive","formatDateTimeToString","formatStarsTransactionAmount","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","shouldForceHeight","ton","history","all","transactions","starsBalanceState","tonBalanceState","canBuyPremium","selectIsPremiumPurchaseBlocked","tonUsdRate","appConfig","TON_USD_RATE_DEFAULT","tonTopupUrl","TON_TOPUP_URL_DEFAULT","animationLevel","selectSharedSettings","StarsBalanceModal","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","openUrl","currentState","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","useFlag","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","gift","balanceNeeded","starsNeeded","starsNeededText","channel","selectChat","chatId","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","withMarkdown","shouldShowItems","shouldSuggestGifting","modalHeight","transactionCount","transactionTabs","key","tosText","handleLoadMoreTransactions","isTon","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","handleTonTopUp","shouldSkipModal","minimal","dialogStyle","modalBalance","renderTonHeaderSection","tonAmount","ParticlesHeader","model","isDisabled","tonBalanceContainer","tonBalance","tonIconBalance","tonInUsd","convertTonToUsd","topUpButton","fluid","starButton","isText","noForcedUpperCase","topupOptions","tos","hint","list","sectionTitle","nextOffset","disabled","isLoading","loadMore","loadMoreIcon","container","lastSection","Transition","resolveTransitionName","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","items","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","messageInputInvoice","inputInvoice","message","selectChatMessage","messageId","chat","isPaidMedia","paidMedia","paidMediaMessage","paidMediaChat","StarPaymentModal","closeStarsPaymentModal","sendStarPaymentForm","markLoading","unmarkLoading","prevModal","usePrevious","isBotSubscription","canShowPeerItem","descriptionText","botName","starsText","areAllPhotos","every","duration","areAllVideos","mediaText","channelTitle","disclaimerText","link","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","hasAbsoluteCloseButton","paymentImages","paymentPhoto","avatarStar","PeerBadge","avatarWebPhoto","avatarSize","badgeIcon","badgeText","badgeClassName","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","formatStarsAsIcon","asFont","disclaimer","UniqueGiftHeader","modelAttribute","backdropAttribute","patternAttribute","subtitlePeer","resellPrice","openChat","isHover","markHover","unmarkHover","useTransitionActiveKey","subtitleColor","textColor","radialPatternBackdrop","backdropColors","patternColor","patternIcon","slideClassName","direction","noLoop","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","style","buildStyle","AVATAR_SPARKLES_CENTER_SHIFT","paidMessageCommission","starsPaidMessageCommissionPermille","starsGiftSticker","selectGiftStickerForStars","selectGiftStickerForTon","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","topSticker","StarsTransactionModal","showNotification","openMediaViewer","closeStarsTransactionModal","triggerSparklesRef","handleOpenMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","Object","values","handleAvatarMouseMove","handleRequestAnimation","animate","starModalData","giftAttributes","toName","getStarsPeerTitleKey","messageLink","getMessageLink","giveawayMessageLink","mediaAmount","m","shouldDisplayAvatar","uniqueGiftHeader","pattern","regularHeader","onMouseMove","InteractiveSparkles","onRequestAnimation","centerShift","percent","tableData","peerLabel","push","containerClassName","copyTextToClipboard","footerTextParts","footer","renderingModalData","TableInfoModal","hasBackdrop","buttonText","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","buttonState","canRefulfill","isActive","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","hasBotCancelled","isApiPeerUser","specialReplacement","STARS_ICON_PLACEHOLDER","footerTos","DEFAULT_POINTS","getProgress","points","value","pointIndex","findIndex","point","prevPoint","nextPoint","getValue","progress","floor","StarSlider","maxValue","defaultValue","onChange","floatingBadgeRef","result","setValue","useEffectOnce","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","Number","floatingBadgeWrapper","floatingBadge","ref","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","slider","max","step","ANONYMOUS_PEER","avatarIcon","customPeerAvatarColor","isCustomPeer","starBalance","maxAmount","paidReactionMaxAmount","defaultPrivacy","settings","paidReactionPrivacy","sendPaidReactionsAsPeerIds","currentUser","PaidReactionModal","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","setStarsAmount","isTouched","markTouched","unmarkTouched","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","target","checked","handleAmountChange","filteredMyReactorIds","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","find","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","chatTitle","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","Separator","topLabel","countText","topPeer","topBadge","separator","Checkbox","checkBox","label","buttonStar","theme","selectTheme","isBlurred","isBackgroundBlurred","background","customBackground","backgroundColor","selectThemeValues","paidMessagesStars","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","areUniqueStarGiftsDisallowed","disallowedGifts","shouldDisallowUniqueStarGifts","shouldDisallowLimitedStarGifts","tabState","selectTabState","captionLimit","starGiftMaxMessageLength","isPaymentFormLoading","giftByStars","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","isPremiumGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","months","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","inert","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","TextArea","maxLength","maxLengthIndicator","toString","ListItem","narrow","Switcher","Link","isPrimary","receiver","renderOptionsSection","formatCurrency","availabilityRemains","PremiumProgress","availabilityTotal","rightText","leftText","renderFooter","selectGiftStickerForDuration","baseMonthAmount","optionByStars","handleGiftClick","perMonth","discount","ceil","tabIndex","role","nonInteractive","caption","renderMonths","pill","GiftRibbon","isCurrentUserPremium","selectIsCurrentUserPremium","observeIntersection","isResale","openGiftInfoModal","openPremiumModal","stickerRef","setIsVisible","isGiftUnique","uniqueGift","regularGift","priceInfo","amounts","resaleTonOnly","getPriceAmount","priceCurrency","resellMinStars","priceInStarsAsString","isLimited","isSoldOut","isPremiumRequired","requirePremium","isUserLimitReached","limitedPerUser","perUserRemains","perUserTotal","giftNumber","giftRibbon","useOnIntersect","entry","visible","isIntersecting","StickerView","observeIntersectionForPlaying","observeIntersectionForLoading","containerRef","shouldLoop","shouldPreloadPreview","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","starGifts","resaleGifts","areGiftsAllLoaded","isAllLoaded","areGiftsLoading","updateIteration","resellGifts","gifts","GiftModalResaleScreen","onGiftClick","loadResaleGifts","updateResaleGiftsFilter","scrollerRef","resellGiftsIds","g","hasFilter","modelAttributes","patternAttributes","backdropAttributes","handleLoadMoreResellGifts","isGiftsEmpty","viewportIds","useInfiniteScroll","RESALE_GIFTS_LIMIT","observe","useIntersectionObserver","rootRef","throttleMs","handleResetGiftsFilter","resaleScreenRoot","notFoundGiftsRoot","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","notFoundGiftsDescription","notFoundGiftsLink","resaleStarGiftsContainer","preloadBackwards","GiftItemStar","ATTRIBUTE_STICKER_SIZE","REM","ResaleGiftMenuAttributeSticker","customColor","useDynamicColorListener","thumbClassName","attributes","counters","GiftResaleFilters","searchModelQuery","setSearchModelQuery","searchBackdropQuery","setSearchBackdropQuery","searchPatternQuery","setSearchPatternQuery","filteredAttributes","counter","attribute","found","attr","backdropId","documentId","filteredAndSearchedAttributes","filterBySearch","trim","toLowerCase","sortMenuRef","isContextMenuOpen","isSortContextMenuOpen","contextMenuAnchor","sortContextMenuAnchor","handleContextMenu","handleSortContextMenu","handleContextMenuClose","handleSortContextMenuClose","handleContextMenuHide","handleSortContextMenuHide","useContextMenuHandlers","getSortMenuElement","modelMenuRef","isModelContextMenuOpen","modelContextMenuAnchor","handleModelContextMenu","handleModelContextMenuClose","handleModelContextMenuHide","getModelMenuElement","backdropMenuRef","isBackdropContextMenuOpen","backdropContextMenuAnchor","handleBackdropContextMenu","handleBackdropContextMenuClose","handleBackdropContextMenuHide","getBackdropMenuElement","patternMenuRef","isPatternContextMenuOpen","patternContextMenuAnchor","handlePatternContextMenu","handlePatternContextMenuClose","handlePatternContextMenuHide","getPatternMenuElement","SortMenuButton","sortType","isMenuOpen","ModelMenuButton","attributesCount","BackdropMenuButton","PatternMenuButton","handleSortMenuItemClick","handleSelectedAllModelsClick","handleSelectedAllPatternsClick","handleSelectedAllBackdropsClick","handleModelMenuItemClick","updatedAttributes","some","handlePatternMenuItemClick","handleBackdropMenuItemClick","handleSearchModelInputReset","useCallback","handleSearchBackdropInputReset","handleSearchPatternInputReset","handleSearchInputClick","stopPropagation","preventDefault","modelMenuItemsContainerRef","Menu","anchor","menu","getMenuElement","onCloseAnimationEnd","icon","menuItemText","menuItemIcon","models","selectedAttributes","isSelectedAll","menuContentContainer","SearchInput","search","onReset","placeholder","menuItemStickerText","renderModelMenuItems","right","backdrops","backdropAttributeMenuItemText","renderBackdropMenuItems","patterns","renderPatternMenuItems","buttonsContainer","idsByCategory","StarGiftCategoryList","onCategoryChanged","areLimitedStarGiftsDisallowed","starCategories","keys","category","hasResale","selectedCategory","setSelectedCategory","renderCategoryItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll","runThrottledForScroll","throttle","cb","forPeerId","resaleGiftsCount","areResaleGiftsLoading","boostPerSentGift","boostsPerSentGift","starGiftsById","starGiftIdsByCategory","GiftModal","closeGiftModal","resetResaleGifts","transitionRef","giftHeaderRef","isApiPeerChat","selectedGift","setSelectedGift","selectedResellGift","setSelectedResellGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","allGifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","set","baseGift","reduce","prev","isResaleScreen","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","renderTextFilters","recipientId","handleCloseModal","handleCloseButtonClick","isBackButton","buttonClassName","resaleHeader","headerSlide","isFirstLoading","resaleHeaderContentContainer","resaleHeaderText","resaleHeaderDescription","commonHeaderText","renderHeader","avatars","premiumGiftsGallery","GiftItemPremium","get","starGiftsDescription","starGiftsTransition","filteredGiftIds","starGiftsContainer","shouldShowResale","availabilityResale","shouldDuplicateAsResale","elements","renderStarGifts","GiftSendingOptions","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","idsWithSelf","concat","filteredPeerIds","selectCanGift","selectedId","forceShowSelf","AVATAR_SIZE","GIFT_STICKER_SIZE","GiftTransferPreview","giftPreview","arrow","typeGift","isSavedGift","fromPeer","targetPeer","hasAdminRights","getHasAdminRight","recipientPeer","currentUserEmojiStatus","emojiStatus","collectibleEmojiStatuses","statuses","releasedByPeerId","releasedByPeer","starGiftMaxConvertPeriod","tonExplorerUrl","GiftInfoModal","closeGiftInfoModal","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","buyStarGift","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isConfirmModalOpen","setIsConfirmModalOpen","shouldPayInTon","setShouldPayInTon","renderingFromPeer","renderingTargetPeer","isTargetChat","savedGift","isSender","canConvertDifference","getServerTime","conversionLeft","hasConvertOption","giftSubtitle","ownerTitle","getMainUsername","fallbackText","owner","canFocusUpgrade","upgradeMsgId","canManage","inputGift","getResalePrice","confirmPrice","canBuyGift","ownerId","giftOwnerTitle","ownerName","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","handleBuyGift","closeConfirmModal","handleConfirmBuyGift","price","SettingsMenuButton","headerButton","renderFooterButton","isShiny","upgradeIcon","saleDateInfo","firstSaleDate","lastSaleDate","modalData","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","giftResalePriceContainer","giftResalePriceStar","headerSplitButton","moreIcon","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerAddress","ownerPeer","originalDetails","copyIcon","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipient","recipientLink","senderLink","tonLink","giftAddress","footerDescription","withBalanceBar","currencyInBalanceBar","ConfirmDialog","noDefaultTitle","confirmLabel","confirmHandler","formatTonAsText","formatStarsAsText","onCheck","checkBoxDescription","configPermille","starsStargiftResaleCommissionPermille","starsStargiftResaleAmountMin","starsStargiftResaleAmountMax","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","tonConfigPermille","tonStargiftResaleCommissionPermille","tonStargiftResaleAmountMin","convertTonFromNanos","maxTonFromConfig","tonStargiftResaleAmountMax","GiftResalePriceComposerModal","closeGiftResalePriceComposerModal","updateStarGiftPrice","setPrice","isPriceInTon","setIsPriceInTon","hasPrice","handleChangePrice","parseFloat","isNaN","handleSellGift","convertTonToNanos","variables","commission","minAmount","isPriceCorrect","InputText","inputMode","teactExperimentControlled","priceWithCommission","toFixed","GiftUpgradeModal","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","previousSelection","random","getRandomAttributes","useInterval","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","listItemData","TableAboutModal","GiftStatusInfoModal","closeGiftStatusInfoModal","setEmojiStatus","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","statusSparklesColor","FRAGMENT_PEER","byKey","hasPassword","twoFaSettings","passwordHint","GiftWithdrawModal","closeGiftWithdrawModal","clearGiftWithdrawError","processStarGiftWithdrawal","openSettingsScreen","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","handleSubmit","password","handleSetUpPassword","screen","SettingsScreens","TwoFaDisabled","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","error","errorKey","withRegular","clearError","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","noop","async","peerGlobalSearch","searchResult","callApi","accountResultIds","globalResultIds","contactIds","GiftTransferModal","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","foundIds","currentResultsQuery","queryFn","debounceTimeout","debouncedQuery","resolverFn","ms","dependencies","isFrozen","updateWhenUnfrozen","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","useDebouncedMemo","setCurrentResultsQuery","queryCallback","useAsync","Promise","resolve","answer","usePeerSearch","categories","MEMO_EMPTY_ARRAY","peerColorId","handleCategoryChange","displayIds","handleTransfer","transferStars","ignoreFreeze","onSelectedCategoryChange","withPeerUsernames","noScrollRestore","ChatRefundModal","closeChatRefundModal","toggleNoPaidMessagesException","shouldRefundStars","setShouldRefundStars","renderingUser","starsToRefund","handleConfirmRemoveFee","shouldRefundCharged","PriceConfirmModal","actions","handleConfirm","directInfo","closePriceConfirmModal","newAmount","currentBalance","tabId","getCurrentTabId","originalAmount","originalAmountText","newAmountText"],"sourceRoot":""}