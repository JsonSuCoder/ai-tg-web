{"version":3,"file":"6930.407e28cfe75285ad9e80.js","mappings":"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","sources":["webpack://TelyAI/./src/components/modals/gift/GiftItemPremium.tsx","webpack://TelyAI/./src/components/modals/stars/chatRefund/ChatRefundModal.tsx","webpack://TelyAI/./src/components/modals/stars/transaction/StarsTransactionModal.tsx","webpack://TelyAI/./src/components/modals/stars/subscription/StarsSubscriptionModal.tsx","webpack://TelyAI/./src/hooks/useDebouncedMemo.ts","webpack://TelyAI/./src/components/main/premium/StarsGiftingPickerModal.module.scss?3156","webpack://TelyAI/./src/components/modals/gift/GiftComposer.module.scss?dac8","webpack://TelyAI/./src/hooks/usePeerSearch.ts","webpack://TelyAI/./src/components/modals/gift/GiftResaleFilters.module.scss?c5a8","webpack://TelyAI/./src/components/modals/gift/transfer/GiftTransferModal.tsx","webpack://TelyAI/./src/components/modals/gift/withdraw/GiftWithdrawModal.module.scss?287b","webpack://TelyAI/./src/components/modals/gift/withdraw/GiftWithdrawModal.tsx","webpack://TelyAI/./src/components/modals/paidReaction/PaidReactionModal.tsx","webpack://TelyAI/./src/components/modals/stars/subscription/StarsSubscriptionModal.module.scss?5025","webpack://TelyAI/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.tsx","webpack://TelyAI/./src/components/modals/stars/transaction/PaidMediaThumb.module.scss?605d","webpack://TelyAI/./src/components/modals/stars/transaction/StarsTransactionItem.module.scss?b947","webpack://TelyAI/./src/components/modals/stars/transaction/StarsTransactionItem.tsx","webpack://TelyAI/./src/components/modals/gift/GiftComposer.tsx","webpack://TelyAI/./src/components/common/gift/GiftTransferPreview.module.scss?0f0d","webpack://TelyAI/./src/components/modals/gift/UniqueGiftHeader.module.scss?2bf6","webpack://TelyAI/./src/components/modals/gift/GiftItemStar.tsx","webpack://TelyAI/./src/components/modals/gift/recipient/GiftRecipientPicker.tsx","webpack://TelyAI/./src/components/main/premium/StarsGiftingPickerModal.tsx","webpack://TelyAI/./src/components/modals/gift/GiftResaleFilters.tsx","webpack://TelyAI/./src/components/common/gift/GiftTransferPreview.tsx","webpack://TelyAI/./src/components/modals/gift/StarGiftCategoryList.module.scss?7d19","webpack://TelyAI/./src/components/modals/stars/transaction/StarsTransactionModal.module.scss?a215","webpack://TelyAI/./src/components/modals/stars/subscription/StarsSubscriptionItem.tsx","webpack://TelyAI/./src/components/modals/stars/helpers/transaction.ts","webpack://TelyAI/./src/components/modals/gift/GiftItem.module.scss?c564","webpack://TelyAI/./src/components/modals/stars/gift/StarsGiftModal.tsx","webpack://TelyAI/./src/components/modals/paidReaction/PaidReactionModal.module.scss?80b2","webpack://TelyAI/./src/components/modals/stars/StarsBalanceModal.tsx","webpack://TelyAI/./src/components/modals/paidReaction/StarSlider.module.scss?b8f3","webpack://TelyAI/./src/components/modals/gift/resale/GiftResalePriceComposerModal.tsx","webpack://TelyAI/./src/components/modals/gift/GiftModal.tsx","webpack://TelyAI/./src/components/modals/stars/BalanceBlock.tsx","webpack://TelyAI/./src/components/modals/stars/subscription/StarsSubscriptionItem.module.scss?74b5","webpack://TelyAI/./src/components/modals/paidReaction/StarSlider.tsx","webpack://TelyAI/./src/components/modals/gift/status/GiftStatusInfoModal.module.scss?3366","webpack://TelyAI/./src/components/modals/priceConfirm/PriceConfirmModal.tsx","webpack://TelyAI/./src/components/modals/gift/upgrade/GiftUpgradeModal.tsx","webpack://TelyAI/./src/components/modals/gift/UniqueGiftHeader.tsx","webpack://TelyAI/./src/components/modals/stars/StarsPaymentModal.tsx","webpack://TelyAI/./src/components/modals/stars/transaction/PaidMediaThumb.tsx","webpack://TelyAI/./src/components/modals/gift/GiftModal.module.scss?fd13","webpack://TelyAI/./src/components/modals/gift/recipient/GiftRecipientPicker.module.scss?b7e9","webpack://TelyAI/./src/components/modals/gift/info/GiftInfoModal.module.scss?4f0e","webpack://TelyAI/./src/components/modals/stars/StarsBalanceModal.module.scss?bbd4","webpack://TelyAI/./src/components/modals/gift/ResaleGiftMenuAttributeSticker.module.scss?8276","webpack://TelyAI/./src/components/modals/gift/info/GiftInfoModal.tsx","webpack://TelyAI/./src/components/modals/gift/upgrade/GiftUpgradeModal.module.scss?ae9e","webpack://TelyAI/./src/components/modals/gift/GiftModalResaleScreen.tsx","webpack://TelyAI/./src/components/modals/gift/resale/GiftResalePriceComposerModal.module.scss?6666","webpack://TelyAI/./src/components/modals/gift/status/GiftStatusInfoModal.tsx","webpack://TelyAI/./src/components/modals/gift/StarGiftCategoryList.tsx","webpack://TelyAI/./src/components/modals/stars/gift/StarsGiftModal.module.scss?069e"],"sourcesContent":["import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n  ApiSticker,\n} from '../../../api/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  option: ApiPremiumGiftCodeOption;\n  optionByStars?: ApiPremiumGiftCodeOption;\n  baseMonthAmount?: number;\n  onClick: (gift: ApiPremiumGiftCodeOption) => void;\n};\n\nexport type StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 86;\n\nfunction GiftItemPremium({\n  sticker, canPlayAnimatedEmojis, baseMonthAmount, option, optionByStars, onClick,\n}: OwnProps & StateProps) {\n  const {\n    months, amount, currency,\n  } = option;\n  const lang = useLang();\n\n  const handleGiftClick = useLastCallback(() => {\n    onClick(option);\n  });\n\n  const perMonth = Math.floor(amount / months);\n  const discount = baseMonthAmount && baseMonthAmount > perMonth\n    ? Math.ceil(100 - perMonth / (baseMonthAmount / 100))\n    : undefined;\n\n  function renderMonths() {\n    const caption = months === 12\n      ? lang('Years', { count: 1 }, { pluralValue: 1 })\n      : lang('Months', { count: months }, { pluralValue: months });\n    return (\n      <div className={styles.monthsDescription}>\n        {caption}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.container}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n    >\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        play={canPlayAnimatedEmojis}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n\n      {renderMonths()}\n      <div className={styles.description}>\n        {lang('PremiumGiftDescription')}\n      </div>\n      <Button className={styles.buy} nonInteractive size=\"tiny\" pill fluid>\n        {formatCurrencyAsString(amount, currency)}\n      </Button>\n      {optionByStars && (\n        <div className={styles.starsPriceBlock}>\n          {lang('GiftPremiumStarsPrice', {\n            stars: (formatStarsAsIcon(lang, optionByStars.amount, { className: styles.starsPriceIcon })),\n          }, { withNodes: true, withMarkdown: true })}\n        </div>\n      )}\n      {Boolean(discount) && (\n        <GiftRibbon color=\"purple\" text={lang('GiftDiscount', { percent: discount })} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { option }): StateProps => {\n    const sticker = selectGiftStickerForDuration(global, option.months);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftItemPremium));\n","import React from '@teact';\nimport { memo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectUser } from '../../../../global/selectors';\nimport { formatStarsAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['chatRefundModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst ChatRefundModal = ({ modal, user }: OwnProps & StateProps) => {\n  const { closeChatRefundModal, toggleNoPaidMessagesException } = getActions();\n\n  const [shouldRefundStars, setShouldRefundStars] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingUser = useCurrentOrPrev(user);\n\n  const { starsToRefund, userId } = renderingModal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleConfirmRemoveFee = useLastCallback(() => {\n    closeChatRefundModal();\n    if (!userId) return;\n\n    toggleNoPaidMessagesException ({ userId, shouldRefundCharged: shouldRefundStars });\n  });\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeChatRefundModal}\n      title={lang('RemoveFeeTitle')}\n      confirmLabel={lang('ConfirmRemoveMessageFee')}\n      confirmHandler={handleConfirmRemoveFee}\n    >\n      {lang('ConfirmDialogMessageRemoveFee', {\n        peer: renderingUser && getPeerTitle(lang, renderingUser),\n      }, {\n        withMarkdown: true,\n        withNodes: true,\n      })}\n      {\n        Boolean(starsToRefund) && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('ConfirmDialogRemoveFeeRefundStars', {\n              amount: formatStarsAsText(lang, starsToRefund),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n            checked={shouldRefundStars}\n            onCheck={setShouldRefundStars}\n          />\n        )\n      }\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.userId ? selectUser(global, modal.userId) : undefined;\n\n  return {\n    user,\n  };\n})(ChatRefundModal));\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransactionPeer, ApiSticker,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../../config';\nimport { getMessageLink } from '../../../../global/helpers';\nimport {\n  buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer,\n} from '../../../../global/helpers/payments';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForStars,\n  selectGiftStickerForTon,\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../../gift/UniqueGiftHeader';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionModal.module.scss';\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nexport type OwnProps = {\n  modal: TabState['starsTransactionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  canPlayAnimatedEmojis?: boolean;\n  topSticker?: ApiSticker;\n  paidMessageCommission?: number;\n};\n\nconst StarsTransactionModal: FC<OwnProps & StateProps> = ({\n  modal,\n  peer,\n  canPlayAnimatedEmojis,\n  topSticker,\n  paidMessageCommission,\n}) => {\n  const { showNotification, openMediaViewer, closeStarsTransactionModal } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const { transaction } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleOpenMedia = useLastCallback(() => {\n    const media = transaction?.extendedMedia;\n    if (!media) return;\n\n    openMediaViewer({\n      origin: MediaViewerOrigin.StarsTransaction,\n      standaloneMedia: media.flatMap((item) => Object.values(item)),\n    });\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const starModalData = useMemo(() => {\n    if (!transaction) {\n      return undefined;\n    }\n\n    const {\n      giveawayPostId, photo, amount, isGiftUpgrade, starGift, isGiftResale,\n      starRefCommision,\n    } = transaction;\n\n    const gift = transaction?.starGift;\n    const isUniqueGift = gift?.type === 'starGiftUnique';\n    const sticker = transaction?.starGift ? getStickerFromGift(transaction.starGift) : topSticker;\n\n    const giftAttributes = isUniqueGift ? getGiftAttributes(gift) : undefined;\n\n    const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n      && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n    const peerId = transaction.peer?.type === 'peer' ? transaction.peer.id : undefined;\n    const toName = transaction.peer && oldLang(getStarsPeerTitleKey(transaction.peer));\n\n    const title = getTransactionTitle(oldLang, lang, transaction);\n\n    const messageLink = peer && transaction.messageId && !isGiftUpgrade\n      ? getMessageLink(peer, undefined, transaction.messageId) : undefined;\n    const giveawayMessageLink = peer && giveawayPostId ? getMessageLink(peer, undefined, giveawayPostId) : undefined;\n\n    const media = transaction.extendedMedia;\n\n    const mediaAmount = media?.length || 0;\n    const areAllPhotos = media?.every((m) => !m.video);\n    const areAllVideos = media?.every((m) => !m.photo);\n\n    const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', mediaAmount)\n      : areAllVideos ? oldLang('Stars.Transfer.Videos', mediaAmount)\n        : oldLang('Media', mediaAmount);\n\n    const description = transaction.description\n      || (isGiftUpgrade && starGift?.type === 'starGiftUnique' ? starGift.title : undefined)\n      || (media ? mediaText : undefined);\n\n    const shouldDisplayAvatar = !media && !sticker && !transaction.isPostsSearch;\n    const avatarPeer = !photo ? ((!shouldUseCustomPeer(transaction) && peer) || customPeer) : undefined;\n\n    const uniqueGiftHeader = isUniqueGift && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={lang('GiftInfoCollectible', { number: gift.number })}\n          resellPrice={transaction.amount}\n        />\n      </div>\n    );\n\n    const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n    const regularHeader = (\n      <div className={styles.header}>\n        {media && (\n          <PaidMediaThumb\n            className={buildClassName(styles.mediaPreview, 'transaction-media-preview')}\n            media={media}\n            onClick={handleOpenMedia}\n          />\n        )}\n        {!media && sticker && (\n          <AnimatedIconFromSticker\n            key={transaction.id}\n            sticker={sticker}\n            play={canPlayAnimatedEmojis}\n            noLoop\n          />\n        )}\n        {shouldDisplayAvatar && (\n          <Avatar\n            className={styles.avatar}\n            peer={avatarPeer}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n        )}\n        {!sticker && !transaction.isPostsSearch && (\n          <InteractiveSparkles\n            className={buildClassName(styles.starsBackground)}\n            color=\"gold\"\n            onRequestAnimation={handleRequestAnimation}\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n          />\n        )}\n        {Boolean(title) && <h1 className={styles.title}>{title}</h1>}\n        <p className={styles.description}>{description}</p>\n        <p className={styles.amount}>\n          <span\n            className={buildClassName(styles.amount, amountColorClass)}\n          >\n            {formatStarsTransactionAmount(lang, amount)}\n          </span>\n          {amount.currency === STARS_CURRENCY_CODE && <StarIcon type=\"gold\" size=\"middle\" />}\n          {amount.currency === 'TON' && <Icon name=\"toncoin\" className={amountColorClass} />}\n          {transaction.isRefund && (\n            <p className={styles.refunded}>{lang('Refunded')}</p>\n          )}\n        </p>\n        {Boolean(transaction.paidMessages && transaction.starRefCommision && paidMessageCommission) && (\n          <p className={styles.description}>\n            {lang(\n              'PaidMessageTransactionDescription',\n              { percent: formatPercent(paidMessageCommission! / 10) },\n              {\n                withNodes: true,\n                withMarkdown: true,\n              },\n            )}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    if (transaction && starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      tableData.push([\n        oldLang('StarsTransaction.StarRefReason.Title'),\n        oldLang('StarsTransaction.StarRefReason.Program'),\n      ]);\n    }\n\n    if (isGiftUpgrade) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        oldLang('StarGiftReasonUpgrade'),\n      ]);\n    }\n\n    if (isGiftResale) {\n      tableData.push([\n        oldLang('StarGiftReason'),\n        isNegativeAmount(transaction.amount)\n          ? lang('StarGiftSaleTransaction')\n          : lang('StarGiftPurchaseTransaction'),\n      ]);\n    }\n\n    let peerLabel;\n    if (isGiftUpgrade) {\n      peerLabel = oldLang('Stars.Transaction.GiftFrom');\n    } else if (isNegativeAmount(amount) || transaction.isMyGift) {\n      peerLabel = oldLang('Stars.Transaction.To');\n    } else if (transaction.starRefCommision && !transaction.paidMessages && !isGiftResale) {\n      peerLabel = oldLang('StarsTransaction.StarRefReason.Miniapp');\n    } else if (peerId) {\n      peerLabel = oldLang('Star.Transaction.From');\n    } else {\n      peerLabel = oldLang('Stars.Transaction.Via');\n    }\n\n    if (!transaction.isPostsSearch) {\n      tableData.push([\n        peerLabel,\n        peerId ? { chatId: peerId } : toName || '',\n      ]);\n    }\n\n    if (transaction.starRefCommision && transaction.paidMessages) {\n      tableData.push([\n        lang('PaidMessageTransactionTotal'),\n        formatStarsAsIcon(lang,\n          transaction.amount.amount / ((100 - transaction.starRefCommision) / 100),\n          { asFont: false, className: styles.starIcon, containerClassName: styles.totalStars }),\n      ]);\n    }\n\n    if (messageLink) {\n      tableData.push([oldLang('Stars.Transaction.Reaction.Post'), <SafeLink url={messageLink} text={messageLink} />]);\n    }\n\n    if (giveawayMessageLink && transaction.amount.currency === STARS_CURRENCY_CODE) {\n      tableData.push([oldLang('BoostReason'), <SafeLink url={giveawayMessageLink} text={oldLang('Giveaway')} />]);\n      tableData.push([oldLang('Gift'), oldLang('Stars', transaction.amount, 'i')]);\n    }\n\n    if (transaction.id) {\n      tableData.push([\n        oldLang('Stars.Transaction.Id'),\n        (\n          <>\n            <div\n              className={styles.tid}\n              onClick={() => {\n                copyTextToClipboard(transaction.id!);\n                showNotification({\n                  message: oldLang('StarsTransactionIDCopied'),\n                });\n              }}\n            >\n              {transaction.id}\n            </div>\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </>\n        ),\n      ]);\n    }\n\n    tableData.push([\n      oldLang('Stars.Transaction.Date'),\n      formatDateTimeToString(transaction.date * 1000, oldLang.code, true),\n    ]);\n\n    const footerText = oldLang('lng_credits_box_out_about');\n    const footerTextParts = footerText.split('{link}');\n\n    const footer = (\n      <span className={styles.footer}>\n        {footerTextParts[0]}\n        <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />\n        {footerTextParts[1]}\n      </span>\n    );\n\n    return {\n      header: isUniqueGift ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [transaction, oldLang, lang, peer, canPlayAnimatedEmojis, topSticker,\n    paidMessageCommission, handleRequestAnimation]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(transaction)}\n      className={styles.modal}\n      hasBackdrop={transaction?.starGift?.type === 'starGiftUnique'}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      buttonText={oldLang('OK')}\n      onClose={closeStarsTransactionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.transaction?.peer?.type === 'peer' && modal.transaction.peer.id;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n    const paidMessageCommission = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    const currencyAmount = modal?.transaction.amount;\n    const starsGiftSticker = modal?.transaction.isGift\n      ? (currencyAmount?.currency === STARS_CURRENCY_CODE ? selectGiftStickerForStars(global, currencyAmount?.amount)\n        : selectGiftStickerForTon(global, currencyAmount?.amount)) : undefined;\n\n    return {\n      peer,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      topSticker: starsGiftSticker,\n      paidMessageCommission,\n    };\n  },\n)(StarsTransactionModal));\n\nfunction getStarsPeerTitleKey(peer: ApiStarsTransactionPeer) {\n  switch (peer.type) {\n    case 'appStore':\n      return 'AppStore';\n    case 'playMarket':\n      return 'PlayMarket';\n    case 'fragment':\n      return 'Fragment';\n    case 'premiumBot':\n      return 'StarsTransactionBot';\n    case 'ads':\n      return 'StarsTransactionAds';\n    case 'api':\n      return 'Stars.Intro.Transaction.TelegramBotApi.Subtitle';\n    default:\n      return 'Stars.Transaction.Unsupported.Title';\n  }\n}\n","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../../config';\nimport { isApiPeerUser } from '../../../../global/helpers/peers';\nimport {\n  selectPeer,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\n\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport InteractiveSparkles from '../../../common/InteractiveSparkles';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\n\nimport styles from './StarsSubscriptionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['starsSubscriptionModal'];\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst StarsSubscriptionModal: FC<OwnProps & StateProps> = ({\n  modal, peer,\n}) => {\n  const {\n    closeStarsSubscriptionModal,\n    fulfillStarsSubscription,\n    changeStarsSubscription,\n    checkChatInvite,\n    loadStarStatus,\n    openInvoice,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { subscription } = modal || {};\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  const buttonState = useMemo(() => {\n    if (!subscription) {\n      return 'hidden';\n    }\n\n    if (subscription.canRefulfill) {\n      return 'refulfill';\n    }\n\n    const isActive = subscription.until > Date.now() / 1000;\n    if (isActive && !subscription.isCancelled) {\n      return 'cancel';\n    }\n\n    if (isActive && subscription.isCancelled) {\n      return 'renew';\n    }\n\n    const canRestart = subscription.chatInviteHash || subscription.invoiceSlug;\n    if (!isActive && canRestart) {\n      return 'restart';\n    }\n\n    return 'ok';\n  }, [subscription]);\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!subscription) {\n      return;\n    }\n\n    switch (buttonState) {\n      case 'refulfill': {\n        fulfillStarsSubscription({ id: subscription.id });\n        break;\n      }\n      case 'restart': {\n        if (subscription.chatInviteHash) {\n          checkChatInvite({ hash: subscription.chatInviteHash });\n        } else if (subscription.invoiceSlug) {\n          openInvoice({\n            type: 'slug',\n            slug: subscription.invoiceSlug,\n          });\n        }\n        loadStarStatus();\n        break;\n      }\n      case 'renew': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: false });\n        break;\n      }\n      case 'cancel': {\n        changeStarsSubscription({ id: subscription.id, isCancelled: true });\n        break;\n      }\n    }\n    closeStarsSubscriptionModal();\n  });\n\n  const starModalData = useMemo(() => {\n    if (!subscription || !peer) {\n      return undefined;\n    }\n\n    const {\n      pricing, until, isCancelled, canRefulfill, photo, title, hasBotCancelled,\n    } = subscription;\n\n    const isBotSubscription = isApiPeerUser(peer);\n\n    const header = (\n      <div className={styles.header}>\n        <div className={styles.avatarWrapper}>\n          <Avatar\n            peer={!photo ? peer : undefined}\n            webPhoto={photo}\n            size=\"giant\"\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"adaptive\" />\n        </div>\n        <InteractiveSparkles\n          className={buildClassName(styles.starsBackground)}\n          color=\"gold\"\n          onRequestAnimation={handleRequestAnimation}\n          centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n        />\n        <h1 className={styles.title}>{title || oldLang('StarsSubscriptionTitle')}</h1>\n        <p className={styles.amount}>\n          {lang('StarsPerMonth', {\n            amount: pricing.amount,\n          }, {\n            withNodes: true,\n            specialReplacement: {\n              [STARS_ICON_PLACEHOLDER]: <StarIcon className={styles.amountStar} size=\"adaptive\" type=\"gold\" />,\n            },\n          })}\n        </p>\n      </div>\n    );\n\n    const tableData: TableData = [];\n\n    tableData.push([\n      oldLang(isBotSubscription ? 'StarsSubscriptionBot' : 'StarsSubscriptionChannel'),\n      { chatId: peer.id },\n    ]);\n\n    if (title) {\n      tableData.push([\n        oldLang('StarsSubscriptionBotProduct'),\n        title,\n      ]);\n    }\n\n    const hasExpired = until < Date.now() / 1000;\n    tableData.push([\n      oldLang(hasExpired ? 'StarsSubscriptionUntilExpired'\n        : isCancelled ? 'StarsSubscriptionUntilExpires' : 'StarsSubscriptionUntilRenews'),\n      formatDateTimeToString(until * 1000, oldLang.code, true),\n    ]);\n\n    const footerTos = lang('StarsTransactionTOS', {\n      link: <SafeLink url={lang('StarsTransactionTOSLink')} text={lang('StarsTransactionTOSLinkText')} />,\n    }, {\n      withNodes: true,\n    });\n\n    const footer = (\n      <span className={styles.footer}>\n        <p className={styles.secondary}>{footerTos}</p>\n        {isCancelled && (\n          <p className={styles.danger}>\n            {oldLang(hasBotCancelled ? 'StarsSubscriptionBotCancelledText' : 'StarsSubscriptionCancelledText')}\n          </p>\n        )}\n        {canRefulfill && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionRefulfillInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionExpiredInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {!isCancelled && !canRefulfill && !hasExpired && (\n          <p className={styles.secondary}>\n            {oldLang('StarsSubscriptionCancelInfo', formatDateTimeToString(until * 1000, oldLang.code, true))}\n          </p>\n        )}\n        {buttonState !== 'hidden' && (\n          <Button\n            size=\"smaller\"\n            color={buttonState === 'cancel' ? 'danger' : 'primary'}\n            isText={buttonState === 'cancel'}\n            onClick={handleButtonClick}\n          >\n            {oldLang(\n              buttonState === 'cancel' ? 'StarsSubscriptionCancel'\n                : buttonState === 'refulfill' ? 'StarsSubscriptionRefulfill'\n                  : buttonState === 'restart' ? 'StarsSubscriptionAgain'\n                    : buttonState === 'renew' ? 'StarsSubscriptionRenew' : 'OK',\n            )}\n          </Button>\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [buttonState, lang, oldLang, peer, subscription]);\n\n  const prevModalData = usePrevious(starModalData);\n  const renderingModalData = prevModalData || starModalData;\n\n  return (\n    <TableInfoModal\n      isOpen={Boolean(subscription)}\n      className={styles.modal}\n      header={renderingModalData?.header}\n      tableData={renderingModalData?.tableData}\n      footer={renderingModalData?.footer}\n      onClose={closeStarsSubscriptionModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const peerId = modal?.subscription.peerId;\n    const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n    return {\n      peer,\n    };\n  },\n)(StarsSubscriptionModal));\n","import {\n  getIsHeavyAnimating, useCallback, useRef, useState,\n} from '../lib/teact/teact';\n\nimport useForceUpdate from './useForceUpdate';\nimport useHeavyAnimation from './useHeavyAnimation';\nimport useRunDebounced from './useRunDebounced';\nimport useSyncEffect from './useSyncEffect';\n\nexport default function useDebouncedMemo<R, D extends unknown[]>(\n  resolverFn: () => R, ms: number, dependencies: D,\n): R | undefined {\n  const [value, setValue] = useState<R>();\n  const { isFrozen, updateWhenUnfrozen } = useHeavyAnimationFreeze();\n  const runDebounced = useRunDebounced(ms, true);\n\n  useSyncEffect(() => {\n    if (isFrozen) {\n      updateWhenUnfrozen();\n      return;\n    }\n\n    runDebounced(() => {\n      setValue(resolverFn());\n    });\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [...dependencies, isFrozen]);\n\n  return value;\n}\n\nfunction useHeavyAnimationFreeze() {\n  const isPending = useRef(false);\n\n  const updateWhenUnfrozen = useCallback(() => {\n    isPending.current = true;\n  }, []);\n\n  const forceUpdate = useForceUpdate();\n  const handleUnfreeze = useCallback(() => {\n    if (!isPending.current) {\n      return;\n    }\n\n    isPending.current = false;\n    forceUpdate();\n  }, [forceUpdate]);\n  useHeavyAnimation(noop, handleUnfreeze);\n\n  return {\n    isFrozen: getIsHeavyAnimating(),\n    updateWhenUnfrozen,\n  };\n}\n\nfunction noop() {\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"s3k01dTm\",\"transition\":\"BNA0_b5j\",\"main\":\"Oadi16vt\",\"filter\":\"z84KbvhX\",\"title\":\"Jnsrau29\",\"buttons\":\"NnVyYB32\",\"picker\":\"cuI2eDIY\",\"avatars\":\"ILtw_aNL\",\"center\":\"eIfMzHv5\",\"description\":\"FlNJWZ5P\",\"premiumFeatures\":\"xIv0Yaur\",\"options\":\"eNJRXn6P\",\"button\":\"KDNKXBp5\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jKOG0It6\",\"header\":\"A_fX4EXY\",\"spacer\":\"ATowWJ60\",\"title\":\"gDNtv9oz\",\"balance-container\":\"eAKZVhOT\",\"balanceContainer\":\"eAKZVhOT\",\"balance-caption\":\"vbwprYel\",\"balanceCaption\":\"vbwprYel\",\"star-balance\":\"lXuIlbVK\",\"starBalance\":\"lXuIlbVK\",\"balance\":\"dIEx_Iqi\",\"optionsSection\":\"Y68CEIKn\",\"checkboxTitle\":\"H4taXei_\",\"actionMessageView\":\"CB1mxsgp\",\"messageInput\":\"o5r2IPoA\",\"limited\":\"mWzLu0c0\",\"footer\":\"jxWZSvet\",\"switcher\":\"zZUpGRSI\",\"switcherStarIcon\":\"zAee80Dv\",\"description\":\"nTPAv1ci\",\"main-button\":\"IDuhjrne\",\"mainButton\":\"IDuhjrne\",\"star\":\"Q4NlMT0o\",\"background\":\"ZORVRSG3\",\"customBgImage\":\"Eny_G3JI\",\"customBgColor\":\"TkJZPU2u\",\"withTransition\":\"soDpW2YR\",\"blurred\":\"M6k91TdM\",\"withRightColumn\":\"FBcNO8hj\"};","import { useState } from '../lib/teact/teact';\n\nimport type { ApiChat } from '../api/types';\n\nimport { callApi } from '../api/gramjs';\nimport useAsync from './useAsync';\nimport useDebouncedMemo from './useDebouncedMemo';\nimport useLastCallback from './useLastCallback';\n\nconst DEBOUNCE_TIMEOUT = 300;\n\nexport async function peerGlobalSearch(query: string) {\n  const searchResult = await callApi('searchChats', { query });\n  if (!searchResult) return undefined;\n\n  const ids = [...searchResult.accountResultIds, ...searchResult.globalResultIds];\n\n  return ids;\n}\n\nexport function prepareChatMemberSearch(chat: ApiChat) {\n  return async (query: string) => {\n    const searchResult = await callApi('fetchMembers', {\n      chat,\n      memberFilter: 'search',\n      query,\n    });\n\n    return searchResult?.members?.map((member) => member.userId) || [];\n  };\n}\n\nexport default function usePeerSearch({\n  query,\n  queryFn = peerGlobalSearch,\n  defaultValue,\n  debounceTimeout = DEBOUNCE_TIMEOUT,\n  isDisabled,\n}: {\n  query: string;\n  queryFn?: (query: string) => Promise<string[] | undefined>;\n  defaultValue?: string[];\n  debounceTimeout?: number;\n  isDisabled?: boolean;\n}) {\n  const debouncedQuery = useDebouncedMemo(() => query, debounceTimeout, [query]);\n  const [currentResultsQuery, setCurrentResultsQuery] = useState<string>('');\n  const searchQuery = !query ? query : debouncedQuery; // Ignore debounce if query is empty\n  const queryCallback = useLastCallback(queryFn);\n\n  const result = useAsync(async () => {\n    if (!searchQuery || isDisabled) {\n      setCurrentResultsQuery('');\n      return Promise.resolve(defaultValue);\n    }\n\n    const answer = await queryCallback(searchQuery);\n    setCurrentResultsQuery(searchQuery);\n    return answer;\n  }, [searchQuery, defaultValue, queryCallback, isDisabled], defaultValue);\n\n  return {\n    ...result,\n    currentResultsQuery,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_VgmQnUg\",\"buttonsContainer\":\"IDlp6U6g\",\"itemIcon\":\"yuctLnuR\",\"sticker\":\"VT562JS0\",\"backdropAttributeMenuItemText\":\"D50wFfRL\",\"menuItemStickerText\":\"THcGWXSA\",\"menuItemText\":\"L6EVE2Ux\",\"backdrop\":\"A29QNxKb\",\"menuItemIcon\":\"GL4rVsev\",\"item\":\"qiYcBOYc\",\"menuContentContainer\":\"EDsBn29z\",\"menu\":\"ISaNdBwd\",\"left\":\"e4Kkh_MR\",\"right\":\"Kz_nCGC3\"};","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport type { UniqueCustomPeer } from '../../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../../config';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectCanGift, selectPeer } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport { formatStarsAsIcon, formatStarsAsText } from '../../../../util/localization/format';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePeerSearch from '../../../../hooks/usePeerSearch';\n\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['giftTransferModal'];\n};\n\ntype StateProps = {\n  contactIds?: string[];\n  currentUserId?: string;\n};\n\ntype Categories = 'withdraw';\n\nconst GiftTransferModal = ({\n  modal, contactIds, currentUserId,\n}: OwnProps & StateProps) => {\n  const { closeGiftTransferModal, openGiftWithdrawModal, transferGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const uniqueGift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = uniqueGift && getGiftAttributes(uniqueGift);\n\n  const [selectedId, setSelectedId] = useState<string | undefined>();\n\n  const renderingSelectedPeerId = useCurrentOrPrev(selectedId);\n  const renderingSelectedPeer = useMemo(() => {\n    const global = getGlobal();\n    return renderingSelectedPeerId ? selectPeer(global, renderingSelectedPeerId) : undefined;\n  }, [renderingSelectedPeerId]);\n\n  const orderedChatIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n\n  const sortedLocalIds = useMemo(() => {\n    return unique([\n      ...(contactIds || []),\n      ...(orderedChatIds || []),\n    ]);\n  }, [contactIds, orderedChatIds]);\n\n  const { result: foundIds, currentResultsQuery } = usePeerSearch({\n    query: searchQuery,\n    defaultValue: sortedLocalIds,\n  });\n\n  const isLoading = currentResultsQuery !== searchQuery;\n\n  const categories = useMemo(() => {\n    if (currentResultsQuery) return MEMO_EMPTY_ARRAY;\n\n    return [{\n      type: 'withdraw',\n      isCustomPeer: true,\n      avatarIcon: 'toncoin',\n      peerColorId: 5,\n      title: lang('GiftTransferTON'),\n    }] satisfies UniqueCustomPeer<Categories>[];\n  }, [lang, currentResultsQuery]);\n\n  const handleCategoryChange = useLastCallback((category: Categories) => {\n    if (category !== 'withdraw') return;\n\n    openGiftWithdrawModal({\n      gift: renderingModal!.gift,\n    });\n    closeGiftTransferModal();\n  });\n\n  const displayIds = useMemo(() => {\n    if (isLoading) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n\n    return sortChatIds((foundIds || []).filter((peerId) => (\n      peerId !== currentUserId && selectCanGift(global, peerId)\n    )),\n    false);\n  }, [isLoading, foundIds, currentUserId]);\n\n  const closeConfirmModal = useLastCallback(() => {\n    setSelectedId(undefined);\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      setSelectedId(undefined);\n    }\n  }, [isOpen]);\n\n  const handleTransfer = useLastCallback(() => {\n    if (!renderingModal?.gift.inputGift) return;\n    transferGift({\n      gift: renderingModal.gift.inputGift,\n      recipientId: renderingSelectedPeerId!,\n      transferStars: renderingModal.gift.transferStars,\n    });\n\n    closeConfirmModal();\n    closeGiftTransferModal();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={closeGiftTransferModal}\n      title={lang('GiftTransferTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      ignoreFreeze\n    >\n      <PeerPicker<Categories>\n        itemIds={displayIds}\n        categories={categories}\n        onSelectedCategoryChange={handleCategoryChange}\n        withDefaultPadding\n        withPeerUsernames\n        isSearchable\n        noScrollRestore\n        isLoading={isLoading}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onFilterChange={setSearchQuery}\n        onSelectedIdChange={setSelectedId}\n      />\n      {giftAttributes && (\n        <ConfirmDialog\n          isOpen={Boolean(selectedId)}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={renderingModal?.gift.transferStars\n            ? lang(\n              'GiftTransferConfirmButton',\n              { amount: formatStarsAsIcon(lang, renderingModal.gift.transferStars, { asFont: true }) },\n              { withNodes: true },\n            ) : lang('GiftTransferConfirmButtonFree')}\n          confirmHandler={handleTransfer}\n        >\n          {renderingSelectedPeer && (\n            <GiftTransferPreview\n              peer={renderingSelectedPeer}\n              gift={uniqueGift}\n            />\n          )}\n          <p>\n            {renderingModal?.gift.transferStars\n              ? lang('GiftTransferConfirmDescription', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                amount: formatStarsAsText(lang, renderingModal.gift.transferStars),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : lang('GiftTransferConfirmDescriptionFree', {\n                gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                peer: getPeerTitle(lang, renderingSelectedPeer!),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })}\n          </p>\n        </ConfirmDialog>\n      )}\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { contactList, currentUserId } = global;\n\n    return {\n      contactIds: contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(GiftTransferModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"LQgz8Nlx\",\"giftPreview\":\"hgs0ts_O\",\"backdrop\":\"OnBhMaBw\",\"description\":\"HBxB4QPY\",\"arrow\":\"kXTOUpfb\",\"noPassword\":\"BnqLhoKr\"};","import React from '@teact';\nimport {\n  memo,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiStarGiftUnique } from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { type CustomPeer, SettingsScreens } from '../../../../types';\n\nimport { getDays } from '../../../../util/dates/units';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { getGiftAttributes } from '../../../common/helpers/gifts';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport PasswordForm from '../../../common/PasswordForm';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftWithdrawModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftWithdrawModal'];\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  passwordHint?: string;\n};\n\nconst FRAGMENT_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'fragment',\n  title: '',\n  customPeerAvatarColor: '#000000',\n};\nconst GIFT_STICKER_SIZE = 4.5 * REM;\n\nconst GiftWithdrawModal = ({ modal, hasPassword, passwordHint }: OwnProps & StateProps) => {\n  const {\n    closeGiftWithdrawModal,\n    clearGiftWithdrawError,\n    closeGiftInfoModal,\n    processStarGiftWithdrawal,\n    openSettingsScreen,\n  } = getActions();\n  const isOpen = Boolean(modal);\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const lang = useLang();\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const gift = renderingModal?.gift?.gift as ApiStarGiftUnique;\n  const giftAttributes = gift && getGiftAttributes(gift);\n  const exportDelay = renderingModal?.gift?.canExportAt\n    ? Math.max(renderingModal.gift.canExportAt - getServerTime(), 0) : undefined;\n\n  const handleClose = useLastCallback(() => {\n    closeGiftWithdrawModal();\n  });\n\n  const handleSubmit = useLastCallback((password: string) => {\n    processStarGiftWithdrawal({\n      gift: renderingModal!.gift.inputGift!,\n      password,\n    });\n  });\n\n  const handleSetUpPassword = useLastCallback(() => {\n    openSettingsScreen({\n      screen: SettingsScreens.TwoFaDisabled,\n    });\n    closeGiftWithdrawModal();\n    closeGiftInfoModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('GiftWithdrawTitle')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {giftAttributes && (\n        <>\n          <div className={styles.header}>\n            <div className={styles.giftPreview}>\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n                patternColor={giftAttributes.backdrop?.patternColor}\n                patternIcon={giftAttributes.pattern?.sticker}\n              />\n              <AnimatedIconFromSticker\n                className={styles.sticker}\n                size={GIFT_STICKER_SIZE}\n                sticker={giftAttributes.model?.sticker}\n              />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar\n              peer={FRAGMENT_PEER}\n              size=\"giant\"\n              className={styles.avatar}\n            />\n          </div>\n          <p className={styles.description}>\n            {lang('GiftWithdrawDescription', {\n              gift: `${gift.title} #${gift.number}`,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n              renderTextFilters: ['br'],\n            })}\n          </p>\n        </>\n      )}\n      {Boolean(exportDelay) && (\n        <p className={styles.exportHint}>\n          {lang('GiftWithdrawWait', { days: getDays(exportDelay) }, { pluralValue: getDays(exportDelay) })}\n        </p>\n      )}\n      {!hasPassword && (\n        <>\n          <span className={styles.noPassword}>{lang('ErrorPasswordMissing')}</span>\n          <Button className=\"mt-2\" size=\"smaller\" onClick={handleSetUpPassword}>{lang('SetUp2FA')}</Button>\n        </>\n      )}\n      {hasPassword && !exportDelay && (\n        <PasswordForm\n          shouldShowSubmit\n          placeholder={lang('CheckPasswordPlaceholder')}\n          error={renderingModal?.errorKey && lang.withRegular(renderingModal?.errorKey)}\n          description={lang('CheckPasswordDescription')}\n          clearError={clearGiftWithdrawError}\n          isLoading={renderingModal?.isLoading}\n          hint={passwordHint}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isOpen}\n          onChangePasswordVisibility={setShouldShowPassword}\n          submitLabel={lang('GiftWithdrawSubmit')}\n          onSubmit={handleSubmit}\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      passwordHint,\n    };\n  },\n)(GiftWithdrawModal));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPaidReactionPrivacyType,\n  ApiPeer,\n  ApiSendAsPeerId,\n  ApiStarsAmount, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { STARS_ICON_PLACEHOLDER } from '../../../config';\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectPeer, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport PeerBadge from '../../common/PeerBadge';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport StarSlider from './StarSlider';\n\nimport styles from './PaidReactionModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['paidReactionModal'];\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  chat?: ApiChat;\n  maxAmount: number;\n  starBalance?: ApiStarsAmount;\n  defaultPrivacy?: ApiPaidReactionPrivacyType;\n  sendPaidReactionsAsPeerIds?: ApiSendAsPeerId[];\n  currentUserId: string;\n  currentUser: ApiUser;\n};\n\ntype ReactorData = {\n  amount: number;\n  localAmount: number;\n  isMy?: boolean;\n  isAnonymous?: boolean;\n  user?: ApiPeer;\n};\n\nconst MAX_TOP_REACTORS = 3;\nconst DEFAULT_STARS_AMOUNT = 50;\nconst MAX_REACTION_AMOUNT = 2500;\nconst ANONYMOUS_PEER: CustomPeer = {\n  avatarIcon: 'author-hidden',\n  customPeerAvatarColor: '#9eaab5',\n  isCustomPeer: true,\n  titleKey: 'StarsReactionAnonymous',\n};\n\nconst PaidReactionModal = ({\n  modal,\n  chat,\n  message,\n  maxAmount,\n  starBalance,\n  defaultPrivacy,\n  sendPaidReactionsAsPeerIds,\n  currentUserId,\n  currentUser,\n}: OwnProps & StateProps) => {\n  const { closePaidReactionModal, addLocalPaidReaction, loadSendPaidReactionsAs } = getActions();\n\n  const [starsAmount, setStarsAmount] = useState(DEFAULT_STARS_AMOUNT);\n  const [isTouched, markTouched, unmarkTouched] = useFlag();\n  const [shouldSendAsAnonymous, setShouldSendAsAnonymous] = useState(true);\n  const [sendAsPeerId, setSendAsPeerId] = useState(currentUserId);\n\n  const chatId = chat?.id;\n\n  const senderPeer = sendAsPeerId ? (selectPeer(getGlobal(), sendAsPeerId)) : currentUser;\n\n  const oldLang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const lang = useLang();\n\n  const handleShowInTopSendersChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setShouldSendAsAnonymous(!e.target.checked);\n  });\n\n  const handleAmountChange = useLastCallback((value: number) => {\n    setStarsAmount(value);\n    markTouched();\n  });\n\n  useEffect(() => {\n    if (chatId && !sendPaidReactionsAsPeerIds) {\n      loadSendPaidReactionsAs({ chatId });\n    }\n  }, [chatId, sendPaidReactionsAsPeerIds]);\n\n  const filteredMyReactorIds = useMemo(() => {\n    const result = sendPaidReactionsAsPeerIds?.map((peer) => peer.id)\n      .filter((id) => id !== chatId);\n    result?.unshift(currentUserId);\n    return result;\n  }, [sendPaidReactionsAsPeerIds, chatId, currentUserId]);\n\n  const canChangeSendAsPeer = filteredMyReactorIds && filteredMyReactorIds.length > 1;\n\n  useEffect(() => {\n    if (!modal) {\n      unmarkTouched();\n    }\n  }, [modal]);\n\n  useEffect(() => {\n    const currentReactor = message?.reactions?.topReactors?.find((reactor) => reactor.isMy);\n    if (currentReactor) {\n      setShouldSendAsAnonymous(Boolean(currentReactor.isAnonymous));\n      if (currentReactor.peerId) {\n        setSendAsPeerId(currentReactor.peerId);\n      }\n      return;\n    }\n\n    setShouldSendAsAnonymous(defaultPrivacy?.type === 'anonymous' || false);\n    if (defaultPrivacy?.type === 'peer' && filteredMyReactorIds?.includes(defaultPrivacy.peerId)) {\n      setSendAsPeerId(defaultPrivacy.peerId);\n      return;\n    }\n\n    setSendAsPeerId(currentUserId);\n  }, [defaultPrivacy, message?.reactions?.topReactors, filteredMyReactorIds, currentUserId]);\n\n  const handleSend = useLastCallback(() => {\n    if (!modal) return;\n\n    addLocalPaidReaction({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      count: starsAmount,\n      isPrivate: shouldSendAsAnonymous,\n      peerId: shouldSendAsAnonymous || sendAsPeerId === currentUserId ? undefined : sendAsPeerId,\n      shouldIgnoreDefaultPrivacy: true,\n    });\n    closePaidReactionModal();\n  });\n\n  const handleSendAsPeerChange = useLastCallback((peerId: string) => {\n    setShouldSendAsAnonymous(false);\n    setSendAsPeerId(peerId);\n  });\n\n  const renderMenuItem = useLastCallback((peerId: string) => {\n    const peer = selectPeer(getGlobal(), peerId);\n    const isSelected = sendAsPeerId === peerId && !shouldSendAsAnonymous;\n    if (!peer) return undefined;\n\n    return (\n      <MenuItem\n        onClick={() => handleSendAsPeerChange(peerId)}\n      >\n        <Avatar\n          size=\"small\"\n          peer={peer}\n        />\n        <div className={buildClassName(styles.itemInfo)}>\n          <FullNameTitle className={styles.itemTitle} peer={peer} noFake noVerified />\n          <span className={styles.itemSubtitle}>\n            {isApiPeerUser(peer) ? lang('PeerPersonalAccount') : lang('PeerChannel')}\n          </span>\n        </div>\n        <Icon\n          className={styles.itemIcon}\n          name={isSelected ? 'check' : 'placeholder'}\n        />\n      </MenuItem>\n    );\n  });\n\n  const SendAsPeerMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.sendAsPeerMenuButton, isOpen ? 'active' : '')}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Avatar\n          className={styles.sendAsPeerButtonAvatar}\n          size=\"mini\"\n          peer={shouldSendAsAnonymous ? ANONYMOUS_PEER : senderPeer}\n        />\n        <Icon\n          name=\"down\"\n          className={styles.buttonDownIcon}\n        />\n      </Button>\n    );\n  }, [isMobile, lang, senderPeer, shouldSendAsAnonymous]);\n\n  const sendAsPeersMenu = useMemo(() => {\n    if (!canChangeSendAsPeer) return undefined;\n    return (\n      <DropdownMenu\n        className={buildClassName(styles.sendAsPeerMenu, 'with-menu-transitions')}\n        bubbleClassName={styles.sendAsPeerMenuBubble}\n        trigger={SendAsPeerMenuButton}\n        positionX=\"right\"\n        autoClose\n      >\n        {filteredMyReactorIds.map((id) => (\n          renderMenuItem(id)\n        ))}\n      </DropdownMenu>\n    );\n  }, [SendAsPeerMenuButton, filteredMyReactorIds, canChangeSendAsPeer]);\n\n  const topReactors = useMemo(() => {\n    const global = getGlobal();\n    const all = message?.reactions?.topReactors;\n    if (!all) {\n      return undefined;\n    }\n\n    const result: ReactorData[] = [];\n    let hasCurrentSender = false;\n    let myReactorAmount = 0;\n\n    all.forEach((reactor) => {\n      const peer = reactor.peerId ? selectPeer(global, reactor.peerId) : undefined;\n      if (!peer && !reactor.isAnonymous && !reactor.isMy) return;\n      if (reactor.isMy) {\n        myReactorAmount = reactor.count;\n      }\n\n      if (reactor.isMy && (reactor.peerId !== sendAsPeerId || (reactor.isAnonymous && !shouldSendAsAnonymous))) return;\n\n      const isCurrentReactor = sendAsPeerId === reactor.peerId || (shouldSendAsAnonymous && reactor.isAnonymous);\n\n      if (isCurrentReactor) {\n        hasCurrentSender = true;\n      }\n\n      result.push({\n        amount: reactor.count,\n        localAmount: isCurrentReactor && isTouched ? starsAmount : 0,\n        isMy: reactor.isMy,\n        isAnonymous: reactor.isAnonymous,\n        user: peer,\n      });\n    });\n\n    if (!hasCurrentSender) {\n      const sender = selectPeer(global, sendAsPeerId);\n      result.push({\n        amount: myReactorAmount,\n        localAmount: isTouched ? starsAmount : 0,\n        isMy: true,\n        user: sender,\n      });\n    }\n\n    result.sort((a, b) => (b.amount + b.localAmount) - (a.amount + a.localAmount));\n\n    return result.slice(0, MAX_TOP_REACTORS);\n  }, [isTouched, message?.reactions?.topReactors, starsAmount, sendAsPeerId, shouldSendAsAnonymous]);\n\n  const chatTitle = chat && getPeerTitle(oldLang, chat);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      onClose={closePaidReactionModal}\n      isSlim\n      hasAbsoluteCloseButton\n      contentClassName={styles.content}\n      isLowStackPriority\n    >\n      <div className={styles.sendAsPeersMenuContainer}>\n        {sendAsPeersMenu}\n      </div>\n      <div className={styles.headerControlPanel}>\n        <BalanceBlock balance={starBalance} className={styles.modalBalance} withAddButton />\n      </div>\n\n      <StarSlider\n        className={styles.slider}\n        defaultValue={DEFAULT_STARS_AMOUNT}\n        maxValue={maxAmount}\n        onChange={handleAmountChange}\n      />\n      <h3 className={styles.title}>{oldLang('StarsReactionTitle')}</h3>\n      <div className={styles.description}>\n        {renderText(oldLang('StarsReactionText', chatTitle), ['simple_markdown', 'emoji'])}\n      </div>\n      <Separator>\n        {topReactors && <div className={styles.topLabel}>{oldLang('StarsReactionTopSenders')}</div>}\n      </Separator>\n      {topReactors && (\n        <div className={styles.top}>\n          {topReactors.map((reactor) => {\n            const countText = formatInteger(reactor.amount + reactor.localAmount);\n            const peer = (reactor.isAnonymous || !reactor.user || (reactor.isMy && shouldSendAsAnonymous))\n              ? ANONYMOUS_PEER : reactor.user;\n            const text = 'isCustomPeer' in peer ? oldLang(peer.titleKey)\n              : peer && getPeerTitle(oldLang, peer);\n            return (\n              <PeerBadge\n                className={styles.topPeer}\n                key={`${reactor.user?.id || 'anonymous'}-${countText}`}\n                peer={peer}\n                badgeText={countText}\n                badgeIcon=\"star\"\n                badgeClassName={styles.topBadge}\n                text={text}\n              />\n            );\n          })}\n        </div>\n      )}\n      {topReactors && (<Separator className={styles.separator} />)}\n      <Checkbox\n        className={buildClassName(styles.checkBox, 'dialog-checkbox')}\n        checked={!shouldSendAsAnonymous}\n        onChange={handleShowInTopSendersChange}\n        label={oldLang('StarsReactionShowMeInTopSenders')}\n      />\n      <Button\n        size=\"smaller\"\n        onClick={handleSend}\n      >\n        {lang('SendPaidReaction', { amount: starsAmount }, {\n          withNodes: true,\n          specialReplacement: {\n            [STARS_ICON_PLACEHOLDER]: <Icon className={styles.buttonStar} name=\"star\" />,\n          },\n        })}\n      </Button>\n      <p className={styles.disclaimer}>\n        {lang('StarsReactionTerms', {\n          link: <SafeLink text={lang('StarsReactionLinkText')} url={lang('StarsReactionLink')} />,\n        }, {\n          withNodes: true,\n        })}\n      </p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal.chatId);\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const starBalance = global.stars?.balance;\n    const maxAmount = global.appConfig?.paidReactionMaxAmount || MAX_REACTION_AMOUNT;\n    const defaultPrivacy = global.settings.paidReactionPrivacy;\n    const sendPaidReactionsAsPeerIds = chat?.sendPaidReactionsAsPeerIds;\n    const currentUserId = global.currentUserId!;\n    const currentUser = selectUser(global, currentUserId)!;\n\n    return {\n      chat,\n      message,\n      starBalance,\n      maxAmount,\n      defaultPrivacy,\n      sendPaidReactionsAsPeerIds,\n      currentUserId,\n      currentUser,\n    };\n  },\n)(PaidReactionModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"eR_RZfGB\",\"header\":\"E3R22yAI\",\"title\":\"qdydQHgc\",\"amount\":\"FI6rEJlK\",\"footer\":\"GMWMuWCr\",\"starsBackground\":\"zGCayu45\",\"subscriptionStar\":\"enRetSny\",\"amountStar\":\"J8HIcN6k\",\"secondary\":\"oBLHWBtJ\",\"danger\":\"nkwiG25Q\",\"avatarWrapper\":\"wuTMXDP9\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport StickerView from '../../common/StickerView';\n\nimport styles from './ResaleGiftMenuAttributeSticker.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  type: 'model' | 'pattern';\n  sticker: ApiSticker;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst ATTRIBUTE_STICKER_SIZE = 1.5 * REM;\n\nconst ResaleGiftMenuAttributeSticker: FC<StateProps & OwnProps> = ({\n  className,\n  type,\n  sticker,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  theme,\n}) => {\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const customColor = useDynamicColorListener(stickerRef, undefined, type !== 'pattern');\n\n  return (\n    <div\n      ref={stickerRef}\n      className={buildClassName(styles.root, className)}\n      style={`width: ${ATTRIBUTE_STICKER_SIZE}px; height: ${ATTRIBUTE_STICKER_SIZE}px`}\n    >\n      <StickerView\n        containerRef={stickerRef}\n        sticker={sticker}\n        size={ATTRIBUTE_STICKER_SIZE}\n        shouldPreloadPreview\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        thumbClassName={styles.thumb}\n        customColor={customColor}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    theme: selectTheme(global),\n  };\n})(ResaleGiftMenuAttributeSticker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jQkp75Gb\",\"preview\":\"OYGSN3PF\",\"count\":\"KX1yz2Jy\",\"thumb\":\"EvinKr5k\",\"noOutline\":\"KSAAsUDv\",\"itemCount1\":\"GxDajfX_\",\"itemCount2\":\"jXuZoxq8\",\"itemCount3\":\"TPn3XGHJ\",\"blurry\":\"hWZuxLS8\",\"full\":\"w56QPFhl\",\"fadeIn\":\"ds43W8Wq\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aHAxv_Jg\",\"info\":\"oyYrn3II\",\"stars\":\"K5lc75ku\",\"amount\":\"QLQPuLAr\",\"title\":\"e0pK8CJ_\",\"description\":\"xbERdDMQ\",\"date\":\"l6CwQ0Ev\",\"positive\":\"P_42_ZWR\",\"negative\":\"TGjnLJfH\",\"preview\":\"cnjGihOT\",\"subscriptionStar\":\"z43YvnDX\",\"uniqueGiftBackground\":\"eNvzMw2p\",\"giftSticker\":\"U3dqmnM4\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarsTransaction,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { CustomPeer } from '../../../../types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer,\n  formatStarsTransactionAmount,\n  shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport { CUSTOM_PEER_PREMIUM } from '../../../../util/objects/customPeer';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport renderText from '../../../common/helpers/renderText';\nimport { getTransactionTitle, isNegativeAmount } from '../helpers/transaction';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport StarIcon from '../../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport PaidMediaThumb from './PaidMediaThumb';\n\nimport styles from './StarsTransactionItem.module.scss';\n\ntype OwnProps = {\n  transaction: ApiStarsTransaction;\n  className?: string;\n};\n\nconst GIFT_STICKER_SIZE = 36;\n\nfunction selectOptionalPeer(peerId?: string) {\n  return (global: GlobalState) => (\n    peerId ? selectPeer(global, peerId) : undefined\n  );\n}\n\nconst StarsTransactionItem = ({ transaction, className }: OwnProps) => {\n  const { openStarsTransactionModal } = getActions();\n  const {\n    date,\n    amount,\n    photo,\n    peer: transactionPeer,\n    extendedMedia,\n    subscriptionPeriod,\n  } = transaction;\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const peerId = transactionPeer.type === 'peer' ? transactionPeer.id : undefined;\n  const peer = useSelector(selectOptionalPeer(peerId));\n  const starGift = transaction.starGift;\n  const isUniqueGift = starGift?.type === 'starGiftUnique';\n  const giftSticker = starGift && getStickerFromGift(starGift);\n\n  const data = useMemo(() => {\n    let title = getTransactionTitle(oldLang, lang, transaction);\n    let description;\n    let status: string | undefined;\n    let avatarPeer: ApiPeer | CustomPeer | undefined;\n\n    if (!shouldUseCustomPeer(transaction)) {\n      description = peer && getPeerTitle(oldLang, peer);\n      avatarPeer = peer || CUSTOM_PEER_PREMIUM;\n    } else {\n      const customPeer = buildStarsTransactionCustomPeer(transaction);\n      title = customPeer.title || oldLang(customPeer.titleKey!);\n      description = oldLang(customPeer.subtitleKey!);\n      avatarPeer = customPeer;\n    }\n\n    if (transaction.isGiftUpgrade && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isGiftResale && transaction.starGift?.type === 'starGiftUnique') {\n      description = lang('GiftUnique', { title: transaction.starGift.title, number: transaction.starGift.number });\n    }\n\n    if (transaction.isPostsSearch) {\n      title = getTransactionTitle(oldLang, lang, transaction);\n      description = undefined;\n    }\n\n    if (transaction.photo) {\n      avatarPeer = undefined;\n    }\n\n    if (transaction.isRefund) {\n      status = oldLang('StarsRefunded');\n    }\n\n    if (transaction.hasFailed) {\n      status = oldLang('StarsFailed');\n    }\n\n    if (transaction.isPending) {\n      status = oldLang('StarsPending');\n    }\n\n    return {\n      title,\n      description,\n      avatarPeer,\n      status,\n    };\n  }, [oldLang, lang, peer, transaction]);\n\n  const previewContent = useMemo(() => {\n    if (isUniqueGift) {\n      const { backdrop } = getGiftAttributes(starGift)!;\n      const backgroundColors = [backdrop!.centerColor, backdrop!.edgeColor];\n\n      return (\n        <>\n          <RadialPatternBackground\n            className={styles.uniqueGiftBackground}\n            backgroundColors={backgroundColors}\n          />\n          <AnimatedIconFromSticker\n            className={styles.giftSticker}\n            sticker={giftSticker}\n            size={GIFT_STICKER_SIZE}\n            play={false}\n          />\n        </>\n      );\n    }\n\n    if (giftSticker) {\n      return (\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={GIFT_STICKER_SIZE}\n          play={false}\n        />\n      );\n    }\n\n    if (extendedMedia) {\n      return <PaidMediaThumb media={extendedMedia} isTransactionPreview />;\n    }\n\n    return (\n      <>\n        <Avatar size=\"medium\" webPhoto={photo} peer={data.avatarPeer} />\n        {Boolean(subscriptionPeriod) && (\n          <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n        )}\n      </>\n    );\n  }, [isUniqueGift, extendedMedia, photo, data.avatarPeer, subscriptionPeriod, starGift, giftSticker]);\n\n  const handleClick = useLastCallback(() => {\n    openStarsTransactionModal({ transaction });\n  });\n\n  const amountColorClass = isNegativeAmount(amount) ? styles.negative : styles.positive;\n\n  return (\n    <div className={buildClassName(styles.root, className)} onClick={handleClick}>\n      <div className={styles.preview}>\n        {previewContent}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{data.title}</h3>\n        {data.description && (\n          <p className={styles.description}>{renderText(data.description)}</p>\n        )}\n        <p className={styles.date}>\n          {formatDateTimeToString(date * 1000, oldLang.code, true)}\n          {data.status && ` — (${data.status})`}\n        </p>\n      </div>\n      <div className={styles.stars}>\n        <span\n          className={buildClassName(styles.amount, amountColorClass)}\n        >\n          {formatStarsTransactionAmount(lang, amount)}\n        </span>\n        {amount.currency === STARS_CURRENCY_CODE && <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />}\n        {amount.currency === TON_CURRENCY_CODE && <Icon name=\"toncoin\" className={amountColorClass} />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsTransactionItem);\n","import React from '@teact';\nimport type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { GiftOption } from './GiftModal';\nimport {\n  type ApiMessage, type ApiPeer, type ApiStarsAmount, MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectPeerPaidMessagesStars, selectTabState, selectTheme, selectThemeValues, selectUserFullInfo,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumProgress from '../../common/PremiumProgress';\nimport ActionMessage from '../../middle/message/ActionMessage';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport styles from './GiftComposer.module.scss';\n\nexport type OwnProps = {\n  gift: GiftOption;\n  giftByStars?: GiftOption;\n  peerId: string;\n};\n\nexport type StateProps = {\n  captionLimit?: number;\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  peer?: ApiPeer;\n  currentUserId?: string;\n  isPaymentFormLoading?: boolean;\n  starBalance?: ApiStarsAmount;\n  paidMessagesStars?: number;\n  areUniqueStarGiftsDisallowed?: boolean;\n  shouldDisallowLimitedStarGifts?: boolean;\n};\n\nconst LIMIT_DISPLAY_THRESHOLD = 50;\n\nfunction GiftComposer({\n  gift,\n  giftByStars,\n  peerId,\n  peer,\n  captionLimit,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  backgroundColor,\n  customBackground,\n  currentUserId,\n  isPaymentFormLoading,\n  starBalance,\n  paidMessagesStars,\n  areUniqueStarGiftsDisallowed,\n  shouldDisallowLimitedStarGifts,\n}: OwnProps & StateProps) {\n  const {\n    sendStarGift, sendPremiumGiftByStars, openInvoice, openGiftUpgradeModal, openStarsBalanceModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [giftMessage, setGiftMessage] = useState<string>('');\n  const [shouldHideName, setShouldHideName] = useState<boolean>(false);\n  const [shouldPayForUpgrade, setShouldPayForUpgrade] = useState<boolean>(false);\n  const [shouldPayByStars, setShouldPayByStars] = useState<boolean>(false);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  useEffect(() => {\n    if (shouldDisallowLimitedStarGifts) {\n      setShouldPayForUpgrade(true);\n    }\n  }, [shouldDisallowLimitedStarGifts, shouldPayForUpgrade]);\n\n  const isStarGift = 'id' in gift && gift.type === 'starGift';\n  const isPremiumGift = 'months' in gift;\n  const hasPremiumByStars = giftByStars && 'amount' in giftByStars;\n  const isPeerUser = peer && isApiPeerUser(peer);\n  const isSelf = peerId === currentUserId;\n\n  const localMessage = useMemo(() => {\n    if (isPremiumGift) {\n      const currentGift = shouldPayByStars && hasPremiumByStars ? giftByStars : gift;\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'giftPremium',\n            amount: currentGift.amount,\n            currency: currentGift.currency,\n            months: gift.months,\n            message: giftMessage ? { text: giftMessage } : undefined,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n\n    if (isStarGift) {\n      return {\n        id: -1,\n        chatId: '0',\n        isOutgoing: false,\n        senderId: currentUserId,\n        date: Math.floor(Date.now() / 1000),\n        content: {\n          action: {\n            mediaType: 'action',\n            type: 'starGift',\n            message: giftMessage?.length ? {\n              text: giftMessage,\n            } : undefined,\n            isNameHidden: shouldHideName || undefined,\n            starsToConvert: gift.starsToConvert,\n            canUpgrade: shouldPayForUpgrade || undefined,\n            alreadyPaidUpgradeStars: shouldPayForUpgrade ? gift.upgradeStars : undefined,\n            gift,\n            peerId,\n            fromId: currentUserId,\n          },\n        },\n      } satisfies ApiMessage;\n    }\n    return undefined;\n  }, [currentUserId, gift, giftMessage, isStarGift,\n    shouldHideName, shouldPayForUpgrade, peerId,\n    shouldPayByStars, hasPremiumByStars, giftByStars, isPremiumGift]);\n\n  const handleGiftMessageChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setGiftMessage(e.target.value);\n  });\n\n  const handleShouldHideNameChange = useLastCallback(() => {\n    setShouldHideName(!shouldHideName);\n  });\n\n  const handleShouldPayForUpgradeChange = useLastCallback(() => {\n    setShouldPayForUpgrade(!shouldPayForUpgrade);\n  });\n\n  const toggleShouldPayByStars = useLastCallback(() => {\n    if (hasPremiumByStars) setShouldPayByStars(!shouldPayByStars);\n  });\n\n  const handleOpenUpgradePreview = useLastCallback(() => {\n    if (!isStarGift) return;\n    openGiftUpgradeModal({\n      giftId: gift.id,\n      peerId,\n    });\n  });\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    if (isStarGift) {\n      sendStarGift({\n        peerId,\n        shouldHideName,\n        gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n        shouldUpgrade: shouldPayForUpgrade,\n      });\n      return;\n    }\n\n    if (shouldPayByStars && hasPremiumByStars) {\n      sendPremiumGiftByStars({\n        userId: peerId,\n        months: giftByStars.months,\n        amount: giftByStars.amount,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n      return;\n    }\n\n    if (isPremiumGift) {\n      openInvoice({\n        type: 'giftcode',\n        userIds: [peerId],\n        currency: gift.currency,\n        amount: gift.amount,\n        option: gift,\n        message: giftMessage ? { text: giftMessage } : undefined,\n      });\n    }\n  });\n\n  const canUseStarsPayment = hasPremiumByStars && starBalance && (starBalance.amount > giftByStars.amount);\n  function renderOptionsSection() {\n    const symbolsLeft = captionLimit ? captionLimit - giftMessage.length : undefined;\n\n    const title = getPeerTitle(lang, peer!)!;\n    return (\n      <div className={styles.optionsSection}>\n\n        {!paidMessagesStars && (\n          <TextArea\n            className={styles.messageInput}\n            onChange={handleGiftMessageChange}\n            value={giftMessage}\n            label={lang('GiftMessagePlaceholder')}\n            maxLength={captionLimit}\n            maxLengthIndicator={\n              symbolsLeft && symbolsLeft < LIMIT_DISPLAY_THRESHOLD ? symbolsLeft.toString() : undefined\n            }\n          />\n        )}\n\n        {canUseStarsPayment && (\n          <ListItem className={styles.switcher} narrow ripple onClick={toggleShouldPayByStars}>\n            <span>\n              {lang('GiftPremiumPayWithStars', {\n                stars: formatStarsAsIcon(lang, giftByStars.amount, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayByStars}\n              onChange={toggleShouldPayByStars}\n              label={lang('GiftPremiumPayWithStarsAcc')}\n            />\n          </ListItem>\n        )}\n\n        {hasPremiumByStars && starBalance && (\n          <div className={styles.description}>\n            {lang('GiftPremiumDescriptionYourBalance', {\n              stars: formatStarsAsIcon(lang, starBalance.amount, { className: styles.switcherStarIcon }),\n              link: <Link isPrimary onClick={handleGetMoreStars}>{lang('GetMoreStarsLinkText')}</Link>,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n        )}\n\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <ListItem\n            className={styles.switcher}\n            narrow\n            ripple\n            onClick={handleShouldPayForUpgradeChange}\n            disabled={shouldDisallowLimitedStarGifts}\n          >\n            <span>\n              {lang('GiftMakeUnique', {\n                stars: formatStarsAsIcon(lang, gift.upgradeStars, { className: styles.switcherStarIcon }),\n              }, { withNodes: true })}\n            </span>\n            <Switcher\n              checked={shouldPayForUpgrade}\n              onChange={handleShouldPayForUpgradeChange}\n              label={lang('GiftMakeUniqueAcc')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && Boolean(gift.upgradeStars) && !areUniqueStarGiftsDisallowed && (\n          <div className={styles.description}>\n            {isPeerUser\n              ? lang('GiftMakeUniqueDescription', {\n                user: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })\n              : lang('GiftMakeUniqueDescriptionChannel', {\n                peer: title,\n                link: <Link isPrimary onClick={handleOpenUpgradePreview}>{lang('GiftMakeUniqueLink')}</Link>,\n              }, {\n                withNodes: true,\n              })}\n          </div>\n        )}\n\n        {isStarGift && (\n          <ListItem className={styles.switcher} narrow ripple onClick={handleShouldHideNameChange}>\n            <span>{lang('GiftHideMyName')}</span>\n            <Switcher\n              checked={shouldHideName}\n              onChange={handleShouldHideNameChange}\n              label={lang('GiftHideMyName')}\n            />\n          </ListItem>\n        )}\n        {isStarGift && (\n          <div className={styles.description}>\n            {isSelf ? lang('GiftHideNameDescriptionSelf')\n              : isPeerUser ? lang('GiftHideNameDescription', { receiver: title })\n                : lang('GiftHideNameDescriptionChannel')}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  function renderFooter() {\n    const amount = shouldPayByStars && hasPremiumByStars\n      ? formatStarsAsIcon(lang, giftByStars.amount, { asFont: true })\n      : isStarGift\n        ? formatStarsAsIcon(lang, gift.stars + (shouldPayForUpgrade ? gift.upgradeStars! : 0), { asFont: true })\n        : isPremiumGift ? formatCurrency(lang, gift.amount, gift.currency) : undefined;\n\n    return (\n      <div className={styles.footer}>\n        {isStarGift && Boolean(gift.availabilityRemains) && (\n          <PremiumProgress\n            isPrimary\n            progress={gift.availabilityRemains / gift.availabilityTotal!}\n            rightText={lang('GiftSoldCount', {\n              count: gift.availabilityTotal! - gift.availabilityRemains,\n            })}\n            leftText={lang('GiftLeftCount', { count: gift.availabilityRemains })}\n            className={styles.limited}\n          />\n        )}\n        <Button\n          className={styles.mainButton}\n          size=\"smaller\"\n          onClick={handleMainButtonClick}\n          isLoading={isPaymentFormLoading}\n        >\n          {lang('GiftSend', {\n            amount,\n          }, {\n            withNodes: true,\n          })}\n        </Button>\n      </div>\n    );\n  }\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  if ((!isStarGift && !isPremiumGift) || !localMessage) return;\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        <ActionMessage\n          key={isStarGift ? gift.id : isPremiumGift ? gift.months : undefined}\n          message={localMessage}\n          threadId={MAIN_THREAD_ID}\n          appearanceOrder={0}\n        />\n      </div>\n      {renderOptionsSection()}\n      <div className={styles.spacer} />\n      {renderFooter()}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      stars,\n    } = global;\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, peerId);\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n    const userFullInfo = selectUserFullInfo(global, peerId);\n    const currentUserId = global.currentUserId;\n    const isGiftForSelf = currentUserId === peerId;\n    const areUniqueStarGiftsDisallowed = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowUniqueStarGifts;\n    const shouldDisallowLimitedStarGifts = !isGiftForSelf\n      && userFullInfo?.disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n    const tabState = selectTabState(global);\n\n    return {\n      starBalance: stars?.balance,\n      peer,\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      captionLimit: global.appConfig?.starGiftMaxMessageLength,\n      currentUserId: global.currentUserId,\n      isPaymentFormLoading: tabState.isPaymentFormLoading,\n      paidMessagesStars,\n      areUniqueStarGiftsDisallowed,\n      shouldDisallowLimitedStarGifts,\n    };\n  },\n)(GiftComposer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ef0cKSqQ\",\"giftPreview\":\"IvuNzslN\",\"backdrop\":\"dNukis4X\",\"arrow\":\"oufsMLLF\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"irv1C8bo\",\"subtitleBadge\":\"V7kDVPLm\",\"radialPattern\":\"UvhsGZLf\",\"amount\":\"zTVWZg63\",\"sticker\":\"a1ASgPwu\",\"transition\":\"Tu6_OHoq\",\"transitionSlide\":\"iUTKLzTN\",\"title\":\"ECTvfOda\",\"subtitle\":\"S6JwvHWD\"};","import React from '@teact';\nimport { memo, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGift, ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { getGiftAttributes, getStickerFromGift } from '../../common/helpers/gifts';\n\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport GiftRibbon from '../../common/gift/GiftRibbon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\n\nimport styles from './GiftItem.module.scss';\n\nexport type OwnProps = {\n  gift: ApiStarGift;\n  observeIntersection?: ObserveFn;\n  onClick: (gift: ApiStarGift, target: 'original' | 'resell') => void;\n  isResale?: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nfunction GiftItemStar({\n  gift, observeIntersection, onClick, isResale, isCurrentUserPremium,\n}: OwnProps & StateProps) {\n  const { openGiftInfoModal, openPremiumModal, showNotification } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  function getPriceAmount(amounts?: ApiTypeCurrencyAmount[]) {\n    if (!amounts) return { amount: 0, currency: STARS_CURRENCY_CODE };\n\n    if (gift.type === 'starGiftUnique' && gift.resaleTonOnly) {\n      const tonAmount = amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n      if (tonAmount) return tonAmount;\n    }\n\n    const starsAmount = amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n    return starsAmount;\n  }\n\n  const lang = useLang();\n\n  const [isVisible, setIsVisible] = useState(false);\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const sticker = getStickerFromGift(gift);\n  const isGiftUnique = gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n  const regularGift = !isGiftUnique ? gift : undefined;\n\n  const priceInfo = !isGiftUnique\n    ? { amount: regularGift?.stars || 0, currency: STARS_CURRENCY_CODE }\n    : getPriceAmount(uniqueGift?.resellPrice);\n  const priceCurrency = priceInfo?.currency || STARS_CURRENCY_CODE;\n  const resellMinStars = regularGift?.resellMinStars;\n  const priceInStarsAsString = !isGiftUnique && isResale && resellMinStars\n    ? lang.number(resellMinStars) + '+' : priceInfo?.amount || 0;\n  const isLimited = !isGiftUnique && Boolean(regularGift?.isLimited);\n  const isSoldOut = !isGiftUnique && Boolean(regularGift?.isSoldOut);\n  const isPremiumRequired = Boolean(gift?.requirePremium);\n  const isUserLimitReached = Boolean(regularGift?.limitedPerUser && !regularGift?.perUserRemains);\n  const perUserTotal = regularGift?.perUserTotal;\n\n  const handleGiftClick = useLastCallback(() => {\n    if (isSoldOut && !isResale) {\n      openGiftInfoModal({ gift });\n      return;\n    }\n\n    if (isUserLimitReached) {\n      showNotification({\n        message: lang('NotificationGiftsLimit', {\n          count: perUserTotal,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        }),\n      });\n      return;\n    }\n\n    if (isPremiumRequired && !isCurrentUserPremium) {\n      openPremiumModal({\n        gift,\n      });\n      return;\n    }\n\n    onClick(gift, isResale ? 'resell' : 'original');\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    const { backdrop, pattern } = getGiftAttributes(gift) || {};\n\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [gift]);\n\n  const giftNumber = isGiftUnique ? gift.number : 0;\n\n  const giftRibbon = useMemo(() => {\n    if (isGiftUnique) {\n      const { backdrop } = getGiftAttributes(gift) || {};\n      if (!backdrop) {\n        return undefined;\n      }\n      return (\n        <GiftRibbon\n          color={[backdrop.centerColor, backdrop.edgeColor]}\n          text={\n            lang('GiftSavedNumber', { number: giftNumber })\n          }\n        />\n      );\n    }\n    if (isPremiumRequired) {\n      return <GiftRibbon color=\"orange\" text={lang('LimitPremium')} />;\n    }\n    if (isResale) {\n      return <GiftRibbon color=\"green\" text={lang('GiftRibbonResale')} />;\n    }\n    if (isSoldOut) {\n      return <GiftRibbon color=\"red\" text={lang('GiftSoldOut')} />;\n    }\n    if (isLimited) {\n      return <GiftRibbon color=\"blue\" text={lang('GiftLimited')} />;\n    }\n    return undefined;\n  }, [isGiftUnique, isResale, gift, isSoldOut, isLimited, lang, giftNumber, isPremiumRequired]);\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    const visible = entry.isIntersecting;\n    setIsVisible(visible);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'interactive-gift',\n        styles.container,\n        styles.starGift,\n        'starGiftItem',\n        isPremiumRequired && styles.premiumRequired,\n      )}\n      tabIndex={0}\n      role=\"button\"\n      onClick={handleGiftClick}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n          />\n        )}\n\n      </div>\n      <Button\n        className={styles.buy}\n        nonInteractive\n        size=\"tiny\"\n        color={isGiftUnique ? 'bluredStarsBadge' : 'stars'}\n        withSparkleEffect={isVisible}\n        pill\n        fluid\n      >\n        {priceCurrency === TON_CURRENCY_CODE\n          ? formatTonAsIcon(lang, priceInStarsAsString || 0, { shouldConvertFromNanos: true, className: styles.star })\n          : formatStarsAsIcon(lang, priceInStarsAsString || 0, { asFont: true, className: styles.star })}\n      </Button>\n      {giftRibbon}\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n    };\n  })(GiftItemStar),\n);\n","import React from '@teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCanGift } from '../../../../global/selectors';\nimport { unique } from '../../../../util/iteratees';\nimport sortChatIds from '../../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport PickerModal from '../../../common/pickers/PickerModal';\n\nimport styles from './GiftRecipientPicker.module.scss';\n\nexport type OwnProps = {\n  modal?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n}\n\nconst GiftRecipientPicker = ({\n  modal,\n  currentUserId,\n  userIds,\n}: OwnProps & StateProps) => {\n  const { closeGiftRecipientPicker, openGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n  const isOpen = modal;\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const global = getGlobal();\n    const idsWithSelf = userIds ? userIds.concat(currentUserId!) : undefined;\n    const filteredPeerIds = idsWithSelf ? filterPeersByQuery({ ids: idsWithSelf, query: searchQuery }) : [];\n\n    return sortChatIds(unique(filteredPeerIds).filter((peerId) => {\n      return selectCanGift(global, peerId);\n    }), undefined, [currentUserId!]);\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((selectedId: string) => {\n    openGiftModal({ forUserId: selectedId });\n    closeGiftRecipientPicker();\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeGiftRecipientPicker}\n      title={oldLang('GiftTelegramPremiumOrStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onSelectedIdChange={handleSelectedUserIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        forceShowSelf\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n  };\n})(GiftRecipientPicker));\n","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isDeletedUser, isUserBot,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\nimport styles from './StarsGiftingPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userIds?: string[];\n  activeListIds?: string[];\n  archivedListIds?: string[];\n}\n\nconst StarsGiftingPickerModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  userIds,\n}) => {\n  const { closeStarsGiftingPickerModal, openStarsGiftModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const combinedIds = unique([\n      ...(userIds || []),\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ]);\n\n    const filteredUserIds = filterPeersByQuery({\n      ids: combinedIds, query: searchQuery, type: 'user',\n    });\n\n    return sortChatIds(filteredUserIds.filter((id) => {\n      const user = usersById[id];\n\n      if (!user) {\n        return false;\n      }\n\n      return !user.isSupport\n        && !isUserBot(user) && !isDeletedUser(user)\n        && id !== currentUserId && id !== SERVICE_NOTIFICATIONS_USER_ID;\n    }));\n  }, [currentUserId, searchQuery, userIds, activeListIds, archivedListIds]);\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedId?: string) => {\n    if (newSelectedId?.length) {\n      openStarsGiftModal({ forUserId: newSelectedId });\n      closeStarsGiftingPickerModal();\n    }\n  });\n\n  return (\n    <PickerModal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closeStarsGiftingPickerModal}\n      title={oldLang('GiftStarsTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={oldLang('Continue')}\n      onEnter={closeStarsGiftingPickerModal}\n    >\n      <PeerPicker\n        className={styles.picker}\n        itemIds={displayedUserIds}\n        filterValue={searchQuery}\n        filterPlaceholder={oldLang('Search')}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        onSelectedIdChange={handleSelectedUserIdsChange}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    chats: {\n      listIds,\n    },\n    currentUserId,\n  } = global;\n\n  return {\n    userIds: global.contactList?.userIds,\n    activeListIds: listIds.active,\n    archivedListIds: listIds.archived,\n    currentUserId,\n  };\n})(StarsGiftingPickerModal));\n","import React from '@teact';\nimport { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useRef,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeCounter,\n  ApiStarGiftAttributeIdBackdrop,\n  ApiStarGiftAttributeIdPattern,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  StarGiftAttributeIdModel,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions, ResaleGiftsSortType } from '../../../types';\n\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport SearchInput from '../../ui/SearchInput';\nimport ResaleGiftMenuAttributeSticker from './ResaleGiftMenuAttributeSticker';\n\nimport styles from './GiftResaleFilters.module.scss';\n\ntype OwnProps = {\n  dialogRef: ElementRef<HTMLDivElement>;\n};\ntype StateProps = {\n  filter: ResaleGiftsFilterOptions;\n  attributes?: ApiStarGiftAttribute[];\n  counters?: ApiStarGiftAttributeCounter[];\n};\n\nconst GiftResaleFilters: FC<StateProps & OwnProps> = ({\n  attributes,\n  counters,\n  filter,\n  dialogRef,\n}) => {\n  const lang = useLang();\n  const {\n    updateResaleGiftsFilter,\n  } = getActions();\n\n  const [searchModelQuery, setSearchModelQuery] = useState('');\n  const [searchBackdropQuery, setSearchBackdropQuery] = useState('');\n  const [searchPatternQuery, setSearchPatternQuery] = useState('');\n  const filteredAttributes = useMemo(() => {\n    const map: {\n      model: ApiStarGiftAttributeModel[];\n      pattern: ApiStarGiftAttributePattern[];\n      backdrop: ApiStarGiftAttributeBackdrop[];\n    } = {\n      model: [],\n      pattern: [],\n      backdrop: [],\n    };\n\n    for (const counter of counters ?? []) {\n      const { attribute } = counter;\n\n      if (!counter.count) {\n        continue;\n      }\n\n      const found = attributes?.find((attr) => {\n        if (attr.type === 'backdrop' && attribute.type === 'backdrop') {\n          return attr.backdropId === attribute.backdropId;\n        }\n\n        if (attr.type === 'model' && attribute.type === 'model') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        if (attr.type === 'pattern' && attribute.type === 'pattern') {\n          return attr.sticker.id === attribute.documentId;\n        }\n\n        return false;\n      });\n\n      if (found?.type === 'backdrop') {\n        map.backdrop.push(found);\n      }\n      if (found?.type === 'model') {\n        map.model.push(found);\n      }\n      if (found?.type === 'pattern') {\n        map.pattern.push(found);\n      }\n    }\n\n    return map;\n  }, [attributes, counters]);\n\n  const filteredAndSearchedAttributes = useMemo(() => {\n    const filterBySearch = <T extends { name?: string }>(items: T[], query: string): T[] => {\n      if (!query.trim()) return items;\n\n      return items.filter(\n        (item): item is T => Boolean(item.name?.toLowerCase().includes(query.toLowerCase())),\n      );\n    };\n\n    return {\n      model: filterBySearch(filteredAttributes.model, searchModelQuery),\n      pattern: filterBySearch(filteredAttributes.pattern, searchPatternQuery),\n      backdrop: filterBySearch(filteredAttributes.backdrop, searchBackdropQuery),\n    };\n  }, [filteredAttributes, searchModelQuery, searchBackdropQuery, searchPatternQuery]);\n\n  // Sort Menu\n  const sortMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isSortContextMenuOpen,\n    contextMenuAnchor: sortContextMenuAnchor,\n    handleContextMenu: handleSortContextMenu,\n    handleContextMenuClose: handleSortContextMenuClose,\n    handleContextMenuHide: handleSortContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getSortMenuElement = useLastCallback(() => sortMenuRef.current!);\n\n  // Model Menu\n  const modelMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isModelContextMenuOpen,\n    contextMenuAnchor: modelContextMenuAnchor,\n    handleContextMenu: handleModelContextMenu,\n    handleContextMenuClose: handleModelContextMenuClose,\n    handleContextMenuHide: handleModelContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getModelMenuElement = useLastCallback(\n    () => modelMenuRef.current!,\n  );\n\n  // Backdrop Menu\n  const backdropMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isBackdropContextMenuOpen,\n    contextMenuAnchor: backdropContextMenuAnchor,\n    handleContextMenu: handleBackdropContextMenu,\n    handleContextMenuClose: handleBackdropContextMenuClose,\n    handleContextMenuHide: handleBackdropContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getBackdropMenuElement = useLastCallback(() => backdropMenuRef.current!);\n\n  // Pattern Menu\n  const patternMenuRef = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen: isPatternContextMenuOpen,\n    contextMenuAnchor: patternContextMenuAnchor,\n    handleContextMenu: handlePatternContextMenu,\n    handleContextMenuClose: handlePatternContextMenuClose,\n    handleContextMenuHide: handlePatternContextMenuHide,\n  } = useContextMenuHandlers(dialogRef);\n  const getPatternMenuElement = useLastCallback(() => patternMenuRef.current!);\n\n  const SortMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const sortType = filter.sortType;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {sortType === 'byDate' && lang('ValueGiftSortByDate')}\n         {sortType === 'byNumber' && lang('ValueGiftSortByNumber')}\n         {sortType === 'byPrice' && lang('ValueGiftSortByPrice')}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n\n  const ModelMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.modelAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeModel')}\n         {attributesCount > 0\n           && lang('GiftAttributeModelPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const BackdropMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n   = useMemo(() => {\n     const attributesCount = filter?.backdropAttributes?.length || 0;\n     return ({ onTrigger, isOpen: isMenuOpen }) => (\n       <div\n         className={styles.item}\n         onClick={onTrigger}\n       >\n         {attributesCount === 0 && lang('GiftAttributeBackdrop')}\n         {attributesCount > 0\n           && lang('GiftAttributeBackdropPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n         <Icon\n           name=\"dropdown-arrows\"\n           className={styles.itemIcon}\n         />\n       </div>\n     );\n   }, [lang, filter]);\n  const PatternMenuButton: FC<{ onTrigger: (e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => void; isOpen?: boolean }>\n  = useMemo(() => {\n    const attributesCount = filter?.patternAttributes?.length || 0;\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <div\n        className={styles.item}\n        onClick={onTrigger}\n      >\n        {attributesCount === 0 && lang('GiftAttributeSymbol')}\n        {attributesCount > 0\n          && lang('GiftAttributeSymbolPlural', { count: attributesCount }, { pluralValue: attributesCount })}\n        <Icon\n          name=\"dropdown-arrows\"\n          className={styles.itemIcon}\n        />\n      </div>\n    );\n  }, [lang, filter]);\n\n  const handleSortMenuItemClick = useLastCallback((type: ResaleGiftsSortType) => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      sortType: type,\n    } });\n  });\n\n  const handleSelectedAllModelsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n    } });\n  });\n  const handleSelectedAllPatternsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: [],\n    } });\n  });\n  const handleSelectedAllBackdropsClick = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: [],\n    } });\n  });\n\n  const handleModelMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeModel) => {\n    if (!counters) return;\n    const attributes = filter.modelAttributes || [];\n    const modelAttribute\n      = counters.find((counter): counter is ApiStarGiftAttributeCounter<StarGiftAttributeIdModel> =>\n        counter.attribute.type === 'model' && counter.attribute.documentId === attribute.sticker.id,\n      )?.attribute;\n\n    if (!modelAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === modelAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== modelAttribute.documentId)\n      : [...attributes, modelAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: updatedAttributes,\n    } });\n  });\n\n  const handlePatternMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributePattern) => {\n    if (!counters) return;\n    const attributes = filter.patternAttributes || [];\n    const patternAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdPattern> =>\n        counter.attribute.type === 'pattern' && counter.attribute.documentId === attribute.sticker.id,\n    )?.attribute;\n\n    if (!patternAttribute) return;\n\n    const isActive = attributes.some((item) => item.documentId === patternAttribute.documentId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.documentId !== patternAttribute.documentId)\n      : [...attributes, patternAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      patternAttributes: updatedAttributes,\n    } });\n  });\n\n  const handleBackdropMenuItemClick = useLastCallback((attribute: ApiStarGiftAttributeBackdrop) => {\n    if (!counters) return;\n    const attributes = filter.backdropAttributes || [];\n    const backdropAttribute = counters.find(\n      (counter): counter is ApiStarGiftAttributeCounter<ApiStarGiftAttributeIdBackdrop> =>\n        counter.attribute.type === 'backdrop' && counter.attribute.backdropId === attribute.backdropId,\n    )?.attribute;\n\n    if (!backdropAttribute) return;\n\n    const isActive = attributes.some((item) => item.backdropId === backdropAttribute.backdropId);\n    const updatedAttributes = isActive\n      ? attributes.filter((item) => item.backdropId !== backdropAttribute.backdropId)\n      : [...attributes, backdropAttribute];\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      backdropAttributes: updatedAttributes,\n    } });\n  });\n\n  function renderSortMenuItems() {\n    return (\n      <>\n        <MenuItem icon=\"sort-by-price\" onClick={() => { handleSortMenuItemClick('byPrice'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByPrice')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byPrice' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n        <MenuItem icon=\"sort-by-date\" onClick={() => { handleSortMenuItemClick('byDate'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByDate')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byDate' ? 'check' : 'placeholder'}\n          />\n\n        </MenuItem>\n        <MenuItem icon=\"sort-by-number\"onClick={() => { handleSortMenuItemClick('byNumber'); }}>\n          <div className={styles.menuItemText}>\n            {lang('GiftSortByNumber')}\n          </div>\n          <Icon\n            className={styles.menuItemIcon}\n            name={filter?.sortType === 'byNumber' ? 'check' : 'placeholder'}\n          />\n        </MenuItem>\n      </>\n    );\n  }\n\n  function renderSortMenu() {\n    return (\n      <Menu\n        isOpen={isSortContextMenuOpen}\n        anchor={sortContextMenuAnchor}\n        ref={sortMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getSortMenuElement}\n        autoClose\n        onClose={handleSortContextMenuClose}\n        onCloseAnimationEnd={handleSortContextMenuHide}\n        positionX=\"left\"\n      >\n        {renderSortMenuItems()}\n      </Menu>\n    );\n  }\n\n  const handleSearchModelInputReset = useCallback(() => {\n    setSearchModelQuery('');\n  }, []);\n  const handleSearchBackdropInputReset = useCallback(() => {\n    setSearchBackdropQuery('');\n  }, []);\n  const handleSearchPatternInputReset = useCallback(() => {\n    setSearchPatternQuery('');\n  }, []);\n  const handleSearchInputClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n  });\n\n  const modelMenuItemsContainerRef = useRef<HTMLDivElement>();\n  const { observe } = useIntersectionObserver({\n    rootRef: modelMenuItemsContainerRef,\n    isDisabled: !modelContextMenuAnchor,\n  });\n\n  function renderModelMenuItems() {\n    const models = filteredAndSearchedAttributes.model;\n    const selectedAttributes = filter.modelAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n    return (\n      <div className={styles.menuContentContainer} ref={modelMenuItemsContainerRef}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchModelQuery}\n          onChange={setSearchModelQuery}\n          onReset={handleSearchModelInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllModelsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {models.map((model) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === model.sticker.id);\n          return (\n            <MenuItem\n              key={model.name}\n              onClick={() => {\n                handleModelMenuItemClick(model);\n              }}\n            >\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={model.sticker}\n                type=\"model\"\n                observeIntersectionForLoading={observe}\n                observeIntersectionForPlaying={observe}\n              />\n              <div className={styles.menuItemStickerText}>\n                {model.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderModelMenu() {\n    return (\n      <Menu\n        isOpen={isModelContextMenuOpen}\n        anchor={modelContextMenuAnchor}\n        ref={modelMenuRef}\n        className={buildClassName(\n          styles.menu,\n          styles.left,\n          'with-menu-transitions',\n        )}\n        getMenuElement={getModelMenuElement}\n        autoClose\n        onClose={handleModelContextMenuClose}\n        onCloseAnimationEnd={handleModelContextMenuHide}\n      >\n        {renderModelMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderBackdropMenuItems() {\n    const backdrops = filteredAndSearchedAttributes.backdrop;\n    const selectedAttributes = filter.backdropAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchBackdropQuery}\n          onChange={setSearchBackdropQuery}\n          onReset={handleSearchBackdropInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllBackdropsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {backdrops.map((backdrop) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.backdropId === backdrop.backdropId);\n\n          return (\n            <MenuItem\n              key={backdrop.name}\n              onClick={() => {\n                handleBackdropMenuItemClick(backdrop);\n              }}\n            >\n              <RadialPatternBackground\n                className={styles.backdrop}\n                backgroundColors={[backdrop.centerColor, backdrop.edgeColor]}\n                patternColor={backdrop.patternColor}\n              />\n              <div className={styles.backdropAttributeMenuItemText}>\n                {backdrop.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderBackdropMenu() {\n    return (\n      <Menu\n        isOpen={isBackdropContextMenuOpen}\n        anchor={backdropContextMenuAnchor}\n        ref={backdropMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getBackdropMenuElement}\n        autoClose\n        onClose={handleBackdropContextMenuClose}\n        onCloseAnimationEnd={handleBackdropContextMenuHide}\n        positionX=\"right\"\n      >\n        {renderBackdropMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderPatternMenuItems() {\n    const patterns = filteredAndSearchedAttributes.pattern;\n    const selectedAttributes = filter.patternAttributes ?? [];\n    const isSelectedAll = selectedAttributes.length === 0;\n\n    return (\n      <div className={styles.menuContentContainer}>\n        <SearchInput\n          onClick={handleSearchInputClick}\n          className={styles.search}\n          value={searchPatternQuery}\n          onChange={setSearchPatternQuery}\n          onReset={handleSearchPatternInputReset}\n          placeholder={lang('Search')}\n        />\n        <MenuItem icon=\"select\" onClick={handleSelectedAllPatternsClick} disabled={isSelectedAll}>\n          {lang('ContextMenuItemSelectAll')}\n        </MenuItem>\n        {patterns.map((pattern) => {\n          const isSelected = isSelectedAll\n            || selectedAttributes.some((attr) => attr.documentId === pattern.sticker.id);\n\n          return (\n            <MenuItem\n              key={pattern.name}\n              onClick={() => {\n                handlePatternMenuItemClick(pattern);\n              }}\n            >\n\n              <ResaleGiftMenuAttributeSticker\n                className={styles.sticker}\n                sticker={pattern.sticker}\n                type=\"pattern\"\n              />\n\n              <div className={styles.menuItemStickerText}>\n                {pattern.name}\n              </div>\n              <Icon\n                className={styles.menuItemIcon}\n                name={isSelected ? 'check' : 'placeholder'}\n              />\n            </MenuItem>\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderPatternMenu() {\n    return (\n      <Menu\n        isOpen={isPatternContextMenuOpen}\n        anchor={patternContextMenuAnchor}\n        ref={patternMenuRef}\n        className={buildClassName(styles.menu, styles.right, 'with-menu-transitions')}\n        getMenuElement={getPatternMenuElement}\n        autoClose\n        onClose={handlePatternContextMenuClose}\n        onCloseAnimationEnd={handlePatternContextMenuHide}\n      >\n        {renderPatternMenuItems()}\n      </Menu>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      {Boolean(sortContextMenuAnchor) && renderSortMenu()}\n      {Boolean(modelContextMenuAnchor) && renderModelMenu()}\n      {Boolean(backdropContextMenuAnchor) && renderBackdropMenu()}\n      {Boolean(patternContextMenuAnchor) && renderPatternMenu()}\n      <div className={styles.buttonsContainer}>\n        <SortMenuButton\n          onTrigger={handleSortContextMenu}\n          isOpen={isSortContextMenuOpen}\n        />\n        <ModelMenuButton\n          onTrigger={handleModelContextMenu}\n          isOpen={isModelContextMenuOpen}\n        />\n        <BackdropMenuButton\n          onTrigger={handleBackdropContextMenu}\n          isOpen={isBackdropContextMenuOpen}\n        />\n        <PatternMenuButton\n          onTrigger={handlePatternContextMenu}\n          isOpen={isPatternContextMenuOpen}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { resaleGifts } = selectTabState(global);\n\n  const attributes = resaleGifts.attributes;\n  const counters = resaleGifts.counters;\n  const filter = resaleGifts.filter;\n\n  return {\n    attributes,\n    counters,\n    filter,\n  };\n})(GiftResaleFilters));\n","import React from '@teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiPeer, ApiStarGiftUnique,\n} from '../../../api/types';\n\nimport { getGiftAttributes } from '../helpers/gifts';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\n\nimport styles from './GiftTransferPreview.module.scss';\n\ntype OwnProps = {\n  peer: ApiPeer;\n  gift: ApiStarGiftUnique;\n};\n\nconst AVATAR_SIZE = 4 * REM;\nconst GIFT_STICKER_SIZE = 3 * REM;\n\nconst GiftTransferPreview = ({\n  peer,\n  gift,\n}: OwnProps) => {\n  const giftAttributes = useMemo(() => {\n    return getGiftAttributes(gift);\n  }, [gift]);\n\n  if (!giftAttributes) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.giftPreview}>\n        <RadialPatternBackground\n          className={styles.backdrop}\n          backgroundColors={[giftAttributes.backdrop!.centerColor, giftAttributes.backdrop!.edgeColor]}\n          patternColor={giftAttributes.backdrop?.patternColor}\n          patternIcon={giftAttributes.pattern?.sticker}\n        />\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          size={GIFT_STICKER_SIZE}\n          sticker={giftAttributes.model?.sticker}\n        />\n      </div>\n      <Icon name=\"next\" className={styles.arrow} />\n      <Avatar\n        peer={peer}\n        size={AVATAR_SIZE}\n        className={styles.avatar}\n      />\n    </div>\n  );\n};\n\nexport default memo(GiftTransferPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"cUjwvN00\",\"item-selected\":\"medfcJpd\",\"itemSelected\":\"medfcJpd\",\"item\":\"dO7FKYY4\",\"selected-item\":\"B2lEJk1v\",\"selectedItem\":\"B2lEJk1v\",\"star\":\"Pb7AU805\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"IzhfRIWu\",\"positive\":\"jvBZSrpd\",\"negative\":\"xDyq9cc0\",\"header\":\"qBOIq6Jn\",\"uniqueGift\":\"ApoQz22o\",\"amount\":\"sso9uZM6\",\"title\":\"ZZAj3hj7\",\"description\":\"NuWOY7ED\",\"tid\":\"tMF8VIOM\",\"refunded\":\"sxWAwxTd\",\"totalStars\":\"Z2YALGgl\",\"starIcon\":\"cU5QlvwL\",\"footer\":\"KgzPpgS6\",\"starsBackground\":\"nML8IQqX\",\"copyIcon\":\"voCttFzS\",\"mediaPreview\":\"C5r59yiV\",\"subtitle\":\"mFYcIYMJ\",\"starGiftSticker\":\"j3akHdtm\",\"avatar\":\"hcrszlpT\"};","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiStarsSubscription,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatDateToString } from '../../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport StarIcon from '../../../common/icons/StarIcon';\n\nimport styles from './StarsSubscriptionItem.module.scss';\n\ntype OwnProps = {\n  subscription: ApiStarsSubscription;\n};\n\nfunction selectProvidedPeer(peerId: string) {\n  return (global: GlobalState) => (\n    selectPeer(global, peerId)\n  );\n}\n\nconst StarsSubscriptionItem = ({ subscription }: OwnProps) => {\n  const { openStarsSubscriptionModal } = getActions();\n  const {\n    peerId, pricing, until, isCancelled, title, photo,\n  } = subscription;\n  const lang = useOldLang();\n\n  const peer = useSelector(selectProvidedPeer(peerId))!;\n\n  const handleClick = useLastCallback(() => {\n    openStarsSubscriptionModal({ subscription });\n  });\n\n  if (!peer) {\n    return undefined;\n  }\n\n  const hasExpired = until < Date.now() / 1000;\n  const formattedDate = formatDateToString(until * 1000, lang.code, true, 'long');\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <div className={styles.preview}>\n        <Avatar size=\"medium\" peer={peer} />\n        <StarIcon className={styles.subscriptionStar} type=\"gold\" size=\"small\" />\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>{renderText(getPeerTitle(lang, peer) || '')}</h3>\n        {title && (\n          <p className={styles.subtitle}>\n            {photo && <Avatar webPhoto={photo} size=\"micro\" />}\n            {renderText(title)}\n          </p>\n        )}\n        <p className={styles.description}>\n          {lang(\n            hasExpired ? 'StarsSubscriptionExpired'\n              : isCancelled ? 'StarsSubscriptionExpires' : 'StarsSubscriptionRenews',\n            formattedDate,\n          )}\n        </p>\n      </div>\n      <div className={styles.status}>\n        {(isCancelled || hasExpired) ? (\n          <div className={styles.statusEnded}>\n            {lang(hasExpired ? 'StarsSubscriptionStatusExpired' : 'StarsSubscriptionStatusCancelled')}\n          </div>\n        ) : (\n          <>\n            <div className={styles.statusPricing}>\n              <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />\n              <span className={styles.amount}>\n                {formatInteger(pricing.amount)}\n              </span>\n            </div>\n            <div className={styles.statusPeriod}>{lang('StarsParticipantSubscriptionPerMonth')}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StarsSubscriptionItem);\n","import type { ApiStarsAmount, ApiStarsTransaction, ApiTypeCurrencyAmount } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { buildStarsTransactionCustomPeer, shouldUseCustomPeer } from '../../../../global/helpers/payments';\nimport {\n  type LangFn,\n} from '../../../../util/localization';\nimport { formatPercent } from '../../../../util/textFormat';\n\nexport function getTransactionTitle(oldLang: OldLangFn, lang: LangFn, transaction: ApiStarsTransaction) {\n  if (transaction.paidMessages) {\n    return lang(\n      'PaidMessageTransaction',\n      { count: transaction.paidMessages },\n      {\n        withNodes: true,\n        pluralValue: transaction.paidMessages,\n      },\n    );\n  }\n\n  if (transaction.isGiftResale) {\n    return isNegativeAmount(transaction.amount)\n      ? lang('StarGiftSaleTransaction')\n      : lang('StarGiftPurchaseTransaction');\n  }\n  if (transaction.isPostsSearch) {\n    return lang('PostsSearchTransaction');\n  }\n\n  if (transaction.starRefCommision) {\n    return oldLang('StarTransactionCommission', formatPercent(transaction.starRefCommision));\n  }\n  if (transaction.isGiftUpgrade) return oldLang('Gift2TransactionUpgraded');\n  if (transaction.extendedMedia) return oldLang('StarMediaPurchase');\n  if (transaction.subscriptionPeriod) return transaction.title || oldLang('StarSubscriptionPurchase');\n  if (transaction.isReaction) return oldLang('StarsReactionsSent');\n  if (transaction.giveawayPostId) return oldLang('StarsGiveawayPrizeReceived');\n  if (transaction.isMyGift) return oldLang('StarsGiftSent');\n  if (transaction.isGift) {\n    if (transaction.amount.currency === TON_CURRENCY_CODE) {\n      return lang('TonGiftReceived');\n    }\n    return oldLang('StarsGiftReceived');\n  }\n  if (transaction.starGift) {\n    return isNegativeAmount(transaction.amount) ? oldLang('Gift2TransactionSent') : oldLang('Gift2ConvertedTitle');\n  }\n\n  const customPeer = (transaction.peer && shouldUseCustomPeer(transaction)\n    && buildStarsTransactionCustomPeer(transaction)) || undefined;\n\n  if (customPeer) return customPeer.title || oldLang(customPeer.titleKey!);\n\n  return transaction.title;\n}\n\nexport function isNegativeStarsAmount(starsAmount: ApiStarsAmount) {\n  if (starsAmount.amount) return starsAmount.amount < 0;\n  return starsAmount.nanos < 0;\n}\n\nexport function isNegativeAmount(currencyAmount: ApiTypeCurrencyAmount) {\n  if (currencyAmount.currency === STARS_CURRENCY_CODE) {\n    return isNegativeStarsAmount(currencyAmount);\n  }\n  return currencyAmount.amount < 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"G1mBmzxs\",\"starGift\":\"f5ArEO1S\",\"monthsDescription\":\"rn9aWFNA\",\"description\":\"q4_ydkAx\",\"buy\":\"a8no5WH0\",\"star\":\"DvJLTVFU\",\"premiumRequired\":\"NBYIITte\",\"amount\":\"sbo2dMcH\",\"starsPriceBlock\":\"QB5SI7ta\",\"starsPriceIcon\":\"jgnEfoeM\",\"radialPattern\":\"Nkotr8Q4\",\"stickerWrapper\":\"rUSoeQXb\"};","import React from '@teact';\nimport type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiStarTopupOption, ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Avatar from '../../../common/Avatar';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport StarTopupOptionList from '../StarTopupOptionList';\n\nimport styles from './StarsGiftModal.module.scss';\n\nimport StarLogo from '../../../../assets/icons/GoldStar.svg';\nimport StarsBackground from '../../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsGiftModal'];\n};\n\ntype StateProps = {\n  user?: ApiUser;\n};\n\nconst AVATAR_SIZE = 100;\n\nconst StarsGiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  user,\n}) => {\n  const {\n    closeStarsGiftModal, openInvoice, requestConfetti,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal?.isOpen);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const oldLang = useOldLang();\n\n  const [selectedOption, setSelectedOption] = useState<ApiStarTopupOption | undefined>();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n    }\n  }, [isOpen]);\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (renderingModal?.isCompleted) {\n      showConfetti();\n    }\n  }, [renderingModal, showConfetti]);\n\n  const handleClick = useLastCallback((option: ApiStarTopupOption) => {\n    if (!renderingModal) return;\n\n    setSelectedOption(option);\n    if (user) {\n      openInvoice({\n        type: 'starsgift',\n        userId: user.id,\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    } else {\n      openInvoice({\n        type: 'stars',\n        stars: option.stars,\n        currency: option.currency,\n        amount: option.amount,\n      });\n    }\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClose = useLastCallback(() => {\n    closeStarsGiftModal();\n  });\n\n  function renderGiftTitle() {\n    if (renderingModal?.isCompleted) {\n      return user ? renderText(oldLang('Notification.StarsGift.SentYou',\n        formatCurrencyAsString(selectedOption!.amount, selectedOption!.currency, oldLang.code)), ['simple_markdown'])\n        : renderText(oldLang('StarsAcquiredInfo', selectedOption?.stars), ['simple_markdown']);\n    }\n\n    return user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars');\n  }\n\n  const bottomText = useMemo(() => {\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        url={oldLang('StarsTOSLink')}\n        text={oldLang('lng_credits_summary_options_about_link')}\n      />,\n      parts[1],\n    ];\n  }, [oldLang]);\n\n  return (\n    <Modal\n      className={buildClassName(styles.modalDialog)}\n      contentClassName={styles.content}\n      dialogRef={dialogRef}\n      isSlim\n      onClose={handleClose}\n      isOpen={isOpen}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={() => closeStarsGiftModal()}\n          ariaLabel={oldLang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {user ? oldLang('GiftStarsTitle') : oldLang('Star.List.GetStars')}\n          </h2>\n        </div>\n        <div className={styles.headerInfo}>\n          {user ? (\n            <>\n              <Avatar\n                size={AVATAR_SIZE}\n                peer={user}\n                className={styles.avatar}\n              />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          ) : (\n            <>\n              <img className={styles.logo} src={StarLogo} alt=\"\" draggable={false} />\n              <img className={styles.logoBackground} src={StarsBackground} alt=\"\" draggable={false} />\n            </>\n          )}\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={styles.description}>\n          {user ? renderText(\n            oldLang('ActionGiftStarsSubtitle', getPeerTitle(oldLang, user)), ['simple_markdown'],\n          ) : oldLang('Stars.Purchase.GetStarsInfo')}\n        </p>\n        <div className={styles.section}>\n          <StarTopupOptionList\n            options={renderingModal?.starsGiftOptions}\n            onClick={handleClick}\n          />\n          <div className={styles.secondaryInfo}>\n            {bottomText}\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const user = modal?.forUserId ? selectUser(global, modal.forUserId) : undefined;\n\n  return {\n    user,\n  };\n})(StarsGiftModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"RdhRpsCn\",\"title\":\"yzbjj73U\",\"slider\":\"xePPMXOI\",\"description\":\"BlpfdOtK\",\"itemInfo\":\"nS9V516D\",\"itemTitle\":\"sH5Nukjy\",\"itemSubtitle\":\"dHlNODTI\",\"itemIcon\":\"H_iHihXU\",\"sendAsPeerButtonAvatar\":\"_mjvLELm\",\"sendAsPeerMenuButton\":\"zxsRaWYV\",\"buttonDownIcon\":\"zrwUUELS\",\"sendAsPeerMenuBubble\":\"X1PB6mhQ\",\"sendAsPeerMenu\":\"Px1MDij9\",\"sendAsPeersMenuContainer\":\"Al1nfhHJ\",\"headerControlPanel\":\"vu90kSL_\",\"separator\":\"uhQLUjmo\",\"checkBox\":\"Mc3bVeF0\",\"topLabel\":\"bnou4CpV\",\"top\":\"QludQDKR\",\"topBadge\":\"JBF9pTUK\",\"buttonStar\":\"NJJFuym9\",\"topPeer\":\"Ty4Ud_Rd\",\"disclaimer\":\"KRvkHeo1\"};","import React from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStarTopupOption } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  PAID_MESSAGES_PURPOSE,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n  TON_TOPUP_URL_DEFAULT,\n  TON_USD_RATE_DEFAULT,\n} from '../../../config';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectChat, selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit, convertTonToUsd, formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Modal from '../../ui/Modal';\nimport TabList, { type TabWithProperties } from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ParticlesHeader from '../common/ParticlesHeader.tsx';\nimport BalanceBlock from './BalanceBlock';\nimport StarTopupOptionList from './StarTopupOptionList';\nimport StarsSubscriptionItem from './subscription/StarsSubscriptionItem';\nimport StarsTransactionItem from './transaction/StarsTransactionItem';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nconst TRANSACTION_TYPES = ['all', 'inbound', 'outbound'] as const;\nconst TRANSACTION_TABS_KEYS: RegularLangKey[] = [\n  'StarsTransactionsAll',\n  'StarsTransactionsIncoming',\n  'StarsTransactionsOutgoing',\n];\nconst TRANSACTION_ITEM_CLASS = 'StarsTransactionItem';\nconst SUBSCRIPTION_PURPOSE = 'subs';\n\nexport type OwnProps = {\n  modal: TabState['starsBalanceModal'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  tonBalanceState?: GlobalState['ton'];\n  canBuyPremium?: boolean;\n  shouldForceHeight?: boolean;\n  tonUsdRate?: number;\n  tonTopupUrl: string;\n  animationLevel: AnimationLevel;\n};\n\nconst StarsBalanceModal = ({\n  modal, starsBalanceState, tonBalanceState, canBuyPremium, shouldForceHeight, tonUsdRate, tonTopupUrl, animationLevel,\n}: OwnProps & StateProps) => {\n  const {\n    closeStarsBalanceModal, loadStarsTransactions, loadStarsSubscriptions, openStarsGiftingPickerModal, openInvoice,\n    openUrl,\n  } = getActions();\n\n  const currency = modal?.currency || STARS_CURRENCY_CODE;\n  const currentState = currency === TON_CURRENCY_CODE ? tonBalanceState : starsBalanceState;\n  const { balance, history } = currentState || {};\n  const { subscriptions } = (currency === STARS_CURRENCY_CODE && starsBalanceState) || {};\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedTabIndex, setSelectedTabIndex] = useState(0);\n  const [areBuyOptionsShown, showBuyOptions, hideBuyOptions] = useFlag();\n\n  const isOpen = Boolean(modal && (starsBalanceState || tonBalanceState));\n\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = modal || {};\n\n  const shouldOpenOnBuy = originStarsPayment || originReaction || originGift || topup;\n\n  const ongoingTransactionAmount = originStarsPayment?.form?.invoice?.totalAmount\n    || originStarsPayment?.subscriptionInfo?.subscriptionPricing?.amount\n    || originReaction?.amount\n    || originGift?.gift.stars\n    || topup?.balanceNeeded;\n  const starsNeeded = ongoingTransactionAmount ? ongoingTransactionAmount - (balance?.amount || 0) : undefined;\n  const starsNeededText = useMemo(() => {\n    const global = getGlobal();\n\n    if (originReaction) {\n      const channel = selectChat(global, originReaction.chatId);\n      if (!channel) return undefined;\n      return oldLang('StarsNeededTextReactions', getChatTitle(oldLang, channel));\n    }\n\n    if (originStarsPayment) {\n      const bot = originStarsPayment.form?.botId ? selectUser(global, originStarsPayment.form.botId) : undefined;\n      if (!bot) return undefined;\n      return oldLang('StarsNeededText', getUserFullName(bot));\n    }\n\n    if (originGift) {\n      const peer = selectUser(global, originGift.peerId);\n      if (!peer) return undefined;\n      return oldLang('StarsNeededTextGift', getPeerTitle(lang, peer));\n    }\n\n    if (topup?.purpose === SUBSCRIPTION_PURPOSE) {\n      return oldLang('StarsNeededTextLink');\n    }\n\n    if (topup?.purpose === PAID_MESSAGES_PURPOSE) {\n      return lang('StarsNeededTextSendPaidMessages', undefined, {\n        withMarkdown: true,\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [originReaction, originStarsPayment, originGift, topup?.purpose, lang, oldLang]);\n\n  const shouldShowItems = Boolean(history?.all?.transactions.length && !shouldOpenOnBuy);\n  const shouldSuggestGifting = !shouldOpenOnBuy;\n\n  const modalHeight = useMemo(() => {\n    const transactionCount = history?.all?.transactions.length || 0;\n    if (transactionCount == 1) {\n      return '35.5rem';\n    }\n    if (transactionCount == 2) {\n      return '39.25rem';\n    }\n    if (transactionCount == 3) {\n      return '43rem';\n    }\n    return '45rem';\n  }, [history?.all?.transactions.length]);\n\n  const transactionTabs: TabWithProperties[] = useMemo(() => {\n    return TRANSACTION_TABS_KEYS.map((key) => ({\n      title: lang(key),\n    }));\n  }, [lang]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setSelectedTabIndex(0);\n      hideBuyOptions();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (shouldOpenOnBuy) {\n      showBuyOptions();\n      return;\n    }\n\n    hideBuyOptions();\n  }, [shouldOpenOnBuy]);\n\n  const tosText = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const text = oldLang('lng_credits_summary_options_about');\n    const parts = text.split('{link}');\n    return [\n      parts[0],\n      <SafeLink url={oldLang('StarsTOSLink')} text={oldLang('lng_credits_summary_options_about_link')} />,\n      parts[1],\n    ];\n  }, [isOpen, oldLang]);\n\n  const renderStarsHeaderSection = () => {\n    return (\n      <>\n        <ParticlesHeader\n          model=\"swaying-star\"\n          color=\"gold\"\n          title={starsNeeded ? oldLang('StarsNeededTitle', ongoingTransactionAmount) : oldLang('TelegramStars')}\n          description={renderText(\n            starsNeededText || oldLang('TelegramStarsInfo'),\n            ['simple_markdown', 'emoji'],\n          )}\n          isDisabled={!isOpen}\n        />\n        {canBuyPremium && !areBuyOptionsShown && (\n          <Button\n            className={styles.starButton}\n            onClick={showBuyOptions}\n            fluid\n          >\n            {oldLang('Star.List.BuyMoreStars')}\n          </Button>\n        )}\n        {canBuyPremium && !areBuyOptionsShown && shouldSuggestGifting && (\n          <Button\n            isText\n            noForcedUpperCase\n            className={styles.starButton}\n            fluid\n            onClick={openStarsGiftingPickerModalHandler}\n          >\n            {oldLang('TelegramStarsGift')}\n          </Button>\n        )}\n        {areBuyOptionsShown && starsBalanceState?.topupOptions && (\n          <StarTopupOptionList\n            starsNeeded={starsNeeded}\n            options={starsBalanceState.topupOptions}\n            onClick={handleBuyStars}\n          />\n        )}\n      </>\n    );\n  };\n\n  const renderTonHeaderSection = () => {\n    const tonAmount = convertCurrencyFromBaseUnit(balance?.amount || 0, TON_CURRENCY_CODE);\n    return (\n      <>\n        <ParticlesHeader\n          model=\"speeding-diamond\"\n          color=\"blue\"\n          title={lang('CurrencyTon')}\n          description={lang('DescriptionAboutTon')}\n          isDisabled={!isOpen}\n        />\n        <div className={styles.tonBalanceContainer}>\n          <div className={styles.tonBalance}>\n            <Icon name=\"toncoin\" className={styles.tonIconBalance} />\n            {tonAmount}\n          </div>\n          {Boolean(tonUsdRate) && (\n            <span className={styles.tonInUsd}>\n              {`≈ ${formatCurrencyAsString(\n                convertTonToUsd(balance?.amount || 0, tonUsdRate, true),\n                'USD',\n                lang.code,\n              )}`}\n            </span>\n          )}\n        </div>\n        <Button\n          className={styles.topUpButton}\n          onClick={handleTonTopUp}\n          fluid\n        >\n          {lang('ButtonTopUpViaFragment')}\n        </Button>\n      </>\n    );\n  };\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleLoadMoreTransactions = useLastCallback(() => {\n    loadStarsTransactions({\n      type: TRANSACTION_TYPES[selectedTabIndex],\n      isTon: currency === TON_CURRENCY_CODE,\n    });\n  });\n\n  const handleLoadMoreSubscriptions = useLastCallback(() => {\n    loadStarsSubscriptions();\n  });\n\n  const openStarsGiftingPickerModalHandler = useLastCallback(() => {\n    openStarsGiftingPickerModal({});\n  });\n\n  const handleBuyStars = useLastCallback((option: ApiStarTopupOption) => {\n    openInvoice({\n      type: 'stars',\n      stars: option.stars,\n      currency: option.currency,\n      amount: option.amount,\n    });\n  });\n\n  const handleTonTopUp = useLastCallback(() => {\n    openUrl({ url: tonTopupUrl, shouldSkipModal: true });\n  });\n\n  return (\n    <Modal\n      className={buildClassName(styles.root, !shouldForceHeight && !areBuyOptionsShown && styles.minimal)}\n      isOpen={isOpen}\n      onClose={closeStarsBalanceModal}\n      dialogStyle={`--modal-height: ${modalHeight}`}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={() => closeStarsBalanceModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        {currency !== TON_CURRENCY_CODE && <BalanceBlock balance={balance} className={styles.modalBalance} />}\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.starHeaderText}>\n            {oldLang('TelegramStars')}\n          </h2>\n        </div>\n        <div className={styles.section}>\n          {currency === TON_CURRENCY_CODE ? renderTonHeaderSection() : renderStarsHeaderSection()}\n        </div>\n        {areBuyOptionsShown && (\n          <div className={styles.tos}>\n            {tosText}\n          </div>\n        )}\n        {currency === TON_CURRENCY_CODE && (\n          <div className={styles.hint}>\n            {lang('TonModalHint')}\n          </div>\n        )}\n        {shouldShowItems && Boolean(subscriptions?.list.length) && (\n          <div className={styles.section}>\n            <h3 className={styles.sectionTitle}>{oldLang('StarMySubscriptions')}</h3>\n            <div className={styles.subscriptions}>\n              {subscriptions?.list.map((subscription) => (\n                <StarsSubscriptionItem\n                  key={subscription.id}\n                  subscription={subscription}\n                />\n              ))}\n              {subscriptions?.nextOffset && (\n                <Button\n                  isText\n                  disabled={subscriptions.isLoading}\n                  size=\"smaller\"\n                  noForcedUpperCase\n                  className={styles.loadMore}\n                  onClick={handleLoadMoreSubscriptions}\n                >\n                  <Icon name=\"down\" className={styles.loadMoreIcon} />\n                  {oldLang('StarMySubscriptionsExpand')}\n                </Button>\n              )}\n            </div>\n          </div>\n        )}\n        {shouldShowItems && (\n          <div className={styles.container}>\n            <div className={styles.lastSection}>\n              <Transition\n                name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                activeKey={selectedTabIndex}\n                renderCount={TRANSACTION_TABS_KEYS.length}\n                shouldRestoreHeight\n                className={styles.transition}\n              >\n                <InfiniteScroll\n                  onLoadMore={handleLoadMoreTransactions}\n                  items={history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions}\n                  scrollContainerClosest={`.${styles.main}`}\n                  itemSelector={`.${TRANSACTION_ITEM_CLASS}`}\n                  className={styles.transactions}\n                  noFastList\n                  noScrollRestoreOnTop\n                >\n                  {history?.[TRANSACTION_TYPES[selectedTabIndex]]?.transactions.map((transaction) => (\n                    <StarsTransactionItem\n                      key={`${transaction.id}-${transaction.isRefund}`}\n                      transaction={transaction}\n                      className={TRANSACTION_ITEM_CLASS}\n                    />\n                  ))}\n                </InfiniteScroll>\n              </Transition>\n            </div>\n            <TabList\n              className={styles.tabs}\n              tabClassName={styles.tab}\n              activeTab={selectedTabIndex}\n              tabs={transactionTabs}\n              onSwitchTab={setSelectedTabIndex}\n            />\n          </div>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const shouldForceHeight = modal?.currency === TON_CURRENCY_CODE\n      ? Boolean(global.ton?.history?.all?.transactions.length)\n      : Boolean(global.stars?.history?.all?.transactions.length);\n\n    return {\n      shouldForceHeight,\n      starsBalanceState: global.stars,\n      tonBalanceState: global.ton,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      tonUsdRate: global.appConfig?.tonUsdRate || TON_USD_RATE_DEFAULT,\n      tonTopupUrl: global.appConfig?.tonTopupUrl || TON_TOPUP_URL_DEFAULT,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarsBalanceModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CuBAw2yg\",\"slider\":\"euOOAbZi\",\"sparkles\":\"_L1YQTIP\",\"progress\":\"kwK0cNPX\",\"floatingBadgeWrapper\":\"uvlMoXj0\",\"floatingBadge\":\"BGSDWAYc\",\"floatingBadgeText\":\"qqQan8uF\",\"floatingBadgeTriangle\":\"mIdJOmsB\"};","import React from '@teact';\nimport {\n  memo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { TabState } from '../../../../global/types';\n\nimport { convertTonFromNanos, convertTonToNanos } from '../../../../util/formatCurrency';\nimport { convertTonToUsd, formatCurrencyAsString } from '../../../../util/formatCurrency';\nimport { formatStarsAsIcon, formatStarsAsText, formatTonAsIcon,\n  formatTonAsText } from '../../../../util/localization/format';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\nimport styles from './GiftResalePriceComposerModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftResalePriceComposerModal'];\n};\n\nexport type StateProps = {\n  starsStargiftResaleCommissionPermille?: number;\n  starsStargiftResaleAmountMin: number;\n  starsStargiftResaleAmountMax?: number;\n  starsUsdWithdrawRate?: number;\n  tonStargiftResaleCommissionPermille?: number;\n  tonStargiftResaleAmountMin: number;\n  tonStargiftResaleAmountMax?: number;\n  tonUsdRate?: number;\n};\n\nconst GiftResalePriceComposerModal = ({\n  modal, starsStargiftResaleCommissionPermille,\n  starsStargiftResaleAmountMin, starsStargiftResaleAmountMax, starsUsdWithdrawRate,\n  tonStargiftResaleCommissionPermille, tonStargiftResaleAmountMin, tonStargiftResaleAmountMax, tonUsdRate,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftResalePriceComposerModal,\n    closeGiftInfoModal,\n    updateStarGiftPrice,\n    showNotification,\n  } = getActions();\n  const isOpen = Boolean(modal);\n  const [price, setPrice] = useState<number | undefined>(undefined);\n  const [isPriceInTon, setIsPriceInTon] = useState(false);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const hasPrice = Boolean(price);\n\n  const lang = useLang();\n\n  const handleChangePrice = useLastCallback((e) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n    const maxAmount = isPriceInTon ? tonStargiftResaleAmountMax : starsStargiftResaleAmountMax;\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : maxAmount ? Math.min(number, maxAmount) : number;\n    setPrice(result);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiftResalePriceComposerModal();\n  });\n\n  const handleSellGift = useLastCallback(() => {\n    if (!savedGift || savedGift.gift.type !== 'starGiftUnique' || !savedGift.inputGift || !price) return;\n    closeGiftResalePriceComposerModal();\n    closeGiftInfoModal();\n    updateStarGiftPrice(\n      {\n        gift: savedGift.inputGift,\n        price: {\n          currency: isPriceInTon ? 'TON' : 'XTR',\n          amount: isPriceInTon ? convertTonToNanos(price) : price,\n          nanos: 0,\n        },\n      });\n    showNotification({\n      icon: 'sell-outline',\n      message: {\n        key: 'NotificationGiftIsSale',\n        variables: {\n          gift: lang('GiftUnique', { title: savedGift.gift.title, number: savedGift.gift.number }),\n        },\n      },\n    });\n  });\n  const commission = isPriceInTon ? tonStargiftResaleCommissionPermille : starsStargiftResaleCommissionPermille;\n  const minAmount = isPriceInTon ? tonStargiftResaleAmountMin : starsStargiftResaleAmountMin;\n  const isPriceCorrect = hasPrice && price >= minAmount;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={isPriceInTon ? lang('PriceInTON') : lang('PriceInStars')}\n      hasCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      <div className={styles.inputPrice}>\n        <InputText\n          label={isPriceInTon ? lang('EnterPriceInTon') : lang('EnterPriceInStars')}\n          onChange={handleChangePrice}\n          value={price?.toString()}\n          inputMode=\"numeric\"\n          tabIndex={0}\n          teactExperimentControlled={!isPriceInTon}\n        />\n      </div>\n\n      <div className={styles.inputPriceDescription}>\n        <span>\n          {!isPriceCorrect && Boolean(commission) && lang('DescriptionComposerGiftMinimumPrice', {\n            stars: isPriceInTon ? formatTonAsText(lang, minAmount) : formatStarsAsText(lang, minAmount),\n          }, {\n            withMarkdown: true,\n            withNodes: true,\n          })}\n          {isPriceCorrect && (() => {\n            const priceWithCommission = commission ? Number((price * commission).toFixed()) : price;\n            return lang('DescriptionComposerGiftResalePrice',\n              {\n                stars: isPriceInTon\n                  ? formatTonAsText(lang, priceWithCommission)\n                  : formatStarsAsText(lang, priceWithCommission),\n              },\n              {\n                withMarkdown: true,\n                withNodes: true,\n              });\n          })()}\n        </span>\n\n        {isPriceCorrect && Boolean(isPriceInTon ? tonUsdRate : starsUsdWithdrawRate) && (\n          <span className={styles.descriptionPrice}>\n            {`≈ ${formatCurrencyAsString(\n              isPriceInTon ? convertTonToUsd(price, tonUsdRate!) : price * starsUsdWithdrawRate!,\n              'USD',\n              lang.code,\n            )}`}\n          </span>\n        )}\n      </div>\n\n      <Checkbox\n        className={styles.checkBox}\n        label={lang('OnlyAcceptTON')}\n        checked={isPriceInTon}\n        onCheck={setIsPriceInTon}\n      />\n\n      <div className={styles.checkBoxDescription}>\n        {lang('OnlyAcceptTONDescription')}\n      </div>\n\n      <Button noForcedUpperCase disabled={!isPriceCorrect} size=\"smaller\" onClick={handleSellGift}>\n        {isPriceCorrect && lang('ButtonSellGift', {\n          stars: isPriceInTon ? formatTonAsIcon(lang, price)\n            : formatStarsAsIcon(lang, price, { asFont: true }),\n        }, { withNodes: true })}\n        {!isPriceCorrect && lang('Sell')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const configPermille = global.appConfig?.starsStargiftResaleCommissionPermille;\n    const starsStargiftResaleCommissionPermille = configPermille ? (configPermille / 1000) : undefined;\n    const starsStargiftResaleAmountMin = global.appConfig?.starsStargiftResaleAmountMin || 0;\n    const starsStargiftResaleAmountMax = global.appConfig?.starsStargiftResaleAmountMax;\n\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n\n    const tonConfigPermille = global.appConfig?.tonStargiftResaleCommissionPermille;\n    const tonStargiftResaleCommissionPermille = tonConfigPermille ? (tonConfigPermille / 1000) : 0;\n    const tonStargiftResaleAmountMin = convertTonFromNanos(global.appConfig?.tonStargiftResaleAmountMin || 0);\n    const maxTonFromConfig = global.appConfig?.tonStargiftResaleAmountMax;\n    const tonStargiftResaleAmountMax = maxTonFromConfig && convertTonFromNanos(maxTonFromConfig);\n\n    const tonUsdRate = global.appConfig?.tonUsdRate;\n\n    return {\n      starsStargiftResaleCommissionPermille,\n      starsStargiftResaleAmountMin,\n      starsStargiftResaleAmountMax,\n      starsUsdWithdrawRate,\n      tonStargiftResaleCommissionPermille,\n      tonStargiftResaleAmountMin,\n      tonStargiftResaleAmountMax,\n      tonUsdRate,\n    };\n  },\n)(GiftResalePriceComposerModal));\n","import React from '@teact';\nimport type { FC } from '@teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiDisallowedGifts,\n  ApiPeer,\n  ApiPremiumGiftCodeOption,\n  ApiStarGift,\n  ApiStarGiftRegular,\n  ApiStarsAmount,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { StarGiftCategory } from '../../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { selectPeer, selectUserFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport InteractiveSparkles from '../../common/InteractiveSparkles';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport BalanceBlock from '../stars/BalanceBlock';\nimport GiftSendingOptions from './GiftComposer';\nimport GiftItemPremium from './GiftItemPremium';\nimport GiftItemStar from './GiftItemStar';\nimport GiftModalResaleScreen from './GiftModalResaleScreen';\nimport GiftResaleFilters from './GiftResaleFilters';\nimport StarGiftCategoryList from './StarGiftCategoryList';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftModal'];\n};\n\nexport type GiftOption = ApiPremiumGiftCodeOption | ApiStarGift;\n\ntype StateProps = {\n  boostPerSentGift?: number;\n  starGiftsById?: Record<string, ApiStarGiftRegular>;\n  starGiftIdsByCategory?: Record<StarGiftCategory, string[]>;\n  starBalance?: ApiStarsAmount;\n  peer?: ApiPeer;\n  isSelf?: boolean;\n  disallowedGifts?: ApiDisallowedGifts;\n  resaleGiftsCount?: number;\n  areResaleGiftsLoading?: boolean;\n};\n\nconst AVATAR_SIZE = 100;\nconst INTERSECTION_THROTTLE = 200;\nconst SCROLL_THROTTLE = 200;\nconst AVATAR_SPARKLES_CENTER_SHIFT = [0, -50] as const;\n\nconst runThrottledForScroll = throttle((cb) => cb(), SCROLL_THROTTLE, true);\n\nconst GiftModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starGiftsById,\n  starGiftIdsByCategory,\n  starBalance,\n  peer,\n  isSelf,\n  disallowedGifts,\n  resaleGiftsCount,\n  areResaleGiftsLoading,\n}) => {\n  const {\n    closeGiftModal, openGiftInfoModal, resetResaleGifts, loadResaleGifts,\n  } = getActions();\n  const dialogRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n  const giftHeaderRef = useRef<HTMLHeadingElement>();\n\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const user = peer && isApiPeerUser(peer) ? peer : undefined;\n  const chat = peer && isApiPeerChat(peer) ? peer : undefined;\n\n  const [selectedGift, setSelectedGift] = useState<GiftOption | undefined>();\n  const [selectedResellGift, setSelectedResellGift] = useState<ApiStarGift | undefined>();\n  const [shouldShowMainScreenHeader, setShouldShowMainScreenHeader] = useState(false);\n  const [isMainScreenHeaderForStarGifts, setIsMainScreenHeaderForStarGifts] = useState(false);\n  const [isGiftScreenHeaderForStarGifts, setIsGiftScreenHeaderForStarGifts] = useState(false);\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n  const triggerSparklesRef = useRef<(() => void) | undefined>();\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    const {\n      shouldDisallowPremiumGifts,\n      ...disallowedGiftTypes\n    } = disallowedGifts;\n    return !isSelf && Object.values(disallowedGiftTypes).every(Boolean);\n  }, [isSelf, disallowedGifts]);\n\n  const areUnlimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowUnlimitedStarGifts;\n  const areLimitedStarGiftsDisallowed = !isSelf && disallowedGifts?.shouldDisallowLimitedStarGifts;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const allGifts = renderingModal?.gifts;\n  const filteredGifts = useMemo(() => {\n    return allGifts?.sort((prevGift, gift) => prevGift.months - gift.months)\n      .filter((gift) => gift.users === 1 && gift.currency !== STARS_CURRENCY_CODE);\n  }, [allGifts]);\n\n  const giftsByStars = useMemo(() => {\n    const mapGifts = new Map();\n\n    if (!filteredGifts) return mapGifts;\n\n    filteredGifts.forEach((gift) => {\n      const giftByStars = allGifts?.find(\n        (starsGift) => starsGift.currency === STARS_CURRENCY_CODE\n          && starsGift.months === gift.months,\n      );\n      if (giftByStars) {\n        mapGifts.set(gift, giftByStars);\n      }\n    });\n\n    return mapGifts;\n  }, [allGifts, filteredGifts]);\n\n  const baseGift = useMemo(() => {\n    return filteredGifts?.reduce((prev, gift) => (prev.amount < gift.amount ? prev : gift));\n  }, [filteredGifts]);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const isResaleScreen = Boolean(selectedResellGift) && !selectedGift;\n  const isGiftScreen = Boolean(selectedGift);\n  const shouldShowHeader = isResaleScreen || isGiftScreen || shouldShowMainScreenHeader;\n  const isHeaderForStarGifts = isGiftScreen ? isGiftScreenHeaderForStarGifts : isMainScreenHeaderForStarGifts;\n\n  useEffect(() => {\n    if (selectedResellGift) {\n      loadResaleGifts({ giftId: selectedResellGift.id });\n    }\n  }, [selectedResellGift]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setShouldShowMainScreenHeader(false);\n      setSelectedGift(undefined);\n      setSelectedResellGift(undefined);\n      setSelectedCategory('all');\n    }\n  }, [isOpen]);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLDivElement>) => {\n    if (isGiftScreen) return;\n    const currentTarget = e.currentTarget;\n\n    runThrottledForScroll(() => {\n      const { scrollTop } = currentTarget;\n\n      setShouldShowMainScreenHeader(scrollTop > 150);\n\n      if (transitionRef.current && giftHeaderRef.current) {\n        const { top: headerTop } = giftHeaderRef.current.getBoundingClientRect();\n        const { top: transitionTop } = transitionRef.current.getBoundingClientRect();\n        setIsMainScreenHeaderForStarGifts(headerTop - transitionTop <= 0);\n      }\n    });\n  });\n\n  const giftPremiumDescription = lang('GiftPremiumDescription', {\n    user: getUserFullName(user)!,\n    link: (\n      <SafeLink\n        text={lang('GiftPremiumDescriptionLinkCaption')}\n        url={lang('GiftPremiumDescriptionLink')}\n      />\n    ),\n  }, { withNodes: true });\n\n  const starGiftDescription = chat\n    ? lang('StarGiftDescriptionChannel', { peer: getPeerTitle(lang, chat) }, {\n      withNodes: true,\n      withMarkdown: true,\n    })\n    : isSelf\n      ? lang('StarGiftDescriptionSelf', undefined, {\n        withNodes: true,\n        renderTextFilters: ['br'],\n      })\n      : lang('StarGiftDescription', {\n        user: getUserFullName(user)!,\n      }, { withNodes: true, withMarkdown: true });\n\n  function renderGiftPremiumHeader() {\n    return (\n      <h2 className={buildClassName(styles.headerText, styles.center)}>\n        {lang('GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  function renderGiftPremiumDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.center)}>\n        {giftPremiumDescription}\n      </p>\n    );\n  }\n\n  function renderStarGiftsHeader() {\n    return (\n      <h2 ref={giftHeaderRef} className={buildClassName(styles.headerText, styles.center)}>\n        {lang(isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader')}\n      </h2>\n    );\n  }\n\n  function renderStarGiftsDescription() {\n    return (\n      <p className={buildClassName(styles.description, styles.starGiftsDescription, styles.center)}>\n        {starGiftDescription}\n      </p>\n    );\n  }\n\n  const handleGiftClick = useLastCallback((gift: GiftOption, target?: 'resell' | 'original') => {\n    if (target === 'resell') {\n      if (!('id' in gift)) {\n        return;\n      }\n      if (isResaleScreen) {\n        openGiftInfoModal({ gift, recipientId: renderingModal?.forPeerId });\n        return;\n      }\n      setSelectedResellGift(gift);\n      return;\n    }\n    setSelectedGift(gift);\n    setIsGiftScreenHeaderForStarGifts('id' in gift);\n  });\n\n  function renderStarGifts() {\n    const filteredGiftIds = starGiftIdsByCategory?.[selectedCategory]?.filter((giftId) => {\n      const gift = starGiftsById?.[giftId];\n      if (!gift) return false;\n\n      const { isLimited, isSoldOut, upgradeStars } = gift;\n      if (areUnlimitedStarGiftsDisallowed && !areLimitedStarGiftsDisallowed) {\n        return isLimited;\n      }\n      if (areLimitedStarGiftsDisallowed && !areUnlimitedStarGiftsDisallowed) {\n        return !isLimited && !isSoldOut;\n      }\n      if (areUnlimitedStarGiftsDisallowed && areLimitedStarGiftsDisallowed) {\n        return Boolean(isLimited && Boolean(upgradeStars));\n      }\n\n      return true;\n    });\n\n    return (\n      <div className={styles.starGiftsContainer}>\n        {starGiftsById && filteredGiftIds?.flatMap((giftId) => {\n          const gift = starGiftsById[giftId];\n          const shouldShowResale = selectedCategory !== 'stock' && Boolean(gift.availabilityResale);\n          const shouldDuplicateAsResale = selectedCategory !== 'resale' && shouldShowResale && !gift.isSoldOut;\n\n          const elements = [\n            <GiftItemStar\n              key={giftId}\n              gift={gift}\n              observeIntersection={observeIntersection}\n              isResale={shouldShowResale && !shouldDuplicateAsResale}\n              onClick={handleGiftClick}\n            />,\n          ];\n\n          if (shouldDuplicateAsResale) {\n            elements.push(\n              <GiftItemStar\n                key={`resale_${giftId}`}\n                isResale\n                gift={gift}\n                observeIntersection={observeIntersection}\n                onClick={handleGiftClick}\n              />,\n            );\n          }\n\n          return elements;\n        })}\n      </div>\n    );\n  }\n\n  function renderPremiumGifts() {\n    return (\n      <div className={styles.premiumGiftsGallery}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <GiftItemPremium\n              option={gift}\n              optionByStars={giftsByStars.get(gift)}\n              baseMonthAmount={baseGift ? Math.floor(baseGift.amount / baseGift.months) : undefined}\n              onClick={handleGiftClick}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  const onCategoryChanged = useLastCallback((category: StarGiftCategory) => {\n    setSelectedCategory(category);\n  });\n\n  const handleCloseModal = useLastCallback(() => {\n    setSelectedGift(undefined);\n    setSelectedResellGift(undefined);\n    resetResaleGifts();\n    closeGiftModal();\n  });\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (isResaleScreen) {\n      setSelectedResellGift(undefined);\n      resetResaleGifts();\n      return;\n    }\n    if (isGiftScreen) {\n      setSelectedGift(undefined);\n      return;\n    }\n    handleCloseModal();\n  });\n\n  const handleAvatarMouseMove = useLastCallback(() => {\n    triggerSparklesRef.current?.();\n  });\n\n  const handleRequestAnimation = useLastCallback((animate: NoneToVoidFunction) => {\n    triggerSparklesRef.current = animate;\n  });\n\n  function renderMainScreen() {\n    return (\n      <div ref={scrollerRef} className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <div className={styles.avatars}>\n          <Avatar\n            className={styles.avatar}\n            size={AVATAR_SIZE}\n            peer={peer}\n            onMouseMove={handleAvatarMouseMove}\n          />\n          <InteractiveSparkles\n            className={styles.logoBackground}\n            color=\"gold\"\n            centerShift={AVATAR_SPARKLES_CENTER_SHIFT}\n            onRequestAnimation={handleRequestAnimation}\n          />\n        </div>\n        {!isSelf && !chat && !disallowedGifts?.shouldDisallowPremiumGifts && (\n          <>\n            {renderGiftPremiumHeader()}\n            {renderGiftPremiumDescription()}\n            {renderPremiumGifts()}\n          </>\n        )}\n\n        {!areAllGiftsDisallowed && (\n          <>\n            {renderStarGiftsHeader()}\n            {renderStarGiftsDescription()}\n            <StarGiftCategoryList\n              areLimitedStarGiftsDisallowed={areLimitedStarGiftsDisallowed}\n              onCategoryChanged={onCategoryChanged}\n            />\n            <Transition\n              name=\"zoomFade\"\n              activeKey={getCategoryKey(selectedCategory)}\n              className={styles.starGiftsTransition}\n            >\n              {renderStarGifts()}\n            </Transition>\n          </>\n        )}\n      </div>\n    );\n  }\n\n  const isBackButton = isGiftScreen || isResaleScreen;\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n  );\n\n  function renderHeader() {\n    if (!shouldShowHeader) return undefined;\n    if (isResaleScreen) {\n      const isFirstLoading = areResaleGiftsLoading && !resaleGiftsCount;\n      return (\n        <div className={styles.resaleHeaderContentContainer}>\n          <h2 className={styles.resaleHeaderText}>\n            {selectedResellGift.title}\n          </h2>\n          {isFirstLoading\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('Loading')}\n              </div>\n            )}\n          {!isFirstLoading && resaleGiftsCount !== undefined\n            && (\n              <div className={styles.resaleHeaderDescription}>\n                {lang('HeaderDescriptionResaleGifts', {\n                  count: resaleGiftsCount,\n                }, { withNodes: true, withMarkdown: true, pluralValue: resaleGiftsCount })}\n              </div>\n            )}\n          <GiftResaleFilters dialogRef={dialogRef} />\n        </div>\n      );\n    }\n    return (\n      <h2 className={styles.commonHeaderText}>\n        {lang(isHeaderForStarGifts ? (isSelf ? 'StarsGiftHeaderSelf' : 'StarsGiftHeader') : 'GiftPremiumHeader')}\n      </h2>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={handleCloseModal}\n      isOpen={isOpen}\n      isSlim\n      contentClassName={styles.content}\n      className={buildClassName(styles.modalDialog, styles.root)}\n      isLowStackPriority\n    >\n      <Button\n        className={styles.closeButton}\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleCloseButtonClick}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <BalanceBlock className={styles.balance} balance={starBalance} withAddButton />\n      <div className={buildClassName(\n        styles.header,\n        isResaleScreen && styles.resaleHeader,\n        !shouldShowHeader && styles.hiddenHeader)}\n      >\n        <Transition\n          name=\"slideVerticalFade\"\n          activeKey={!shouldShowHeader ? 0 : isResaleScreen ? 1 : isHeaderForStarGifts ? 2 : 3}\n          slideClassName={styles.headerSlide}\n        >\n          {renderHeader()}\n        </Transition>\n      </div>\n      <Transition\n        ref={transitionRef}\n        className={styles.transition}\n        name=\"pushSlide\"\n        activeKey={isGiftScreen ? 1 : isResaleScreen ? 2 : 0}\n      >\n        {!isGiftScreen && !isResaleScreen && renderMainScreen()}\n        {isResaleScreen && selectedResellGift\n          && (\n            <GiftModalResaleScreen\n              onGiftClick={handleGiftClick}\n            />\n          )}\n        {isGiftScreen && renderingModal?.forPeerId && (\n          <GiftSendingOptions\n            gift={selectedGift}\n            giftByStars={giftsByStars.get(selectedGift)}\n            peerId={renderingModal.forPeerId}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { modal }): StateProps => {\n  const {\n    starGifts,\n    stars,\n    currentUserId,\n  } = global;\n\n  const peer = modal?.forPeerId ? selectPeer(global, modal.forPeerId) : undefined;\n  const isSelf = Boolean(currentUserId && modal?.forPeerId === currentUserId);\n  const userFullInfo = peer ? selectUserFullInfo(global, peer?.id) : undefined;\n\n  const { resaleGifts } = selectTabState(global);\n  const resaleGiftsCount = resaleGifts.count;\n  const areResaleGiftsLoading = resaleGifts.isLoading !== false;\n\n  return {\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    starGiftsById: starGifts?.byId,\n    starGiftIdsByCategory: starGifts?.idsByCategory,\n    starBalance: stars?.balance,\n    peer,\n    isSelf,\n    disallowedGifts: userFullInfo?.disallowedGifts,\n    resaleGiftsCount,\n    areResaleGiftsLoading,\n  };\n})(GiftModal));\n\nfunction getCategoryKey(category: StarGiftCategory) {\n  if (category === 'all') return 0;\n  if (category === 'limited') return 1;\n  if (category === 'resale') return 2;\n  if (category === 'stock') return 3;\n  return category + 3;\n}\n","import React from '@teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport buildClassName from '../../../util/buildClassName';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarsBalanceModal.module.scss';\n\ntype OwnProps = {\n  balance?: ApiTypeCurrencyAmount;\n  withAddButton?: boolean;\n  className?: string;\n};\n\nconst BalanceBlock = ({ balance, className, withAddButton }: OwnProps) => {\n  const lang = useLang();\n\n  const {\n    openStarsBalanceModal,\n  } = getActions();\n\n  const renderStarsAmount = () => {\n    return (\n      <>\n        <StarIcon type=\"gold\" size=\"middle\" />\n        {balance !== undefined && balance.currency === STARS_CURRENCY_CODE\n          ? formatStarsAmount(lang, balance) : '…'}\n        {withAddButton && (\n          <BadgeButton\n            className={styles.addStarsButton}\n            onClick={() => openStarsBalanceModal({})}\n          >\n            <Icon\n              className={styles.addStarsIcon}\n              name=\"add\"\n            />\n          </BadgeButton>\n        )}\n      </>\n    );\n  };\n\n  const renderTonAmount = () => {\n    return (\n      <>\n        <Icon name=\"toncoin\" />\n        {balance !== undefined ? convertCurrencyFromBaseUnit(balance.amount, balance.currency) : '…'}\n      </>\n    );\n  };\n\n  return (\n    <div className={buildClassName(styles.balanceBlock, className)}>\n      <div className={styles.balanceInfo}>\n        <span className={styles.smallerText}>{lang('StarsBalance')}</span>\n        <div className={styles.balanceBottom}>\n          {balance?.currency === TON_CURRENCY_CODE ? renderTonAmount() : renderStarsAmount()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(BalanceBlock);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXnbeQxP\",\"info\":\"zLaaDX3c\",\"status\":\"HbF2qTB2\",\"statusPricing\":\"AveGvpdV\",\"amount\":\"_CBiOQcv\",\"title\":\"k9ZIv5Pd\",\"description\":\"FlRlxMx2\",\"subtitle\":\"YN2J8dw6\",\"statusPeriod\":\"MRrP7Oew\",\"statusEnded\":\"pRHwfr8m\",\"preview\":\"t6Syyhzd\",\"subscriptionStar\":\"ftlbevPm\"};","import React from '@teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport Sparkles from '../../common/Sparkles';\n\nimport styles from './StarSlider.module.scss';\n\ntype OwnProps = {\n  maxValue: number;\n  defaultValue: number;\n  className?: string;\n  onChange: (value: number) => void;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst StarSlider = ({\n  maxValue,\n  defaultValue,\n  className,\n  onChange,\n}: OwnProps) => {\n  const floatingBadgeRef = useRef<HTMLDivElement>();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < maxValue) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= maxValue) {\n        result.push(maxValue);\n        break;\n      }\n    }\n\n    return result;\n  }, [maxValue]);\n\n  const [value, setValue] = useState(0);\n\n  useEffectOnce(() => {\n    setValue(getProgress(points, defaultValue));\n  });\n\n  const updateSafeBadgePosition = useLastCallback(() => {\n    const badge = floatingBadgeRef.current;\n    if (!badge) return;\n    const parent = badge.parentElement!;\n\n    requestMeasure(() => {\n      const safeMinX = parent.offsetLeft + badge.offsetWidth / 2;\n      const safeMaxX = parent.offsetLeft + parent.offsetWidth - badge.offsetWidth / 2;\n\n      requestMutation(() => {\n        parent.style.setProperty('--_min-x', `${safeMinX}px`);\n        parent.style.setProperty('--_max-x', `${safeMaxX}px`);\n      });\n    });\n  });\n\n  useResizeObserver(floatingBadgeRef, updateSafeBadgePosition);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    setValue(newValue);\n\n    onChange(getValue(points, newValue));\n  });\n\n  return (\n    <div className={buildClassName(styles.root, className)} style={`--progress: ${value / points.length}`}>\n      <div className={styles.floatingBadgeWrapper}>\n        <div className={styles.floatingBadge} ref={floatingBadgeRef}>\n          <div className={styles.floatingBadgeText}>\n            <Icon name=\"star\" className={styles.floatingBadgeIcon} />\n            <AnimatedCounter text={formatInteger(getValue(points, value))} />\n          </div>\n          <svg className={styles.floatingBadgeTriangle} width=\"28\" height=\"28\" viewBox=\"0 0 28 28\" fill=\"none\">\n            <defs>\n              <linearGradient id=\"StarBadgeTriangle\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\">\n                <stop offset=\"-50%\" stop-color=\"#FFAA00\" />\n                <stop offset=\"150%\" stop-color=\"#FFCD3A\" />\n              </linearGradient>\n            </defs>\n            <path d=\"m 28,4 v 9 c 0.0089,7.283278 -3.302215,5.319646 -6.750951,8.589815 l -5.8284,5.82843 c -0.781,0.78105 -2.0474,0.78104 -2.8284,0 L 6.7638083,21.589815 C 2.8288652,17.959047 0.04527024,20.332086 0,13 V 4 C 0,4 0.00150581,0.97697493 3,1 5.3786658,1.018266 22.594519,0.9142007 25,1 c 2.992326,0.1067311 3,3 3,3 z\" fill=\"url(#StarBadgeTriangle)\" />\n          </svg>\n        </div>\n      </div>\n      <div className={styles.progress}>\n        <Sparkles preset=\"progress\" className={styles.sparkles} />\n      </div>\n      <input\n        className={styles.slider}\n        type=\"range\"\n        min={0}\n        max={points.length}\n        defaultValue={getProgress(points, defaultValue)}\n        step=\"any\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const value = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return Math.round(value);\n}\n\nexport default memo(StarSlider);\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"qL0cHbwS\",\"profileBlock\":\"t18QCmAb\",\"titleContainer\":\"q8w7tnmR\",\"radialPattern\":\"_1RfhkfB\",\"lockIcon\":\"jiPObOWv\",\"avatar\":\"JK2zOWA7\",\"userTitle\":\"lxxbgNCl\",\"status\":\"MLMdxkUg\",\"giftTitle\":\"wxg_5ou_\",\"infoDescription\":\"KSCLIMZm\",\"footer\":\"VDrvalBo\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n};\n\nconst PriceConfirmModal: FC<OwnProps & StateProps> = ({\n  modal,\n  starBalance,\n  tonBalance,\n}) => {\n  const actions = getActions();\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    if (!modal?.directInfo) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    const { currency, newAmount } = modal;\n    const isTon = currency === 'TON';\n    const currentBalance = isTon ? tonBalance : starBalance?.amount;\n\n    if (currentBalance === undefined) {\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    if (currentBalance < newAmount!) {\n      actions.openStarsBalanceModal({\n        currency: isTon ? 'TON' : 'XTR',\n        tabId: getCurrentTabId(),\n      });\n      actions.closePriceConfirmModal();\n      return;\n    }\n\n    actions.sendStarPaymentForm({\n      directInfo: modal.directInfo,\n      tabId: getCurrentTabId(),\n    });\n    actions.closePriceConfirmModal();\n  }, [modal, starBalance, tonBalance, actions]);\n\n  const handleClose = useCallback(() => {\n    actions.closePriceConfirmModal();\n  }, [actions]);\n\n  if (!modal) {\n    return undefined;\n  }\n\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n  } = modal;\n\n  const isTon = currency === 'TON';\n\n  let originalAmountText: string;\n  let newAmountText: string;\n\n  if (isTon) {\n    originalAmountText = formatTonAsText(lang, convertTonFromNanos(originalAmount!));\n    newAmountText = formatTonAsText(lang, convertTonFromNanos(newAmount!));\n  } else {\n    originalAmountText = formatStarsAsText(lang, originalAmount!);\n    newAmountText = formatStarsAsText(lang, newAmount!);\n  }\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal)}\n      onClose={handleClose}\n      title={lang('PriceChanged')}\n      confirmHandler={handleConfirm}\n      confirmLabel={lang('PayNewPrice')}\n    >\n      <p>\n        {lang('PriceChangedText', {\n          originalAmount: originalAmountText,\n          newAmount: newAmountText,\n        }, {\n          withMarkdown: true,\n          withNodes: true,\n        })}\n      </p>\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const starBalance = global.stars?.balance;\n  const tonBalance = global.ton?.balance?.amount;\n\n  return {\n    starBalance,\n    tonBalance,\n  };\n},\n)(PriceConfirmModal));\n","import React from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttribute,\n  ApiStarGiftAttributeBackdrop,\n  ApiStarGiftAttributeModel,\n  ApiStarGiftAttributePattern,\n  ApiStarGiftRegular,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport { getStickerMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../../util/localization/format';\nimport { fetch } from '../../../../util/mediaLoader';\n\nimport useInterval from '../../../../hooks/schedulers/useInterval';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftUpgradeModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftUpgradeModal'];\n};\n\ntype StateProps = {\n  recipient?: ApiPeer;\n};\n\ntype Attributes = {\n  model: ApiStarGiftAttributeModel;\n  pattern: ApiStarGiftAttributePattern;\n  backdrop: ApiStarGiftAttributeBackdrop;\n};\n\nconst PREVIEW_UPDATE_INTERVAL = 3000;\n\nconst GiftUpgradeModal = ({ modal, recipient }: OwnProps & StateProps) => {\n  const { closeGiftUpgradeModal, upgradeGift } = getActions();\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingRecipient = useCurrentOrPrev(recipient);\n  const [shouldKeepOriginalDetails, setShouldKeepOriginalDetails] = useState(false);\n\n  const [previewAttributes, setPreviewAttributes] = useState<Attributes | undefined>();\n\n  const lang = useLang();\n\n  const handleClose = useLastCallback(() => closeGiftUpgradeModal());\n\n  const handleUpgrade = useLastCallback(() => {\n    const gift = renderingModal?.gift;\n    if (!gift?.inputGift) return;\n\n    upgradeGift({\n      gift: gift.inputGift,\n      shouldKeepOriginalDetails,\n      upgradeStars: !gift.alreadyPaidUpgradeStars ? (gift.gift as ApiStarGiftRegular).upgradeStars : undefined,\n    });\n    handleClose();\n  });\n\n  const updatePreviewAttributes = useLastCallback(() => {\n    if (!renderingModal?.sampleAttributes) return;\n    setPreviewAttributes(getRandomAttributes(renderingModal.sampleAttributes, previewAttributes));\n  });\n\n  useInterval(updatePreviewAttributes, isOpen ? PREVIEW_UPDATE_INTERVAL : undefined, true);\n\n  useEffect(() => {\n    if (isOpen && renderingModal?.sampleAttributes) {\n      updatePreviewAttributes();\n    }\n  }, [isOpen, renderingModal?.sampleAttributes]);\n\n  // Preload stickers and patterns\n  useEffect(() => {\n    const attributes = renderingModal?.sampleAttributes;\n    if (!attributes) return;\n    const patternStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'pattern')\n      .map((attr) => attr.sticker);\n    const modelStickers = attributes.filter((attr): attr is ApiStarGiftAttributeModel => attr.type === 'model')\n      .map((attr) => attr.sticker);\n\n    const mediaHashes = [...patternStickers, ...modelStickers].map((sticker) => getStickerMediaHash(sticker, 'full'));\n    mediaHashes.forEach((hash) => {\n      fetch(hash, ApiMediaFormat.BlobUrl);\n    });\n  }, [renderingModal?.sampleAttributes]);\n\n  const modalData = useMemo(() => {\n    if (!previewAttributes || !isOpen) {\n      return undefined;\n    }\n\n    const gift = renderingModal?.gift;\n\n    const listItemData = [\n      ['diamond', lang('GiftUpgradeUniqueTitle'), lang('GiftUpgradeUniqueDescription')],\n      ['trade', lang('GiftUpgradeTransferableTitle'), lang('GiftUpgradeTransferableDescription')],\n      ['auction', lang('GiftUpgradeTradeableTitle'), lang('GiftUpgradeTradeableDescription')],\n    ] satisfies TableAboutData;\n\n    const subtitle = renderingRecipient\n      ? lang('GiftPeerUpgradeText', { peer: getPeerTitle(lang, renderingRecipient) })\n      : lang('GiftUpgradeTextOwn');\n\n    const header = (\n      <UniqueGiftHeader\n        modelAttribute={previewAttributes.model}\n        backdropAttribute={previewAttributes.backdrop}\n        patternAttribute={previewAttributes.pattern}\n        title={lang('GiftUpgradeTitle')}\n        subtitle={subtitle}\n      />\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {!gift && (\n          <Button className={styles.footerButton} size=\"smaller\" onClick={handleClose}>\n            {lang('OK')}\n          </Button>\n        )}\n        {gift && (\n          <>\n            <Checkbox\n              label={lang('GiftUpgradeKeepDetails')}\n              onCheck={setShouldKeepOriginalDetails}\n              checked={shouldKeepOriginalDetails}\n            />\n            <Button className={styles.footerButton} size=\"smaller\" isShiny onClick={handleUpgrade}>\n              {gift.alreadyPaidUpgradeStars\n                ? lang('GeneralConfirm')\n                : lang('GiftUpgradeButton', {\n                  amount: formatStarsAsIcon(lang, (gift.gift as ApiStarGiftRegular).upgradeStars!, { asFont: true }),\n                }, { withNodes: true })}\n            </Button>\n          </>\n        )}\n      </div>\n    );\n\n    return {\n      listItemData,\n      header,\n      footer,\n    };\n  }, [previewAttributes, isOpen, lang, renderingRecipient, renderingModal?.gift, shouldKeepOriginalDetails]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={modalData?.header}\n      footer={modalData?.footer}\n      listItemData={modalData?.listItemData}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const recipientId = modal?.recipientId;\n    const recipient = recipientId ? selectPeer(global, recipientId) : undefined;\n\n    return {\n      recipient,\n    };\n  },\n)(GiftUpgradeModal));\n\nfunction getRandomAttributes(list: ApiStarGiftAttribute[], previousSelection?: Attributes): Attributes {\n  const models = list.filter((attr): attr is ApiStarGiftAttributeModel => (\n    attr.type === 'model' && attr.name !== previousSelection?.model.name\n  ));\n  const patterns = list.filter((attr): attr is ApiStarGiftAttributePattern => (\n    attr.type === 'pattern' && attr.name !== previousSelection?.pattern.name\n  ));\n  const backdrops = list.filter((attr): attr is ApiStarGiftAttributeBackdrop => (\n    attr.type === 'backdrop' && attr.name !== previousSelection?.backdrop.name\n  ));\n\n  const randomModel = models[Math.floor(Math.random() * models.length)];\n  const randomPattern = patterns[Math.floor(Math.random() * patterns.length)];\n  const randomBackdrop = backdrops[Math.floor(Math.random() * backdrops.length)];\n\n  return {\n    model: randomModel,\n    pattern: randomPattern,\n    backdrop: randomBackdrop,\n  };\n}\n","import React from '@teact';\nimport type { TeactNode } from '@teact';\nimport { memo, useMemo } from '@teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStarGiftAttributeBackdrop, ApiStarGiftAttributeModel, ApiStarGiftAttributePattern,\n  ApiTypeCurrencyAmount } from '../../../api/types';\n\nimport {\n  formatStarsTransactionAmount,\n} from '../../../global/helpers/payments';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport { useTransitionActiveKey } from '../../../hooks/animations/useTransitionActiveKey';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport RadialPatternBackground from '../../common/profile/RadialPatternBackground';\nimport Transition from '../../ui/Transition';\n\nimport styles from './UniqueGiftHeader.module.scss';\n\ntype OwnProps = {\n  modelAttribute: ApiStarGiftAttributeModel;\n  backdropAttribute: ApiStarGiftAttributeBackdrop;\n  patternAttribute: ApiStarGiftAttributePattern;\n  title?: string;\n  subtitle?: TeactNode;\n  subtitlePeer?: ApiPeer;\n  className?: string;\n  resellPrice?: ApiTypeCurrencyAmount;\n};\n\nconst STICKER_SIZE = 120;\n\nconst UniqueGiftHeader = ({\n  modelAttribute,\n  backdropAttribute,\n  patternAttribute,\n  title,\n  subtitle,\n  subtitlePeer,\n  className,\n  resellPrice,\n}: OwnProps) => {\n  const {\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHover, markHover, unmarkHover] = useFlag();\n  const activeKey = useTransitionActiveKey([modelAttribute, backdropAttribute, patternAttribute]);\n  const subtitleColor = backdropAttribute?.textColor;\n\n  const radialPatternBackdrop = useMemo(() => {\n    const backdropColors = [backdropAttribute.centerColor, backdropAttribute.edgeColor];\n    const patternColor = backdropAttribute.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternAttribute.sticker}\n      />\n    );\n  }, [backdropAttribute, patternAttribute]);\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <Transition\n        className={styles.transition}\n        slideClassName={buildClassName('interactive-gift', styles.transitionSlide)}\n        activeKey={activeKey}\n        direction={1}\n        name=\"zoomBounceSemiFade\"\n      >\n        {radialPatternBackdrop}\n        <AnimatedIconFromSticker\n          className={styles.sticker}\n          sticker={modelAttribute.sticker}\n          size={STICKER_SIZE}\n          noLoop={!isHover}\n          onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n          onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n        />\n      </Transition>\n      {title && <h1 className={styles.title}>{title}</h1>}\n      {Boolean(subtitle) && (\n        <div\n          className={buildClassName(styles.subtitle, subtitlePeer && styles.subtitleBadge)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n          onClick={() => {\n            if (subtitlePeer) {\n              openChat({ id: subtitlePeer.id });\n            }\n          }}\n        >\n          {subtitle}\n        </div>\n      )}\n      {resellPrice && (\n        <p className={styles.amount}>\n          <span>\n            {formatStarsTransactionAmount(lang, resellPrice)}\n          </span>\n          {resellPrice.currency === 'XTR' && <StarIcon type=\"gold\" size=\"middle\" />}\n          {resellPrice.currency === 'TON' && <Icon name=\"toncoin\" />}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default memo(UniqueGiftHeader);\n","import React from '@teact';\nimport { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\n\nimport { getChatTitle, getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport StarIcon from '../../common/icons/StarIcon';\nimport PeerBadge from '../../common/PeerBadge';\nimport PeerChip from '../../common/PeerChip';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport BalanceBlock from './BalanceBlock';\nimport PaidMediaThumb from './transaction/PaidMediaThumb';\n\nimport styles from './StarsBalanceModal.module.scss';\n\nimport StarsBackground from '../../../assets/stars-bg.png';\n\nexport type OwnProps = {\n  modal: TabState['starsPayment'];\n};\n\ntype StateProps = {\n  starsBalanceState?: GlobalState['stars'];\n  bot?: ApiUser;\n  paidMediaMessage?: ApiMessage;\n  paidMediaChat?: ApiChat;\n};\n\nconst StarPaymentModal = ({\n  modal,\n  bot,\n  starsBalanceState,\n  paidMediaMessage,\n  paidMediaChat,\n}: OwnProps & StateProps) => {\n  const { closeStarsPaymentModal, openStarsBalanceModal, sendStarPaymentForm } = getActions();\n  const [isLoading, markLoading, unmarkLoading] = useFlag();\n  const isOpen = Boolean(modal?.inputInvoice && starsBalanceState);\n\n  const prevModal = usePrevious(modal);\n  const renderingModal = modal || prevModal;\n\n  const { form, subscriptionInfo } = renderingModal || {};\n  const amount = form?.invoice?.totalAmount || subscriptionInfo?.subscriptionPricing?.amount;\n  const isBotSubscription = Boolean(form?.invoice.subscriptionPeriod);\n  const canShowPeerItem = !subscriptionInfo?.subscriptionPricing;\n\n  const photo = form?.photo;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkLoading();\n    }\n  }, [isOpen]);\n\n  const descriptionText = useMemo(() => {\n    if (!renderingModal?.inputInvoice) {\n      return '';\n    }\n\n    const botName = getUserFullName(bot);\n    const starsText = oldLang('Stars.Intro.PurchasedText.Stars', amount);\n\n    if (paidMediaMessage) {\n      const extendedMedia = paidMediaMessage.content.paidMedia!.extendedMedia as ApiMediaExtendedPreview[];\n      const areAllPhotos = extendedMedia.every((media) => !media.duration);\n      const areAllVideos = extendedMedia.every((media) => Boolean(media.duration));\n\n      const mediaText = areAllPhotos ? oldLang('Stars.Transfer.Photos', extendedMedia.length)\n        : areAllVideos ? oldLang('Stars.Transfer.Videos', extendedMedia.length)\n          : oldLang('Media', extendedMedia.length);\n\n      const channelTitle = getChatTitle(oldLang, paidMediaChat!);\n      return oldLang('Stars.Transfer.UnlockInfo', [mediaText, channelTitle, starsText]);\n    }\n\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeText', {\n        chat: subscriptionInfo.title,\n        amount,\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n        pluralValue: amount!,\n      });\n    }\n\n    if (isBotSubscription) {\n      return lang('StarsSubscribeBotText', {\n        name: form.title,\n        amount,\n        bot: botName,\n      }, {\n        pluralValue: amount!,\n      });\n    }\n\n    return oldLang('Stars.Transfer.Info', [form!.title, botName, starsText]);\n  }, [\n    renderingModal?.inputInvoice, bot, oldLang, amount, paidMediaMessage, subscriptionInfo, isBotSubscription, form,\n    paidMediaChat, lang,\n  ]);\n\n  const disclaimerText = useMemo(() => {\n    if (subscriptionInfo) {\n      return lang('StarsSubscribeInfo', {\n        link: <SafeLink url={lang('StarsSubscribeInfoLink')} text={lang('StarsSubscribeInfoLinkText')} />,\n      }, {\n        withNodes: true,\n      });\n    }\n\n    return undefined;\n  }, [subscriptionInfo, lang]);\n\n  const inviteCustomPeer = useMemo(() => {\n    if (!subscriptionInfo) {\n      return undefined;\n    }\n\n    return getCustomPeerFromInvite(subscriptionInfo);\n  }, [subscriptionInfo]);\n\n  const handlePayment = useLastCallback(() => {\n    const balance = starsBalanceState?.balance;\n    if (amount === undefined || balance === undefined) {\n      return;\n    }\n\n    if (amount > balance.amount) {\n      openStarsBalanceModal({\n        originStarsPayment: modal,\n      });\n      return;\n    }\n\n    sendStarPaymentForm({});\n    markLoading();\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.paymentContent}\n      isOpen={isOpen}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={closeStarsPaymentModal}\n    >\n      <BalanceBlock balance={starsBalanceState?.balance} className={styles.modalBalance} />\n      <div className={styles.paymentImages} dir={oldLang.isRtl ? 'ltr' : 'rtl'}>\n        {paidMediaMessage ? (\n          <PaidMediaThumb media={paidMediaMessage.content.paidMedia!.extendedMedia} />\n        ) : inviteCustomPeer ? (\n          <>\n            <Avatar className={styles.paymentPhoto} peer={inviteCustomPeer} size=\"giant\" />\n            <StarIcon type=\"gold\" size=\"adaptive\" className={styles.avatarStar} />\n          </>\n        ) : (\n          <PeerBadge\n            peer={!photo ? bot : undefined}\n            avatarWebPhoto={photo}\n            avatarSize=\"giant\"\n            badgeIcon=\"star\"\n            badgeText={formatInteger(amount!)}\n            badgeClassName={styles.amountBadge}\n            className={styles.paymentPhoto}\n          />\n        )}\n        <img className={styles.paymentImageBackground} src={StarsBackground} alt=\"\" draggable={false} />\n      </div>\n      <h2 className={styles.headerText}>\n        {inviteCustomPeer ? oldLang('StarsSubscribeTitle') : oldLang('StarsConfirmPurchaseTitle')}\n      </h2>\n      {canShowPeerItem && <PeerChip className={styles.botItem} peerId={form?.botId} />}\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <Button className={styles.paymentButton} size=\"smaller\" onClick={handlePayment} isLoading={isLoading}>\n        {lang(isBotSubscription ? 'StarsSubscribeBotButtonMonth' : 'StarsPay', {\n          amount: formatStarsAsIcon(lang, amount!, { asFont: true }),\n        }, {\n          withNodes: true,\n        })}\n      </Button>\n      {Boolean(disclaimerText) && (\n        <div className={buildClassName(styles.disclaimer, styles.smallerText)}>\n          {disclaimerText}\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const bot = modal?.form?.botId ? selectUser(global, modal.form.botId) : undefined;\n\n    const messageInputInvoice = modal?.inputInvoice?.type === 'message' ? modal.inputInvoice : undefined;\n    const message = messageInputInvoice\n      ? selectChatMessage(global, messageInputInvoice.chatId, messageInputInvoice.messageId) : undefined;\n    const chat = messageInputInvoice ? selectChat(global, messageInputInvoice.chatId) : undefined;\n    const isPaidMedia = message?.content.paidMedia;\n\n    return {\n      bot,\n      starsBalanceState: global.stars,\n      paidMediaMessage: isPaidMedia ? message : undefined,\n      paidMediaChat: isPaidMedia ? chat : undefined,\n    };\n  },\n)(StarPaymentModal));\n","import React from '@teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMediaExtendedPreview, BoughtPaidMedia } from '../../../../api/types';\n\nimport { getMediaHash, getMediaThumbUri } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Icon from '../../../common/icons/Icon';\nimport MediaSpoiler from '../../../common/MediaSpoiler';\n\nimport styles from './PaidMediaThumb.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  media: ApiMediaExtendedPreview[] | BoughtPaidMedia[];\n  isTransactionPreview?: boolean;\n  onClick?: NoneToVoidFunction;\n};\n\nconst THUMB_LIMIT = 3;\nconst PREVIEW_THUMB_LIMIT = 2;\n\nconst PaidMediaThumb = ({\n  media, className, isTransactionPreview, onClick,\n}: OwnProps) => {\n  const count = Math.min(media.length, isTransactionPreview ? PREVIEW_THUMB_LIMIT : THUMB_LIMIT);\n  const isLocked = 'mediaType' in media[0];\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        styles[`itemCount${count}`],\n        isTransactionPreview && styles.preview,\n        className,\n      )}\n      dir=\"rtl\"\n      onClick={onClick}\n    >\n      {media.slice(0, count).reverse().map((item, i, arr) => {\n        const realIndex = arr.length - i - 1;\n        return 'mediaType' in item ? (\n          <MediaSpoiler\n            className={styles.thumb}\n            isVisible\n            width={item.width}\n            height={item.height}\n            thumbDataUri={item.thumbnail?.dataUri}\n          />\n        ) : (\n          <SingleMediaThumb\n            className={buildClassName(isTransactionPreview && realIndex > 0 && styles.noOutline)}\n            boughtMedia={item}\n            index={realIndex}\n          />\n        );\n      })}\n      {isLocked && (\n        <div className={styles.count}>\n          <Icon name=\"stars-lock\" />\n          {media.length > 1 ? media.length : ''}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SingleMediaThumb({\n  boughtMedia,\n  index,\n  className,\n}: {\n  boughtMedia: BoughtPaidMedia;\n  index?: number;\n  className?: string;\n}) {\n  const media = (boughtMedia.video || boughtMedia.photo)!;\n  const mediaHash = getMediaHash(media, 'pictogram');\n  const thumb = getMediaThumbUri(media);\n\n  const mediaBlob = useMedia(mediaHash);\n\n  return (\n    <div className={buildClassName(styles.thumb, index !== undefined && `stars-transaction-media-${index}`, className)}>\n      {thumb && <img className={styles.blurry} src={thumb} alt=\"\" />}\n      {mediaBlob && <img className={styles.full} src={mediaBlob} alt=\"\" />}\n    </div>\n  );\n}\n\nexport default memo(PaidMediaThumb);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tJK1W0pJ\",\"transition\":\"pP8TxefR\",\"content\":\"o3V1HqbL\",\"resaleScreenRoot\":\"Vce_TsJO\",\"main\":\"cVXqeu9P\",\"giftSection\":\"v4eKefwN\",\"section\":\"EqfarEYb\",\"resaleStarGiftsContainer\":\"RSFcSNGL\",\"starGiftsContainer\":\"OQX3GZl5\",\"premiumGiftsGallery\":\"n40m3BK2\",\"header\":\"iqqoyRgW\",\"resaleHeader\":\"cJRBgg9B\",\"resaleHeaderContentContainer\":\"OXYQmfGK\",\"headerSlide\":\"BTWhJUQB\",\"headerText\":\"lLRmbpIu\",\"hiddenHeader\":\"XgGzn1cQ\",\"resaleHeaderText\":\"bp_KPx8I\",\"commonHeaderText\":\"ybZo03if\",\"resaleHeaderDescription\":\"XefHUFm1\",\"closeButton\":\"r_Y5uG1T\",\"balance\":\"soqAknia\",\"avatars\":\"N_7tYJKr\",\"avatar\":\"_3hY4vIep\",\"logoBackground\":\"ieK4TzSb\",\"center\":\"Ey5gX40t\",\"description\":\"ZioU5h_k\",\"starGiftsDescription\":\"gFgzS8pV\",\"boostIcon\":\"Qi2YR6Dz\",\"optionBottom\":\"RTbClMKE\",\"secondaryInfo\":\"g0R9GSNq\",\"footer\":\"J3Gju3bv\",\"starGiftsTransition\":\"kB6IyXqS\",\"notFoundGiftsRoot\":\"UqnRlJ1n\",\"notFoundGiftsDescription\":\"g0VbwIG_\",\"notFoundGiftsLink\":\"j2zPEQr8\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"W3JMs1YE\",\"picker\":\"wOipz1Y_\"};","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"nnublcCk\",\"checkBox\":\"fjE0wGvw\",\"checkBoxDescription\":\"tepUTe4z\",\"upgradeIcon\":\"lgyInH5K\",\"header\":\"p7FTs7_p\",\"title\":\"pIbzzTir\",\"description\":\"CCPfr26t\",\"soldOut\":\"kjWcRp4W\",\"headerSplitButton\":\"XOMI_4PO\",\"headerButton\":\"WA0INleU\",\"giftResalePriceContainer\":\"BN8gf5y6\",\"starAmountIcon\":\"_5guecUe\",\"giftResalePriceStar\":\"H_q8o2vY\",\"left\":\"aOhTHZlf\",\"right\":\"rJOB1u5Q\",\"footer\":\"bho0GTYt\",\"footerDescription\":\"VUylTszM\",\"unknown\":\"zDauXmpS\",\"giftValue\":\"w_E4LkUj\",\"uniqueAttribute\":\"OJQnkf17\",\"uniqueGift\":\"I6o_pGAm\",\"modalHeader\":\"ie9tImaj\",\"modalCloseButton\":\"p38RBGdC\",\"ownerAddress\":\"DavMRg4Q\",\"copyIcon\":\"SLX5tX8C\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TtE8LQNJ\",\"minimal\":\"nkV4JXHc\",\"transition\":\"nXQS4E59\",\"main\":\"JuWZY1ds\",\"container\":\"mnhBs1uK\",\"section\":\"lYkNd_gb\",\"lastSection\":\"f749AI4g\",\"sectionTitle\":\"FF8gm7MP\",\"hint\":\"Rs8WXoOz\",\"tos\":\"Vu6blJk9\",\"topUpButton\":\"dc_DZoVF\",\"tonBalanceContainer\":\"lorbW9II\",\"tonBalance\":\"h2Fs3tOv\",\"tonIconBalance\":\"Ut6GidJP\",\"tonInUsd\":\"FdcdsB4l\",\"tonIconLogo\":\"_hCjjyEv\",\"description\":\"teXilLxe\",\"header\":\"fnhXotO2\",\"starHeaderText\":\"iUwego5s\",\"botItem\":\"AhxcrKWn\",\"hiddenHeader\":\"DZk6d6hF\",\"closeButton\":\"piD1PXHW\",\"addStarsButton\":\"dqnGL2uh\",\"addStarsIcon\":\"w9Db2eiK\",\"balanceBlock\":\"Yk0OQBKC\",\"balanceInfo\":\"p2dW9NOV\",\"smallerText\":\"rUnPcfmE\",\"balanceBottom\":\"F5BTkZ9G\",\"modalBalance\":\"t8tMrx3y\",\"starButton\":\"oOt4VBD2\",\"paymentContent\":\"OReEUNTV\",\"paymentImages\":\"oKorQYTC\",\"paymentPhoto\":\"HGTrEtUF\",\"avatarStar\":\"Wu10dXoa\",\"paymentImageBackground\":\"os8jb_qv\",\"paymentButton\":\"VzR5cibf\",\"paymentButtonStar\":\"Uhg7yWxK\",\"transactions\":\"Qvc0fTTH\",\"subscriptions\":\"IX5BhCUF\",\"tabs\":\"KZVEyKOX\",\"disclaimer\":\"bpVifdwH\",\"amountBadge\":\"BPM7LKwo\",\"loadMore\":\"TKmZjMyd\",\"loadMoreIcon\":\"buepwtN1\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KLFLR9ji\",\"thumb\":\"fCL5rY2D\"};","import React from '@teact';\nimport type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiEmojiStatusType,\n  ApiPeer,\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../../config';\nimport { getHasAdminRight } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat, isApiPeerUser } from '../../../../global/helpers/peers';\nimport { getMainUsername } from '../../../../global/helpers/users';\nimport { selectPeer, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../../util/clipboard';\nimport { formatDateTimeToString } from '../../../../util/dates/dateFormat';\nimport {\n  formatStarsAsIcon, formatStarsAsText, formatTonAsIcon, formatTonAsText,\n} from '../../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../../util/objects/customPeer';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatPercent } from '../../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Avatar from '../../../common/Avatar';\nimport BadgeButton from '../../../common/BadgeButton';\nimport GiftMenuItems from '../../../common/gift/GiftMenuItems';\nimport GiftTransferPreview from '../../../common/gift/GiftTransferPreview';\nimport Icon from '../../../common/icons/Icon';\nimport SafeLink from '../../../common/SafeLink';\nimport Button from '../../../ui/Button';\nimport Checkbox from '../../../ui/Checkbox';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport DropdownMenu from '../../../ui/DropdownMenu';\nimport Link from '../../../ui/Link';\nimport TableInfoModal, { type TableData } from '../../common/TableInfoModal';\nimport UniqueGiftHeader from '../UniqueGiftHeader';\n\nimport styles from './GiftInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftInfoModal'];\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  targetPeer?: ApiPeer;\n  releasedByPeer?: ApiPeer;\n  currentUserId?: string;\n  starGiftMaxConvertPeriod?: number;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n  tonExplorerUrl?: string;\n  currentUser?: ApiUser;\n  recipientPeer?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst GiftInfoModal = ({\n  modal,\n  fromPeer,\n  targetPeer,\n  releasedByPeer,\n  currentUserId,\n  starGiftMaxConvertPeriod,\n  hasAdminRights,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n  tonExplorerUrl,\n  currentUser,\n  recipientPeer,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftInfoModal,\n    changeGiftVisibility,\n    convertGiftToStars,\n    openChatWithInfo,\n    focusMessage,\n    openGiftUpgradeModal,\n    showNotification,\n    buyStarGift,\n    closeGiftModal,\n  } = getActions();\n\n  const [isConvertConfirmOpen, openConvertConfirm, closeConvertConfirm] = useFlag();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState<boolean>(false);\n  const [shouldPayInTon, setShouldPayInTon] = useState<boolean>(false);\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const renderingFromPeer = useCurrentOrPrev(fromPeer);\n  const renderingTargetPeer = useCurrentOrPrev(targetPeer);\n\n  const isTargetChat = renderingTargetPeer && isApiPeerChat(renderingTargetPeer);\n\n  const { gift: typeGift } = renderingModal || {};\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const isSender = savedGift?.fromId === currentUserId;\n  const canConvertDifference = (savedGift && starGiftMaxConvertPeriod && (\n    savedGift.date + starGiftMaxConvertPeriod - getServerTime()\n  )) || 0;\n  const conversionLeft = Math.ceil(canConvertDifference / 60 / 60 / 24);\n\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n  const giftSticker = gift && getStickerFromGift(gift);\n  const hasConvertOption = canConvertDifference > 0 && Boolean(savedGift?.starsToConvert);\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const uniqueGift = isGiftUnique ? gift : undefined;\n\n  const giftSubtitle = useMemo(() => {\n    if (!gift || gift.type !== 'starGiftUnique') return undefined;\n\n    if (releasedByPeer) {\n      const releasedByUsername = `@${getMainUsername(releasedByPeer)}`;\n      const ownerTitle = releasedByUsername || getPeerTitle(lang, releasedByPeer);\n      const fallbackText = isApiPeerUser(releasedByPeer)\n        ? lang('ActionFallbackUser')\n        : lang('ActionFallbackChannel');\n\n      return lang('GiftInfoCollectibleBy', {\n        number: gift.number, owner: ownerTitle || fallbackText }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('GiftInfoCollectible', { number: gift.number });\n  }, [gift, releasedByPeer, lang]);\n\n  const canFocusUpgrade = Boolean(savedGift?.upgradeMsgId);\n  const canManage = !canFocusUpgrade && savedGift?.inputGift && (\n    isTargetChat ? hasAdminRights : renderingTargetPeer?.id === currentUserId\n  );\n\n  function getResalePrice(shouldPayInTon?: boolean) {\n    if (!isGiftUnique) return undefined;\n    const amounts = gift.resellPrice;\n    if (!amounts) return undefined;\n\n    if (gift?.resaleTonOnly || shouldPayInTon) {\n      return amounts.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return amounts.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }\n\n  const resellPrice = getResalePrice();\n  const confirmPrice = getResalePrice(shouldPayInTon);\n  const canBuyGift = gift?.type === 'starGiftUnique' && gift.ownerId !== currentUserId && Boolean(resellPrice);\n\n  const giftOwnerTitle = (() => {\n    if (!isGiftUnique) return undefined;\n    const { ownerName, ownerId } = gift;\n    const global = getGlobal(); // Peer titles do not need to be reactive\n    const owner = ownerId ? selectPeer(global, ownerId) : undefined;\n    return owner ? getPeerTitle(lang, owner) : ownerName;\n  })();\n\n  const handleClose = useLastCallback(() => {\n    closeGiftInfoModal();\n  });\n\n  const handleFocusUpgraded = useLastCallback(() => {\n    const giftChat = isSender ? renderingTargetPeer : renderingFromPeer;\n    if (!savedGift?.upgradeMsgId || !giftChat) return;\n    const { upgradeMsgId } = savedGift;\n    focusMessage({ chatId: giftChat.id, messageId: upgradeMsgId });\n    handleClose();\n  });\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n    handleClose();\n  });\n\n  const handleConvertToStars = useLastCallback(() => {\n    const { inputGift } = savedGift!;\n    convertGiftToStars({ gift: inputGift! });\n    closeConvertConfirm();\n    handleClose();\n  });\n\n  const handleOpenUpgradeModal = useLastCallback(() => {\n    if (!savedGift) return;\n    openGiftUpgradeModal({ giftId: savedGift.gift.id, gift: savedGift });\n  });\n\n  const handleBuyGift = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !getResalePrice()) return;\n    setIsConfirmModalOpen(true);\n  });\n\n  const closeConfirmModal = useLastCallback(() => {\n    setIsConfirmModalOpen(false);\n  });\n\n  const handleConfirmBuyGift = useLastCallback(() => {\n    const peer = recipientPeer || currentUser;\n    const price = getResalePrice(shouldPayInTon);\n    if (!peer || !price || gift?.type !== 'starGiftUnique') return;\n    closeConfirmModal();\n    closeGiftModal();\n    buyStarGift({ peerId: peer.id, slug: gift.slug, price });\n  });\n\n  const giftAttributes = useMemo(() => {\n    return gift && getGiftAttributes(gift);\n  }, [gift]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isMenuOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger }) => (\n      <div\n        className={buildClassName(\n          styles.headerButton,\n          styles.left,\n        )}\n        tabIndex={0}\n        role=\"button\"\n        aria-haspopup=\"menu\"\n        aria-label={lang('AriaMoreButton')}\n        onClick={onTrigger}\n      >\n        <Icon\n          name=\"more\"\n          className={styles.icon}\n        />\n      </div>\n    );\n  }, [lang]);\n\n  const renderFooterButton = useLastCallback(() => {\n    if (canBuyGift) {\n      return (\n        <Button noForcedUpperCase size=\"smaller\" onClick={handleBuyGift}>\n          {lang('ButtonBuyGift', {\n            stars: resellPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, resellPrice?.amount, { asFont: true }),\n          }, { withNodes: true })}\n        </Button>\n      );\n    }\n\n    if (canFocusUpgrade) {\n      return (\n        <Button size=\"smaller\" onClick={handleFocusUpgraded}>\n          {lang('GiftInfoViewUpgraded')}\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift?.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgradeForFree')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    if (canManage && savedGift.canUpgrade && !savedGift.upgradeMsgId) {\n      return (\n        <Button size=\"smaller\" isShiny onClick={handleOpenUpgradeModal}>\n          {lang('GiftInfoUpgrade')}\n          <Icon name=\"arrow-down-circle\" className={styles.upgradeIcon} />\n        </Button>\n      );\n    }\n\n    return (\n      <Button size=\"smaller\" onClick={handleClose}>\n        {lang('OK')}\n      </Button>\n    );\n  });\n\n  const saleDateInfo = useMemo(() => {\n    if (!gift) return undefined;\n    let text = '';\n    if (gift.type === 'starGift') {\n      if (gift.firstSaleDate) {\n        text += `${lang('GiftInfoFirstSale')} ${formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true)}`;\n      }\n      if (gift.lastSaleDate) {\n        text += '\\n';\n        text += `${lang('GiftInfoLastSale')} ${formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true)}`;\n      }\n    }\n\n    return text;\n  }, [gift, lang]);\n\n  const modalData = useMemo(() => {\n    if (!typeGift || !gift) {\n      return undefined;\n    }\n\n    const {\n      fromId, isNameHidden, starsToConvert, isUnsaved, isConverted, upgradeMsgId,\n    } = savedGift || {};\n    const canConvert = hasConvertOption && Boolean(starsToConvert);\n\n    const isVisibleForMe = isNameHidden && renderingTargetPeer;\n\n    const description = (() => {\n      if (!savedGift) return lang('GiftInfoSoldOutDescription');\n      if (isTargetChat) return undefined;\n\n      if (savedGift.upgradeMsgId) return lang('GiftInfoDescriptionUpgraded');\n      if (canManage && savedGift.canUpgrade && savedGift.alreadyPaidUpgradeStars && !savedGift.upgradeMsgId) {\n        return lang('GiftInfoDescriptionUpgrade');\n      }\n      if (savedGift.canUpgrade && canManage) {\n        return canManage\n          ? lang('GiftInfoDescriptionFreeUpgrade')\n          : lang('GiftInfoPeerDescriptionFreeUpgradeOut', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n      }\n      if (!canManage && !isSender) return undefined;\n      if (isConverted && canConvert) {\n        return canManage\n          ? lang('GiftInfoDescriptionConverted', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          })\n          : lang('GiftInfoPeerDescriptionOutConverted', {\n            amount: starsToConvert,\n            peer: getPeerTitle(lang, renderingTargetPeer!)!,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n      }\n\n      if (savedGift.canUpgrade && canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescriptionUpgrade', {\n            amount: starsToConvert,\n          }, {\n            pluralValue: starsToConvert,\n            withNodes: true,\n            withMarkdown: true,\n          });\n        }\n\n        return lang('GiftInfoDescriptionUpgradeRegular');\n      }\n\n      if (canManage) {\n        if (canConvert) {\n          return lang('GiftInfoDescription', {\n            amount: starsToConvert,\n          }, {\n            withNodes: true,\n            withMarkdown: true,\n            pluralValue: starsToConvert,\n          });\n        }\n\n        return lang('GiftInfoDescriptionRegular');\n      }\n\n      if (canConvert) {\n        return lang('GiftInfoPeerDescriptionOut', {\n          amount: starsToConvert,\n          peer: getPeerTitle(lang, renderingTargetPeer!)!,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n          pluralValue: starsToConvert,\n        });\n      }\n\n      return lang('GiftInfoPeerDescriptionOutRegular', { peer: getPeerTitle(lang, renderingTargetPeer!)! });\n    })();\n\n    function getTitle() {\n      if (isGiftUnique) return gift.title;\n      if (!savedGift) return lang('GiftInfoSoldOutTitle');\n\n      return canManage ? lang('GiftInfoReceived') : lang('GiftInfoTitle');\n    }\n\n    const uniqueGiftContextMenu = (\n      <DropdownMenu\n        className=\"with-menu-transitions\"\n        trigger={SettingsMenuButton}\n        positionX=\"right\"\n      >\n        <GiftMenuItems\n          peerId={renderingModal!.peerId!}\n          gift={typeGift}\n          canManage={canManage}\n          collectibleEmojiStatuses={collectibleEmojiStatuses}\n          currentUserEmojiStatus={currentUserEmojiStatus}\n        />\n      </DropdownMenu>\n    );\n\n    const uniqueGiftModalHeader = (\n      <div\n        className={styles.modalHeader}\n      >\n        {Boolean(resellPrice?.amount) && (\n          <div className={styles.giftResalePriceContainer}>\n            {resellPrice.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, resellPrice.amount, {\n                className: styles.giftResalePriceStar,\n                shouldConvertFromNanos: true,\n              })\n              : formatStarsAsIcon(lang, resellPrice.amount, {\n                asFont: true,\n                className: styles.giftResalePriceStar,\n              })}\n          </div>\n        )}\n        <div className={styles.headerSplitButton}>\n          {isOpen && uniqueGiftContextMenu}\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon\n              name=\"close\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n\n    const uniqueGiftHeader = isGiftUnique && (\n      <div className={buildClassName(styles.header, styles.uniqueGift)}>\n        <UniqueGiftHeader\n          backdropAttribute={giftAttributes!.backdrop!}\n          patternAttribute={giftAttributes!.pattern!}\n          modelAttribute={giftAttributes!.model!}\n          title={gift.title}\n          subtitle={giftSubtitle}\n          subtitlePeer={releasedByPeer}\n        />\n      </div>\n    );\n\n    const regularHeader = (\n      <div className={styles.header}>\n        <AnimatedIconFromSticker\n          className={styles.giftSticker}\n          sticker={giftSticker}\n          size={STICKER_SIZE}\n        />\n        <h1 className={styles.title}>\n          {getTitle()}\n        </h1>\n        {Boolean(description) && (\n          <p className={buildClassName(styles.description, !savedGift && gift?.type === 'starGift' && styles.soldOut)}>\n            {description}\n          </p>\n        )}\n      </div>\n    );\n\n    const tableData: TableData = [];\n    if (gift.type === 'starGift') {\n      const hasFrom = fromId || isNameHidden;\n\n      if (hasFrom) {\n        tableData.push([\n          lang('GiftInfoFrom'),\n          !fromId ? (\n            <>\n              <Avatar size=\"small\" peer={CUSTOM_PEER_HIDDEN} />\n              <span className={styles.unknown}>{oldLang(CUSTOM_PEER_HIDDEN.titleKey!)}</span>\n            </>\n          ) : { chatId: fromId },\n        ]);\n      }\n\n      if (savedGift?.date) {\n        tableData.push([\n          lang('GiftInfoDate'),\n          <span title={saleDateInfo}>{formatDateTimeToString(savedGift.date * 1000, lang.code, true)}</span>,\n        ]);\n      }\n\n      if (gift.firstSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoFirstSale'),\n          formatDateTimeToString(gift.firstSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      if (gift.lastSaleDate && !savedGift) {\n        tableData.push([\n          lang('GiftInfoLastSale'),\n          formatDateTimeToString(gift.lastSaleDate * 1000, lang.code, true),\n        ]);\n      }\n\n      const starsValue = gift.stars + (savedGift?.alreadyPaidUpgradeStars || 0);\n\n      tableData.push([\n        lang('GiftInfoValue'),\n        <div className={styles.giftValue}>\n          {formatStarsAsIcon(lang, starsValue, { className: styles.starAmountIcon })}\n          {canManage && hasConvertOption && Boolean(starsToConvert) && (\n            <BadgeButton onClick={openConvertConfirm}>\n              {lang('GiftInfoConvert', { amount: starsToConvert }, { pluralValue: starsToConvert })}\n            </BadgeButton>\n          )}\n        </div>,\n      ]);\n\n      if (gift.availabilityTotal) {\n        tableData.push([\n          lang('GiftInfoAvailability'),\n          lang('GiftInfoAvailabilityValue', {\n            count: gift.availabilityRemains || 0,\n            total: gift.availabilityTotal,\n          }, {\n            pluralValue: gift.availabilityRemains || 0,\n          }),\n        ]);\n      }\n\n      if (gift.upgradeStars && !upgradeMsgId) {\n        tableData.push([\n          lang('GiftInfoStatus'),\n          <div className={styles.giftValue}>\n            {lang('GiftInfoStatusNonUnique')}\n          </div>,\n        ]);\n      }\n\n      if (savedGift?.message) {\n        tableData.push([\n          undefined,\n          renderTextWithEntities(savedGift.message),\n        ]);\n      }\n    }\n\n    if (isGiftUnique) {\n      const { ownerName, ownerAddress, ownerId } = gift;\n      const ownerPeer = ownerId ? selectPeer(getGlobal(), ownerId) : undefined;\n      const {\n        model, backdrop, pattern, originalDetails,\n      } = giftAttributes || {};\n\n      if (ownerAddress) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          <span\n            className={styles.ownerAddress}\n            onClick={() => {\n              copyTextToClipboard(ownerAddress);\n              showNotification({\n                message: { key: 'WalletAddressCopied' },\n                icon: 'copy',\n              });\n            }}\n          >\n            {ownerAddress}\n            <Icon className={styles.copyIcon} name=\"copy\" />\n          </span>,\n        ]);\n      } else if (ownerPeer || ownerName) {\n        tableData.push([\n          lang('GiftInfoOwner'),\n          ownerId ? { chatId: ownerId, withEmojiStatus: true } : ownerName || '',\n        ]);\n      }\n\n      if (model) {\n        tableData.push([\n          lang('GiftAttributeModel'),\n          <span className={styles.uniqueAttribute}>\n            {model.name}\n            <BadgeButton>{formatPercent(model.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (backdrop) {\n        tableData.push([\n          lang('GiftAttributeBackdrop'),\n          <span className={styles.uniqueAttribute}>\n            {backdrop.name}\n            <BadgeButton>{formatPercent(backdrop.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      if (pattern) {\n        tableData.push([\n          lang('GiftAttributeSymbol'),\n          <span className={styles.uniqueAttribute}>\n            {pattern.name}\n            <BadgeButton>{formatPercent(pattern.rarityPercent)}</BadgeButton>\n          </span>,\n        ]);\n      }\n\n      tableData.push([\n        lang('GiftInfoAvailability'),\n        lang('GiftInfoIssued', {\n          issued: gift.issuedCount,\n          total: gift.totalCount,\n        }),\n      ]);\n\n      if (originalDetails) {\n        const {\n          date, recipientId, message, senderId,\n        } = originalDetails;\n        const global = getGlobal(); // Peer titles do not need to be reactive\n\n        const openChat = (id: string) => {\n          openChatWithInfo({ id });\n          closeGiftInfoModal();\n        };\n\n        const recipient = selectPeer(global, recipientId)!;\n        const sender = senderId ? selectPeer(global, senderId) : undefined;\n\n        const formattedDate = formatDateTimeToString(date * 1000, lang.code, true);\n        const recipientLink = (\n          <Link onClick={() => openChat(recipientId)} isPrimary>\n            {getPeerTitle(lang, recipient)}\n          </Link>\n        );\n\n        let text: TeactNode | undefined;\n        if (!sender || senderId === recipientId) {\n          text = message ? lang('GiftInfoPeerOriginalInfoText', {\n            peer: recipientLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfo', {\n            peer: recipientLink,\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          });\n        } else {\n          const senderLink = (\n            <Link onClick={() => openChat(sender.id)} isPrimary>\n              {getPeerTitle(lang, sender)}\n            </Link>\n          );\n          text = message ? lang('GiftInfoPeerOriginalInfoTextSender', {\n            peer: recipientLink,\n            sender: senderLink,\n            text: renderTextWithEntities(message),\n            date: formattedDate,\n          }, {\n            withNodes: true,\n          }) : lang('GiftInfoPeerOriginalInfoSender', {\n            peer: recipientLink,\n            date: formattedDate,\n            sender: senderLink,\n          }, {\n            withNodes: true,\n          });\n        }\n\n        tableData.push([\n          undefined,\n          <span>{text}</span>,\n        ]);\n      }\n    }\n\n    const tonLink = tonExplorerUrl && isGiftUnique && gift.giftAddress && (\n      `${tonExplorerUrl}${gift.giftAddress}`\n    );\n\n    const footer = (\n      <div className={styles.footer}>\n        {(canManage || tonLink || canBuyGift) && (\n          <div className={styles.footerDescription}>\n            {tonLink && (\n              <div>\n                {lang('GiftInfoTonText', {\n                  link: <SafeLink url={tonLink} shouldSkipModal text={lang('GiftInfoTonLinkText')} />,\n                }, { withNodes: true })}\n              </div>\n            )}\n            {canManage && (\n              <div>\n                {lang(`GiftInfo${isTargetChat ? 'Channel' : ''}${isUnsaved ? 'Hidden' : 'Saved'}`, {\n                  link: (\n                    <Link isPrimary onClick={handleTriggerVisibility}>\n                      {lang(`GiftInfoSaved${isUnsaved ? 'Show' : 'Hide'}`)}\n                    </Link>\n                  ),\n                }, {\n                  withNodes: true,\n                })}\n              </div>\n            )}\n            {!canBuyGift && isVisibleForMe && (\n              <div>\n                {lang('GiftInfoSenderHidden')}\n              </div>\n            )}\n            {canBuyGift && giftOwnerTitle && (\n              <div>\n                {lang('GiftInfoBuyGift', {\n                  user: giftOwnerTitle,\n                }, { withNodes: true })}\n              </div>\n            )}\n          </div>\n        )}\n        {renderFooterButton()}\n      </div>\n    );\n\n    return {\n      modalHeader: isGiftUnique ? uniqueGiftModalHeader : undefined,\n      header: isGiftUnique ? uniqueGiftHeader : regularHeader,\n      tableData,\n      footer,\n    };\n  }, [\n    typeGift, savedGift, renderingTargetPeer, giftSticker, lang,\n    canManage, hasConvertOption, isSender, oldLang, tonExplorerUrl,\n    gift, giftAttributes, renderFooterButton, isTargetChat,\n    SettingsMenuButton, isGiftUnique, renderingModal,\n    collectibleEmojiStatuses, currentUserEmojiStatus, saleDateInfo,\n    canBuyGift, giftOwnerTitle, isOpen, resellPrice, giftSubtitle,\n    releasedByPeer,\n  ]);\n\n  return (\n    <>\n      <TableInfoModal\n        isOpen={isOpen}\n        modalHeader={modalData?.modalHeader}\n        header={modalData?.header}\n        hasBackdrop={isGiftUnique}\n        tableData={modalData?.tableData}\n        footer={modalData?.footer}\n        className={styles.modal}\n        onClose={handleClose}\n        withBalanceBar={Boolean(canBuyGift)}\n        currencyInBalanceBar={confirmPrice?.currency}\n        isLowStackPriority\n      />\n      {uniqueGift && currentUser && Boolean(confirmPrice) && (\n        <ConfirmDialog\n          isOpen={isConfirmModalOpen}\n          noDefaultTitle\n          onClose={closeConfirmModal}\n          confirmLabel={lang('ButtonBuyGift', {\n            stars: confirmPrice?.currency === TON_CURRENCY_CODE\n              ? formatTonAsIcon(lang, confirmPrice.amount, { shouldConvertFromNanos: true })\n              : formatStarsAsIcon(lang, confirmPrice.amount, { asFont: true }),\n          }, { withNodes: true })}\n          confirmHandler={handleConfirmBuyGift}\n        >\n\n          <GiftTransferPreview\n            peer={recipientPeer || currentUser}\n            gift={uniqueGift}\n          />\n          {!recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {recipientPeer\n            && (\n              <p>\n                {lang('GiftBuyForPeerConfirmDescription', {\n                  gift: lang('GiftUnique', { title: uniqueGift.title, number: uniqueGift.number }),\n                  stars: confirmPrice?.currency === TON_CURRENCY_CODE\n                    ? formatTonAsText(lang, confirmPrice.amount, true)\n                    : formatStarsAsText(lang, confirmPrice.amount),\n                  peer: getPeerTitle(lang, recipientPeer),\n                }, {\n                  withNodes: true,\n                  withMarkdown: true,\n                })}\n              </p>\n            )}\n          {!uniqueGift.resaleTonOnly && (\n            <>\n              <Checkbox\n                className={styles.checkBox}\n                label={lang('LabelPayInTON')}\n                checked={shouldPayInTon}\n                onCheck={setShouldPayInTon}\n              />\n\n              <div className={styles.checkBoxDescription}>\n                {lang('DescriptionPayInTON')}\n              </div>\n            </>\n          )}\n        </ConfirmDialog>\n      )}\n      {savedGift && (\n        <ConfirmDialog\n          isOpen={isConvertConfirmOpen}\n          onClose={closeConvertConfirm}\n          confirmHandler={handleConvertToStars}\n          title={lang('GiftInfoConvertTitle')}\n        >\n          <div>\n            {lang('GiftInfoPeerConvertDescription', {\n              amount: formatStarsAsText(lang, savedGift.starsToConvert!),\n              peer: getPeerTitle(lang, renderingFromPeer!)!,\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            })}\n          </div>\n          {hasConvertOption && (\n            <div>\n              {lang('GiftInfoConvertDescriptionPeriod', {\n                count: conversionLeft,\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: conversionLeft,\n              })}\n            </div>\n          )}\n          <div>{lang('GiftInfoConvertDescription2')}</div>\n        </ConfirmDialog>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const typeGift = modal?.gift;\n    const isSavedGift = typeGift && 'gift' in typeGift;\n    const currentUserId = global.currentUserId;\n\n    const fromId = isSavedGift && typeGift.fromId;\n    const fromPeer = fromId ? selectPeer(global, fromId) : undefined;\n    const targetPeer = modal?.peerId ? selectPeer(global, modal.peerId) : undefined;\n    const chat = targetPeer && isApiPeerChat(targetPeer) ? targetPeer : undefined;\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n    const currentUser = selectUser(global, currentUserId!);\n    const recipientPeer = modal?.recipientId && currentUserId !== modal.recipientId\n      ? selectPeer(global, modal.recipientId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    const gift = isSavedGift ? typeGift.gift : typeGift;\n    const releasedByPeerId = gift?.type === 'starGiftUnique' && gift.releasedByPeerId;\n    const releasedByPeer = releasedByPeerId ? selectPeer(global, releasedByPeerId) : undefined;\n\n    return {\n      fromPeer,\n      targetPeer,\n      releasedByPeer,\n      currentUserId,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n      tonExplorerUrl: global.appConfig?.tonExplorerUrl,\n      hasAdminRights,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n      currentUser,\n      recipientPeer,\n    };\n  },\n)(GiftInfoModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"footer\":\"EWaVCxY4\",\"footerButton\":\"_Dt6RSQV\"};","import React from '@teact';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiStarGift,\n} from '../../../api/types';\nimport type { ResaleGiftsFilterOptions } from '../../../types';\n\nimport { RESALE_GIFTS_LIMIT } from '../../../config';\nimport { selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Transition from '../../ui/Transition';\nimport GiftItemStar from './GiftItemStar';\n\nimport styles from './GiftModal.module.scss';\n\nexport type OwnProps = {\n  onGiftClick: (gift: ApiStarGift) => void;\n};\n\ntype StateProps = {\n  gift?: ApiStarGift;\n  resellGifts?: ApiStarGift[];\n  filter: ResaleGiftsFilterOptions;\n  areGiftsAllLoaded?: boolean;\n  areGiftsLoading?: boolean;\n  updateIteration: number;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst GiftModalResaleScreen: FC<OwnProps & StateProps> = ({\n  resellGifts,\n  gift,\n  filter,\n  areGiftsAllLoaded,\n  areGiftsLoading,\n  updateIteration,\n  onGiftClick,\n}) => {\n  const {\n    loadResaleGifts,\n    updateResaleGiftsFilter,\n  } = getActions();\n  const scrollerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const resellGiftsIds = useMemo(() => {\n    return resellGifts?.map((g) => g.id);\n  }, [resellGifts]);\n\n  const hasFilter = Boolean(filter?.modelAttributes?.length\n    || filter?.patternAttributes?.length || filter?.backdropAttributes?.length);\n\n  const handleLoadMoreResellGifts = useLastCallback(() => {\n    if (gift) {\n      loadResaleGifts({ giftId: gift.id });\n    }\n  });\n\n  const isGiftsEmpty = Boolean(!resellGifts || resellGifts.length === 0);\n\n  const [viewportIds, onLoadMore] = useInfiniteScroll(\n    handleLoadMoreResellGifts,\n    resellGiftsIds,\n    !gift,\n    RESALE_GIFTS_LIMIT,\n  );\n\n  const { observe } = useIntersectionObserver({ rootRef: scrollerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    updateResaleGiftsFilter({ filter: {\n      ...filter,\n      modelAttributes: [],\n      backdropAttributes: [],\n      patternAttributes: [],\n    } });\n  });\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className={styles.notFoundGiftsRoot}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className={styles.notFoundGiftsDescription}>\n          {lang('ResellGiftsNoFound')}\n        </div>\n        {hasFilter && (\n          <Link\n            className={styles.notFoundGiftsLink}\n            onClick={handleResetGiftsFilter}\n          >\n            {lang('ResellGiftsClearFilters')}\n          </Link>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div ref={scrollerRef} className={buildClassName(styles.resaleScreenRoot, 'custom-scroll')}>\n      <Transition\n        name=\"zoomFade\"\n        activeKey={updateIteration}\n      >\n        {isGiftsEmpty && areGiftsAllLoaded && renderNothingFoundGiftsWithFilter()}\n        <InfiniteScroll\n          className={buildClassName(styles.resaleStarGiftsContainer)}\n          items={viewportIds}\n          onLoadMore={onLoadMore}\n          itemSelector=\".starGiftItem\"\n          noFastList\n          preloadBackwards={RESALE_GIFTS_LIMIT}\n          scrollContainerClosest={`.${styles.resaleScreenRoot}`}\n        >\n          {resellGifts?.map((gift) => (\n            <GiftItemStar\n              key={gift.id}\n              gift={gift}\n              observeIntersection={observe}\n              isResale\n              onClick={onGiftClick}\n            />\n          ))}\n        </InfiniteScroll>\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    starGifts,\n  } = global;\n\n  const { resaleGifts } = selectTabState(global);\n  const gift = resaleGifts?.giftId ? starGifts?.byId[resaleGifts.giftId] : undefined;\n  const filter = resaleGifts.filter;\n  const areGiftsAllLoaded = resaleGifts.isAllLoaded;\n  const areGiftsLoading = resaleGifts.isLoading;\n  const updateIteration = resaleGifts.updateIteration;\n\n  return {\n    resellGifts: resaleGifts.gifts,\n    gift,\n    filter,\n    areGiftsAllLoaded,\n    areGiftsLoading,\n    updateIteration,\n  };\n})(GiftModalResaleScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"checkBoxDescription\":\"pWjQiY4m\",\"inputPriceDescription\":\"SGFmA4kL\",\"checkBox\":\"yt_nODdj\",\"descriptionPrice\":\"r9R0VR_w\",\"inputPrice\":\"ElDo1Bru\"};","import React from '@teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../../api/types';\nimport type { TabState } from '../../../../global/types';\n\nimport { selectIsCurrentUserPremium, selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\n\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useCustomEmoji from '../../../common/hooks/useCustomEmoji';\n\nimport Avatar from '../../../common/Avatar';\nimport FullNameTitle from '../../../common/FullNameTitle';\nimport Icon from '../../../common/icons/Icon';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Button from '../../../ui/Button';\nimport TableAboutModal, { type TableAboutData } from '../../common/TableAboutModal';\n\nimport styles from './GiftStatusInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['giftStatusInfoModal'];\n};\n\ntype StateProps = {\n  currentUser: ApiUser;\n  isCurrentUserPremium?: boolean;\n};\n\nconst GiftStatusInfoModal = ({\n  modal,\n  currentUser,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftStatusInfoModal,\n    setEmojiStatus,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const { emojiStatus } = renderingModal || {};\n\n  const subtitleColor = emojiStatus?.textColor;\n\n  const patternIcon = useCustomEmoji(emojiStatus?.patternDocumentId);\n\n  const handleClose = useLastCallback(() => {\n    closeGiftStatusInfoModal();\n  });\n\n  const onWearClick = useLastCallback(() => {\n    if (emojiStatus) {\n      setEmojiStatus({ emojiStatus });\n    }\n    closeGiftStatusInfoModal();\n  });\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!emojiStatus || !isOpen) return undefined;\n\n    const backdropColors = [emojiStatus.centerColor, emojiStatus.edgeColor];\n    const patternColor = emojiStatus.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={patternIcon.customEmoji}\n      />\n    );\n  }, [emojiStatus, isOpen, patternIcon]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    return {\n      ...currentUser,\n      emojiStatus,\n    } satisfies ApiUser;\n  }, [currentUser, emojiStatus]);\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <div\n          className={buildClassName(styles.profileBlock)}\n          style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}\n        >\n\n          {radialPatternBackdrop}\n          <Avatar peer={mockPeerWithStatus} size=\"jumbo\" className={styles.avatar} />\n          <FullNameTitle\n            peer={mockPeerWithStatus}\n            className={styles.userTitle}\n            withEmojiStatus\n            noFake\n            noVerified\n            statusSparklesColor={subtitleColor}\n          />\n          <p className={styles.status} style={buildStyle(subtitleColor && `color: ${subtitleColor}`)}>\n            {lang('Online')}\n          </p>\n        </div>\n        <div className={styles.titleContainer}>\n          <div className={styles.giftTitle}>\n            {\n              lang('UniqueStatusWearTitle', {\n                gift: mockPeerWithStatus?.emojiStatus?.title,\n              })\n            }\n          </div>\n          <div className={styles.infoDescription}>\n            {\n              lang('UniqueStatusBenefitsDescription')\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }, [subtitleColor, radialPatternBackdrop, mockPeerWithStatus, lang]);\n\n  const listItemData = [\n    ['radial-badge', lang('UniqueStatusBadgeBenefitTitle'), lang('UniqueStatusBadgeDescription')],\n    ['unique-profile', lang('UniqueStatusProfileDesignBenefitTitle'), lang('UniqueStatusProfileDesignDescription')],\n    ['proof-of-ownership', lang('UniqueStatusProofOfOwnershipBenefitTitle'),\n      lang('UniqueStatusProofOfOwnershipDescription')],\n  ] satisfies TableAboutData;\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={onWearClick}\n        >\n          {lang('UniqueStatusWearButton')}\n          {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.lockIcon} />}\n        </Button>\n      </div>\n    );\n  }, [lang, isCurrentUserPremium, isOpen]);\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!)!;\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      currentUser,\n      isCurrentUserPremium,\n    };\n  },\n)(GiftStatusInfoModal));\n","import React from '@teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { StarGiftCategory } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\n\nimport styles from './StarGiftCategoryList.module.scss';\n\ntype OwnProps = {\n  onCategoryChanged: (category: StarGiftCategory) => void;\n};\n\ntype StateProps = {\n  idsByCategory?: Record<StarGiftCategory, string[]>;\n  areLimitedStarGiftsDisallowed?: boolean;\n};\n\nconst StarGiftCategoryList = ({\n  idsByCategory,\n  onCategoryChanged,\n  areLimitedStarGiftsDisallowed,\n}: StateProps & OwnProps) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n  const starCategories: number[] | undefined = useMemo(() => idsByCategory && Object.keys(idsByCategory)\n    .filter((category) => category !== 'all' && category !== 'limited')\n    .map(Number)\n    .sort((a, b) => a - b),\n  [idsByCategory]);\n\n  const hasResale = idsByCategory && idsByCategory['resale'].length > 0;\n\n  const [selectedCategory, setSelectedCategory] = useState<StarGiftCategory>('all');\n\n  function handleItemClick(category: StarGiftCategory) {\n    setSelectedCategory(category);\n    onCategoryChanged(\n      category,\n    );\n  }\n\n  function renderCategoryName(category: StarGiftCategory) {\n    if (category === 'all') return lang('AllGiftsCategory');\n    if (category === 'stock') return lang('StockGiftsCategory');\n    if (category === 'limited') return lang('LimitedGiftsCategory');\n    if (category === 'resale') return lang('GiftCategoryResale');\n    return category;\n  }\n\n  function renderCategoryItem(category: StarGiftCategory) {\n    return (\n      <div\n        className={buildClassName(\n          styles.item,\n          selectedCategory === category && styles.selectedItem,\n        )}\n        onClick={() => handleItemClick(category)}\n      >\n        {Number.isInteger(category) && (\n          <StarIcon\n            className={styles.star}\n            type=\"gold\"\n            size=\"middle\"\n          />\n        )}\n        {renderCategoryName(category)}\n      </div>\n    );\n  }\n\n  useHorizontalScroll(ref, undefined, true);\n\n  return (\n    <div ref={ref} className={buildClassName(styles.list, 'no-scrollbar')}>\n      {renderCategoryItem('all')}\n      {!areLimitedStarGiftsDisallowed && renderCategoryItem('limited')}\n      {!areLimitedStarGiftsDisallowed && hasResale && renderCategoryItem('resale')}\n      {renderCategoryItem('stock')}\n      {starCategories?.map(renderCategoryItem)}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { starGifts } = global;\n\n    return {\n      idsByCategory: starGifts?.idsByCategory,\n    };\n  },\n)(StarGiftCategoryList));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"MFXAwnxJ\",\"content\":\"Sl6xVf1R\",\"main\":\"bTN9Jeph\",\"headerInfo\":\"c6MiyJgW\",\"logo\":\"StGLWvzb\",\"logoBackground\":\"SyTXSfml\",\"description\":\"kFe3mIZo\",\"section\":\"BgfHkWd2\",\"header\":\"zMtAGfXs\",\"starHeaderText\":\"q3v8orGj\",\"hiddenHeader\":\"bq3FnXT0\",\"closeButton\":\"bDsDTkbe\",\"avatar\":\"jK36xUj4\",\"center\":\"v1PckUQn\",\"secondaryInfo\":\"TDWSRfP9\"};"],"names":["GIFT_STICKER_SIZE","GiftItemPremium","sticker","canPlayAnimatedEmojis","baseMonthAmount","option","optionByStars","onClick","months","amount","currency","lang","useLang","handleGiftClick","useLastCallback","perMonth","Math","floor","discount","ceil","undefined","React","className","styles","container","tabIndex","role","AnimatedIconFromSticker","play","noLoop","nonInteractive","size","caption","count","pluralValue","monthsDescription","renderMonths","description","Button","buy","pill","fluid","formatCurrencyAsString","starsPriceBlock","stars","formatStarsAsIcon","starsPriceIcon","withNodes","withMarkdown","Boolean","GiftRibbon","color","text","percent","memo","withGlobal","global","selectGiftStickerForDuration","selectCanPlayAnimatedEmojis","ChatRefundModal","modal","user","closeChatRefundModal","toggleNoPaidMessagesException","getActions","shouldRefundStars","setShouldRefundStars","useState","renderingModal","useCurrentOrPrev","renderingUser","starsToRefund","userId","isOpen","handleConfirmRemoveFee","shouldRefundCharged","ConfirmDialog","onClose","title","confirmLabel","confirmHandler","peer","getPeerTitle","Checkbox","label","formatStarsAsText","checked","onCheck","selectUser","AVATAR_SPARKLES_CENTER_SHIFT","StarsTransactionModal","topSticker","paidMessageCommission","showNotification","openMediaViewer","closeStarsTransactionModal","oldLang","useOldLang","transaction","triggerSparklesRef","useRef","handleOpenMedia","media","extendedMedia","origin","MediaViewerOrigin","StarsTransaction","standaloneMedia","flatMap","item","Object","values","handleAvatarMouseMove","current","handleRequestAnimation","animate","starModalData","useMemo","giveawayPostId","photo","isGiftUpgrade","starGift","isGiftResale","starRefCommision","gift","isUniqueGift","type","getStickerFromGift","giftAttributes","getGiftAttributes","customPeer","shouldUseCustomPeer","buildStarsTransactionCustomPeer","peerId","id","toName","getStarsPeerTitleKey","getTransactionTitle","messageLink","messageId","getMessageLink","giveawayMessageLink","mediaAmount","length","areAllPhotos","every","m","video","areAllVideos","mediaText","shouldDisplayAvatar","isPostsSearch","avatarPeer","uniqueGiftHeader","buildClassName","header","uniqueGift","UniqueGiftHeader","backdropAttribute","backdrop","patternAttribute","pattern","modelAttribute","model","subtitle","number","resellPrice","amountColorClass","isNegativeAmount","negative","positive","regularHeader","PaidMediaThumb","mediaPreview","key","Avatar","avatar","webPhoto","onMouseMove","InteractiveSparkles","starsBackground","onRequestAnimation","centerShift","formatStarsTransactionAmount","STARS_CURRENCY_CODE","StarIcon","Icon","name","isRefund","refunded","paidMessages","formatPercent","tableData","peerLabel","push","isMyGift","chatId","asFont","starIcon","containerClassName","totalStars","SafeLink","url","tid","copyTextToClipboard","message","copyIcon","formatDateTimeToString","date","code","footerTextParts","split","footer","renderingModalData","usePrevious","TableInfoModal","hasBackdrop","buttonText","selectPeer","appConfig","starsPaidMessageCommissionPermille","currencyAmount","starsGiftSticker","isGift","selectGiftStickerForStars","selectGiftStickerForTon","StarsSubscriptionModal","closeStarsSubscriptionModal","fulfillStarsSubscription","changeStarsSubscription","checkChatInvite","loadStarStatus","openInvoice","subscription","buttonState","canRefulfill","isActive","until","Date","now","isCancelled","canRestart","chatInviteHash","invoiceSlug","handleButtonClick","hash","slug","pricing","hasBotCancelled","isBotSubscription","isApiPeerUser","avatarWrapper","subscriptionStar","specialReplacement","STARS_ICON_PLACEHOLDER","amountStar","hasExpired","footerTos","link","secondary","danger","isText","useDebouncedMemo","resolverFn","ms","dependencies","value","setValue","isFrozen","updateWhenUnfrozen","isPending","useCallback","forceUpdate","useForceUpdate","handleUnfreeze","useHeavyAnimation","noop","getIsHeavyAnimating","useHeavyAnimationFreeze","runDebounced","useRunDebounced","useSyncEffect","DEBOUNCE_TIMEOUT","async","peerGlobalSearch","query","searchResult","callApi","accountResultIds","globalResultIds","usePeerSearch","queryFn","defaultValue","debounceTimeout","isDisabled","debouncedQuery","currentResultsQuery","setCurrentResultsQuery","searchQuery","queryCallback","useAsync","Promise","resolve","answer","GiftTransferModal","contactIds","currentUserId","closeGiftTransferModal","openGiftWithdrawModal","transferGift","setSearchQuery","selectedId","setSelectedId","renderingSelectedPeerId","renderingSelectedPeer","getGlobal","orderedChatIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","sortedLocalIds","unique","result","foundIds","isLoading","categories","MEMO_EMPTY_ARRAY","isCustomPeer","avatarIcon","peerColorId","handleCategoryChange","category","displayIds","sortChatIds","filter","selectCanGift","closeConfirmModal","useEffect","handleTransfer","inputGift","recipientId","transferStars","PickerModal","hasCloseButton","shouldAdaptToSearch","withFixedHeight","ignoreFreeze","PeerPicker","itemIds","onSelectedCategoryChange","withDefaultPadding","withPeerUsernames","isSearchable","noScrollRestore","filterValue","filterPlaceholder","onFilterChange","onSelectedIdChange","noDefaultTitle","GiftTransferPreview","contactList","userIds","FRAGMENT_PEER","customPeerAvatarColor","REM","GiftWithdrawModal","hasPassword","passwordHint","closeGiftWithdrawModal","clearGiftWithdrawError","closeGiftInfoModal","processStarGiftWithdrawal","openSettingsScreen","shouldShowPassword","setShouldShowPassword","exportDelay","canExportAt","max","getServerTime","handleClose","handleSubmit","password","handleSetUpPassword","screen","SettingsScreens","TwoFaDisabled","Modal","isSlim","giftPreview","RadialPatternBackground","backgroundColors","centerColor","edgeColor","patternColor","patternIcon","arrow","renderTextFilters","exportHint","days","getDays","noPassword","PasswordForm","shouldShowSubmit","placeholder","error","errorKey","withRegular","clearError","hint","isPasswordVisible","shouldResetValue","onChangePasswordVisibility","submitLabel","onSubmit","settings","byKey","twoFaSettings","MAX_TOP_REACTORS","DEFAULT_STARS_AMOUNT","MAX_REACTION_AMOUNT","ANONYMOUS_PEER","titleKey","PaidReactionModal","chat","maxAmount","starBalance","defaultPrivacy","sendPaidReactionsAsPeerIds","currentUser","closePaidReactionModal","addLocalPaidReaction","loadSendPaidReactionsAs","starsAmount","setStarsAmount","isTouched","markTouched","unmarkTouched","useFlag","shouldSendAsAnonymous","setShouldSendAsAnonymous","sendAsPeerId","setSendAsPeerId","senderPeer","isMobile","useAppLayout","handleShowInTopSendersChange","e","target","handleAmountChange","filteredMyReactorIds","map","unshift","canChangeSendAsPeer","currentReactor","reactions","topReactors","find","reactor","isMy","isAnonymous","includes","handleSend","isPrivate","shouldIgnoreDefaultPrivacy","handleSendAsPeerChange","renderMenuItem","isSelected","MenuItem","itemInfo","FullNameTitle","itemTitle","noFake","noVerified","itemSubtitle","itemIcon","SendAsPeerMenuButton","onTrigger","ripple","sendAsPeerMenuButton","ariaLabel","sendAsPeerButtonAvatar","buttonDownIcon","sendAsPeersMenu","DropdownMenu","sendAsPeerMenu","bubbleClassName","sendAsPeerMenuBubble","trigger","positionX","autoClose","all","hasCurrentSender","myReactorAmount","forEach","isCurrentReactor","localAmount","sender","sort","a","b","slice","chatTitle","hasAbsoluteCloseButton","contentClassName","content","isLowStackPriority","sendAsPeersMenuContainer","headerControlPanel","BalanceBlock","balance","modalBalance","withAddButton","StarSlider","slider","maxValue","onChange","renderText","Separator","topLabel","top","countText","formatInteger","PeerBadge","topPeer","badgeText","badgeIcon","badgeClassName","topBadge","separator","checkBox","buttonStar","disclaimer","selectChat","selectChatMessage","paidReactionMaxAmount","paidReactionPrivacy","ATTRIBUTE_STICKER_SIZE","ResaleGiftMenuAttributeSticker","observeIntersectionForLoading","observeIntersectionForPlaying","theme","stickerRef","customColor","useDynamicColorListener","ref","root","style","StickerView","containerRef","shouldPreloadPreview","thumbClassName","thumb","selectTheme","selectOptionalPeer","StarsTransactionItem","openStarsTransactionModal","transactionPeer","subscriptionPeriod","useSelector","giftSticker","data","status","subtitleKey","CUSTOM_PEER_PREMIUM","hasFailed","previewContent","uniqueGiftBackground","isTransactionPreview","handleClick","preview","info","star","TON_CURRENCY_CODE","LIMIT_DISPLAY_THRESHOLD","GiftComposer","giftByStars","captionLimit","isBackgroundBlurred","backgroundColor","customBackground","isPaymentFormLoading","paidMessagesStars","areUniqueStarGiftsDisallowed","shouldDisallowLimitedStarGifts","sendStarGift","sendPremiumGiftByStars","openGiftUpgradeModal","openStarsBalanceModal","giftMessage","setGiftMessage","shouldHideName","setShouldHideName","shouldPayForUpgrade","setShouldPayForUpgrade","shouldPayByStars","setShouldPayByStars","customBackgroundValue","useCustomBackground","isStarGift","isPremiumGift","hasPremiumByStars","isPeerUser","isSelf","localMessage","currentGift","isOutgoing","senderId","action","mediaType","isNameHidden","starsToConvert","canUpgrade","alreadyPaidUpgradeStars","upgradeStars","fromId","handleGiftMessageChange","handleShouldHideNameChange","handleShouldPayForUpgradeChange","toggleShouldPayByStars","handleOpenUpgradePreview","giftId","handleGetMoreStars","handleMainButtonClick","shouldUpgrade","canUseStarsPayment","bgClassName","background","withTransition","customBgImage","customBgColor","blurred","actionMessageView","inert","buildStyle","ActionMessage","threadId","MAIN_THREAD_ID","appearanceOrder","symbolsLeft","optionsSection","TextArea","messageInput","maxLength","maxLengthIndicator","toString","ListItem","switcher","narrow","switcherStarIcon","Switcher","Link","isPrimary","disabled","receiver","renderOptionsSection","spacer","formatCurrency","availabilityRemains","PremiumProgress","progress","availabilityTotal","rightText","leftText","limited","mainButton","renderFooter","isBlurred","selectThemeValues","selectPeerPaidMessagesStars","userFullInfo","selectUserFullInfo","isGiftForSelf","disallowedGifts","shouldDisallowUniqueStarGifts","tabState","selectTabState","starGiftMaxMessageLength","GiftItemStar","observeIntersection","isResale","isCurrentUserPremium","openGiftInfoModal","openPremiumModal","isVisible","setIsVisible","isHover","markHover","unmarkHover","isGiftUnique","regularGift","priceInfo","amounts","resaleTonOnly","tonAmount","getPriceAmount","priceCurrency","resellMinStars","priceInStarsAsString","isLimited","isSoldOut","isPremiumRequired","requirePremium","isUserLimitReached","limitedPerUser","perUserRemains","perUserTotal","radialPatternBackdrop","backdropColors","radialPattern","giftNumber","giftRibbon","useOnIntersect","entry","visible","isIntersecting","premiumRequired","onMouseEnter","IS_TOUCH_ENV","onMouseLeave","stickerWrapper","shouldLoop","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","selectIsCurrentUserPremium","GiftRecipientPicker","closeGiftRecipientPicker","openGiftModal","displayedUserIds","idsWithSelf","concat","filteredPeerIds","filterPeersByQuery","ids","handleSelectedUserIdsChange","forUserId","picker","withStatus","forceShowSelf","StarsGiftingPickerModal","activeListIds","archivedListIds","closeStarsGiftingPickerModal","openStarsGiftModal","usersById","users","byId","combinedIds","filteredUserIds","isSupport","isUserBot","isDeletedUser","SERVICE_NOTIFICATIONS_USER_ID","newSelectedId","confirmButtonText","onEnter","chats","listIds","active","archived","GiftResaleFilters","attributes","counters","dialogRef","updateResaleGiftsFilter","searchModelQuery","setSearchModelQuery","searchBackdropQuery","setSearchBackdropQuery","searchPatternQuery","setSearchPatternQuery","filteredAttributes","counter","attribute","found","attr","backdropId","documentId","filteredAndSearchedAttributes","filterBySearch","items","trim","toLowerCase","sortMenuRef","isContextMenuOpen","isSortContextMenuOpen","contextMenuAnchor","sortContextMenuAnchor","handleContextMenu","handleSortContextMenu","handleContextMenuClose","handleSortContextMenuClose","handleContextMenuHide","handleSortContextMenuHide","useContextMenuHandlers","getSortMenuElement","modelMenuRef","isModelContextMenuOpen","modelContextMenuAnchor","handleModelContextMenu","handleModelContextMenuClose","handleModelContextMenuHide","getModelMenuElement","backdropMenuRef","isBackdropContextMenuOpen","backdropContextMenuAnchor","handleBackdropContextMenu","handleBackdropContextMenuClose","handleBackdropContextMenuHide","getBackdropMenuElement","patternMenuRef","isPatternContextMenuOpen","patternContextMenuAnchor","handlePatternContextMenu","handlePatternContextMenuClose","handlePatternContextMenuHide","getPatternMenuElement","SortMenuButton","sortType","isMenuOpen","ModelMenuButton","attributesCount","modelAttributes","BackdropMenuButton","backdropAttributes","PatternMenuButton","patternAttributes","handleSortMenuItemClick","handleSelectedAllModelsClick","handleSelectedAllPatternsClick","handleSelectedAllBackdropsClick","handleModelMenuItemClick","updatedAttributes","some","handlePatternMenuItemClick","handleBackdropMenuItemClick","handleSearchModelInputReset","handleSearchBackdropInputReset","handleSearchPatternInputReset","handleSearchInputClick","stopPropagation","preventDefault","modelMenuItemsContainerRef","observe","useIntersectionObserver","rootRef","Menu","anchor","menu","left","getMenuElement","onCloseAnimationEnd","icon","menuItemText","menuItemIcon","models","selectedAttributes","isSelectedAll","menuContentContainer","SearchInput","search","onReset","menuItemStickerText","renderModelMenuItems","right","backdrops","backdropAttributeMenuItemText","renderBackdropMenuItems","patterns","renderPatternMenuItems","buttonsContainer","resaleGifts","AVATAR_SIZE","selectProvidedPeer","StarsSubscriptionItem","openStarsSubscriptionModal","formattedDate","formatDateToString","statusEnded","statusPricing","statusPeriod","isReaction","nanos","StarsGiftModal","closeStarsGiftModal","requestConfetti","selectedOption","setSelectedOption","isHeaderHidden","setHeaderHidden","showConfetti","dialog","width","height","querySelector","getBoundingClientRect","withStars","isCompleted","bottomText","parts","modalDialog","main","onScroll","scrollTop","currentTarget","round","closeButton","hiddenHeader","starHeaderText","headerInfo","logoBackground","src","StarsBackground","alt","draggable","logo","StarLogo","headerText","center","section","StarTopupOptionList","options","starsGiftOptions","secondaryInfo","TRANSACTION_TYPES","TRANSACTION_TABS_KEYS","TRANSACTION_ITEM_CLASS","SUBSCRIPTION_PURPOSE","StarsBalanceModal","starsBalanceState","tonBalanceState","canBuyPremium","shouldForceHeight","tonUsdRate","tonTopupUrl","animationLevel","closeStarsBalanceModal","loadStarsTransactions","loadStarsSubscriptions","openStarsGiftingPickerModal","openUrl","currentState","history","subscriptions","selectedTabIndex","setSelectedTabIndex","areBuyOptionsShown","showBuyOptions","hideBuyOptions","originStarsPayment","originReaction","originGift","topup","shouldOpenOnBuy","ongoingTransactionAmount","form","invoice","totalAmount","subscriptionInfo","subscriptionPricing","balanceNeeded","starsNeeded","starsNeededText","channel","getChatTitle","bot","botId","getUserFullName","purpose","PAID_MESSAGES_PURPOSE","shouldShowItems","transactions","shouldSuggestGifting","modalHeight","transactionCount","transactionTabs","tosText","handleLoadMoreTransactions","isTon","handleLoadMoreSubscriptions","openStarsGiftingPickerModalHandler","handleBuyStars","handleTonTopUp","shouldSkipModal","minimal","dialogStyle","renderTonHeaderSection","convertCurrencyFromBaseUnit","ParticlesHeader","tonBalanceContainer","tonBalance","tonIconBalance","tonInUsd","convertTonToUsd","topUpButton","starButton","noForcedUpperCase","topupOptions","tos","list","sectionTitle","nextOffset","loadMore","loadMoreIcon","lastSection","Transition","resolveTransitionName","isRtl","activeKey","renderCount","shouldRestoreHeight","transition","InfiniteScroll","onLoadMore","scrollContainerClosest","itemSelector","noFastList","noScrollRestoreOnTop","TabList","tabs","tabClassName","tab","activeTab","onSwitchTab","ton","selectIsPremiumPurchaseBlocked","TON_USD_RATE_DEFAULT","TON_TOPUP_URL_DEFAULT","selectSharedSettings","GiftResalePriceComposerModal","starsStargiftResaleCommissionPermille","starsStargiftResaleAmountMin","starsStargiftResaleAmountMax","starsUsdWithdrawRate","tonStargiftResaleCommissionPermille","tonStargiftResaleAmountMin","tonStargiftResaleAmountMax","closeGiftResalePriceComposerModal","updateStarGiftPrice","price","setPrice","isPriceInTon","setIsPriceInTon","typeGift","savedGift","hasPrice","handleChangePrice","parseFloat","Number","isNaN","min","handleSellGift","convertTonToNanos","variables","commission","minAmount","isPriceCorrect","inputPrice","InputText","inputMode","teactExperimentControlled","inputPriceDescription","formatTonAsText","priceWithCommission","toFixed","descriptionPrice","checkBoxDescription","configPermille","starsUsdWithdrawRateX1000","tonConfigPermille","convertTonFromNanos","maxTonFromConfig","INTERSECTION_THROTTLE","SCROLL_THROTTLE","runThrottledForScroll","throttle","cb","GiftModal","starGiftsById","starGiftIdsByCategory","resaleGiftsCount","areResaleGiftsLoading","closeGiftModal","resetResaleGifts","loadResaleGifts","transitionRef","giftHeaderRef","scrollerRef","isApiPeerChat","selectedGift","setSelectedGift","selectedResellGift","setSelectedResellGift","shouldShowMainScreenHeader","setShouldShowMainScreenHeader","isMainScreenHeaderForStarGifts","setIsMainScreenHeaderForStarGifts","isGiftScreenHeaderForStarGifts","setIsGiftScreenHeaderForStarGifts","selectedCategory","setSelectedCategory","areAllGiftsDisallowed","shouldDisallowPremiumGifts","disallowedGiftTypes","areUnlimitedStarGiftsDisallowed","shouldDisallowUnlimitedStarGifts","areLimitedStarGiftsDisallowed","allGifts","gifts","filteredGifts","prevGift","giftsByStars","mapGifts","Map","starsGift","set","baseGift","reduce","prev","throttleMs","isResaleScreen","isGiftScreen","shouldShowHeader","isHeaderForStarGifts","handleScroll","headerTop","transitionTop","giftPremiumDescription","starGiftDescription","forPeerId","onCategoryChanged","handleCloseModal","handleCloseButtonClick","isBackButton","buttonClassName","resaleHeader","slideClassName","headerSlide","isFirstLoading","resaleHeaderContentContainer","resaleHeaderText","resaleHeaderDescription","commonHeaderText","renderHeader","avatars","premiumGiftsGallery","get","starGiftsDescription","StarGiftCategoryList","starGiftsTransition","filteredGiftIds","starGiftsContainer","shouldShowResale","availabilityResale","shouldDuplicateAsResale","elements","renderStarGifts","GiftModalResaleScreen","onGiftClick","GiftSendingOptions","starGifts","boostPerSentGift","boostsPerSentGift","idsByCategory","balanceBlock","balanceInfo","smallerText","balanceBottom","formatStarsAmount","BadgeButton","addStarsButton","addStarsIcon","DEFAULT_POINTS","floatingBadgeRef","points","i","useEffectOnce","getProgress","updateSafeBadgePosition","badge","parent","parentElement","requestMeasure","safeMinX","offsetLeft","offsetWidth","safeMaxX","requestMutation","setProperty","useResizeObserver","handleChange","event","newValue","getValue","floatingBadgeWrapper","floatingBadge","floatingBadgeText","floatingBadgeIcon","AnimatedCounter","floatingBadgeTriangle","viewBox","fill","x1","x2","y1","y2","offset","d","Sparkles","preset","sparkles","step","pointIndex","findIndex","point","prevPoint","nextPoint","PriceConfirmModal","actions","handleConfirm","directInfo","closePriceConfirmModal","newAmount","currentBalance","tabId","getCurrentTabId","sendStarPaymentForm","originalAmount","originalAmountText","newAmountText","PREVIEW_UPDATE_INTERVAL","GiftUpgradeModal","recipient","closeGiftUpgradeModal","upgradeGift","renderingRecipient","shouldKeepOriginalDetails","setShouldKeepOriginalDetails","previewAttributes","setPreviewAttributes","handleUpgrade","updatePreviewAttributes","sampleAttributes","getRandomAttributes","useInterval","getStickerMediaHash","fetch","ApiMediaFormat","BlobUrl","modalData","listItemData","footerButton","isShiny","TableAboutModal","previousSelection","random","STICKER_SIZE","subtitlePeer","openChat","useTransitionActiveKey","subtitleColor","textColor","transitionSlide","direction","subtitleBadge","StarPaymentModal","paidMediaMessage","paidMediaChat","closeStarsPaymentModal","markLoading","unmarkLoading","inputInvoice","prevModal","canShowPeerItem","descriptionText","botName","starsText","paidMedia","duration","channelTitle","disclaimerText","inviteCustomPeer","getCustomPeerFromInvite","handlePayment","paymentContent","paymentImages","dir","paymentPhoto","avatarStar","avatarWebPhoto","avatarSize","amountBadge","paymentImageBackground","PeerChip","botItem","paymentButton","messageInputInvoice","isPaidMedia","THUMB_LIMIT","PREVIEW_THUMB_LIMIT","isLocked","reverse","arr","realIndex","MediaSpoiler","thumbDataUri","thumbnail","dataUri","SingleMediaThumb","noOutline","boughtMedia","index","mediaHash","getMediaHash","getMediaThumbUri","mediaBlob","useMedia","blurry","full","GiftInfoModal","fromPeer","targetPeer","releasedByPeer","starGiftMaxConvertPeriod","hasAdminRights","currentUserEmojiStatus","collectibleEmojiStatuses","tonExplorerUrl","recipientPeer","changeGiftVisibility","convertGiftToStars","openChatWithInfo","focusMessage","buyStarGift","isConvertConfirmOpen","openConvertConfirm","closeConvertConfirm","isConfirmModalOpen","setIsConfirmModalOpen","shouldPayInTon","setShouldPayInTon","renderingFromPeer","renderingTargetPeer","isTargetChat","isSavedGift","isSender","canConvertDifference","conversionLeft","hasConvertOption","giftSubtitle","ownerTitle","getMainUsername","fallbackText","owner","canFocusUpgrade","upgradeMsgId","canManage","getResalePrice","confirmPrice","canBuyGift","ownerId","giftOwnerTitle","ownerName","handleFocusUpgraded","giftChat","handleTriggerVisibility","isUnsaved","shouldUnsave","handleConvertToStars","handleOpenUpgradeModal","handleBuyGift","handleConfirmBuyGift","SettingsMenuButton","headerButton","renderFooterButton","upgradeIcon","saleDateInfo","firstSaleDate","lastSaleDate","isConverted","canConvert","isVisibleForMe","uniqueGiftContextMenu","GiftMenuItems","uniqueGiftModalHeader","modalHeader","giftResalePriceContainer","giftResalePriceStar","headerSplitButton","moreIcon","soldOut","CUSTOM_PEER_HIDDEN","unknown","starsValue","giftValue","starAmountIcon","total","renderTextWithEntities","ownerAddress","ownerPeer","originalDetails","withEmojiStatus","uniqueAttribute","rarityPercent","issued","issuedCount","totalCount","recipientLink","senderLink","tonLink","giftAddress","footerDescription","withBalanceBar","currencyInBalanceBar","getHasAdminRight","emojiStatus","statuses","releasedByPeerId","resellGifts","areGiftsAllLoaded","areGiftsLoading","updateIteration","resellGiftsIds","g","hasFilter","handleLoadMoreResellGifts","isGiftsEmpty","viewportIds","useInfiniteScroll","RESALE_GIFTS_LIMIT","handleResetGiftsFilter","resaleScreenRoot","notFoundGiftsRoot","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","SearchingDuck","notFoundGiftsDescription","notFoundGiftsLink","resaleStarGiftsContainer","preloadBackwards","isAllLoaded","GiftStatusInfoModal","closeGiftStatusInfoModal","setEmojiStatus","useCustomEmoji","patternDocumentId","onWearClick","customEmoji","mockPeerWithStatus","profileBlock","userTitle","statusSparklesColor","titleContainer","giftTitle","infoDescription","lockIcon","starCategories","keys","hasResale","renderCategoryItem","selectedItem","handleItemClick","isInteger","renderCategoryName","useHorizontalScroll"],"sourceRoot":""}